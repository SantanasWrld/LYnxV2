#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamIntegrationKit

#include "Basic.hpp"

#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK
{

// Enum SteamIntegrationKit.ESIK_Result
// NumValues: 0x007C
enum class ESIK_Result : uint8
{
	ResultNone                               = 0,
	ResultOK                                 = 1,
	ResultFail                               = 2,
	ResultNoConnection                       = 3,
	ResultInvalidPassword                    = 5,
	ResultLoggedInElsewhere                  = 6,
	ResultInvalidProtocolVer                 = 7,
	ResultInvalidParam                       = 8,
	ResultFileNotFound                       = 9,
	ResultBusy                               = 10,
	ResultInvalidState                       = 11,
	ResultInvalidName                        = 12,
	ResultInvalidEmail                       = 13,
	ResultDuplicateName                      = 14,
	ResultAccessDenied                       = 15,
	ResultTimeout                            = 16,
	ResultBanned                             = 17,
	ResultAccountNotFound                    = 18,
	ResultInvalidSteamID                     = 19,
	ResultServiceUnavailable                 = 20,
	ResultNotLoggedOn                        = 21,
	ResultPending                            = 22,
	ResultEncryptionFailure                  = 23,
	ResultInsufficientPrivilege              = 24,
	ResultLimitExceeded                      = 25,
	ResultRevoked                            = 26,
	ResultExpired                            = 27,
	ResultAlreadyRedeemed                    = 28,
	ResultDuplicateRequest                   = 29,
	ResultAlreadyOwned                       = 30,
	ResultIPNotFound                         = 31,
	ResultPersistFailed                      = 32,
	ResultLockingFailed                      = 33,
	ResultLogonSessionReplaced               = 34,
	ResultConnectFailed                      = 35,
	ResultHandshakeFailed                    = 36,
	ResultIOFailure                          = 37,
	ResultRemoteDisconnect                   = 38,
	ResultShoppingCartNotFound               = 39,
	ResultBlocked                            = 40,
	ResultIgnored                            = 41,
	ResultNoMatch                            = 42,
	ResultAccountDisabled                    = 43,
	ResultServiceReadOnly                    = 44,
	ResultAccountNotFeatured                 = 45,
	ResultAdministratorOK                    = 46,
	ResultContentVersion                     = 47,
	ResultTryAnotherCM                       = 48,
	ResultPasswordRequiredToKickSession      = 49,
	ResultAlreadyLoggedInElsewhere           = 50,
	ResultSuspended                          = 51,
	ResultCancelled                          = 52,
	ResultDataCorruption                     = 53,
	ResultDiskFull                           = 54,
	ResultRemoteCallFailed                   = 55,
	ResultPasswordUnset                      = 56,
	ResultExternalAccountUnlinked            = 57,
	ResultPSNTicketInvalid                   = 58,
	ResultExternalAccountAlreadyLinked       = 59,
	ResultRemoteFileConflict                 = 60,
	ResultIllegalPassword                    = 61,
	ResultSameAsPreviousValue                = 62,
	ResultAccountLogonDenied                 = 63,
	ResultCannotUseOldPassword               = 64,
	ResultInvalidLoginAuthCode               = 65,
	ResultAccountLogonDeniedNoMail           = 66,
	ResultHardwareNotCapableOfIPT            = 67,
	ResultIPTInitError                       = 68,
	ResultParentalControlRestricted          = 69,
	ResultFacebookQueryError                 = 70,
	ResultExpiredLoginAuthCode               = 71,
	ResultIPLoginRestrictionFailed           = 72,
	ResultAccountLockedDown                  = 73,
	ResultAccountLogonDeniedVerifiedEmailRequired = 74,
	ResultNoMatchingURL                      = 75,
	ResultBadResponse                        = 76,
	ResultRequirePasswordReEntry             = 77,
	ResultValueOutOfRange                    = 78,
	ResultUnexpectedError                    = 79,
	ResultDisabled                           = 80,
	ResultInvalidCEGSubmission               = 81,
	ResultRestrictedDevice                   = 82,
	ResultRegionLocked                       = 83,
	ResultRateLimitExceeded                  = 84,
	ResultAccountLoginDeniedNeedTwoFactor    = 85,
	ResultItemDeleted                        = 86,
	ResultAccountLoginDeniedThrottle         = 87,
	ResultTwoFactorCodeMismatch              = 88,
	ResultTwoFactorActivationCodeMismatch    = 89,
	ResultAccountAssociatedToMultiplePartners = 90,
	ResultNotModified                        = 91,
	ResultNoMobileDevice                     = 92,
	ResultTimeNotSynced                      = 93,
	ResultSmsCodeFailed                      = 94,
	ResultAccountLimitExceeded               = 95,
	ResultAccountActivityLimitExceeded       = 96,
	ResultPhoneActivityLimitExceeded         = 97,
	ResultRefundToWallet                     = 98,
	ResultEmailSendFailure                   = 99,
	ResultNotSettled                         = 100,
	ResultNeedCaptcha                        = 101,
	ResultGSLTDenied                         = 102,
	ResultGSOwnerDenied                      = 103,
	ResultInvalidItemType                    = 104,
	ResultIPBanned                           = 105,
	ResultGSLTExpired                        = 106,
	ResultInsufficientFunds                  = 107,
	ResultTooManyPending                     = 108,
	ResultNoSiteLicensesFound                = 109,
	ResultWGNetworkSendExceeded              = 110,
	ResultAccountNotFriends                  = 111,
	ResultLimitedUserAccount                 = 112,
	ResultCantRemoveItem                     = 113,
	ResultAccountDeleted                     = 114,
	ResultExistingUserCancelledLicense       = 115,
	ResultCommunityCooldown                  = 116,
	ResultNoLauncherSpecified                = 117,
	ResultMustAgreeToSSA                     = 118,
	ResultLauncherMigrated                   = 119,
	ResultSteamRealmMismatch                 = 120,
	ResultInvalidSignature                   = 121,
	ResultParseFailure                       = 122,
	ResultNoVerifiedPhone                    = 123,
	ESIK_Result_MAX                          = 124,
};

// Enum SteamIntegrationKit.ESIK_DenyReason
// NumValues: 0x0011
enum class ESIK_DenyReason : uint8
{
	DenyInvalid                              = 0,
	DenyInvalidVersion                       = 1,
	DenyGeneric                              = 2,
	DenyNotLoggedOn                          = 3,
	DenyNoLicense                            = 4,
	DenyCheater                              = 5,
	DenyLoggedInElseWhere                    = 6,
	DenyUnknownText                          = 7,
	DenyIncompatibleAnticheat                = 8,
	DenyMemoryCorruption                     = 9,
	DenyIncompatibleSoftware                 = 10,
	DenySteamConnectionLost                  = 11,
	DenySteamConnectionError                 = 12,
	DenySteamResponseTimedOut                = 13,
	DenySteamValidationStalled               = 14,
	DenySteamOwnerLeftGuestUser              = 15,
	ESIK_DenyReason_MAX                      = 16,
};

// Enum SteamIntegrationKit.ESIK_DurationControlProgress
// NumValues: 0x0004
enum class ESIK_DurationControlProgress : uint8
{
	DurationControlProgress_Full             = 0,
	DurationControlProgress_Half             = 1,
	DurationControlProgress_None             = 2,
	DurationControlProgress_MAX              = 3,
};

// Enum SteamIntegrationKit.ESIK_DurationControlNotification
// NumValues: 0x0008
enum class ESIK_DurationControlNotification : uint8
{
	DurationControlNotification_None         = 0,
	DurationControlNotification_1Hour        = 1,
	DurationControlNotification_3Hours       = 2,
	DurationControlNotification_HalfProgress = 3,
	DurationControlNotification_ExitSoon_3h  = 4,
	DurationControlNotification_ExitSoon_5h  = 4,
	DurationControlNotification_ExitSoon_Night = 4,
	DurationControlNotification_MAX          = 5,
};

// Enum SteamIntegrationKit.ESIK_ChatRoomEnterResponse
// NumValues: 0x000E
enum class ESIK_ChatRoomEnterResponse : uint8
{
	None                                     = 0,
	ChatRoomEnterResponseSuccess             = 1,
	ChatRoomEnterResponseDoesntExist         = 2,
	ChatRoomEnterResponseNotAllowed          = 3,
	ChatRoomEnterResponseFull                = 4,
	ChatRoomEnterResponseError               = 5,
	ChatRoomEnterResponseBanned              = 6,
	ChatRoomEnterResponseLimited             = 7,
	ChatRoomEnterResponseClanDisabled        = 8,
	ChatRoomEnterResponseCommunityBan        = 9,
	ChatRoomEnterResponseMemberBlockedYou    = 10,
	ChatRoomEnterResponseYouBlockedMember    = 11,
	ChatRoomEnterResponseRatelimitExceeded   = 15,
	ESIK_ChatRoomEnterResponse_MAX           = 16,
};

// Enum SteamIntegrationKit.ESIK_LobbyChatMemberStateChange
// NumValues: 0x0006
enum class ESIK_LobbyChatMemberStateChange : uint8
{
	ChatMemberStateChangeEntered             = 0,
	ChatMemberStateChangeLeft                = 1,
	ChatMemberStateChangeDisconnected        = 2,
	ChatMemberStateChangeKicked              = 3,
	ChatMemberStateChangeBanned              = 4,
	ESIK_LobbyChatMemberStateChange_MAX      = 5,
};

// Enum SteamIntegrationKit.ESIK_LobbyChatEntryType
// NumValues: 0x000D
enum class ESIK_LobbyChatEntryType : uint8
{
	ChatEntryTypeInvalid                     = 0,
	ChatEntryTypeChatMsg                     = 1,
	ChatEntryTypeTyping                      = 2,
	ChatEntryTypeInviteGame                  = 3,
	ChatEntryTypeEmote                       = 4,
	ChatEntryTypeLeftConversation            = 6,
	ChatEntryTypeEntered                     = 7,
	ChatEntryTypeWasKicked                   = 8,
	ChatEntryTypeWasBanned                   = 9,
	ChatEntryTypeDisconnected                = 10,
	ChatEntryTypeHistoricalChat              = 11,
	ChatEntryTypeLinkBlocked                 = 14,
	ESIK_LobbyChatEntryType_MAX              = 15,
};

// Enum SteamIntegrationKit.ESIK_P2PSessionError
// NumValues: 0x0007
enum class ESIK_P2PSessionError : uint8
{
	P2PSessionErrorNone                      = 0,
	P2PSessionErrorNotRunningApp             = 1,
	P2PSessionErrorNoRightsToApp             = 2,
	P2PSessionErrorDestinationNotLoggedIn    = 3,
	P2PSessionErrorTimeout                   = 4,
	P2PSessionErrorMax                       = 5,
	ESIK_P2PSessionError_MAX                 = 6,
};

// Enum SteamIntegrationKit.ESIK_MatchMakingServerResponse
// NumValues: 0x0004
enum class ESIK_MatchMakingServerResponse : uint8
{
	ServerResponded                          = 0,
	ServerFailedToRespond                    = 1,
	NoServersListedOnMasterServer            = 2,
	ESIK_MatchMakingServerResponse_MAX       = 3,
};

// Enum SteamIntegrationKit.ESIKAttributeType
// NumValues: 0x0004
enum class ESIKAttributeType : uint8
{
	String                                   = 0,
	Bool                                     = 1,
	Integer                                  = 2,
	ESIKAttributeType_MAX                    = 3,
};

// Enum SteamIntegrationKit.ESIKJoinResult
// NumValues: 0x0007
enum class ESIKJoinResult : uint8
{
	Success                                  = 0,
	SessionIsFull                            = 1,
	SessionDoesNotExist                      = 2,
	CouldNotRetrieveAddress                  = 3,
	AlreadyInSession                         = 4,
	UnknownError                             = 5,
	ESIKJoinResult_MAX                       = 6,
};

// Enum SteamIntegrationKit.ESIK_BuildConfiguration
// NumValues: 0x0007
enum class ESIK_BuildConfiguration : uint8
{
	UnknownBuild1                            = 0,
	Debug1                                   = 1,
	DebugGame1                               = 2,
	Development1                             = 3,
	Shipping1                                = 4,
	Test1                                    = 5,
	ESIK_BuildConfiguration_MAX              = 6,
};

// Enum SteamIntegrationKit.ESIK_RegisterActivationCodeResult
// NumValues: 0x0006
enum class ESIK_RegisterActivationCodeResult : uint8
{
	RegisterActivationCodeResultOK           = 0,
	RegisterActivationCodeResultFail         = 1,
	RegisterActivationCodeResultAlreadyRegistered = 2,
	RegisterActivationCodeResultTimeout      = 3,
	RegisterActivationCodeAlreadyOwned       = 4,
	ESIK_RegisterActivationCodeResult_MAX    = 5,
};

// Enum SteamIntegrationKit.ESIK_LeaderboardSortMethod
// NumValues: 0x0004
enum class ESIK_LeaderboardSortMethod : uint8
{
	LeaderboardSortMethodNone                = 0,
	LeaderboardSortMethodAscending           = 1,
	LeaderboardSortMethodDescending          = 2,
	ESIK_LeaderboardSortMethod_MAX           = 3,
};

// Enum SteamIntegrationKit.ESIK_LeaderboardDisplayType
// NumValues: 0x0005
enum class ESIK_LeaderboardDisplayType : uint8
{
	LeaderboardDisplayTypeNone               = 0,
	LeaderboardDisplayTypeNumeric            = 1,
	LeaderboardDisplayTypeTimeSeconds        = 2,
	LeaderboardDisplayTypeTimeMilliSeconds   = 3,
	ESIK_LeaderboardDisplayType_MAX          = 4,
};

// Enum SteamIntegrationKit.ESIK_LeaderboardDataRequest
// NumValues: 0x0005
enum class ESIK_LeaderboardDataRequest : uint8
{
	LeaderboardDataRequestGlobal             = 0,
	LeaderboardDataRequestGlobalAroundUser   = 1,
	LeaderboardDataRequestFriends            = 2,
	LeaderboardDataRequestUsers              = 3,
	ESIK_LeaderboardDataRequest_MAX          = 4,
};

// Enum SteamIntegrationKit.ESIK_PersonaState
// NumValues: 0x0009
enum class ESIK_PersonaState : uint8
{
	PersonaStateOffline                      = 0,
	PersonaStateOnline                       = 1,
	PersonaStateBusy                         = 2,
	PersonaStateAway                         = 3,
	PersonaStateSnooze                       = 4,
	PersonaStateLookingToTrade               = 5,
	PersonaStateLookingToPlay                = 6,
	PersonaStateMax                          = 7,
	ESIK_PersonaState_MAX                    = 8,
};

// Enum SteamIntegrationKit.ESIK_FriendRelationship
// NumValues: 0x000A
enum class ESIK_FriendRelationship : uint8
{
	FriendRelationshipNone                   = 0,
	FriendRelationshipBlocked                = 1,
	FriendRelationshipRequestRecipient       = 2,
	FriendRelationshipFriend                 = 3,
	FriendRelationshipRequestInitiator       = 4,
	FriendRelationshipIgnored                = 5,
	FriendRelationshipIgnoredFriend          = 6,
	FriendRelationshipSuggested              = 7,
	FriendRelationshipMax                    = 8,
	ESIK_FriendRelationship_MAX              = 9,
};

// Enum SteamIntegrationKit.ESIK_UserHasLicenseForAppResult
// NumValues: 0x0004
enum class ESIK_UserHasLicenseForAppResult : uint8
{
	UserHasLicenseResultHasLicense           = 0,
	UserHasLicenseResultDoesNotHaveLicense   = 1,
	UserHasLicenseResultNoAuth               = 2,
	ESIK_UserHasLicenseForAppResult_MAX      = 3,
};

// Enum SteamIntegrationKit.ESIK_BeginAuthSessionResult
// NumValues: 0x0008
enum class ESIK_BeginAuthSessionResult : uint8
{
	BeginAuthSessionResultOK                 = 0,
	BeginAuthSessionResultInvalidTicket      = 1,
	BeginAuthSessionResultDuplicateRequest   = 2,
	BeginAuthSessionResultInvalidVersion     = 3,
	BeginAuthSessionResultGameMismatch       = 4,
	BeginAuthSessionResultExpiredTicket      = 5,
	BeginAuthSessionResultFailure            = 6,
	ESIK_BeginAuthSessionResult_MAX          = 7,
};

// Enum SteamIntegrationKit.ESIK_VoiceResult
// NumValues: 0x000B
enum class ESIK_VoiceResult : uint8
{
	VoiceResultOK                            = 0,
	VoiceResultNotInitialized                = 1,
	VoiceResultNotRecording                  = 2,
	VoiceResultNoData                        = 3,
	VoiceResultBufferTooSmall                = 4,
	VoiceResultDataCorrupted                 = 5,
	VoiceResultRestricted                    = 6,
	VoiceResultUnsupportedCodec              = 7,
	VoiceResultReceiverOutOfDate             = 8,
	VoiceResultReceiverDidNotAnswer          = 9,
	ESIK_VoiceResult_MAX                     = 10,
};

// Enum SteamIntegrationKit.ESMatchType
// NumValues: 0x0003
enum class ESMatchType : uint8
{
	MT_MatchMakingSession                    = 0,
	MT_Lobby                                 = 1,
	MT_MAX                                   = 2,
};

// Enum SteamIntegrationKit.ESIK_SteamIPType
// NumValues: 0x0003
enum class ESIK_SteamIPType : uint8
{
	SteamIPTypeIPv4                          = 0,
	SteamIPTypeIPv6                          = 1,
	ESIK_SteamIPType_MAX                     = 2,
};

// Enum SteamIntegrationKit.ESIK_SteamPartyBeaconLocationType
// NumValues: 0x0003
enum class ESIK_SteamPartyBeaconLocationType : uint8
{
	SteamPartyBeaconLocationType_Invalid     = 0,
	SteamPartyBeaconLocationType_ChatGroup   = 1,
	SteamPartyBeaconLocationType_Max         = 2,
};

// Enum SteamIntegrationKit.ESIK_LobbyDistanceFilter
// NumValues: 0x0005
enum class ESIK_LobbyDistanceFilter : uint8
{
	LobbyDistanceFilterClose                 = 0,
	LobbyDistanceFilterDefault               = 1,
	LobbyDistanceFilterFar                   = 2,
	LobbyDistanceFilterWorldwide             = 3,
	ESIK_LobbyDistanceFilter_MAX             = 4,
};

// Enum SteamIntegrationKit.ESIK_LobbyComparisonType
// NumValues: 0x0007
enum class ESIK_LobbyComparisonType : uint8
{
	LobbyComparisonEqualToOrLessThan         = 0,
	LobbyComparisonLessThan                  = 1,
	LobbyComparisonEqualTo                   = 2,
	LobbyComparisonGreaterThan               = 3,
	LobbyComparisonEqualToOrGreaterThan      = 4,
	LobbyComparisonNotEqualTo                = 5,
	ESIK_LobbyComparisonType_MAX             = 6,
};

// Enum SteamIntegrationKit.ESIK_LobbyType
// NumValues: 0x0005
enum class ESIK_LobbyType : uint8
{
	LobbyTypePrivate                         = 0,
	LobbyTypeFriendsOnly                     = 1,
	LobbyTypePublic                          = 2,
	LobbyTypeInvisible                       = 3,
	ESIK_LobbyType_MAX                       = 4,
};

// Enum SteamIntegrationKit.ESIK_SteamNetworkingIdentityType
// NumValues: 0x000A
enum class ESIK_SteamNetworkingIdentityType : uint8
{
	SteamNetworkingIdentityType_Invalid      = 0,
	SteamNetworkingIdentityType_SteamID      = 16,
	SteamNetworkingIdentityType_IPAddress    = 1,
	SteamNetworkingIdentityType_GenericString = 2,
	SteamNetworkingIdentityType_GenericBytes = 3,
	SteamNetworkingIdentityType_InvalidString = 4,
	SteamNetworkingIdentityType__Force32bit  = 2147483647,
	SteamNetworkingIdentityType_XboxPairwiseID = 18,
	SteamNetworkingIdentityType_SonyPSN      = 19,
	SteamNetworkingIdentityType_MAX          = 2147483648,
};

// Enum SteamIntegrationKit.ESIK_NotificationPosition
// NumValues: 0x0005
enum class ESIK_NotificationPosition : uint8
{
	PositionTopLeft                          = 0,
	PositionTopRight                         = 1,
	PositionBottomLeft                       = 2,
	PositionBottomRight                      = 3,
	ESIK_NotificationPosition_MAX            = 4,
};

// Enum SteamIntegrationKit.ESIK_SteamItemFlags
// NumValues: 0x0004
enum class ESIK_SteamItemFlags : uint8
{
	SteamItemFlagsNoTrade                    = 0,
	SteamItemFlagsRemoved                    = 1,
	SteamItemFlagsConsumed                   = 2,
	ESIK_SteamItemFlags_MAX                  = 3,
};

// Enum SteamIntegrationKit.ESIK_AudioPlayback_Status
// NumValues: 0x0005
enum class ESIK_AudioPlayback_Status : uint8
{
	Playback_Undefined                       = 0,
	Playback_Playing                         = 1,
	Playback_Paused                          = 2,
	Playback_Idle                            = 3,
	Playback_MAX                             = 4,
};

// Enum SteamIntegrationKit.ESIK_SteamNetworkingAvailability
// NumValues: 0x000B
enum class ESIK_SteamNetworkingAvailability : uint8
{
	SteamNetworkingAvailability_CannotTry    = 18446744073709551514,
	SteamNetworkingAvailability_Failed       = 18446744073709551515,
	SteamNetworkingAvailability_Previously   = 18446744073709551516,
	SteamNetworkingAvailability_Retrying     = 18446744073709551606,
	SteamNetworkingAvailability_NeverTried   = 1,
	SteamNetworkingAvailability_Waiting      = 2,
	SteamNetworkingAvailability_Attempting   = 3,
	SteamNetworkingAvailability_Current      = 100,
	SteamNetworkingAvailability_Unknown      = 0,
	SteamNetworkingAvailability__Force32bit  = 2147483647,
	SteamNetworkingAvailability_MAX          = 2147483648,
};

// Enum SteamIntegrationKit.ESIK_P2PSend
// NumValues: 0x0005
enum class ESIK_P2PSend : uint8
{
	P2PSendUnreliable                        = 0,
	P2PSendUnreliableNoDelay                 = 1,
	P2PSendReliable                          = 2,
	P2PSendReliableWithBuffering             = 3,
	ESIK_P2PSend_MAX                         = 4,
};

// Enum SteamIntegrationKit.ESIK_RemoteStorageLocalFileChange
// NumValues: 0x0004
enum class ESIK_RemoteStorageLocalFileChange : uint8
{
	RemoteStorageLocalFileChange_Invalid     = 0,
	RemoteStorageLocalFileChange_FileUpdated = 1,
	RemoteStorageLocalFileChange_FileDeleted = 2,
	RemoteStorageLocalFileChange_MAX         = 3,
};

// Enum SteamIntegrationKit.ESIK_RemoteStorageFilePathType
// NumValues: 0x0004
enum class ESIK_RemoteStorageFilePathType : uint8
{
	RemoteStorageFilePathType_Invalid        = 0,
	RemoteStorageFilePathType_Absolute       = 1,
	RemoteStorageFilePathType_APIFilename    = 2,
	RemoteStorageFilePathType_MAX            = 3,
};

// Enum SteamIntegrationKit.ESIK_RemoteStoragePlatform
// NumValues: 0x0008
enum class ESIK_RemoteStoragePlatform : uint8
{
	RemoteStoragePlatformNone                = 0,
	RemoteStoragePlatformWindows             = 1,
	RemoteStoragePlatformOSX                 = 2,
	RemoteStoragePlatformPS3                 = 4,
	RemoteStoragePlatformLinux               = 8,
	RemoteStoragePlatformReserved2           = 16,
	RemoteStoragePlatformAll                 = 18446744073709551615,
	ESIK_RemoteStoragePlatform_MAX           = 17,
};

// Enum SteamIntegrationKit.ESIK_RemoteStoragePublishedFileVisibility
// NumValues: 0x0005
enum class ESIK_RemoteStoragePublishedFileVisibility : uint8
{
	RemoteStoragePublishedFileVisibilityPublic = 0,
	RemoteStoragePublishedFileVisibilityFriendsOnly = 1,
	RemoteStoragePublishedFileVisibilityPrivate = 2,
	ERemoteStoragePublishedFileVisibilityUnlisted = 3,
	ESIK_RemoteStoragePublishedFileVisibility_MAX = 4,
};

// Enum SteamIntegrationKit.ESIK_UGCReadAction
// NumValues: 0x0004
enum class ESIK_UGCReadAction : uint8
{
	UGCRead_ContinueReadingUntilFinished     = 0,
	UGCRead_ContinueReading                  = 1,
	UGCRead_Close                            = 2,
	UGCRead_MAX                              = 3,
};

// Enum SteamIntegrationKit.ESIK_WorkshopEnumerationType
// NumValues: 0x0008
enum class ESIK_WorkshopEnumerationType : uint8
{
	WorkshopEnumerationTypeRankedByVote      = 0,
	WorkshopEnumerationTypeRecent            = 1,
	WorkshopEnumerationTypeTrending          = 2,
	WorkshopEnumerationTypeFavoritesOfFriends = 3,
	WorkshopEnumerationTypeVotedByFriends    = 4,
	WorkshopEnumerationTypeContentByFriends  = 5,
	WorkshopEnumerationTypeRecentFromFollowedUsers = 6,
	ESIK_WorkshopEnumerationType_MAX         = 7,
};

// Enum SteamIntegrationKit.ESIK_WorkshopFileType
// NumValues: 0x0013
enum class ESIK_WorkshopFileType : uint8
{
	WorkshopFileTypeFirst                    = 0,
	WorkshopFileTypeCommunity                = 1,
	WorkshopFileTypeMicrotransaction         = 2,
	WorkshopFileTypeCollection               = 3,
	WorkshopFileTypeArt                      = 4,
	WorkshopFileTypeVideo                    = 5,
	WorkshopFileTypeScreenshot               = 6,
	WorkshopFileTypeGame                     = 7,
	WorkshopFileTypeSoftware                 = 8,
	WorkshopFileTypeConcept                  = 9,
	WorkshopFileTypeWebGuide                 = 10,
	WorkshopFileTypeIntegratedGuide          = 11,
	WorkshopFileTypeMerch                    = 12,
	WorkshopFileTypeControllerBinding        = 13,
	WorkshopFileTypeSteamworksAccessInvite   = 14,
	WorkshopFileTypeSteamVideo               = 15,
	WorkshopFileTypeGameManagedItem          = 16,
	WorkshopFileTypeMax                      = 17,
	ESIK_WorkshopFileType_MAX                = 18,
};

// Enum SteamIntegrationKit.ESIK_VRScreenshotType
// NumValues: 0x0007
enum class ESIK_VRScreenshotType : uint8
{
	VRScreenshotType_None                    = 0,
	VRScreenshotType_Mono                    = 1,
	VRScreenshotType_Stereo                  = 2,
	VRScreenshotType_MonoCubemap             = 3,
	VRScreenshotType_MonoPanorama            = 4,
	VRScreenshotType_StereoPanorama          = 5,
	VRScreenshotType_MAX                     = 6,
};

// Enum SteamIntegrationKit.ESIK_ItemPreviewType
// NumValues: 0x0007
enum class ESIK_ItemPreviewType : uint8
{
	ItemPreviewType_Image                    = 0,
	ItemPreviewType_YouTubeVideo             = 1,
	ItemPreviewType_Sketchfab                = 2,
	ItemPreviewType_EnvironmentMap_HorizontalCross = 3,
	ItemPreviewType_EnvironmentMap_LatLong   = 4,
	ItemPreviewType_ReservedMax              = 255,
	ItemPreviewType_MAX                      = 256,
};

// Enum SteamIntegrationKit.ESIK_ItemState
// NumValues: 0x0008
enum class ESIK_ItemState : uint8
{
	ItemStateNone                            = 0,
	ItemStateSubscribed                      = 1,
	ItemStateLegacyItem                      = 2,
	ItemStateInstalled                       = 4,
	ItemStateNeedsUpdate                     = 8,
	ItemStateDownloading                     = 16,
	ItemStateDownloadPending                 = 32,
	ESIK_ItemState_MAX                       = 33,
};

// Enum SteamIntegrationKit.ESIK_ItemStatistic
// NumValues: 0x000E
enum class ESIK_ItemStatistic : uint8
{
	ItemStatistic_NumSubscriptions           = 0,
	ItemStatistic_NumFavorites               = 1,
	ItemStatistic_NumFollowers               = 2,
	ItemStatistic_NumUniqueSubscriptions     = 3,
	ItemStatistic_NumUniqueFavorites         = 4,
	ItemStatistic_NumUniqueFollowers         = 5,
	ItemStatistic_NumUniqueWebsiteViews      = 6,
	ItemStatistic_ReportScore                = 7,
	ItemStatistic_NumSecondsPlayed           = 8,
	ItemStatistic_NumPlaytimeSessions        = 9,
	ItemStatistic_NumComments                = 10,
	ItemStatistic_NumSecondsPlayedDuringTimePeriod = 11,
	ItemStatistic_NumPlaytimeSessionsDuringTimePeriod = 12,
	ItemStatistic_MAX                        = 13,
};

// Enum SteamIntegrationKit.ESIK_ItemUpdateStatus
// NumValues: 0x0007
enum class ESIK_ItemUpdateStatus : uint8
{
	ItemUpdateStatusInvalid                  = 0,
	ItemUpdateStatusPreparingConfig          = 1,
	ItemUpdateStatusPreparingContent         = 2,
	ItemUpdateStatusUploadingContent         = 3,
	ItemUpdateStatusUploadingPreviewFile     = 4,
	ItemUpdateStatusCommittingChanges        = 5,
	ESIK_ItemUpdateStatus_MAX                = 6,
};

// Enum SteamIntegrationKit.ESIK_UGCMatchingUGCType
// NumValues: 0x000F
enum class ESIK_UGCMatchingUGCType : uint8
{
	UGCMatchingUGCType_Items                 = 0,
	UGCMatchingUGCType_Items_Mtx             = 1,
	UGCMatchingUGCType_Items_ReadyToUse      = 2,
	UGCMatchingUGCType_Collections           = 3,
	UGCMatchingUGCType_Artwork               = 4,
	UGCMatchingUGCType_Videos                = 5,
	UGCMatchingUGCType_Screenshots           = 6,
	UGCMatchingUGCType_AllGuides             = 7,
	UGCMatchingUGCType_WebGuides             = 8,
	UGCMatchingUGCType_IntegratedGuides      = 9,
	UGCMatchingUGCType_UsableInGame          = 10,
	UGCMatchingUGCType_ControllerBindings    = 11,
	UGCMatchingUGCType_GameManagedItems      = 12,
	UGCMatchingUGCType_All                   = 18446744073709551615,
	UGCMatchingUGCType_MAX                   = 13,
};

// Enum SteamIntegrationKit.ESIK_UGCQuery
// NumValues: 0x0015
enum class ESIK_UGCQuery : uint8
{
	UGCQuery_RankedByVote                    = 0,
	UGCQuery_RankedByPublicationDate         = 1,
	UGCQuery_AcceptedForGameRankedByAcceptanceDate = 2,
	UGCQuery_RankedByTrend                   = 3,
	UGCQuery_FavoritedByFriendsRankedByPublicationDate = 4,
	UGCQuery_CreatedByFriendsRankedByPublicationDate = 5,
	UGCQuery_RankedByNumTimesReported        = 6,
	UGCQuery_CreatedByFollowedUsersRankedByPublicationDate = 7,
	UGCQuery_NotYetRated                     = 8,
	UGCQuery_RankedByTotalVotesAsc           = 9,
	UGCQuery_RankedByVotesUp                 = 10,
	UGCQuery_RankedByTextSearch              = 11,
	UGCQuery_RankedByTotalUniqueSubscriptions = 12,
	UGCQuery_RankedByPlaytimeTrend           = 13,
	UGCQuery_RankedByTotalPlaytime           = 14,
	UGCQuery_RankedByAveragePlaytimeTrend    = 15,
	UGCQuery_RankedByLifetimeAveragePlaytime = 16,
	UGCQuery_RankedByPlaytimeSessionsTrend   = 17,
	UGCQuery_RankedByLifetimePlaytimeSessions = 18,
	UGCQuery_RankedByLastUpdatedDate         = 19,
	UGCQuery_MAX                             = 20,
};

// Enum SteamIntegrationKit.ESIK_UserUGCList
// NumValues: 0x000A
enum class ESIK_UserUGCList : uint8
{
	UserUGCList_Published                    = 0,
	UserUGCList_VotedOn                      = 1,
	UserUGCList_VotedUp                      = 2,
	UserUGCList_VotedDown                    = 3,
	UserUGCList_WillVoteLater                = 4,
	UserUGCList_Favorited                    = 5,
	UserUGCList_Subscribed                   = 6,
	UserUGCList_UsedOrPlayed                 = 7,
	UserUGCList_Followed                     = 8,
	UserUGCList_MAX                          = 9,
};

// Enum SteamIntegrationKit.ESIK_UserUGCListSortOrder
// NumValues: 0x0008
enum class ESIK_UserUGCListSortOrder : uint8
{
	UserUGCListSortOrder_CreationOrderDesc   = 0,
	UserUGCListSortOrder_CreationOrderAsc    = 1,
	UserUGCListSortOrder_TitleAsc            = 2,
	UserUGCListSortOrder_LastUpdatedDesc     = 3,
	UserUGCListSortOrder_SubscriptionDateDesc = 4,
	UserUGCListSortOrder_VoteScoreDesc       = 5,
	UserUGCListSortOrder_ForModeration       = 6,
	UserUGCListSortOrder_MAX                 = 7,
};

// Enum SteamIntegrationKit.ESIK_UGCContentDescriptorID
// NumValues: 0x0007
enum class ESIK_UGCContentDescriptorID : uint8
{
	UserUGCListSortOrder_None                = 0,
	UGCContentDescriptor_NudityOrSexualContent = 1,
	UGCContentDescriptor_FrequentViolenceOrGore = 2,
	UGCContentDescriptor_AdultOnlySexualContent = 3,
	UGCContentDescriptor_GratuitousSexualContent = 4,
	UGCContentDescriptor_AnyMatureContent    = 5,
	ESIK_UGCContentDescriptorID_MAX          = 6,
};

// Enum SteamIntegrationKit.ESIK_Universe
// NumValues: 0x0007
enum class ESIK_Universe : uint8
{
	UniverseInvalid                          = 0,
	UniversePublic                           = 1,
	UniverseBeta                             = 2,
	UniverseInternal                         = 3,
	UniverseDev                              = 4,
	UniverseMax                              = 5,
	ESIK_Universe_MAX                        = 6,
};

// Enum SteamIntegrationKit.ESIK_FriendFlags
// NumValues: 0x000E
enum class ESIK_FriendFlags : uint16
{
	FriendFlagNone                           = 0,
	FriendFlagBlocked                        = 1,
	FriendFlagFriendshipRequested            = 2,
	FriendFlagImmediate                      = 4,
	FriendFlagClanMember                     = 8,
	FriendFlagOnGameServer                   = 16,
	FriendFlagRequestingFriendship           = 128,
	FriendFlagRequestingInfo                 = 256,
	FriendFlagIgnored                        = 512,
	FriendFlagIgnoredFriend                  = 1024,
	FriendFlagSuggested                      = 2048,
	FriendFlagChatMember                     = 4096,
	FriendFlagFlagAll                        = 65535,
	ESIK_FriendFlags_MAX                     = 65536,
};

// Enum SteamIntegrationKit.ESIK_EGamepadTextInputLineMode
// NumValues: 0x0003
enum class ESIK_EGamepadTextInputLineMode : uint8
{
	ESIK_EGamepadTextInputLineModeSingleLine = 0,
	ESIK_EGamepadTextInputLineModeMultipleLines = 1,
	ESIK_MAX                                 = 2,
};

// Enum SteamIntegrationKit.ESIK_EGamepadTextInputMode
// NumValues: 0x0002
enum class ESIK_EGamepadTextInputMode : uint8
{
	ESIK_EGamepadTextInputModeNormal         = 0,
	ESIK_EGamepadTextInputModePassword       = 1,
};

// Enum SteamIntegrationKit.ESIK_EFloatingGamepadTextInputMode
// NumValues: 0x0004
enum class ESIK_EFloatingGamepadTextInputMode : uint8
{
	ESIK_EFloatingGamepadTextInputModeModeSingleLine = 0,
	ESIK_EFloatingGamepadTextInputModeModeMultipleLines = 1,
	ESIK_EFloatingGamepadTextInputModeModeEmail = 2,
	ESIK_EFloatingGamepadTextInputModeModeNumeric = 3,
};

// Enum SteamIntegrationKit.ESIK_ECommunityProfileItemType
// NumValues: 0x0006
enum class ESIK_ECommunityProfileItemType : uint8
{
	ESIK_ECommunityProfileItemType_AnimatedAvatar = 0,
	ESIK_ECommunityProfileItemType_AvatarFrame = 1,
	ESIK_ECommunityProfileItemType_ProfileModifier = 2,
	ESIK_ECommunityProfileItemType_ProfileBackground = 3,
	ESIK_ECommunityProfileItemType_MiniProfileBackground = 4,
	ESIK_ECommunityProfileItemType_MAX       = 5,
};

// Enum SteamIntegrationKit.ESIK_ECommunityProfileItemProperty
// NumValues: 0x000D
enum class ESIK_ECommunityProfileItemProperty : uint8
{
	ESIK_ECommunityProfileItemProperty_ImageSmall = 0,
	ESIK_ECommunityProfileItemProperty_ImageLarge = 1,
	ESIK_ECommunityProfileItemProperty_InternalName = 2,
	ESIK_ECommunityProfileItemProperty_Title = 3,
	ESIK_ECommunityProfileItemProperty_Description = 4,
	ESIK_ECommunityProfileItemProperty_AppID = 5,
	ESIK_ECommunityProfileItemProperty_TypeID = 6,
	ESIK_ECommunityProfileItemProperty_Class = 7,
	ESIK_ECommunityProfileItemProperty_MovieWebM = 8,
	ESIK_ECommunityProfileItemProperty_MovieMP4 = 9,
	ESIK_ECommunityProfileItemProperty_MovieWebMSmall = 10,
	ESIK_ECommunityProfileItemProperty_MovieMP4Small = 11,
	ESIK_ECommunityProfileItemProperty_MAX   = 12,
};

// Enum SteamIntegrationKit.ESIK_TimelineGameMode
// NumValues: 0x0006
enum class ESIK_TimelineGameMode : uint8
{
	ESIK_TimelineGameMode_Invalid            = 0,
	ESIK_TimelineGameMode_Playing            = 1,
	ESIK_TimelineGameMode_Staging            = 2,
	ESIK_TimelineGameMode_Menus              = 3,
	ESIK_TimelineGameMode_LoadingScreen      = 4,
	ESIK_TimelineGameMode_MAX                = 5,
};

// Enum SteamIntegrationKit.ESIK_TimelineEventClipPriority
// NumValues: 0x0005
enum class ESIK_TimelineEventClipPriority : uint8
{
	ESIK_TimelineEventClipPriority_Invalid   = 0,
	ESIK_TimelineEventClipPriority_None      = 1,
	ESIK_TimelineEventClipPriority_Standard  = 2,
	ESIK_TimelineEventClipPriority_Featured  = 3,
	ESIK_TimelineEventClipPriority_MAX       = 4,
};

// Enum SteamIntegrationKit.ESIK_LeaderboardUploadScoreMethod
// NumValues: 0x0004
enum class ESIK_LeaderboardUploadScoreMethod : uint8
{
	LeaderboardUploadScoreMethodNone         = 0,
	LeaderboardUploadScoreMethodKeepBest     = 1,
	LeaderboardUploadScoreMethodForceUpdate  = 2,
	ESIK_LeaderboardUploadScoreMethod_MAX    = 3,
};

// ScriptStruct SteamIntegrationKit.SIK_SteamIPAddress
// 0x000C (0x000C - 0x0000)
struct FSIK_SteamIPAddress final
{
public:
	ESIK_SteamIPType                              m_eType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_unIPv4;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ipv6Qword;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamIPAddress) == 0x000004, "Wrong alignment on FSIK_SteamIPAddress");
static_assert(sizeof(FSIK_SteamIPAddress) == 0x00000C, "Wrong size on FSIK_SteamIPAddress");
static_assert(offsetof(FSIK_SteamIPAddress, m_eType) == 0x000000, "Member 'FSIK_SteamIPAddress::m_eType' has a wrong offset!");
static_assert(offsetof(FSIK_SteamIPAddress, m_unIPv4) == 0x000004, "Member 'FSIK_SteamIPAddress::m_unIPv4' has a wrong offset!");
static_assert(offsetof(FSIK_SteamIPAddress, m_ipv6Qword) == 0x000008, "Member 'FSIK_SteamIPAddress::m_ipv6Qword' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamId
// 0x0008 (0x0008 - 0x0000)
struct FSIK_SteamId final
{
public:
	int64                                         Result;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamId) == 0x000008, "Wrong alignment on FSIK_SteamId");
static_assert(sizeof(FSIK_SteamId) == 0x000008, "Wrong size on FSIK_SteamId");
static_assert(offsetof(FSIK_SteamId, Result) == 0x000000, "Member 'FSIK_SteamId::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamLeaderboard
// 0x0008 (0x0008 - 0x0000)
struct FSIK_SteamLeaderboard final
{
public:
	int64                                         Result;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamLeaderboard) == 0x000008, "Wrong alignment on FSIK_SteamLeaderboard");
static_assert(sizeof(FSIK_SteamLeaderboard) == 0x000008, "Wrong size on FSIK_SteamLeaderboard");
static_assert(offsetof(FSIK_SteamLeaderboard, Result) == 0x000000, "Member 'FSIK_SteamLeaderboard::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_LeaderboardScoreUploaded
// 0x0014 (0x0014 - 0x0000)
struct FSIK_LeaderboardScoreUploaded final
{
public:
	int32                                         LeaderboardID;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScoreChanged;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GlobalRankNew;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalRankPrevious;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_LeaderboardScoreUploaded) == 0x000004, "Wrong alignment on FSIK_LeaderboardScoreUploaded");
static_assert(sizeof(FSIK_LeaderboardScoreUploaded) == 0x000014, "Wrong size on FSIK_LeaderboardScoreUploaded");
static_assert(offsetof(FSIK_LeaderboardScoreUploaded, LeaderboardID) == 0x000000, "Member 'FSIK_LeaderboardScoreUploaded::LeaderboardID' has a wrong offset!");
static_assert(offsetof(FSIK_LeaderboardScoreUploaded, Score) == 0x000004, "Member 'FSIK_LeaderboardScoreUploaded::Score' has a wrong offset!");
static_assert(offsetof(FSIK_LeaderboardScoreUploaded, bScoreChanged) == 0x000008, "Member 'FSIK_LeaderboardScoreUploaded::bScoreChanged' has a wrong offset!");
static_assert(offsetof(FSIK_LeaderboardScoreUploaded, GlobalRankNew) == 0x00000C, "Member 'FSIK_LeaderboardScoreUploaded::GlobalRankNew' has a wrong offset!");
static_assert(offsetof(FSIK_LeaderboardScoreUploaded, GlobalRankPrevious) == 0x000010, "Member 'FSIK_LeaderboardScoreUploaded::GlobalRankPrevious' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamLeaderboardEntries
// 0x0008 (0x0008 - 0x0000)
struct FSIK_SteamLeaderboardEntries final
{
public:
	int64                                         Result;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamLeaderboardEntries) == 0x000008, "Wrong alignment on FSIK_SteamLeaderboardEntries");
static_assert(sizeof(FSIK_SteamLeaderboardEntries) == 0x000008, "Wrong size on FSIK_SteamLeaderboardEntries");
static_assert(offsetof(FSIK_SteamLeaderboardEntries, Result) == 0x000000, "Member 'FSIK_SteamLeaderboardEntries::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIKCreateLobbySettings
// 0x000C (0x000C - 0x0000)
struct FSIKCreateLobbySettings final
{
public:
	bool                                          bIsLanMatch;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfPrivateConnections;                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAdvertise;                                  // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinInProgress;                              // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePresence;                                      // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIKCreateLobbySettings) == 0x000004, "Wrong alignment on FSIKCreateLobbySettings");
static_assert(sizeof(FSIKCreateLobbySettings) == 0x00000C, "Wrong size on FSIKCreateLobbySettings");
static_assert(offsetof(FSIKCreateLobbySettings, bIsLanMatch) == 0x000000, "Member 'FSIKCreateLobbySettings::bIsLanMatch' has a wrong offset!");
static_assert(offsetof(FSIKCreateLobbySettings, bAllowInvites) == 0x000001, "Member 'FSIKCreateLobbySettings::bAllowInvites' has a wrong offset!");
static_assert(offsetof(FSIKCreateLobbySettings, NumberOfPrivateConnections) == 0x000004, "Member 'FSIKCreateLobbySettings::NumberOfPrivateConnections' has a wrong offset!");
static_assert(offsetof(FSIKCreateLobbySettings, bShouldAdvertise) == 0x000008, "Member 'FSIKCreateLobbySettings::bShouldAdvertise' has a wrong offset!");
static_assert(offsetof(FSIKCreateLobbySettings, bAllowJoinInProgress) == 0x000009, "Member 'FSIKCreateLobbySettings::bAllowJoinInProgress' has a wrong offset!");
static_assert(offsetof(FSIKCreateLobbySettings, bUsePresence) == 0x00000A, "Member 'FSIKCreateLobbySettings::bUsePresence' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_PartyBeaconID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSIK_PartyBeaconID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_PartyBeaconID) == 0x000008, "Wrong alignment on FSIK_PartyBeaconID");
static_assert(sizeof(FSIK_PartyBeaconID) == 0x000008, "Wrong size on FSIK_PartyBeaconID");

// ScriptStruct SteamIntegrationKit.DownloadedLeaderboardEntry
// 0x0018 (0x0018 - 0x0000)
struct FDownloadedLeaderboardEntry final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalRank;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDownloadedLeaderboardEntry) == 0x000008, "Wrong alignment on FDownloadedLeaderboardEntry");
static_assert(sizeof(FDownloadedLeaderboardEntry) == 0x000018, "Wrong size on FDownloadedLeaderboardEntry");
static_assert(offsetof(FDownloadedLeaderboardEntry, SteamID) == 0x000000, "Member 'FDownloadedLeaderboardEntry::SteamID' has a wrong offset!");
static_assert(offsetof(FDownloadedLeaderboardEntry, GlobalRank) == 0x000010, "Member 'FDownloadedLeaderboardEntry::GlobalRank' has a wrong offset!");
static_assert(offsetof(FDownloadedLeaderboardEntry, Score) == 0x000014, "Member 'FDownloadedLeaderboardEntry::Score' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_AppId
// 0x0004 (0x0004 - 0x0000)
struct FSIK_AppId final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_AppId) == 0x000004, "Wrong alignment on FSIK_AppId");
static_assert(sizeof(FSIK_AppId) == 0x000004, "Wrong size on FSIK_AppId");
static_assert(offsetof(FSIK_AppId, AppID) == 0x000000, "Member 'FSIK_AppId::AppID' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_PublishedFileId
// 0x0008 (0x0008 - 0x0000)
struct FSIK_PublishedFileId final
{
public:
	int64                                         PublishedFileId;                                   // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_PublishedFileId) == 0x000008, "Wrong alignment on FSIK_PublishedFileId");
static_assert(sizeof(FSIK_PublishedFileId) == 0x000008, "Wrong size on FSIK_PublishedFileId");
static_assert(offsetof(FSIK_PublishedFileId, PublishedFileId) == 0x000000, "Member 'FSIK_PublishedFileId::PublishedFileId' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamNetworkingIPAddr
// 0x0030 (0x0030 - 0x0000)
struct FSIK_SteamNetworkingIPAddr final
{
public:
	ESIK_SteamIPType                              m_eType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IpV4;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpV6;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_port;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_SteamNetworkingIPAddr) == 0x000008, "Wrong alignment on FSIK_SteamNetworkingIPAddr");
static_assert(sizeof(FSIK_SteamNetworkingIPAddr) == 0x000030, "Wrong size on FSIK_SteamNetworkingIPAddr");
static_assert(offsetof(FSIK_SteamNetworkingIPAddr, m_eType) == 0x000000, "Member 'FSIK_SteamNetworkingIPAddr::m_eType' has a wrong offset!");
static_assert(offsetof(FSIK_SteamNetworkingIPAddr, IpV4) == 0x000008, "Member 'FSIK_SteamNetworkingIPAddr::IpV4' has a wrong offset!");
static_assert(offsetof(FSIK_SteamNetworkingIPAddr, IpV6) == 0x000018, "Member 'FSIK_SteamNetworkingIPAddr::IpV6' has a wrong offset!");
static_assert(offsetof(FSIK_SteamNetworkingIPAddr, m_port) == 0x000028, "Member 'FSIK_SteamNetworkingIPAddr::m_port' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_UGCHandle
// 0x0008 (0x0008 - 0x0000)
struct FSIK_UGCHandle final
{
public:
	int64                                         UGCHandle;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_UGCHandle) == 0x000008, "Wrong alignment on FSIK_UGCHandle");
static_assert(sizeof(FSIK_UGCHandle) == 0x000008, "Wrong size on FSIK_UGCHandle");
static_assert(offsetof(FSIK_UGCHandle, UGCHandle) == 0x000000, "Member 'FSIK_UGCHandle::UGCHandle' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SessionFindSettings
// 0x0001 (0x0001 - 0x0000)
struct FSIK_SessionFindSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_SessionFindSettings) == 0x000001, "Wrong alignment on FSIK_SessionFindSettings");
static_assert(sizeof(FSIK_SessionFindSettings) == 0x000001, "Wrong size on FSIK_SessionFindSettings");

// ScriptStruct SteamIntegrationKit.SIK_ScreenshotHandle
// 0x0004 (0x0004 - 0x0000)
struct FSIK_ScreenshotHandle final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_ScreenshotHandle) == 0x000004, "Wrong alignment on FSIK_ScreenshotHandle");
static_assert(sizeof(FSIK_ScreenshotHandle) == 0x000004, "Wrong size on FSIK_ScreenshotHandle");
static_assert(offsetof(FSIK_ScreenshotHandle, Result) == 0x000000, "Member 'FSIK_ScreenshotHandle::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_UGCQueryHandle
// 0x0008 (0x0008 - 0x0000)
struct FSIK_UGCQueryHandle final
{
public:
	int64                                         Result;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_UGCQueryHandle) == 0x000008, "Wrong alignment on FSIK_UGCQueryHandle");
static_assert(sizeof(FSIK_UGCQueryHandle) == 0x000008, "Wrong size on FSIK_UGCQueryHandle");
static_assert(offsetof(FSIK_UGCQueryHandle, Result) == 0x000000, "Member 'FSIK_UGCQueryHandle::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_ServerNetAddress
// 0x0038 (0x0038 - 0x0000)
struct FSIK_ServerNetAddress final
{
public:
	int32                                         QueryPort;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionAddress;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueryAddress;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_ServerNetAddress) == 0x000008, "Wrong alignment on FSIK_ServerNetAddress");
static_assert(sizeof(FSIK_ServerNetAddress) == 0x000038, "Wrong size on FSIK_ServerNetAddress");
static_assert(offsetof(FSIK_ServerNetAddress, QueryPort) == 0x000000, "Member 'FSIK_ServerNetAddress::QueryPort' has a wrong offset!");
static_assert(offsetof(FSIK_ServerNetAddress, ConnectionPort) == 0x000004, "Member 'FSIK_ServerNetAddress::ConnectionPort' has a wrong offset!");
static_assert(offsetof(FSIK_ServerNetAddress, IP) == 0x000008, "Member 'FSIK_ServerNetAddress::IP' has a wrong offset!");
static_assert(offsetof(FSIK_ServerNetAddress, ConnectionAddress) == 0x000018, "Member 'FSIK_ServerNetAddress::ConnectionAddress' has a wrong offset!");
static_assert(offsetof(FSIK_ServerNetAddress, QueryAddress) == 0x000028, "Member 'FSIK_ServerNetAddress::QueryAddress' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_FoundServers
// 0x00B0 (0x00B0 - 0x0000)
struct FSIK_FoundServers final
{
public:
	int32                                         Ping;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHadSuccessfulResponse;                            // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotRefresh;                                     // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameDir;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameDescription;                                   // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             AppID;                                             // 0x0038(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Players;                                           // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotPlayers;                                        // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPasswordProtected;                                // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecure;                                           // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeLastPlayed;                                    // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVersion;                                     // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameTags;                                          // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_ServerNetAddress                  ServerNetAddress;                                  // 0x0078(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_FoundServers) == 0x000008, "Wrong alignment on FSIK_FoundServers");
static_assert(sizeof(FSIK_FoundServers) == 0x0000B0, "Wrong size on FSIK_FoundServers");
static_assert(offsetof(FSIK_FoundServers, Ping) == 0x000000, "Member 'FSIK_FoundServers::Ping' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, bHadSuccessfulResponse) == 0x000004, "Member 'FSIK_FoundServers::bHadSuccessfulResponse' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, bDoNotRefresh) == 0x000005, "Member 'FSIK_FoundServers::bDoNotRefresh' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, GameDir) == 0x000008, "Member 'FSIK_FoundServers::GameDir' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, Map) == 0x000018, "Member 'FSIK_FoundServers::Map' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, GameDescription) == 0x000028, "Member 'FSIK_FoundServers::GameDescription' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, AppID) == 0x000038, "Member 'FSIK_FoundServers::AppID' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, Players) == 0x00003C, "Member 'FSIK_FoundServers::Players' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, MaxPlayers) == 0x000040, "Member 'FSIK_FoundServers::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, BotPlayers) == 0x000044, "Member 'FSIK_FoundServers::BotPlayers' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, bPasswordProtected) == 0x000048, "Member 'FSIK_FoundServers::bPasswordProtected' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, bSecure) == 0x000049, "Member 'FSIK_FoundServers::bSecure' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, TimeLastPlayed) == 0x00004C, "Member 'FSIK_FoundServers::TimeLastPlayed' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, ServerVersion) == 0x000050, "Member 'FSIK_FoundServers::ServerVersion' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, ServerName) == 0x000058, "Member 'FSIK_FoundServers::ServerName' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, GameTags) == 0x000068, "Member 'FSIK_FoundServers::GameTags' has a wrong offset!");
static_assert(offsetof(FSIK_FoundServers, ServerNetAddress) == 0x000078, "Member 'FSIK_FoundServers::ServerNetAddress' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_UGCFileWriteStreamHandle
// 0x0008 (0x0008 - 0x0000)
struct FSIK_UGCFileWriteStreamHandle final
{
public:
	int64                                         UGCFileWriteStreamHandle;                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_UGCFileWriteStreamHandle) == 0x000008, "Wrong alignment on FSIK_UGCFileWriteStreamHandle");
static_assert(sizeof(FSIK_UGCFileWriteStreamHandle) == 0x000008, "Wrong size on FSIK_UGCFileWriteStreamHandle");
static_assert(offsetof(FSIK_UGCFileWriteStreamHandle, UGCFileWriteStreamHandle) == 0x000000, "Member 'FSIK_UGCFileWriteStreamHandle::UGCFileWriteStreamHandle' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIKAttribute
// 0x0020 (0x0020 - 0x0000)
struct FSIKAttribute final
{
public:
	ESIKAttributeType                             AttributeType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringValue;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntValue;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIKAttribute) == 0x000008, "Wrong alignment on FSIKAttribute");
static_assert(sizeof(FSIKAttribute) == 0x000020, "Wrong size on FSIKAttribute");
static_assert(offsetof(FSIKAttribute, AttributeType) == 0x000000, "Member 'FSIKAttribute::AttributeType' has a wrong offset!");
static_assert(offsetof(FSIKAttribute, StringValue) == 0x000008, "Member 'FSIKAttribute::StringValue' has a wrong offset!");
static_assert(offsetof(FSIKAttribute, BoolValue) == 0x000018, "Member 'FSIKAttribute::BoolValue' has a wrong offset!");
static_assert(offsetof(FSIKAttribute, IntValue) == 0x00001C, "Member 'FSIKAttribute::IntValue' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SSessionFindStruct
// 0x0190 (0x0190 - 0x0000)
struct FSSessionFindStruct final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0120)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSIKAttribute>     SessionSettings;                                   // 0x0120(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentNumberOfPlayers;                            // 0x0180(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfPlayers;                                // 0x0184(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDedicatedServer;                                // 0x0188(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSessionFindStruct) == 0x000008, "Wrong alignment on FSSessionFindStruct");
static_assert(sizeof(FSSessionFindStruct) == 0x000190, "Wrong size on FSSessionFindStruct");
static_assert(offsetof(FSSessionFindStruct, SessionResult) == 0x000000, "Member 'FSSessionFindStruct::SessionResult' has a wrong offset!");
static_assert(offsetof(FSSessionFindStruct, SessionSettings) == 0x000120, "Member 'FSSessionFindStruct::SessionSettings' has a wrong offset!");
static_assert(offsetof(FSSessionFindStruct, SessionName) == 0x000170, "Member 'FSSessionFindStruct::SessionName' has a wrong offset!");
static_assert(offsetof(FSSessionFindStruct, CurrentNumberOfPlayers) == 0x000180, "Member 'FSSessionFindStruct::CurrentNumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FSSessionFindStruct, MaxNumberOfPlayers) == 0x000184, "Member 'FSSessionFindStruct::MaxNumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FSSessionFindStruct, bIsDedicatedServer) == 0x000188, "Member 'FSSessionFindStruct::bIsDedicatedServer' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_CurrentSessionInfo
// 0x0018 (0x0018 - 0x0000)
struct FSIK_CurrentSessionInfo final
{
public:
	class FString                                 SessionName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           LobbyID;                                           // 0x0010(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_CurrentSessionInfo) == 0x000008, "Wrong alignment on FSIK_CurrentSessionInfo");
static_assert(sizeof(FSIK_CurrentSessionInfo) == 0x000018, "Wrong size on FSIK_CurrentSessionInfo");
static_assert(offsetof(FSIK_CurrentSessionInfo, SessionName) == 0x000000, "Member 'FSIK_CurrentSessionInfo::SessionName' has a wrong offset!");
static_assert(offsetof(FSIK_CurrentSessionInfo, LobbyID) == 0x000010, "Member 'FSIK_CurrentSessionInfo::LobbyID' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamInventoryResult
// 0x0004 (0x0004 - 0x0000)
struct FSIK_SteamInventoryResult final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamInventoryResult) == 0x000004, "Wrong alignment on FSIK_SteamInventoryResult");
static_assert(sizeof(FSIK_SteamInventoryResult) == 0x000004, "Wrong size on FSIK_SteamInventoryResult");
static_assert(offsetof(FSIK_SteamInventoryResult, Result) == 0x000000, "Member 'FSIK_SteamInventoryResult::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIKDedicatedServerSettings
// 0x0008 (0x0008 - 0x0000)
struct FSIKDedicatedServerSettings final
{
public:
	bool                                          bIsDedicatedServer;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PortInfo;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIKDedicatedServerSettings) == 0x000004, "Wrong alignment on FSIKDedicatedServerSettings");
static_assert(sizeof(FSIKDedicatedServerSettings) == 0x000008, "Wrong size on FSIKDedicatedServerSettings");
static_assert(offsetof(FSIKDedicatedServerSettings, bIsDedicatedServer) == 0x000000, "Member 'FSIKDedicatedServerSettings::bIsDedicatedServer' has a wrong offset!");
static_assert(offsetof(FSIKDedicatedServerSettings, PortInfo) == 0x000004, "Member 'FSIKDedicatedServerSettings::PortInfo' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_CreateSessionExtraSettings
// 0x0010 (0x0010 - 0x0000)
struct FSIK_CreateSessionExtraSettings final
{
public:
	bool                                          bIsLanMatch;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfPrivateConnections;                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAdvertise;                                  // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinInProgress;                              // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePresence;                                      // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresence;                             // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresenceFriendsOnly;                  // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_CreateSessionExtraSettings) == 0x000004, "Wrong alignment on FSIK_CreateSessionExtraSettings");
static_assert(sizeof(FSIK_CreateSessionExtraSettings) == 0x000010, "Wrong size on FSIK_CreateSessionExtraSettings");
static_assert(offsetof(FSIK_CreateSessionExtraSettings, bIsLanMatch) == 0x000000, "Member 'FSIK_CreateSessionExtraSettings::bIsLanMatch' has a wrong offset!");
static_assert(offsetof(FSIK_CreateSessionExtraSettings, NumberOfPrivateConnections) == 0x000004, "Member 'FSIK_CreateSessionExtraSettings::NumberOfPrivateConnections' has a wrong offset!");
static_assert(offsetof(FSIK_CreateSessionExtraSettings, bShouldAdvertise) == 0x000008, "Member 'FSIK_CreateSessionExtraSettings::bShouldAdvertise' has a wrong offset!");
static_assert(offsetof(FSIK_CreateSessionExtraSettings, bAllowJoinInProgress) == 0x000009, "Member 'FSIK_CreateSessionExtraSettings::bAllowJoinInProgress' has a wrong offset!");
static_assert(offsetof(FSIK_CreateSessionExtraSettings, bUsePresence) == 0x00000A, "Member 'FSIK_CreateSessionExtraSettings::bUsePresence' has a wrong offset!");
static_assert(offsetof(FSIK_CreateSessionExtraSettings, bAllowJoinViaPresence) == 0x00000B, "Member 'FSIK_CreateSessionExtraSettings::bAllowJoinViaPresence' has a wrong offset!");
static_assert(offsetof(FSIK_CreateSessionExtraSettings, bAllowJoinViaPresenceFriendsOnly) == 0x00000C, "Member 'FSIK_CreateSessionExtraSettings::bAllowJoinViaPresenceFriendsOnly' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_GameID
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSIK_GameID final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_GameID) == 0x000008, "Wrong alignment on FSIK_GameID");
static_assert(sizeof(FSIK_GameID) == 0x000008, "Wrong size on FSIK_GameID");

// ScriptStruct SteamIntegrationKit.SIK_FriendGameInfo
// 0x0020 (0x0020 - 0x0000)
struct FSIK_FriendGameInfo final
{
public:
	struct FSIK_SteamId                           LobbySteamId;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_GameID                            GameID;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         IP;                                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamePort;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_FriendGameInfo) == 0x000008, "Wrong alignment on FSIK_FriendGameInfo");
static_assert(sizeof(FSIK_FriendGameInfo) == 0x000020, "Wrong size on FSIK_FriendGameInfo");
static_assert(offsetof(FSIK_FriendGameInfo, LobbySteamId) == 0x000000, "Member 'FSIK_FriendGameInfo::LobbySteamId' has a wrong offset!");
static_assert(offsetof(FSIK_FriendGameInfo, GameID) == 0x000008, "Member 'FSIK_FriendGameInfo::GameID' has a wrong offset!");
static_assert(offsetof(FSIK_FriendGameInfo, IP) == 0x000010, "Member 'FSIK_FriendGameInfo::IP' has a wrong offset!");
static_assert(offsetof(FSIK_FriendGameInfo, GamePort) == 0x000014, "Member 'FSIK_FriendGameInfo::GamePort' has a wrong offset!");
static_assert(offsetof(FSIK_FriendGameInfo, QueryPort) == 0x000018, "Member 'FSIK_FriendGameInfo::QueryPort' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_DepotId
// 0x0004 (0x0004 - 0x0000)
struct FSIK_DepotId final
{
public:
	int32                                         DepotID;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_DepotId) == 0x000004, "Wrong alignment on FSIK_DepotId");
static_assert(sizeof(FSIK_DepotId) == 0x000004, "Wrong size on FSIK_DepotId");
static_assert(offsetof(FSIK_DepotId, DepotID) == 0x000000, "Member 'FSIK_DepotId::DepotID' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_AccountID
// 0x0004 (0x0004 - 0x0000)
struct FSIK_AccountID final
{
public:
	int32                                         AccountId;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_AccountID) == 0x000004, "Wrong alignment on FSIK_AccountID");
static_assert(sizeof(FSIK_AccountID) == 0x000004, "Wrong size on FSIK_AccountID");
static_assert(offsetof(FSIK_AccountID, AccountId) == 0x000000, "Member 'FSIK_AccountID::AccountId' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_AuthTicket
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSIK_AuthTicket final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_AuthTicket) == 0x000004, "Wrong alignment on FSIK_AuthTicket");
static_assert(sizeof(FSIK_AuthTicket) == 0x000004, "Wrong size on FSIK_AuthTicket");

// ScriptStruct SteamIntegrationKit.SIK_FriendsGroupID
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSIK_FriendsGroupID final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_FriendsGroupID) == 0x000004, "Wrong alignment on FSIK_FriendsGroupID");
static_assert(sizeof(FSIK_FriendsGroupID) == 0x000004, "Wrong size on FSIK_FriendsGroupID");

// ScriptStruct SteamIntegrationKit.SIK_SteamPartyBeaconLocation
// 0x0010 (0x0010 - 0x0000)
struct FSIK_SteamPartyBeaconLocation final
{
public:
	ESIK_SteamPartyBeaconLocationType             m_eType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         m_ulLocationID;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamPartyBeaconLocation) == 0x000008, "Wrong alignment on FSIK_SteamPartyBeaconLocation");
static_assert(sizeof(FSIK_SteamPartyBeaconLocation) == 0x000010, "Wrong size on FSIK_SteamPartyBeaconLocation");
static_assert(offsetof(FSIK_SteamPartyBeaconLocation, m_eType) == 0x000000, "Member 'FSIK_SteamPartyBeaconLocation::m_eType' has a wrong offset!");
static_assert(offsetof(FSIK_SteamPartyBeaconLocation, m_ulLocationID) == 0x000008, "Member 'FSIK_SteamPartyBeaconLocation::m_ulLocationID' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamNetworkingIdentity
// 0x0060 (0x0060 - 0x0000)
struct FSIK_SteamNetworkingIdentity final
{
public:
	ESIK_SteamNetworkingIdentityType              m_eType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           m_steamID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 m_szGenericString;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 m_szGenericBytes;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamNetworkingIPAddr             m_ipAddress;                                       // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamNetworkingIdentity) == 0x000008, "Wrong alignment on FSIK_SteamNetworkingIdentity");
static_assert(sizeof(FSIK_SteamNetworkingIdentity) == 0x000060, "Wrong size on FSIK_SteamNetworkingIdentity");
static_assert(offsetof(FSIK_SteamNetworkingIdentity, m_eType) == 0x000000, "Member 'FSIK_SteamNetworkingIdentity::m_eType' has a wrong offset!");
static_assert(offsetof(FSIK_SteamNetworkingIdentity, m_steamID) == 0x000008, "Member 'FSIK_SteamNetworkingIdentity::m_steamID' has a wrong offset!");
static_assert(offsetof(FSIK_SteamNetworkingIdentity, m_szGenericString) == 0x000010, "Member 'FSIK_SteamNetworkingIdentity::m_szGenericString' has a wrong offset!");
static_assert(offsetof(FSIK_SteamNetworkingIdentity, m_szGenericBytes) == 0x000020, "Member 'FSIK_SteamNetworkingIdentity::m_szGenericBytes' has a wrong offset!");
static_assert(offsetof(FSIK_SteamNetworkingIdentity, m_ipAddress) == 0x000030, "Member 'FSIK_SteamNetworkingIdentity::m_ipAddress' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamItemDef
// 0x0004 (0x0004 - 0x0000)
struct FSIK_SteamItemDef final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamItemDef) == 0x000004, "Wrong alignment on FSIK_SteamItemDef");
static_assert(sizeof(FSIK_SteamItemDef) == 0x000004, "Wrong size on FSIK_SteamItemDef");
static_assert(offsetof(FSIK_SteamItemDef, Result) == 0x000000, "Member 'FSIK_SteamItemDef::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamItemInstanceID
// 0x0008 (0x0008 - 0x0000)
struct FSIK_SteamItemInstanceID final
{
public:
	int64                                         Result;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamItemInstanceID) == 0x000008, "Wrong alignment on FSIK_SteamItemInstanceID");
static_assert(sizeof(FSIK_SteamItemInstanceID) == 0x000008, "Wrong size on FSIK_SteamItemInstanceID");
static_assert(offsetof(FSIK_SteamItemInstanceID, Result) == 0x000000, "Member 'FSIK_SteamItemInstanceID::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamInventoryUpdateHandle
// 0x0008 (0x0008 - 0x0000)
struct FSIK_SteamInventoryUpdateHandle final
{
public:
	int64                                         Result;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamInventoryUpdateHandle) == 0x000008, "Wrong alignment on FSIK_SteamInventoryUpdateHandle");
static_assert(sizeof(FSIK_SteamInventoryUpdateHandle) == 0x000008, "Wrong size on FSIK_SteamInventoryUpdateHandle");
static_assert(offsetof(FSIK_SteamInventoryUpdateHandle, Result) == 0x000000, "Member 'FSIK_SteamInventoryUpdateHandle::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamItemDetails
// 0x0018 (0x0018 - 0x0000)
struct FSIK_SteamItemDetails final
{
public:
	struct FSIK_SteamItemInstanceID               ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamItemDef                      Definition;                                        // 0x0008(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_SteamItemFlags                           Flags;                                             // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_SteamItemDetails) == 0x000008, "Wrong alignment on FSIK_SteamItemDetails");
static_assert(sizeof(FSIK_SteamItemDetails) == 0x000018, "Wrong size on FSIK_SteamItemDetails");
static_assert(offsetof(FSIK_SteamItemDetails, ItemId) == 0x000000, "Member 'FSIK_SteamItemDetails::ItemId' has a wrong offset!");
static_assert(offsetof(FSIK_SteamItemDetails, Definition) == 0x000008, "Member 'FSIK_SteamItemDetails::Definition' has a wrong offset!");
static_assert(offsetof(FSIK_SteamItemDetails, Quantity) == 0x00000C, "Member 'FSIK_SteamItemDetails::Quantity' has a wrong offset!");
static_assert(offsetof(FSIK_SteamItemDetails, Flags) == 0x000010, "Member 'FSIK_SteamItemDetails::Flags' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamNetworkPingLocation
// 0x0010 (0x0010 - 0x0000)
struct FSIK_SteamNetworkPingLocation final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamNetworkPingLocation) == 0x000008, "Wrong alignment on FSIK_SteamNetworkPingLocation");
static_assert(sizeof(FSIK_SteamNetworkPingLocation) == 0x000010, "Wrong size on FSIK_SteamNetworkPingLocation");
static_assert(offsetof(FSIK_SteamNetworkPingLocation, Data) == 0x000000, "Member 'FSIK_SteamNetworkPingLocation::Data' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamNetworkingPOPID
// 0x0004 (0x0004 - 0x0000)
struct FSIK_SteamNetworkingPOPID final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamNetworkingPOPID) == 0x000004, "Wrong alignment on FSIK_SteamNetworkingPOPID");
static_assert(sizeof(FSIK_SteamNetworkingPOPID) == 0x000004, "Wrong size on FSIK_SteamNetworkingPOPID");
static_assert(offsetof(FSIK_SteamNetworkingPOPID, Value) == 0x000000, "Member 'FSIK_SteamNetworkingPOPID::Value' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_P2PSessionState
// 0x0028 (0x0028 - 0x0000)
struct FSIK_P2PSessionState final
{
public:
	bool                                          bConnectionActive;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnecting;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_P2PSessionError                          P2PSessionError;                                   // 0x0002(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingRelay;                                       // 0x0003(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesQueuedForSend;                                // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PacketsQueuedForSend;                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RemoteIP;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemotePort;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSIK_P2PSessionState) == 0x000008, "Wrong alignment on FSIK_P2PSessionState");
static_assert(sizeof(FSIK_P2PSessionState) == 0x000028, "Wrong size on FSIK_P2PSessionState");
static_assert(offsetof(FSIK_P2PSessionState, bConnectionActive) == 0x000000, "Member 'FSIK_P2PSessionState::bConnectionActive' has a wrong offset!");
static_assert(offsetof(FSIK_P2PSessionState, bConnecting) == 0x000001, "Member 'FSIK_P2PSessionState::bConnecting' has a wrong offset!");
static_assert(offsetof(FSIK_P2PSessionState, P2PSessionError) == 0x000002, "Member 'FSIK_P2PSessionState::P2PSessionError' has a wrong offset!");
static_assert(offsetof(FSIK_P2PSessionState, bUsingRelay) == 0x000003, "Member 'FSIK_P2PSessionState::bUsingRelay' has a wrong offset!");
static_assert(offsetof(FSIK_P2PSessionState, BytesQueuedForSend) == 0x000004, "Member 'FSIK_P2PSessionState::BytesQueuedForSend' has a wrong offset!");
static_assert(offsetof(FSIK_P2PSessionState, PacketsQueuedForSend) == 0x000008, "Member 'FSIK_P2PSessionState::PacketsQueuedForSend' has a wrong offset!");
static_assert(offsetof(FSIK_P2PSessionState, RemoteIP) == 0x000010, "Member 'FSIK_P2PSessionState::RemoteIP' has a wrong offset!");
static_assert(offsetof(FSIK_P2PSessionState, RemotePort) == 0x000020, "Member 'FSIK_P2PSessionState::RemotePort' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_PublishedFileUpdateHandle
// 0x0008 (0x0008 - 0x0000)
struct FSIK_PublishedFileUpdateHandle final
{
public:
	int64                                         PublishedFileUpdateHandle;                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_PublishedFileUpdateHandle) == 0x000008, "Wrong alignment on FSIK_PublishedFileUpdateHandle");
static_assert(sizeof(FSIK_PublishedFileUpdateHandle) == 0x000008, "Wrong size on FSIK_PublishedFileUpdateHandle");
static_assert(offsetof(FSIK_PublishedFileUpdateHandle, PublishedFileUpdateHandle) == 0x000000, "Member 'FSIK_PublishedFileUpdateHandle::PublishedFileUpdateHandle' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_UGCUpdateHandle
// 0x0008 (0x0008 - 0x0000)
struct FSIK_UGCUpdateHandle final
{
public:
	int64                                         Result;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_UGCUpdateHandle) == 0x000008, "Wrong alignment on FSIK_UGCUpdateHandle");
static_assert(sizeof(FSIK_UGCUpdateHandle) == 0x000008, "Wrong size on FSIK_UGCUpdateHandle");
static_assert(offsetof(FSIK_UGCUpdateHandle, Result) == 0x000000, "Member 'FSIK_UGCUpdateHandle::Result' has a wrong offset!");

// ScriptStruct SteamIntegrationKit.SIK_SteamUGCDetails
// 0x00A8 (0x00A8 - 0x0000)
struct FSIK_SteamUGCDetails final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_Result                                   Result;                                            // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_WorkshopFileType                         FileType;                                          // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           Owner;                                             // 0x0010(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             CreatorAppID;                                      // 0x0018(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             ConsumerAppID;                                     // 0x001C(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeCreate;                                        // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeUpdated;                                       // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeAddedToUserList;                               // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_RemoteStoragePublishedFileVisibility     Visibility;                                        // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBanned;                                           // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptedForUse;                                   // 0x004E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagsTruncated;                                    // 0x004F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_UGCHandle                         File;                                              // 0x0060(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_UGCHandle                         PreviewFile;                                       // 0x0068(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewFileSize;                                   // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotesUp;                                           // 0x0098(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotesDown;                                         // 0x009C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumChildren;                                       // 0x00A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSIK_SteamUGCDetails) == 0x000008, "Wrong alignment on FSIK_SteamUGCDetails");
static_assert(sizeof(FSIK_SteamUGCDetails) == 0x0000A8, "Wrong size on FSIK_SteamUGCDetails");
static_assert(offsetof(FSIK_SteamUGCDetails, PublishedFileId) == 0x000000, "Member 'FSIK_SteamUGCDetails::PublishedFileId' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Result) == 0x000008, "Member 'FSIK_SteamUGCDetails::Result' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, FileType) == 0x000009, "Member 'FSIK_SteamUGCDetails::FileType' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Owner) == 0x000010, "Member 'FSIK_SteamUGCDetails::Owner' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, CreatorAppID) == 0x000018, "Member 'FSIK_SteamUGCDetails::CreatorAppID' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, ConsumerAppID) == 0x00001C, "Member 'FSIK_SteamUGCDetails::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Title) == 0x000020, "Member 'FSIK_SteamUGCDetails::Title' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Description) == 0x000030, "Member 'FSIK_SteamUGCDetails::Description' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, TimeCreate) == 0x000040, "Member 'FSIK_SteamUGCDetails::TimeCreate' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, TimeUpdated) == 0x000044, "Member 'FSIK_SteamUGCDetails::TimeUpdated' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, TimeAddedToUserList) == 0x000048, "Member 'FSIK_SteamUGCDetails::TimeAddedToUserList' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Visibility) == 0x00004C, "Member 'FSIK_SteamUGCDetails::Visibility' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, bBanned) == 0x00004D, "Member 'FSIK_SteamUGCDetails::bBanned' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, bAcceptedForUse) == 0x00004E, "Member 'FSIK_SteamUGCDetails::bAcceptedForUse' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, bTagsTruncated) == 0x00004F, "Member 'FSIK_SteamUGCDetails::bTagsTruncated' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Tags) == 0x000050, "Member 'FSIK_SteamUGCDetails::Tags' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, File) == 0x000060, "Member 'FSIK_SteamUGCDetails::File' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, PreviewFile) == 0x000068, "Member 'FSIK_SteamUGCDetails::PreviewFile' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Filename) == 0x000070, "Member 'FSIK_SteamUGCDetails::Filename' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, FileSize) == 0x000080, "Member 'FSIK_SteamUGCDetails::FileSize' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, PreviewFileSize) == 0x000084, "Member 'FSIK_SteamUGCDetails::PreviewFileSize' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, URL) == 0x000088, "Member 'FSIK_SteamUGCDetails::URL' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, VotesUp) == 0x000098, "Member 'FSIK_SteamUGCDetails::VotesUp' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, VotesDown) == 0x00009C, "Member 'FSIK_SteamUGCDetails::VotesDown' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, Score) == 0x0000A0, "Member 'FSIK_SteamUGCDetails::Score' has a wrong offset!");
static_assert(offsetof(FSIK_SteamUGCDetails, NumChildren) == 0x0000A4, "Member 'FSIK_SteamUGCDetails::NumChildren' has a wrong offset!");

}

