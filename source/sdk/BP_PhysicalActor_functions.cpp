#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PhysicalActor

#include "Basic.hpp"

#include "BP_PhysicalActor_classes.hpp"
#include "BP_PhysicalActor_parameters.hpp"


namespace SDK
{

// Function BP_PhysicalActor.BP_PhysicalActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PhysicalActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_PhysicalActor_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "ReceiveHit");

	Params::BP_PhysicalActor_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.ExecuteUbergraph_BP_PhysicalActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::ExecuteUbergraph_BP_PhysicalActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "ExecuteUbergraph_BP_PhysicalActor");

	Params::BP_PhysicalActor_C_ExecuteUbergraph_BP_PhysicalActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.GetAvgVelocity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         AvgVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::GetAvgVelocity(struct FVector* AvgVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "GetAvgVelocity");

	Params::BP_PhysicalActor_C_GetAvgVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AvgVelocity != nullptr)
		*AvgVelocity = std::move(Parms.AvgVelocity);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.AddVelocityToBuffer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PhysicalActor_C::AddVelocityToBuffer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "AddVelocityToBuffer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.EnableCollisions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PhysicalActor_C::EnableCollisions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "EnableCollisions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.GetCollisionEffectPower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   TriggerEffects                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 EffetPower                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::GetCollisionEffectPower(class AActor* HitActor, const struct FVector& Impulse, bool* TriggerEffects, double* EffetPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "GetCollisionEffectPower");

	Params::BP_PhysicalActor_C_GetCollisionEffectPower Parms{};

	Parms.HitActor = HitActor;
	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);

	if (TriggerEffects != nullptr)
		*TriggerEffects = Parms.TriggerEffects;

	if (EffetPower != nullptr)
		*EffetPower = Parms.EffetPower;
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.HasHarmed (All)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_Killable_C> HarmedActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::HasHarmed__All_(TScriptInterface<class IBPI_Killable_C> HarmedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "HasHarmed (All)");

	Params::BP_PhysicalActor_C_HasHarmed__All_ Parms{};

	Parms.HarmedActor = HarmedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.HasHarmed (Server)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_Killable_C> HarmedActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::HasHarmed__Server_(TScriptInterface<class IBPI_Killable_C> HarmedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "HasHarmed (Server)");

	Params::BP_PhysicalActor_C_HasHarmed__Server_ Parms{};

	Parms.HarmedActor = HarmedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.CollisionEffects
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::CollisionEffects(float Power, const struct FVector& Location, const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "CollisionEffects");

	Params::BP_PhysicalActor_C_CollisionEffects Parms{};

	Parms.Power = Power;
	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "ReceiveTick");

	Params::BP_PhysicalActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.SleepChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              SleepingComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::SleepChanged(class UPrimitiveComponent* SleepingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "SleepChanged");

	Params::BP_PhysicalActor_C_SleepChanged Parms{};

	Parms.SleepingComponent = SleepingComponent;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.UpdateIsAwake
// (BlueprintCallable, BlueprintEvent)

void ABP_PhysicalActor_C::UpdateIsAwake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "UpdateIsAwake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.HasKilled (All)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_Killable_C> KilledActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::HasKilled__All_(TScriptInterface<class IBPI_Killable_C> KilledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "HasKilled (All)");

	Params::BP_PhysicalActor_C_HasKilled__All_ Parms{};

	Parms.KilledActor = KilledActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PhysicalActor.BP_PhysicalActor_C.HasKilled (Server)
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_Killable_C> KilledActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PhysicalActor_C::HasKilled__Server_(TScriptInterface<class IBPI_Killable_C> KilledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PhysicalActor_C", "HasKilled (Server)");

	Params::BP_PhysicalActor_C_HasKilled__Server_ Parms{};

	Parms.KilledActor = KilledActor;

	UObject::ProcessEvent(Func, &Parms);
}

}

