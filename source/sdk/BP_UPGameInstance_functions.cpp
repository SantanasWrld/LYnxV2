#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPGameInstance

#include "Basic.hpp"

#include "BP_UPGameInstance_classes.hpp"
#include "BP_UPGameInstance_parameters.hpp"


namespace SDK
{

// Function BP_UPGameInstance.BP_UPGameInstance_C.AddRequestLobbyCustomGamesFilter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IncludeCustomGames                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::AddRequestLobbyCustomGamesFilter(bool IncludeCustomGames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "AddRequestLobbyCustomGamesFilter");

	Params::BP_UPGameInstance_C_AddRequestLobbyCustomGamesFilter Parms{};

	Parms.IncludeCustomGames = IncludeCustomGames;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ApplyAntiAliasingMethod
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::ApplyAntiAliasingMethod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ApplyAntiAliasingMethod");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ApplyPlayerSettings
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::ApplyPlayerSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ApplyPlayerSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ApplyRenderScale
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::ApplyRenderScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ApplyRenderScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.CheckIfPlaytestUser
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::CheckIfPlaytestUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "CheckIfPlaytestUser");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.CheckSessionName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    InSessionName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          OutSessionName                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::CheckSessionName(const class FString& InSessionName, class FString* OutSessionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "CheckSessionName");

	Params::BP_UPGameInstance_C_CheckSessionName Parms{};

	Parms.InSessionName = std::move(InSessionName);

	UObject::ProcessEvent(Func, &Parms);

	if (OutSessionName != nullptr)
		*OutSessionName = std::move(Parms.OutSessionName);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ClearCameroidTextures
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPrivate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::ClearCameroidTextures(bool IsPrivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ClearCameroidTextures");

	Params::BP_UPGameInstance_C_ClearCameroidTextures Parms{};

	Parms.IsPrivate = IsPrivate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ClearItemSave
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::ClearItemSave(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ClearItemSave");

	Params::BP_UPGameInstance_C_ClearItemSave Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.DeleteSavedSession
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SessionSlot_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::DeleteSavedSession(int32 SessionSlot_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "DeleteSavedSession");

	Params::BP_UPGameInstance_C_DeleteSavedSession Parms{};

	Parms.SessionSlot_0 = SessionSlot_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.DeleteTempSaveFiles
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::DeleteTempSaveFiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "DeleteTempSaveFiles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ExecuteUbergraph_BP_UPGameInstance
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::ExecuteUbergraph_BP_UPGameInstance(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ExecuteUbergraph_BP_UPGameInstance");

	Params::BP_UPGameInstance_C_ExecuteUbergraph_BP_UPGameInstance Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetAllItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_InventoryItemSave>*    Items                                                  (Parm, OutParm)

void UBP_UPGameInstance_C::GetAllItems(TArray<struct FS_InventoryItemSave>* Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetAllItems");

	Params::BP_UPGameInstance_C_GetAllItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Items != nullptr)
		*Items = std::move(Parms.Items);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetCurrentMapType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   InLobby                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   InResult                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetCurrentMapType(bool* InLobby, bool* InResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetCurrentMapType");

	Params::BP_UPGameInstance_C_GetCurrentMapType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InLobby != nullptr)
		*InLobby = Parms.InLobby;

	if (InResult != nullptr)
		*InResult = Parms.InResult;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetGameSession
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPGameSession_C**             GameSession                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetGameSession(class ABP_UPGameSession_C** GameSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetGameSession");

	Params::BP_UPGameInstance_C_GetGameSession Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameSession != nullptr)
		*GameSession = Parms.GameSession;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetMaxPlayersInSession
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  MaxPlayers                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetMaxPlayersInSession(int32* MaxPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetMaxPlayersInSession");

	Params::BP_UPGameInstance_C_GetMaxPlayersInSession Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxPlayers != nullptr)
		*MaxPlayers = Parms.MaxPlayers;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetNewItemID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  ItemId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetNewItemID(int32* ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetNewItemID");

	Params::BP_UPGameInstance_C_GetNewItemID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemId != nullptr)
		*ItemId = Parms.ItemId;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetPerfEventProperties
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString*                          MapName                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   IsHost_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInterior                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  FrameRate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Latency                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetPerfEventProperties(class FString* MapName, bool* IsHost_0, bool* IsInterior, int32* FrameRate, int32* Latency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetPerfEventProperties");

	Params::BP_UPGameInstance_C_GetPerfEventProperties Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapName != nullptr)
		*MapName = std::move(Parms.MapName);

	if (IsHost_0 != nullptr)
		*IsHost_0 = Parms.IsHost_0;

	if (IsInterior != nullptr)
		*IsInterior = Parms.IsInterior;

	if (FrameRate != nullptr)
		*FrameRate = Parms.FrameRate;

	if (Latency != nullptr)
		*Latency = Parms.Latency;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetPlayersCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  PlayersCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetPlayersCount(int32* PlayersCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetPlayersCount");

	Params::BP_UPGameInstance_C_GetPlayersCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayersCount != nullptr)
		*PlayersCount = Parms.PlayersCount;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetPlayerWithId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_UPPlayerCharacter_C**         Player                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetPlayerWithId(int64 SteamID, class ABP_UPPlayerCharacter_C** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetPlayerWithId");

	Params::BP_UPGameInstance_C_GetPlayerWithId Parms{};

	Parms.SteamID = SteamID;

	UObject::ProcessEvent(Func, &Parms);

	if (Player != nullptr)
		*Player = Parms.Player;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetProfilePicture
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D**                      ProfilePicture                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetProfilePicture(int64 SteamID, class UTexture2D** ProfilePicture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetProfilePicture");

	Params::BP_UPGameInstance_C_GetProfilePicture Parms{};

	Parms.SteamID = SteamID;

	UObject::ProcessEvent(Func, &Parms);

	if (ProfilePicture != nullptr)
		*ProfilePicture = Parms.ProfilePicture;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetResultsDetails
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Episodes_C*                   Episodes                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32*                                  Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Difficulty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsFailed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetResultsDetails(class ABP_Episodes_C* Episodes, int32* Score, int32* Difficulty, bool* IsSuccess, bool* IsFailed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetResultsDetails");

	Params::BP_UPGameInstance_C_GetResultsDetails Parms{};

	Parms.Episodes = Episodes;

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;

	if (Difficulty != nullptr)
		*Difficulty = Parms.Difficulty;

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;

	if (IsFailed != nullptr)
		*IsFailed = Parms.IsFailed;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetSaveSessionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SessionSlot_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsUsed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Objective                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  DaysLeft                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsCustom                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetSaveSessionInfo(int32 SessionSlot_0, bool* IsUsed, int32* Objective, int32* DaysLeft, bool* IsCustom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetSaveSessionInfo");

	Params::BP_UPGameInstance_C_GetSaveSessionInfo Parms{};

	Parms.SessionSlot_0 = SessionSlot_0;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUsed != nullptr)
		*IsUsed = Parms.IsUsed;

	if (Objective != nullptr)
		*Objective = Parms.Objective;

	if (DaysLeft != nullptr)
		*DaysLeft = Parms.DaysLeft;

	if (IsCustom != nullptr)
		*IsCustom = Parms.IsCustom;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetSaveSessionSlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FString&                    ObjectSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SessionSlot_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          Slot                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetSaveSessionSlot(const class FString& ObjectSlot, int32 SessionSlot_0, class FString* Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetSaveSessionSlot");

	Params::BP_UPGameInstance_C_GetSaveSessionSlot Parms{};

	Parms.ObjectSlot = std::move(ObjectSlot);
	Parms.SessionSlot_0 = SessionSlot_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Slot != nullptr)
		*Slot = std::move(Parms.Slot);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetSessionDifficulty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  Difficulty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetSessionDifficulty(int32* Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetSessionDifficulty");

	Params::BP_UPGameInstance_C_GetSessionDifficulty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Difficulty != nullptr)
		*Difficulty = Parms.Difficulty;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetSessionElapsedDuration
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPGameSession_C*              GameSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32*                                  Duration                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetSessionElapsedDuration(class ABP_UPGameSession_C* GameSession, int32* Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetSessionElapsedDuration");

	Params::BP_UPGameInstance_C_GetSessionElapsedDuration Parms{};

	Parms.GameSession = GameSession;

	UObject::ProcessEvent(Func, &Parms);

	if (Duration != nullptr)
		*Duration = Parms.Duration;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.GetStatistics
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_Statistics_C**                 Statistics                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::GetStatistics(class UW_Statistics_C** Statistics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "GetStatistics");

	Params::BP_UPGameInstance_C_GetStatistics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Statistics != nullptr)
		*Statistics = Parms.Statistics;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.HideLoading
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::HideLoading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "HideLoading");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitAnalytics
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitAnalytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitAnalytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitCombatEvents
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::InitCombatEvents(class ABP_UPPlayerCharacter_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitCombatEvents");

	Params::BP_UPGameInstance_C_InitCombatEvents Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitCustomGame
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitCustomGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitCustomGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitEvents
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitInputs
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitInteriorEvents
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::InitInteriorEvents(class ABP_UPPlayerCharacter_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitInteriorEvents");

	Params::BP_UPGameInstance_C_InitInteriorEvents Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitLoginEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitLoginEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitLoginEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitMapEvents
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitMapEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitMapEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitMasterSoundMix
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitMasterSoundMix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitMasterSoundMix");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitOnlineServices
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitOnlineServices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitOnlineServices");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitPlayerAnalytics
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::InitPlayerAnalytics(class ABP_UPPlayerCharacter_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitPlayerAnalytics");

	Params::BP_UPGameInstance_C_InitPlayerAnalytics Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitResultsEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitResultsEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitResultsEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitSessionCreatedEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitSessionCreatedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitSessionCreatedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitSessionId
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitSessionId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitSessionId");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitSessionJoinedEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitSessionJoinedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitSessionJoinedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitSettings
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.InitTutorial
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::InitTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "InitTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsCurrentSessionFull
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsFull                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsCurrentSessionFull(bool* IsFull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsCurrentSessionFull");

	Params::BP_UPGameInstance_C_IsCurrentSessionFull Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFull != nullptr)
		*IsFull = Parms.IsFull;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsFirstSpawnInResults
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsFirstSpawnInResults(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsFirstSpawnInResults");

	Params::BP_UPGameInstance_C_IsFirstSpawnInResults Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsInLobby
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   InLobby                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsInLobby(bool* InLobby)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsInLobby");

	Params::BP_UPGameInstance_C_IsInLobby Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InLobby != nullptr)
		*InLobby = Parms.InLobby;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsInResults
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   InResults                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsInResults(bool* InResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsInResults");

	Params::BP_UPGameInstance_C_IsInResults Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InResults != nullptr)
		*InResults = Parms.InResults;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsInSession
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   InSession                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsInSession(bool* InSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsInSession");

	Params::BP_UPGameInstance_C_IsInSession Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InSession != nullptr)
		*InSession = Parms.InSession;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsLobbyVersion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSIK_SteamId&              LobbyID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const class FString&                    Version                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   Compatible                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsLobbyVersion(const struct FSIK_SteamId& LobbyID_0, const class FString& Version, bool* Compatible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsLobbyVersion");

	Params::BP_UPGameInstance_C_IsLobbyVersion Parms{};

	Parms.LobbyID_0 = std::move(LobbyID_0);
	Parms.Version = std::move(Version);

	UObject::ProcessEvent(Func, &Parms);

	if (Compatible != nullptr)
		*Compatible = Parms.Compatible;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsLobbyVersionCompatible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSIK_SteamId&              LobbyID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool*                                   Compatible                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsLobbyVersionCompatible(const struct FSIK_SteamId& LobbyID_0, bool* Compatible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsLobbyVersionCompatible");

	Params::BP_UPGameInstance_C_IsLobbyVersionCompatible Parms{};

	Parms.LobbyID_0 = std::move(LobbyID_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Compatible != nullptr)
		*Compatible = Parms.Compatible;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsLocalPlayerDead
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsDead                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsLocalPlayerDead(bool* IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsLocalPlayerDead");

	Params::BP_UPGameInstance_C_IsLocalPlayerDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDead != nullptr)
		*IsDead = Parms.IsDead;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsLoggedIn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   LoggedIn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsLoggedIn(bool* LoggedIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsLoggedIn");

	Params::BP_UPGameInstance_C_IsLoggedIn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LoggedIn != nullptr)
		*LoggedIn = Parms.LoggedIn;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsSessionFull
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SessionID_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsFull                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsSessionFull(int64 SessionID_0, bool* IsFull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsSessionFull");

	Params::BP_UPGameInstance_C_IsSessionFull Parms{};

	Parms.SessionID_0 = SessionID_0;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFull != nullptr)
		*IsFull = Parms.IsFull;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsTempSaveFile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FString&                    Filename                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   IsTemp                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsTempSaveFile(const class FString& Filename, bool* IsTemp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsTempSaveFile");

	Params::BP_UPGameInstance_C_IsTempSaveFile Parms{};

	Parms.Filename = std::move(Filename);

	UObject::ProcessEvent(Func, &Parms);

	if (IsTemp != nullptr)
		*IsTemp = Parms.IsTemp;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.IsTutorialDone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TutorialStep                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsDone                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::IsTutorialDone(class FName TutorialStep, bool* IsDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "IsTutorialDone");

	Params::BP_UPGameInstance_C_IsTutorialDone Parms{};

	Parms.TutorialStep = TutorialStep;

	UObject::ProcessEvent(Func, &Parms);

	if (IsDone != nullptr)
		*IsDone = Parms.IsDone;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.KickedOutOfSession
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::KickedOutOfSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "KickedOutOfSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.LoadCustomGameConfig
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SaveSlot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsCustomGame_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::LoadCustomGameConfig(int32 SaveSlot, bool* IsCustomGame_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "LoadCustomGameConfig");

	Params::BP_UPGameInstance_C_LoadCustomGameConfig Parms{};

	Parms.SaveSlot = SaveSlot;

	UObject::ProcessEvent(Func, &Parms);

	if (IsCustomGame_0 != nullptr)
		*IsCustomGame_0 = Parms.IsCustomGame_0;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.LoadPlayerSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::LoadPlayerSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "LoadPlayerSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.LoadSavedSession
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::LoadSavedSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "LoadSavedSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.LoadSavedSessionObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    ObjectSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SessionSlot_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USaveGame**                       SaveObject                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::LoadSavedSessionObject(const class FString& ObjectSlot, int32 SessionSlot_0, class USaveGame** SaveObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "LoadSavedSessionObject");

	Params::BP_UPGameInstance_C_LoadSavedSessionObject Parms{};

	Parms.ObjectSlot = std::move(ObjectSlot);
	Parms.SessionSlot_0 = SessionSlot_0;

	UObject::ProcessEvent(Func, &Parms);

	if (SaveObject != nullptr)
		*SaveObject = Parms.SaveObject;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.LoadTutorial
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::LoadTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "LoadTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.MakeIdentification
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    UserId_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const TMap<class FString, struct FBlueprintJsonValue>&UserProperties                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FBlueprintJsonObject*            Identification                                         (Parm, OutParm)

void UBP_UPGameInstance_C::MakeIdentification(const class FString& UserId_0, const TMap<class FString, struct FBlueprintJsonValue>& UserProperties, struct FBlueprintJsonObject* Identification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "MakeIdentification");

	Params::BP_UPGameInstance_C_MakeIdentification Parms{};

	Parms.UserId_0 = std::move(UserId_0);
	Parms.UserProperties = std::move(UserProperties);

	UObject::ProcessEvent(Func, &Parms);

	if (Identification != nullptr)
		*Identification = std::move(Parms.Identification);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OnFailure_3F21F4844E933DB6BDE924BFD6B4CF07
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESIK_Result                             Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESIK_ChatRoomEnterResponse              ChatRoomEnterResponse                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OnFailure_3F21F4844E933DB6BDE924BFD6B4CF07(ESIK_Result Result, bool bLocked, ESIK_ChatRoomEnterResponse ChatRoomEnterResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OnFailure_3F21F4844E933DB6BDE924BFD6B4CF07");

	Params::BP_UPGameInstance_C_OnFailure_3F21F4844E933DB6BDE924BFD6B4CF07 Parms{};

	Parms.Result = Result;
	Parms.bLocked = bLocked;
	Parms.ChatRoomEnterResponse = ChatRoomEnterResponse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OnFailure_C16FC9C64CE22E0C5B9170B23CEA3D5C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESIK_Result                             Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSIK_SteamId&              LobbyID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_UPGameInstance_C::OnFailure_C16FC9C64CE22E0C5B9170B23CEA3D5C(ESIK_Result Result, const struct FSIK_SteamId& LobbyID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OnFailure_C16FC9C64CE22E0C5B9170B23CEA3D5C");

	Params::BP_UPGameInstance_C_OnFailure_C16FC9C64CE22E0C5B9170B23CEA3D5C Parms{};

	Parms.Result = Result;
	Parms.LobbyID_0 = std::move(LobbyID_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OnFailure_D1760A044E6CA70A24A8B6BE23278679
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LobbiesMatching                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OnFailure_D1760A044E6CA70A24A8B6BE23278679(int32 LobbiesMatching)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OnFailure_D1760A044E6CA70A24A8B6BE23278679");

	Params::BP_UPGameInstance_C_OnFailure_D1760A044E6CA70A24A8B6BE23278679 Parms{};

	Parms.LobbiesMatching = LobbiesMatching;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OnSuccess_3F21F4844E933DB6BDE924BFD6B4CF07
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESIK_Result                             Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESIK_ChatRoomEnterResponse              ChatRoomEnterResponse                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OnSuccess_3F21F4844E933DB6BDE924BFD6B4CF07(ESIK_Result Result, bool bLocked, ESIK_ChatRoomEnterResponse ChatRoomEnterResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OnSuccess_3F21F4844E933DB6BDE924BFD6B4CF07");

	Params::BP_UPGameInstance_C_OnSuccess_3F21F4844E933DB6BDE924BFD6B4CF07 Parms{};

	Parms.Result = Result;
	Parms.bLocked = bLocked;
	Parms.ChatRoomEnterResponse = ChatRoomEnterResponse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OnSuccess_C16FC9C64CE22E0C5B9170B23CEA3D5C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESIK_Result                             Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSIK_SteamId&              LobbyID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_UPGameInstance_C::OnSuccess_C16FC9C64CE22E0C5B9170B23CEA3D5C(ESIK_Result Result, const struct FSIK_SteamId& LobbyID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OnSuccess_C16FC9C64CE22E0C5B9170B23CEA3D5C");

	Params::BP_UPGameInstance_C_OnSuccess_C16FC9C64CE22E0C5B9170B23CEA3D5C Parms{};

	Parms.Result = Result;
	Parms.LobbyID_0 = std::move(LobbyID_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OnSuccess_D1760A044E6CA70A24A8B6BE23278679
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LobbiesMatching                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OnSuccess_D1760A044E6CA70A24A8B6BE23278679(int32 LobbiesMatching)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OnSuccess_D1760A044E6CA70A24A8B6BE23278679");

	Params::BP_UPGameInstance_C_OnSuccess_D1760A044E6CA70A24A8B6BE23278679 Parms{};

	Parms.LobbiesMatching = LobbiesMatching;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_AbsoluteServerTravel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    MapName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_AbsoluteServerTravel(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_AbsoluteServerTravel");

	Params::BP_UPGameInstance_C_OS_AbsoluteServerTravel Parms{};

	Parms.MapName = std::move(MapName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_CreateSession
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    SessionName_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    FriendsOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CustomGame                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_CreateSession(const class FString& SessionName_0, bool FriendsOnly, bool CustomGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_CreateSession");

	Params::BP_UPGameInstance_C_OS_CreateSession Parms{};

	Parms.SessionName_0 = std::move(SessionName_0);
	Parms.FriendsOnly = FriendsOnly;
	Parms.CustomGame = CustomGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_EndLogin
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Method                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_EndLogin(int64 SteamID, const class FString& PlayerName, const class FString& Method)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_EndLogin");

	Params::BP_UPGameInstance_C_OS_EndLogin Parms{};

	Parms.SteamID = SteamID;
	Parms.PlayerName = std::move(PlayerName);
	Parms.Method = std::move(Method);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_FindSessions
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESIK_LobbyDistanceFilter                DistanceFilter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IncludeCustomGames                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_FindSessions(ESIK_LobbyDistanceFilter DistanceFilter, bool IncludeCustomGames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_FindSessions");

	Params::BP_UPGameInstance_C_OS_FindSessions Parms{};

	Parms.DistanceFilter = DistanceFilter;
	Parms.IncludeCustomGames = IncludeCustomGames;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_HostMigrated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSIK_SteamId&              LobbyID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    bLocalPlayerHost                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_HostMigrated(const struct FSIK_SteamId& LobbyID_0, bool bLocalPlayerHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_HostMigrated");

	Params::BP_UPGameInstance_C_OS_HostMigrated Parms{};

	Parms.LobbyID_0 = std::move(LobbyID_0);
	Parms.bLocalPlayerHost = bLocalPlayerHost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_InitHostMigration
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::OS_InitHostMigration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_InitHostMigration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_InitInvites
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::OS_InitInvites()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_InitInvites");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_InviteAccepted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FSIK_SteamId&              LobbyID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_UPGameInstance_C::OS_InviteAccepted(const struct FSIK_SteamId& SteamID, const struct FSIK_SteamId& LobbyID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_InviteAccepted");

	Params::BP_UPGameInstance_C_OS_InviteAccepted Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.LobbyID_0 = std::move(LobbyID_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_InviteFriendToSession
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::OS_InviteFriendToSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_InviteFriendToSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_JoinSession
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SessionID_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_JoinSession(int64 SessionID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_JoinSession");

	Params::BP_UPGameInstance_C_OS_JoinSession Parms{};

	Parms.SessionID_0 = SessionID_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_LoginWithSteam
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::OS_LoginWithSteam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_LoginWithSteam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_PrepareHostMigration
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPrivate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_PrepareHostMigration(bool IsPrivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_PrepareHostMigration");

	Params::BP_UPGameInstance_C_OS_PrepareHostMigration Parms{};

	Parms.IsPrivate = IsPrivate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_ServerTravel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    MapName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_ServerTravel(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_ServerTravel");

	Params::BP_UPGameInstance_C_OS_ServerTravel Parms{};

	Parms.MapName = std::move(MapName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_SetSessionFriendsOnly
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FriendsOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::OS_SetSessionFriendsOnly(bool FriendsOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_SetSessionFriendsOnly");

	Params::BP_UPGameInstance_C_OS_SetSessionFriendsOnly Parms{};

	Parms.FriendsOnly = FriendsOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.OS_StopSession
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::OS_StopSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "OS_StopSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.PlayerCreated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::PlayerCreated(class ABP_UPPlayerCharacter_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "PlayerCreated");

	Params::BP_UPGameInstance_C_PlayerCreated Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.PlayerDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::PlayerDestroyed(class ABP_UPPlayerCharacter_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "PlayerDestroyed");

	Params::BP_UPGameInstance_C_PlayerDestroyed Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.PostLogin
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    UserId_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Username                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    LoginMethod                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::PostLogin(const class FString& UserId_0, const class FString& Username, const class FString& LoginMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "PostLogin");

	Params::BP_UPGameInstance_C_PostLogin Parms{};

	Parms.UserId_0 = std::move(UserId_0);
	Parms.Username = std::move(Username);
	Parms.LoginMethod = std::move(LoginMethod);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ProcessSteamLobbies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IncludeCustomGames                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_FindSessionsResult*           Result                                                 (Parm, OutParm, HasGetValueTypeHash)

void UBP_UPGameInstance_C::ProcessSteamLobbies(int32 Count, bool IncludeCustomGames, struct FS_FindSessionsResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ProcessSteamLobbies");

	Params::BP_UPGameInstance_C_ProcessSteamLobbies Parms{};

	Parms.Count = Count;
	Parms.IncludeCustomGames = IncludeCustomGames;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.PullPendingEvents
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   HasEvents                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBlueprintJsonValue>*     EventsArray                                            (ConstParm, Parm, OutParm)

void UBP_UPGameInstance_C::PullPendingEvents(bool* HasEvents, TArray<struct FBlueprintJsonValue>* EventsArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "PullPendingEvents");

	Params::BP_UPGameInstance_C_PullPendingEvents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasEvents != nullptr)
		*HasEvents = Parms.HasEvents;

	if (EventsArray != nullptr)
		*EventsArray = std::move(Parms.EventsArray);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ReceiveInit
// (Event, Public, BlueprintEvent)

void UBP_UPGameInstance_C::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ReceiveInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ReceiveShutdown
// (Event, Public, BlueprintEvent)

void UBP_UPGameInstance_C::ReceiveShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ReceiveShutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.RemoveLoadingWidget
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::RemoveLoadingWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "RemoveLoadingWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SaveCustomGameConfig
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SaveCustomGameConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SaveCustomGameConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SaveInputsSettings
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SaveInputsSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SaveInputsSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SavePlayerSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SavePlayerSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SavePlayerSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SavePlayersIfInSession
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SavePlayersIfInSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SavePlayersIfInSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SaveSession
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SaveSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SaveSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SaveSessionObject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        ObjectSave                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class FString&                    ObjectSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SessionSlot_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SaveSessionObject(class USaveGame* ObjectSave, const class FString& ObjectSlot, int32 SessionSlot_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SaveSessionObject");

	Params::BP_UPGameInstance_C_SaveSessionObject Parms{};

	Parms.ObjectSave = ObjectSave;
	Parms.ObjectSlot = std::move(ObjectSlot);
	Parms.SessionSlot_0 = SessionSlot_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SaveTutorial
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SaveTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SaveTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendAttackedEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ragdoll                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SourceLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Dismemberment                         Dismemberment                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DeathType                             DeathType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SendAttackedEvent(int32 Damage, bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendAttackedEvent");

	Params::BP_UPGameInstance_C_SendAttackedEvent Parms{};

	Parms.Damage = Damage;
	Parms.Ragdoll = Ragdoll;
	Parms.SourceLocation = std::move(SourceLocation);
	Parms.Force = Force;
	Parms.Dismemberment = Dismemberment;
	Parms.DeathType = DeathType;
	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendDayEndEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPGameSession_C*              GameSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SendDayEndEvent(class ABP_UPGameSession_C* GameSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendDayEndEvent");

	Params::BP_UPGameInstance_C_SendDayEndEvent Parms{};

	Parms.GameSession = GameSession;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendDayStartEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SendDayStartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendDayStartEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendEnterHQEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SendEnterHQEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendEnterHQEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBlueprintJsonObject&      Event                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_UPGameInstance_C::SendEvent(const struct FBlueprintJsonObject& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendEvent");

	Params::BP_UPGameInstance_C_SendEvent Parms{};

	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendEvents
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SendEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendEventWithProperties
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const TMap<class FString, struct FBlueprintJsonValue>&properties                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_UPGameInstance_C::SendEventWithProperties(const class FString& EventName, const TMap<class FString, struct FBlueprintJsonValue>& properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendEventWithProperties");

	Params::BP_UPGameInstance_C_SendEventWithProperties Parms{};

	Parms.EventName = std::move(EventName);
	Parms.properties = std::move(properties);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendIdentify
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FString, struct FBlueprintJsonValue>&properties                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_UPGameInstance_C::SendIdentify(const TMap<class FString, struct FBlueprintJsonValue>& properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendIdentify");

	Params::BP_UPGameInstance_C_SendIdentify Parms{};

	Parms.properties = std::move(properties);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendInteriorEnterEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SendInteriorEnterEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendInteriorEnterEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendInteriorQuitEvent
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::SendInteriorQuitEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendInteriorQuitEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendKilledEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_KillableCharacter_C*          KilledCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SendKilledEvent(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendKilledEvent");

	Params::BP_UPGameInstance_C_SendKilledEvent Parms{};

	Parms.KilledCharacter = KilledCharacter;
	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendResultsEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Episodes_C*                   Episodes                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SendResultsEvent(class ABP_Episodes_C* Episodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendResultsEvent");

	Params::BP_UPGameInstance_C_SendResultsEvent Parms{};

	Parms.Episodes = Episodes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SendSimpleEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SendSimpleEvent(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SendSimpleEvent");

	Params::BP_UPGameInstance_C_SendSimpleEvent Parms{};

	Parms.EventName = std::move(EventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SessionCreated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPrivate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SessionCreated(bool IsPrivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SessionCreated");

	Params::BP_UPGameInstance_C_SessionCreated Parms{};

	Parms.IsPrivate = IsPrivate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SessionJoined
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPrivate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SessionJoined(bool IsPrivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SessionJoined");

	Params::BP_UPGameInstance_C_SessionJoined Parms{};

	Parms.IsPrivate = IsPrivate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetAntiAliasingMethod
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AntiAliasingMethod                    AntiAliasingMethod_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetAntiAliasingMethod(E_AntiAliasingMethod AntiAliasingMethod_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetAntiAliasingMethod");

	Params::BP_UPGameInstance_C_SetAntiAliasingMethod Parms{};

	Parms.AntiAliasingMethod_0 = AntiAliasingMethod_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetBaseFov
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BaseFOV_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetBaseFov(double BaseFOV_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetBaseFov");

	Params::BP_UPGameInstance_C_SetBaseFov Parms{};

	Parms.BaseFOV_0 = BaseFOV_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetCinematicRatioEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CinematicRatioEnabled_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetCinematicRatioEnabled(bool CinematicRatioEnabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetCinematicRatioEnabled");

	Params::BP_UPGameInstance_C_SetCinematicRatioEnabled Parms{};

	Parms.CinematicRatioEnabled_0 = CinematicRatioEnabled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetHeadBobbingEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HeadBobbingEnabled_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetHeadBobbingEnabled(bool HeadBobbingEnabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetHeadBobbingEnabled");

	Params::BP_UPGameInstance_C_SetHeadBobbingEnabled Parms{};

	Parms.HeadBobbingEnabled_0 = HeadBobbingEnabled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetInvertMouseX
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InvertMouseX                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetInvertMouseX(bool InvertMouseX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetInvertMouseX");

	Params::BP_UPGameInstance_C_SetInvertMouseX Parms{};

	Parms.InvertMouseX = InvertMouseX;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetInvertMouseY
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InvertMouseY                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetInvertMouseY(bool InvertMouseY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetInvertMouseY");

	Params::BP_UPGameInstance_C_SetInvertMouseY Parms{};

	Parms.InvertMouseY = InvertMouseY;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetLobbyMusicEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LobbyMusicEnabled_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetLobbyMusicEnabled(bool LobbyMusicEnabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetLobbyMusicEnabled");

	Params::BP_UPGameInstance_C_SetLobbyMusicEnabled Parms{};

	Parms.LobbyMusicEnabled_0 = LobbyMusicEnabled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetLookSensitivity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetLookSensitivity(double Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetLookSensitivity");

	Params::BP_UPGameInstance_C_SetLookSensitivity Parms{};

	Parms.Sensitivity = Sensitivity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetMasterVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MasterVolume_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetMasterVolume(double MasterVolume_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetMasterVolume");

	Params::BP_UPGameInstance_C_SetMasterVolume Parms{};

	Parms.MasterVolume_0 = MasterVolume_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetNoGoreModeEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoGoreModeEnabled_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetNoGoreModeEnabled(bool NoGoreModeEnabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetNoGoreModeEnabled");

	Params::BP_UPGameInstance_C_SetNoGoreModeEnabled Parms{};

	Parms.NoGoreModeEnabled_0 = NoGoreModeEnabled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetRenderScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RenderScale_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetRenderScale(double RenderScale_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetRenderScale");

	Params::BP_UPGameInstance_C_SetRenderScale Parms{};

	Parms.RenderScale_0 = RenderScale_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetTutorialDone
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TutorialStep                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetTutorialDone(class FName TutorialStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetTutorialDone");

	Params::BP_UPGameInstance_C_SetTutorialDone Parms{};

	Parms.TutorialStep = TutorialStep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetUserPropertyInt
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetUserPropertyInt(const class FString& Key, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetUserPropertyInt");

	Params::BP_UPGameInstance_C_SetUserPropertyInt Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.SetUserPropertyString
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::SetUserPropertyString(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "SetUserPropertyString");

	Params::BP_UPGameInstance_C_SetUserPropertyString Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ShouldShowSessionSurvey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::ShouldShowSessionSurvey(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ShouldShowSessionSurvey");

	Params::BP_UPGameInstance_C_ShouldShowSessionSurvey Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.ShowLoading
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    MapName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CurrentPoints                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Objective                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RemainingDays                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::ShowLoading(const class FString& MapName, int32 Difficulty, int32 CurrentPoints, int32 Objective, int32 RemainingDays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "ShowLoading");

	Params::BP_UPGameInstance_C_ShowLoading Parms{};

	Parms.MapName = std::move(MapName);
	Parms.Difficulty = Difficulty;
	Parms.CurrentPoints = CurrentPoints;
	Parms.Objective = Objective;
	Parms.RemainingDays = RemainingDays;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.StoreAchievements
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::StoreAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "StoreAchievements");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.UnlockAchievement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::UnlockAchievement(const class FString& AchievementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "UnlockAchievement");

	Params::BP_UPGameInstance_C_UnlockAchievement Parms{};

	Parms.AchievementName = std::move(AchievementName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.UpdateGamepadUsage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUsingGamepad_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UPGameInstance_C::UpdateGamepadUsage(bool IsUsingGamepad_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "UpdateGamepadUsage");

	Params::BP_UPGameInstance_C_UpdateGamepadUsage Parms{};

	Parms.IsUsingGamepad_0 = IsUsingGamepad_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameInstance.BP_UPGameInstance_C.UpdateMasterSoundMix
// (BlueprintCallable, BlueprintEvent)

void UBP_UPGameInstance_C::UpdateMasterSoundMix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameInstance_C", "UpdateMasterSoundMix");

	UObject::ProcessEvent(Func, nullptr);
}

}

