#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerInventory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_InventoryItem_structs.hpp"
#include "E_Emote_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_PlayerInventory.BPC_PlayerInventory_C
// 0x00A0 (0x0140 - 0x00A0)
class UBPC_PlayerInventory_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         MaxItems;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_InventoryItem>                       Items;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, Net)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_InventoryItem_C*>            SpawnedItems;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         CurrentItemIndex;                                  // 0x00D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UPPlayerCharacter_C*                Player;                                            // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_InventoryItem_C*                    CurrentItem;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdPersonItemParent;                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_InventoryItem_C* Item)> OnItemEquipped;                  // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnItemAdded__Server_;                              // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnItemRemoved__Server_;                            // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBPC_PlayerDialogue_C*                  PlayerDialogue;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ItemSwitchSound;                                   // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ItemDroppedSound;                                  // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddItem(E_InventoryItem Item, int32 ItemId, bool* Success);
	void AddTestItemsIfNeeded();
	void AttachCurrentItem(class USkeletalMeshComponent* Parent);
	void AttachItem(double Delay, class ABP_InventoryItem_C* Item, class USceneComponent* Parent);
	void AutoAttachCurrrentItem();
	void AutoAttachItem(double Delay, class ABP_InventoryItem_C* Item);
	void BuyShopItem(const E_InventoryItem Item);
	void CanAddItem(E_InventoryItem Item, bool* Result, class FString* Reason);
	void CanChangeItem(bool* Result);
	void CheckItemID(int32 InItemID, int32* ItemId);
	void EmoteStarted(E_Emote Emote);
	void EmoteStopped();
	void EquipItem(int32 ItemIndex);
	void EquipNextItem();
	void EquipPreviousItem();
	void ExecuteUbergraph_BPC_PlayerInventory(int32 EntryPoint);
	void GetAttachDelay(double* Delay);
	void GetBaseTypeName(E_InventoryItem Item, class FString* ItemTypeName);
	void GetDropTransform(struct FTransform* DropTransform);
	void GetShopItemPrice(const E_InventoryItem& Item, int32* Price);
	void HasCamera(bool* Result);
	void HasItemOfType(const class FString& TypeName, bool* Result);
	void Init__All_();
	void Init__Server_();
	void InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_NextInventoryItem_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PreviousInventoryItem_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ThrowInventoryItem_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UseInventoryItem_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void IsLowPrioItem(E_InventoryItem Item, bool* Result);
	void LoadInventory(TArray<struct FS_InventoryItemSave>& Inventory, bool* ItemsAddedToStock);
	void OnRep_CurrentItem();
	void PlayerKilled__Server_(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void RagdollChanged(bool IsInRagdoll);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemoveAllItems();
	void SetCurrentItemFocus(bool Focus);
	void SpawnItem(class ABP_UPPlayerCharacter_C* Player_0, E_InventoryItem Item, int32 ItemId, class ABP_InventoryItem_C** SpawnedItem);
	void ThrowItem(bool CreatePickable);
	void ToggleUseCurrentItem();
	void UnEquipCurrentItem();
	void UpdateCapacity(int32 MaxItems_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_PlayerInventory_C">();
	}
	static class UBPC_PlayerInventory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_PlayerInventory_C>();
	}
};
static_assert(alignof(UBPC_PlayerInventory_C) == 0x000008, "Wrong alignment on UBPC_PlayerInventory_C");
static_assert(sizeof(UBPC_PlayerInventory_C) == 0x000140, "Wrong size on UBPC_PlayerInventory_C");
static_assert(offsetof(UBPC_PlayerInventory_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_PlayerInventory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, MaxItems) == 0x0000A8, "Member 'UBPC_PlayerInventory_C::MaxItems' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, Items) == 0x0000B0, "Member 'UBPC_PlayerInventory_C::Items' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, GameInstance) == 0x0000C0, "Member 'UBPC_PlayerInventory_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, SpawnedItems) == 0x0000C8, "Member 'UBPC_PlayerInventory_C::SpawnedItems' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, CurrentItemIndex) == 0x0000D8, "Member 'UBPC_PlayerInventory_C::CurrentItemIndex' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, Player) == 0x0000E0, "Member 'UBPC_PlayerInventory_C::Player' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, CurrentItem) == 0x0000E8, "Member 'UBPC_PlayerInventory_C::CurrentItem' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, ThirdPersonItemParent) == 0x0000F0, "Member 'UBPC_PlayerInventory_C::ThirdPersonItemParent' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, OnItemEquipped) == 0x0000F8, "Member 'UBPC_PlayerInventory_C::OnItemEquipped' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, OnItemAdded__Server_) == 0x000108, "Member 'UBPC_PlayerInventory_C::OnItemAdded__Server_' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, OnItemRemoved__Server_) == 0x000118, "Member 'UBPC_PlayerInventory_C::OnItemRemoved__Server_' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, PlayerDialogue) == 0x000128, "Member 'UBPC_PlayerInventory_C::PlayerDialogue' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, ItemSwitchSound) == 0x000130, "Member 'UBPC_PlayerInventory_C::ItemSwitchSound' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerInventory_C, ItemDroppedSound) == 0x000138, "Member 'UBPC_PlayerInventory_C::ItemDroppedSound' has a wrong offset!");

}

