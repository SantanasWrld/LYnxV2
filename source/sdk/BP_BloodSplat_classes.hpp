#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BloodSplat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BloodSplat.BP_BloodSplat_C
// 0x0060 (0x02F8 - 0x0298)
class ABP_BloodSplat_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_ScoringComponent_C*                ScoringComponent;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             DecalMaterials;                                    // 0x02B8(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorToIgnore;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	struct FVector                                DecalSize;                                         // 0x02E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BloodSplat(int32 EntryPoint);
	void GetRandomDecal(class UMaterialInterface** OutItem);
	void OnRep_DecalMaterial();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BloodSplat_C">();
	}
	static class ABP_BloodSplat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BloodSplat_C>();
	}
};
static_assert(alignof(ABP_BloodSplat_C) == 0x000008, "Wrong alignment on ABP_BloodSplat_C");
static_assert(sizeof(ABP_BloodSplat_C) == 0x0002F8, "Wrong size on ABP_BloodSplat_C");
static_assert(offsetof(ABP_BloodSplat_C, UberGraphFrame) == 0x000298, "Member 'ABP_BloodSplat_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BloodSplat_C, ScoringComponent) == 0x0002A0, "Member 'ABP_BloodSplat_C::ScoringComponent' has a wrong offset!");
static_assert(offsetof(ABP_BloodSplat_C, Decal) == 0x0002A8, "Member 'ABP_BloodSplat_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_BloodSplat_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_BloodSplat_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BloodSplat_C, DecalMaterials) == 0x0002B8, "Member 'ABP_BloodSplat_C::DecalMaterials' has a wrong offset!");
static_assert(offsetof(ABP_BloodSplat_C, DecalMaterial) == 0x0002C8, "Member 'ABP_BloodSplat_C::DecalMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BloodSplat_C, ActorToIgnore) == 0x0002D0, "Member 'ABP_BloodSplat_C::ActorToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_BloodSplat_C, DecalSize) == 0x0002E0, "Member 'ABP_BloodSplat_C::DecalSize' has a wrong offset!");

}

