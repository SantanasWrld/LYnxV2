#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Velociralien

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "IKRig_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_Velociralien_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Velociralien.ABP_Velociralien_C
// 0x05C0 (0x0910 - 0x0350)
class UABP_Velociralien_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Velociralien::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;             // 0x0358(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0370(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0390(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x03B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0408(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0430(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0478(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0498(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x04E0(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0500(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0570(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0590(0x00C8)()
	struct FAnimNode_IKRig                        AnimGraphNode_IKRig;                               // 0x0658(0x01E0)()
	double                                        __CustomProperty_PositionAlpha_TailGoal_0071016E47118FFC0DFE078B6F8F2757; // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Position_TailGoal_0071016E47118FFC0DFE078B6F8F2757; // 0x0840(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_RotationAlpha_HeadGoal_0071016E47118FFC0DFE078B6F8F2757; // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               __CustomProperty_Rotation_HeadGoal_0071016E47118FFC0DFE078B6F8F2757; // 0x0860(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        __CustomProperty_PositionAlpha_HeadGoal_0071016E47118FFC0DFE078B6F8F2757; // 0x0878(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Position_HeadGoal_0071016E47118FFC0DFE078B6F8F2757; // 0x0880(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Velociralien_C*                     Velociralien;                                      // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacking;                                       // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideHeadTransform;                             // 0x08A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8AA[0x6];                                      // 0x08AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HeadLocation;                                      // 0x08B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadRotation;                                      // 0x08C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverrideTailLocation;                              // 0x08E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E1[0x7];                                      // 0x08E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TailLocation;                                      // 0x08E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGrawling;                                        // 0x0900(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify_FootstepRun();
	void AnimNotify_FootStepWalk();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Velociralien_AnimGraphNode_IKRig_0071016E47118FFC0DFE078B6F8F2757();
	void ExecuteUbergraph_ABP_Velociralien(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Velociralien_C">();
	}
	static class UABP_Velociralien_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Velociralien_C>();
	}
};
static_assert(alignof(UABP_Velociralien_C) == 0x000010, "Wrong alignment on UABP_Velociralien_C");
static_assert(sizeof(UABP_Velociralien_C) == 0x000910, "Wrong size on UABP_Velociralien_C");
static_assert(offsetof(UABP_Velociralien_C, UberGraphFrame) == 0x000350, "Member 'UABP_Velociralien_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, __AnimBlueprintMutables) == 0x000358, "Member 'UABP_Velociralien_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimBlueprintExtension_PropertyAccess) == 0x000360, "Member 'UABP_Velociralien_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UABP_Velociralien_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_Root) == 0x000370, "Member 'UABP_Velociralien_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_TransitionResult_3) == 0x000390, "Member 'UABP_Velociralien_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_TransitionResult_2) == 0x0003B8, "Member 'UABP_Velociralien_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_TransitionResult_1) == 0x0003E0, "Member 'UABP_Velociralien_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_TransitionResult) == 0x000408, "Member 'UABP_Velociralien_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_SequencePlayer_1) == 0x000430, "Member 'UABP_Velociralien_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_StateResult_2) == 0x000478, "Member 'UABP_Velociralien_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_SequencePlayer) == 0x000498, "Member 'UABP_Velociralien_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_StateResult_1) == 0x0004E0, "Member 'UABP_Velociralien_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_BlendSpacePlayer) == 0x000500, "Member 'UABP_Velociralien_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_StateResult) == 0x000570, "Member 'UABP_Velociralien_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_StateMachine) == 0x000590, "Member 'UABP_Velociralien_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, AnimGraphNode_IKRig) == 0x000658, "Member 'UABP_Velociralien_C::AnimGraphNode_IKRig' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, __CustomProperty_PositionAlpha_TailGoal_0071016E47118FFC0DFE078B6F8F2757) == 0x000838, "Member 'UABP_Velociralien_C::__CustomProperty_PositionAlpha_TailGoal_0071016E47118FFC0DFE078B6F8F2757' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, __CustomProperty_Position_TailGoal_0071016E47118FFC0DFE078B6F8F2757) == 0x000840, "Member 'UABP_Velociralien_C::__CustomProperty_Position_TailGoal_0071016E47118FFC0DFE078B6F8F2757' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, __CustomProperty_RotationAlpha_HeadGoal_0071016E47118FFC0DFE078B6F8F2757) == 0x000858, "Member 'UABP_Velociralien_C::__CustomProperty_RotationAlpha_HeadGoal_0071016E47118FFC0DFE078B6F8F2757' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, __CustomProperty_Rotation_HeadGoal_0071016E47118FFC0DFE078B6F8F2757) == 0x000860, "Member 'UABP_Velociralien_C::__CustomProperty_Rotation_HeadGoal_0071016E47118FFC0DFE078B6F8F2757' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, __CustomProperty_PositionAlpha_HeadGoal_0071016E47118FFC0DFE078B6F8F2757) == 0x000878, "Member 'UABP_Velociralien_C::__CustomProperty_PositionAlpha_HeadGoal_0071016E47118FFC0DFE078B6F8F2757' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, __CustomProperty_Position_HeadGoal_0071016E47118FFC0DFE078B6F8F2757) == 0x000880, "Member 'UABP_Velociralien_C::__CustomProperty_Position_HeadGoal_0071016E47118FFC0DFE078B6F8F2757' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, Velociralien) == 0x000898, "Member 'UABP_Velociralien_C::Velociralien' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, Speed) == 0x0008A0, "Member 'UABP_Velociralien_C::Speed' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, IsAttacking) == 0x0008A8, "Member 'UABP_Velociralien_C::IsAttacking' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, OverrideHeadTransform) == 0x0008A9, "Member 'UABP_Velociralien_C::OverrideHeadTransform' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, HeadLocation) == 0x0008B0, "Member 'UABP_Velociralien_C::HeadLocation' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, HeadRotation) == 0x0008C8, "Member 'UABP_Velociralien_C::HeadRotation' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, OverrideTailLocation) == 0x0008E0, "Member 'UABP_Velociralien_C::OverrideTailLocation' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, TailLocation) == 0x0008E8, "Member 'UABP_Velociralien_C::TailLocation' has a wrong offset!");
static_assert(offsetof(UABP_Velociralien_C, IsGrawling) == 0x000900, "Member 'UABP_Velociralien_C::IsGrawling' has a wrong offset!");

}

