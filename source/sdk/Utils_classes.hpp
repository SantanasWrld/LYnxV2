#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Utils

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ScoringActorState_structs.hpp"
#include "E_InventoryItem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Utils.Utils_C
// 0x0000 (0x0028 - 0x0028)
class UUtils_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetDangerForDifficulty(int32 Difficulty, class UObject* __WorldContext, double* Danger);
	static void SetPercentageValue(class UTextBlock* Text, double Value, class UObject* __WorldContext);
	static void GetPawnNavData(class APawn* Pawn, class UObject* __WorldContext, class ARecastNavMesh** NavData);
	static void GetControllerNavData(class AController* Controller, class UObject* __WorldContext, class ARecastNavMesh** NavData);
	static void ExportTextureAsJpg(class UTexture2D* Texture, class UObject* __WorldContext, bool* Success);
	static void ApplyHeadMorphTargets(class USkeletalMeshComponent* HeadMesh, const struct FS_AvatarHeadMorphTargets& MorphTargets, class UObject* __WorldContext);
	static void GetCapturedActorDisplayName(const struct FS_CameroidActorScore& ActorScore, class UObject* __WorldContext, class FString* DisplayName);
	static void IsNoBloodModeEnabled(class UObject* __WorldContext, bool* NoBloodModeEnabled);
	static void LoadAvatarMesh(class USkeletalMeshComponent* Mesh, class USkeletalMeshComponent* HeadMesh, const struct FS_PlayerAvatar& Avatar, class UObject* __WorldContext);
	static void GetInteriorVolume(const struct FVector& Location, class UObject* __WorldContext, class ABP_InteriorVolume_C** InteriorVolume);
	static void InstantFear(class AActor* Initiatior, double Radius, double MinFear, class UObject* __WorldContext);
	static void IsInFrustrum(const struct FVector& Point, const struct FVector& CameraLocation, const struct FRotator& CameraRotation, double HorizontalHalfFov, double VerticalHalfFov, class UObject* __WorldContext, bool* Result);
	static void OneShotRadialImpulse(class URadialForceComponent* RadialForce, class UObject* __WorldContext);
	static void IsSessionHost(const class UObject* WorldContextObject, class UObject* __WorldContext, bool* IsHost);
	static void GetInventoryItemSaveSlot(int32 ItemId, class UObject* __WorldContext, class FString* Slot);
	static void GetInventoryItemInfo(const class UObject*& Context, const E_InventoryItem& Item, class UObject* __WorldContext, struct FS_InventoryItem* ItemInfo);
	static void PrettifyBPClassName(class UClass* Class_0, class UObject* __WorldContext, class FString* Name_0);
	static void CanShowInputWidget(class UWidget* Widget, class UObject* __WorldContext, bool* CanOpen);
	static void HideInputWidget(class UWidget* Widget, class UObject* __WorldContext);
	static void ShowImmersiveWidget(class UWidget* Widget, class UObject* __WorldContext);
	static void ShowInputWidget(class UWidget* Widget, bool OnlyUI, class UObject* __WorldContext);
	static void IsNotEmpty(TArray<class UObject*>& Array, class UObject* __WorldContext, bool* IsNotEmpty_0);

	void GetAffinity(const TMap<class UClass*, bool>& Affinities, class AActor* Actor, class UObject* __WorldContext, bool* Affinity);
	void GetMaxScore(TArray<struct FS_CameroidActorScore>& ActorsScores, class UObject* __WorldContext, int32* MaxScore, int32* Index_0);
	void GetSortedActorsScores(const struct FS_CameroidCapture& Capture, class UObject* __WorldContext, TArray<struct FS_CameroidActorScore>* ActorsScores);
	void GetTeleportSkinnedMeshLocation(class USkinnedMeshComponent* Mesh, class FName BoneName, const struct FVector& Location, class UObject* __WorldContext, struct FVector* TeleportLocation);
	void TeleportSkinnedMesh(class USkinnedMeshComponent* Mesh, class FName BoneName, const struct FVector& Location, class UObject* __WorldContext);
	void PredictActorLocation(class AActor* Actor, double Time, class UObject* __WorldContext, struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Utils_C">();
	}
	static class UUtils_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUtils_C>();
	}
};
static_assert(alignof(UUtils_C) == 0x000008, "Wrong alignment on UUtils_C");
static_assert(sizeof(UUtils_C) == 0x000028, "Wrong size on UUtils_C");

}

