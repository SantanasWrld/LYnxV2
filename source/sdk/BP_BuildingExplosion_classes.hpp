#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BuildingExplosion

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Explosion_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BuildingExplosion.BP_BuildingExplosion_C
// 0x0060 (0x0380 - 0x0320)
class ABP_BuildingExplosion_C : public ABP_Explosion_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BuildingExplosion_C;             // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   FireLight;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Fire_Scoring_Box;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FragmentsSpawnBox;                                 // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                Fire_Scoring;                                      // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FireParticles;                                     // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Fragments;                                         // 0x0350(0x0010)(Edit, BlueprintVisible)
	int32                                         FragmentsCount;                                    // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FragmentMinScale;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FragmentMaxScale;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PersistentFire;                                    // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Explode__Server_();
	void SpawnFragments();
	void OnRep_Exploded();
	void ExecuteUbergraph_BP_BuildingExplosion(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BuildingExplosion_C">();
	}
	static class ABP_BuildingExplosion_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BuildingExplosion_C>();
	}
};
static_assert(alignof(ABP_BuildingExplosion_C) == 0x000008, "Wrong alignment on ABP_BuildingExplosion_C");
static_assert(sizeof(ABP_BuildingExplosion_C) == 0x000380, "Wrong size on ABP_BuildingExplosion_C");
static_assert(offsetof(ABP_BuildingExplosion_C, UberGraphFrame_BP_BuildingExplosion_C) == 0x000320, "Member 'ABP_BuildingExplosion_C::UberGraphFrame_BP_BuildingExplosion_C' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, FireLight) == 0x000328, "Member 'ABP_BuildingExplosion_C::FireLight' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, Fire_Scoring_Box) == 0x000330, "Member 'ABP_BuildingExplosion_C::Fire_Scoring_Box' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, FragmentsSpawnBox) == 0x000338, "Member 'ABP_BuildingExplosion_C::FragmentsSpawnBox' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, Fire_Scoring) == 0x000340, "Member 'ABP_BuildingExplosion_C::Fire_Scoring' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, FireParticles) == 0x000348, "Member 'ABP_BuildingExplosion_C::FireParticles' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, Fragments) == 0x000350, "Member 'ABP_BuildingExplosion_C::Fragments' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, FragmentsCount) == 0x000360, "Member 'ABP_BuildingExplosion_C::FragmentsCount' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, FragmentMinScale) == 0x000368, "Member 'ABP_BuildingExplosion_C::FragmentMinScale' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, FragmentMaxScale) == 0x000370, "Member 'ABP_BuildingExplosion_C::FragmentMaxScale' has a wrong offset!");
static_assert(offsetof(ABP_BuildingExplosion_C, PersistentFire) == 0x000378, "Member 'ABP_BuildingExplosion_C::PersistentFire' has a wrong offset!");

}

