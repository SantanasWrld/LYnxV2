#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Batogon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Batogon.ABP_Batogon_C
// 0x08E0 (0x0C30 - 0x0350)
class UABP_Batogon_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_BlendSpaceGraph;            // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0370(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0390(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x03B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0408(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0430(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0458(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_13;                   // 0x0480(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x04C8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_12;                   // 0x04E8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0530(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x0550(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_10;           // 0x0598(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x05B8(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_9;            // 0x0600(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x0620(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_8;            // 0x0668(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x0688(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_7;            // 0x06D0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x06F0(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_6;            // 0x0738(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x0758(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_5;            // 0x07A0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x07C0(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_4;            // 0x0808(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0828(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_3;            // 0x0870(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0890(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_2;            // 0x08D8(0x0020)()
	struct FAnimNode_BlendSpaceGraph              AnimGraphNode_BlendSpaceGraph_1;                   // 0x08F8(0x0068)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0960(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0980(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x09C8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x09E8(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult_1;            // 0x0A30(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0A50(0x0048)()
	struct FAnimNode_BlendSpaceSampleResult       AnimGraphNode_BlendSpaceSampleResult;              // 0x0A98(0x0020)()
	struct FAnimNode_BlendSpaceGraph              AnimGraphNode_BlendSpaceGraph;                     // 0x0AB8(0x0068)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0B20(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0B40(0x00C8)()
	double                                        Speed;                                             // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForwardSpeed;                                      // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalSpeed;                                     // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlying;                                          // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGrawling;                                        // 0x0C21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C22[0x6];                                      // 0x0C22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Batogon_C*                          Batogon;                                           // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify_Footstep();
	void AnimNotify_Wingbeat();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Batogon_AnimGraphNode_TransitionResult_8F1B547246E94293425CEEA5A26E417A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Batogon_AnimGraphNode_TransitionResult_AF2A86A8410CEC2A3BC9A7A7E63248C1();
	void ExecuteUbergraph_ABP_Batogon(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Batogon_C">();
	}
	static class UABP_Batogon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Batogon_C>();
	}
};
static_assert(alignof(UABP_Batogon_C) == 0x000010, "Wrong alignment on UABP_Batogon_C");
static_assert(sizeof(UABP_Batogon_C) == 0x000C30, "Wrong size on UABP_Batogon_C");
static_assert(offsetof(UABP_Batogon_C, UberGraphFrame) == 0x000350, "Member 'UABP_Batogon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UABP_Batogon_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimBlueprintExtension_BlendSpaceGraph) == 0x000360, "Member 'UABP_Batogon_C::AnimBlueprintExtension_BlendSpaceGraph' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UABP_Batogon_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_Root) == 0x000370, "Member 'UABP_Batogon_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_TransitionResult_5) == 0x000390, "Member 'UABP_Batogon_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_TransitionResult_4) == 0x0003B8, "Member 'UABP_Batogon_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_TransitionResult_3) == 0x0003E0, "Member 'UABP_Batogon_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_TransitionResult_2) == 0x000408, "Member 'UABP_Batogon_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_TransitionResult_1) == 0x000430, "Member 'UABP_Batogon_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_TransitionResult) == 0x000458, "Member 'UABP_Batogon_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_13) == 0x000480, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_13' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_StateResult_4) == 0x0004C8, "Member 'UABP_Batogon_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_12) == 0x0004E8, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_12' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_StateResult_3) == 0x000530, "Member 'UABP_Batogon_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_11) == 0x000550, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_10) == 0x000598, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_10' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_10) == 0x0005B8, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_9) == 0x000600, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_9) == 0x000620, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_8) == 0x000668, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_8) == 0x000688, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_7) == 0x0006D0, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_7) == 0x0006F0, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_6) == 0x000738, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_6) == 0x000758, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_5) == 0x0007A0, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_5) == 0x0007C0, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_4) == 0x000808, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_4) == 0x000828, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_3) == 0x000870, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_3) == 0x000890, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_2) == 0x0008D8, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceGraph_1) == 0x0008F8, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceGraph_1' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_StateResult_2) == 0x000960, "Member 'UABP_Batogon_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_2) == 0x000980, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_StateResult_1) == 0x0009C8, "Member 'UABP_Batogon_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer_1) == 0x0009E8, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult_1) == 0x000A30, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_SequencePlayer) == 0x000A50, "Member 'UABP_Batogon_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceSampleResult) == 0x000A98, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceSampleResult' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_BlendSpaceGraph) == 0x000AB8, "Member 'UABP_Batogon_C::AnimGraphNode_BlendSpaceGraph' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_StateResult) == 0x000B20, "Member 'UABP_Batogon_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, AnimGraphNode_StateMachine) == 0x000B40, "Member 'UABP_Batogon_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, Speed) == 0x000C08, "Member 'UABP_Batogon_C::Speed' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, ForwardSpeed) == 0x000C10, "Member 'UABP_Batogon_C::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, VerticalSpeed) == 0x000C18, "Member 'UABP_Batogon_C::VerticalSpeed' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, IsFlying) == 0x000C20, "Member 'UABP_Batogon_C::IsFlying' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, IsGrawling) == 0x000C21, "Member 'UABP_Batogon_C::IsGrawling' has a wrong offset!");
static_assert(offsetof(UABP_Batogon_C, Batogon) == 0x000C28, "Member 'UABP_Batogon_C::Batogon' has a wrong offset!");

}

