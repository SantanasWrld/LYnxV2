#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_CameroidCaptureGroup_structs.hpp"
#include "S_InventoryItemSave_structs.hpp"
#include "S_CameroidCapture_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UPGameState.BP_UPGameState_C
// 0x00E8 (0x03D8 - 0x02F0)
class ABP_UPGameState_C final : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 GameSlotName;                                      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 TopCapturesSaveSlotName;                           // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<int64>                                 SteamIds;                                          // 0x0320(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FS_CameroidCaptureGroup>        Captures;                                          // 0x0330(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         Wallet;                                            // 0x0340(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartingWallet;                                    // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_InventoryItemSave>           ItemsStock;                                        // 0x0348(0x0010)(Edit, BlueprintVisible, Net)
	TArray<struct FS_InventoryItemSave>           DefaultStock;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsInit;                                            // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_CameroidCapture>             TopCaptures;                                       // 0x0370(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         MaxTopCaptures;                                    // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 KickedSteamIds;                                    // 0x0388(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TMulticastInlineDelegate<void(int64 SteamID)> OnPlayerJoined;                                    // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int64 SteamID)> OnPlayerLeft;                                      // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        MinRelativeScore;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResultsPublished;                                  // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnItemsStockReset;                                 // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddCaptureToGroup(const struct FS_CameroidCaptureGroup& InCaptureGroup, const struct FS_CameroidCapture& Capture, struct FS_CameroidCaptureGroup* OutCaptureGroup);
	void AddMoney(int32 Amount);
	void AddTopCaptureToSave(class UBP_TopCapturesSave_C* Save, class UBP_UPGameInstance_C* GameInstance, int32 Index_0, const class FString& SlotName);
	void AllPlayersDiedLastSession(bool* AllPlayersDied);
	void AreCapturesInSameGroup(const struct FS_CameroidCapture& Capture1, const struct FS_CameroidCapture& Capture2, bool* Result);
	void AreSameActors(TArray<int32>& Actors1, TArray<int32>& Actors2, bool* Result);
	void CreateSave(class UBP_UPGameStateSave_C** Save);
	void EndSavingTopCapturesToDisk(class UBP_TopCapturesSave_C* Save, const class FString& SlotName);
	void ExecuteUbergraph_BP_UPGameState(int32 EntryPoint);
	void GetActors(const struct FS_CameroidCapture& Capture, TArray<int32>* ScoringActors, TArray<int32>* NonScoringActors);
	void GetCameroidIds(TArray<int32>* ItemIds);
	void GetCaptureGroup(const struct FS_CameroidCapture& Capture, struct FS_CameroidCaptureGroup* CaptureGroup, int32* GroupIndex);
	void GetItemCaptures(int32 ItemId, TArray<struct FS_CameroidCapture>* Captures_0);
	void GetMaxScoringGroup(struct FS_CameroidCaptureGroup* Group, int32* GroupIndex);
	void GetPlayerIndex(int64 SteamID, int32* Player_Index);
	void GetPlayerState(int32 PlayerIndex, class ABP_UPPlayerState_C** PlayerState);
	void GetPlayerStateById(int64 SteamID, class ABP_UPPlayerState_C** PlayerState);
	void IsCaptureInGroup(const struct FS_CameroidCaptureGroup& CaptureGroup, const struct FS_CameroidCapture& Capture, bool* Result);
	void IsPlayerAlive(int64 SteamID, bool* IsAlive);
	void KickPlayer(int64 SteamID);
	void LoadSave(class UObject* Save);
	void LoadState();
	void LoadTopCaptureFromSave(class UBP_TopCapturesSave_C* Save, class UBP_UPGameInstance_C* GameInstance, int32 Index_0);
	void LoadTopCapturesFromDisk(const class FString& SlotName);
	void OnRep_KickedSteamIds();
	void ProcessCapture(const struct FS_CameroidCapture& Capture);
	void ProcessCaptures();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemoveMoney(int32 Amount);
	void ResetItemsStock();
	void ResetKickedSteamIds();
	void ResetWallet();
	void SavePlayers();
	void SaveState();
	void SaveTopCapture();
	void SaveTopCapturesToDisk(const class FString& SlotName);
	void SessionEnded();
	void SortGroups();
	void WasInSession(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UPGameState_C">();
	}
	static class ABP_UPGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UPGameState_C>();
	}
};
static_assert(alignof(ABP_UPGameState_C) == 0x000008, "Wrong alignment on ABP_UPGameState_C");
static_assert(sizeof(ABP_UPGameState_C) == 0x0003D8, "Wrong size on ABP_UPGameState_C");
static_assert(offsetof(ABP_UPGameState_C, UberGraphFrame) == 0x0002F0, "Member 'ABP_UPGameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, DefaultSceneRoot) == 0x0002F8, "Member 'ABP_UPGameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, GameSlotName) == 0x000300, "Member 'ABP_UPGameState_C::GameSlotName' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, TopCapturesSaveSlotName) == 0x000310, "Member 'ABP_UPGameState_C::TopCapturesSaveSlotName' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, SteamIds) == 0x000320, "Member 'ABP_UPGameState_C::SteamIds' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, Captures) == 0x000330, "Member 'ABP_UPGameState_C::Captures' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, Wallet) == 0x000340, "Member 'ABP_UPGameState_C::Wallet' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, StartingWallet) == 0x000344, "Member 'ABP_UPGameState_C::StartingWallet' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, ItemsStock) == 0x000348, "Member 'ABP_UPGameState_C::ItemsStock' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, DefaultStock) == 0x000358, "Member 'ABP_UPGameState_C::DefaultStock' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, IsInit) == 0x000368, "Member 'ABP_UPGameState_C::IsInit' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, TopCaptures) == 0x000370, "Member 'ABP_UPGameState_C::TopCaptures' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, MaxTopCaptures) == 0x000380, "Member 'ABP_UPGameState_C::MaxTopCaptures' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, KickedSteamIds) == 0x000388, "Member 'ABP_UPGameState_C::KickedSteamIds' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, OnPlayerJoined) == 0x000398, "Member 'ABP_UPGameState_C::OnPlayerJoined' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, OnPlayerLeft) == 0x0003A8, "Member 'ABP_UPGameState_C::OnPlayerLeft' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, MinRelativeScore) == 0x0003B8, "Member 'ABP_UPGameState_C::MinRelativeScore' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, ResultsPublished) == 0x0003C0, "Member 'ABP_UPGameState_C::ResultsPublished' has a wrong offset!");
static_assert(offsetof(ABP_UPGameState_C, OnItemsStockReset) == 0x0003C8, "Member 'ABP_UPGameState_C::OnItemsStockReset' has a wrong offset!");

}

