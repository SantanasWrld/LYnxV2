#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerPerceptionSource

#include "Basic.hpp"

#include "BPC_PlayerPerceptionSource_classes.hpp"
#include "BPC_PlayerPerceptionSource_parameters.hpp"


namespace SDK
{

// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.ReportNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   NoiseLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Loudness                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxRange                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::ReportNoise(const struct FVector& NoiseLocation, float Loudness, float MaxRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "ReportNoise");

	Params::BPC_PlayerPerceptionSource_C_ReportNoise Parms{};

	Parms.NoiseLocation = std::move(NoiseLocation);
	Parms.Loudness = Loudness;
	Parms.MaxRange = MaxRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.ReportPlayerNoise
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Loudness                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxRange                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::ReportPlayerNoise(float Loudness, float MaxRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "ReportPlayerNoise");

	Params::BPC_PlayerPerceptionSource_C_ReportPlayerNoise Parms{};

	Parms.Loudness = Loudness;
	Parms.MaxRange = MaxRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.Footstep
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        Surface                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::Footstep(EPhysicalSurface Surface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "Footstep");

	Params::BPC_PlayerPerceptionSource_C_Footstep Parms{};

	Parms.Surface = Surface;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.RegisterToFootsteps
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::RegisterToFootsteps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "RegisterToFootsteps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.InitInventory
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::InitInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "InitInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.ItemEquipped
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_InventoryItem_C*              Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::ItemEquipped(class ABP_InventoryItem_C* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "ItemEquipped");

	Params::BPC_PlayerPerceptionSource_C_ItemEquipped Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.OnItemUsed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_InventoryItem_C*              Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUsed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::OnItemUsed(class ABP_InventoryItem_C* Item, bool IsUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "OnItemUsed");

	Params::BPC_PlayerPerceptionSource_C_OnItemUsed Parms{};

	Parms.Item = Item;
	Parms.IsUsed = IsUsed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.CheckLight
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::CheckLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "CheckLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.StartLightStimulus
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::StartLightStimulus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "StartLightStimulus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.EndLightStimulus
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::EndLightStimulus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "EndLightStimulus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.LightStimulus
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::LightStimulus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "LightStimulus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.InitInteractions
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::InitInteractions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "InitInteractions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.Interaction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_Interaction_C>Interaction_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::Interaction(TScriptInterface<class IBPI_Interaction_C> Interaction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "Interaction");

	Params::BPC_PlayerPerceptionSource_C_Interaction Parms{};

	Parms.Interaction_0 = Interaction_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.InitFootsteps
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerPerceptionSource_C::InitFootsteps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "InitFootsteps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "ReceiveTick");

	Params::BPC_PlayerPerceptionSource_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C.ExecuteUbergraph_BPC_PlayerPerceptionSource
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerPerceptionSource_C::ExecuteUbergraph_BPC_PlayerPerceptionSource(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerPerceptionSource_C", "ExecuteUbergraph_BPC_PlayerPerceptionSource");

	Params::BPC_PlayerPerceptionSource_C_ExecuteUbergraph_BPC_PlayerPerceptionSource Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

