#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Parasite

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Parent_Enemy_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Parasite.BP_Parasite_C
// 0x0030 (0x0AC0 - 0x0A90)
class ABP_Parasite_C : public ABP_Parent_Enemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Parasite_C;                      // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        ProjectileThrower;                                 // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_LaunchProjectile_NormalizedTime_C9AC312B4F9EFBD1A55539BD87C540A1; // 0x0A98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_LaunchProjectile__Direction_C9AC312B4F9EFBD1A55539BD87C540A1; // 0x0A9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9D[0x3];                                      // 0x0A9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_LaunchProjectile;                         // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ProjectileImpulse;                                 // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsArmed;                                           // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB1[0x7];                                      // 0x0AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ProjectileScale;                                   // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Timeline_LaunchProjectile__FinishedFunc();
	void Timeline_LaunchProjectile__UpdateFunc();
	void OnRep_IsAttacking();
	void ExecuteUbergraph_BP_Parasite(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Parasite_C">();
	}
	static class ABP_Parasite_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Parasite_C>();
	}
};
static_assert(alignof(ABP_Parasite_C) == 0x000010, "Wrong alignment on ABP_Parasite_C");
static_assert(sizeof(ABP_Parasite_C) == 0x000AC0, "Wrong size on ABP_Parasite_C");
static_assert(offsetof(ABP_Parasite_C, UberGraphFrame_BP_Parasite_C) == 0x000A88, "Member 'ABP_Parasite_C::UberGraphFrame_BP_Parasite_C' has a wrong offset!");
static_assert(offsetof(ABP_Parasite_C, ProjectileThrower) == 0x000A90, "Member 'ABP_Parasite_C::ProjectileThrower' has a wrong offset!");
static_assert(offsetof(ABP_Parasite_C, Timeline_LaunchProjectile_NormalizedTime_C9AC312B4F9EFBD1A55539BD87C540A1) == 0x000A98, "Member 'ABP_Parasite_C::Timeline_LaunchProjectile_NormalizedTime_C9AC312B4F9EFBD1A55539BD87C540A1' has a wrong offset!");
static_assert(offsetof(ABP_Parasite_C, Timeline_LaunchProjectile__Direction_C9AC312B4F9EFBD1A55539BD87C540A1) == 0x000A9C, "Member 'ABP_Parasite_C::Timeline_LaunchProjectile__Direction_C9AC312B4F9EFBD1A55539BD87C540A1' has a wrong offset!");
static_assert(offsetof(ABP_Parasite_C, Timeline_LaunchProjectile) == 0x000AA0, "Member 'ABP_Parasite_C::Timeline_LaunchProjectile' has a wrong offset!");
static_assert(offsetof(ABP_Parasite_C, ProjectileImpulse) == 0x000AA8, "Member 'ABP_Parasite_C::ProjectileImpulse' has a wrong offset!");
static_assert(offsetof(ABP_Parasite_C, IsArmed) == 0x000AB0, "Member 'ABP_Parasite_C::IsArmed' has a wrong offset!");
static_assert(offsetof(ABP_Parasite_C, ProjectileScale) == 0x000AB8, "Member 'ABP_Parasite_C::ProjectileScale' has a wrong offset!");

}

