#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_LineTrace

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_LineTrace.BTT_LineTrace_C
// 0x0090 (0x0138 - 0x00A8)
class UBTT_LineTrace_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 ActorToIgnoreKey;                                  // 0x00B0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 TargetLocationKey;                                 // 0x00D8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 ResultKey;                                         // 0x0100(0x0028)(Edit, BlueprintVisible)
	double                                        MaxDistance;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_LineTrace(int32 EntryPoint);
	void GetEndPoint(const struct FVector& StartPoint, struct FVector* EndPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_LineTrace_C">();
	}
	static class UBTT_LineTrace_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_LineTrace_C>();
	}
};
static_assert(alignof(UBTT_LineTrace_C) == 0x000008, "Wrong alignment on UBTT_LineTrace_C");
static_assert(sizeof(UBTT_LineTrace_C) == 0x000138, "Wrong size on UBTT_LineTrace_C");
static_assert(offsetof(UBTT_LineTrace_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_LineTrace_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_LineTrace_C, ActorToIgnoreKey) == 0x0000B0, "Member 'UBTT_LineTrace_C::ActorToIgnoreKey' has a wrong offset!");
static_assert(offsetof(UBTT_LineTrace_C, TargetLocationKey) == 0x0000D8, "Member 'UBTT_LineTrace_C::TargetLocationKey' has a wrong offset!");
static_assert(offsetof(UBTT_LineTrace_C, ResultKey) == 0x000100, "Member 'UBTT_LineTrace_C::ResultKey' has a wrong offset!");
static_assert(offsetof(UBTT_LineTrace_C, MaxDistance) == 0x000128, "Member 'UBTT_LineTrace_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(UBTT_LineTrace_C, TraceChannel) == 0x000130, "Member 'UBTT_LineTrace_C::TraceChannel' has a wrong offset!");

}

