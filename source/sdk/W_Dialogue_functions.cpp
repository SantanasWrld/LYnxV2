#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Dialogue

#include "Basic.hpp"

#include "W_Dialogue_classes.hpp"
#include "W_Dialogue_parameters.hpp"


namespace SDK
{

// Function W_Dialogue.W_Dialogue_C.AddDialogueLine
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Dialogue_C::AddDialogueLine(const class FString& Text, double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Dialogue_C", "AddDialogueLine");

	Params::W_Dialogue_C_AddDialogueLine Parms{};

	Parms.Text = std::move(Text);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Dialogue.W_Dialogue_C.ClearDialogue
// (BlueprintCallable, BlueprintEvent)

void UW_Dialogue_C::ClearDialogue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Dialogue_C", "ClearDialogue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Dialogue.W_Dialogue_C.ExecuteUbergraph_W_Dialogue
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Dialogue_C::ExecuteUbergraph_W_Dialogue(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Dialogue_C", "ExecuteUbergraph_W_Dialogue");

	Params::W_Dialogue_C_ExecuteUbergraph_W_Dialogue Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

