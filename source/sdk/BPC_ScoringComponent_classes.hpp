#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_ScoringComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ScoringActor_structs.hpp"
#include "E_ScoringActorVariant_structs.hpp"
#include "E_ScoringActorState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_ScoringComponent.BPC_ScoringComponent_C
// 0x0040 (0x02E0 - 0x02A0)
class UBPC_ScoringComponent_C final : public USceneComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_ScoringActor                                ScoringActor;                                      // 0x02A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ScoringActorVariant                         Variant;                                           // 0x02A9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ScoringActorState                           State;                                             // 0x02AA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AB[0x5];                                      // 0x02AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BoundsScale;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            VisibilityScoreCurve;                              // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AngleScoreCurve;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DirectionScoreCurve;                               // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x02D0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutomaticId;                                       // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetBounds(struct FVector* Origin, struct FVector* BoxExtent);
	void CanScore(bool* Result);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BPC_ScoringComponent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_ScoringComponent_C">();
	}
	static class UBPC_ScoringComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_ScoringComponent_C>();
	}
};
static_assert(alignof(UBPC_ScoringComponent_C) == 0x000010, "Wrong alignment on UBPC_ScoringComponent_C");
static_assert(sizeof(UBPC_ScoringComponent_C) == 0x0002E0, "Wrong size on UBPC_ScoringComponent_C");
static_assert(offsetof(UBPC_ScoringComponent_C, UberGraphFrame) == 0x0002A0, "Member 'UBPC_ScoringComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, ScoringActor) == 0x0002A8, "Member 'UBPC_ScoringComponent_C::ScoringActor' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, Variant) == 0x0002A9, "Member 'UBPC_ScoringComponent_C::Variant' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, State) == 0x0002AA, "Member 'UBPC_ScoringComponent_C::State' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, BoundsScale) == 0x0002B0, "Member 'UBPC_ScoringComponent_C::BoundsScale' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, VisibilityScoreCurve) == 0x0002B8, "Member 'UBPC_ScoringComponent_C::VisibilityScoreCurve' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, AngleScoreCurve) == 0x0002C0, "Member 'UBPC_ScoringComponent_C::AngleScoreCurve' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, DirectionScoreCurve) == 0x0002C8, "Member 'UBPC_ScoringComponent_C::DirectionScoreCurve' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, ID) == 0x0002D0, "Member 'UBPC_ScoringComponent_C::ID' has a wrong offset!");
static_assert(offsetof(UBPC_ScoringComponent_C, AutomaticId) == 0x0002D4, "Member 'UBPC_ScoringComponent_C::AutomaticId' has a wrong offset!");

}

