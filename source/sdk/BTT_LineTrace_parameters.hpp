#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_LineTrace

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_LineTrace.BTT_LineTrace_C.ExecuteUbergraph_BTT_LineTrace
// 0x0220 (0x0220 - 0x0000)
struct BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEndPoint_EndPoint;                     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0060(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14B[0x1];                                      // 0x014B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace) == 0x000008, "Wrong alignment on BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace");
static_assert(sizeof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace) == 0x000220, "Wrong size on BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, EntryPoint) == 0x000000, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, K2Node_Event_OwnerController) == 0x000008, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_GetEndPoint_EndPoint) == 0x000030, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_GetEndPoint_EndPoint' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000048, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, K2Node_MakeArray_Array) == 0x000050, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_LineTraceSingle_OutHit) == 0x000060, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x000148, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000149, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x00014A, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_Time) == 0x00014C, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_Distance) == 0x000150, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_Location) == 0x000158, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000170, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_Normal) == 0x000188, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A0, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_BoneName) == 0x0001D8, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_HitItem) == 0x0001E0, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0001E4, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0001E8, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_TraceStart) == 0x0001F0, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace, CallFunc_BreakHitResult_TraceEnd) == 0x000208, "Member 'BTT_LineTrace_C_ExecuteUbergraph_BTT_LineTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BTT_LineTrace.BTT_LineTrace_C.GetEndPoint
// 0x0108 (0x0108 - 0x0000)
struct BTT_LineTrace_C_GetEndPoint final
{
public:
	struct FVector                                StartPoint;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPoint;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_LineTrace_C_GetEndPoint) == 0x000008, "Wrong alignment on BTT_LineTrace_C_GetEndPoint");
static_assert(sizeof(BTT_LineTrace_C_GetEndPoint) == 0x000108, "Wrong size on BTT_LineTrace_C_GetEndPoint");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, StartPoint) == 0x000000, "Member 'BTT_LineTrace_C_GetEndPoint::StartPoint' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, EndPoint) == 0x000018, "Member 'BTT_LineTrace_C_GetEndPoint::EndPoint' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_BreakVector_X) == 0x000030, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_BreakVector_Y) == 0x000038, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_BreakVector_Z) == 0x000040, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000048, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x000060, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_BreakVector_X_1) == 0x000078, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_BreakVector_Y_1) == 0x000080, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_BreakVector_Z_1) == 0x000088, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A8, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_Normal_ReturnValue) == 0x0000C0, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000D8, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_GetEndPoint, CallFunc_Add_VectorVector_ReturnValue) == 0x0000F0, "Member 'BTT_LineTrace_C_GetEndPoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BTT_LineTrace.BTT_LineTrace_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_LineTrace_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_LineTrace_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_LineTrace_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_LineTrace_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_LineTrace_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_LineTrace_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_LineTrace_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_LineTrace_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_LineTrace_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

