#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerInventory

#include "Basic.hpp"

#include "BPC_PlayerInventory_classes.hpp"
#include "BPC_PlayerInventory_parameters.hpp"


namespace SDK
{

// Function BPC_PlayerInventory.BPC_PlayerInventory_C.AddItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InventoryItem                         Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::AddItem(E_InventoryItem Item, int32 ItemId, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "AddItem");

	Params::BPC_PlayerInventory_C_AddItem Parms{};

	Parms.Item = Item;
	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.AddTestItemsIfNeeded
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::AddTestItemsIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "AddTestItemsIfNeeded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.AttachCurrentItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::AttachCurrentItem(class USkeletalMeshComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "AttachCurrentItem");

	Params::BPC_PlayerInventory_C_AttachCurrentItem Parms{};

	Parms.Parent = Parent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.AttachItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_InventoryItem_C*              Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Parent                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::AttachItem(double Delay, class ABP_InventoryItem_C* Item, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "AttachItem");

	Params::BPC_PlayerInventory_C_AttachItem Parms{};

	Parms.Delay = Delay;
	Parms.Item = Item;
	Parms.Parent = Parent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.AutoAttachCurrrentItem
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::AutoAttachCurrrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "AutoAttachCurrrentItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.AutoAttachItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_InventoryItem_C*              Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::AutoAttachItem(double Delay, class ABP_InventoryItem_C* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "AutoAttachItem");

	Params::BPC_PlayerInventory_C_AutoAttachItem Parms{};

	Parms.Delay = Delay;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.BuyShopItem
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const E_InventoryItem                   Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::BuyShopItem(const E_InventoryItem Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "BuyShopItem");

	Params::BPC_PlayerInventory_C_BuyShopItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.CanAddItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InventoryItem                         Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          Reason                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::CanAddItem(E_InventoryItem Item, bool* Result, class FString* Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "CanAddItem");

	Params::BPC_PlayerInventory_C_CanAddItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Reason != nullptr)
		*Reason = std::move(Parms.Reason);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.CanChangeItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::CanChangeItem(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "CanChangeItem");

	Params::BPC_PlayerInventory_C_CanChangeItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.CheckItemID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InItemID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ItemId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::CheckItemID(int32 InItemID, int32* ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "CheckItemID");

	Params::BPC_PlayerInventory_C_CheckItemID Parms{};

	Parms.InItemID = InItemID;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemId != nullptr)
		*ItemId = Parms.ItemId;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.EmoteStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Emote                                 Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::EmoteStarted(E_Emote Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "EmoteStarted");

	Params::BPC_PlayerInventory_C_EmoteStarted Parms{};

	Parms.Emote = Emote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.EmoteStopped
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::EmoteStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "EmoteStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.EquipItem
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::EquipItem(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "EquipItem");

	Params::BPC_PlayerInventory_C_EquipItem Parms{};

	Parms.ItemIndex = ItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.EquipNextItem
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::EquipNextItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "EquipNextItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.EquipPreviousItem
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::EquipPreviousItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "EquipPreviousItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.ExecuteUbergraph_BPC_PlayerInventory
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::ExecuteUbergraph_BPC_PlayerInventory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "ExecuteUbergraph_BPC_PlayerInventory");

	Params::BPC_PlayerInventory_C_ExecuteUbergraph_BPC_PlayerInventory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.GetAttachDelay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Delay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::GetAttachDelay(double* Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "GetAttachDelay");

	Params::BPC_PlayerInventory_C_GetAttachDelay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Delay != nullptr)
		*Delay = Parms.Delay;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.GetBaseTypeName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InventoryItem                         Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          ItemTypeName                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::GetBaseTypeName(E_InventoryItem Item, class FString* ItemTypeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "GetBaseTypeName");

	Params::BPC_PlayerInventory_C_GetBaseTypeName Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemTypeName != nullptr)
		*ItemTypeName = std::move(Parms.ItemTypeName);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.GetDropTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform*                      DropTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::GetDropTransform(struct FTransform* DropTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "GetDropTransform");

	Params::BPC_PlayerInventory_C_GetDropTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DropTransform != nullptr)
		*DropTransform = std::move(Parms.DropTransform);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.GetShopItemPrice
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const E_InventoryItem&                  Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Price                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::GetShopItemPrice(const E_InventoryItem& Item, int32* Price)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "GetShopItemPrice");

	Params::BPC_PlayerInventory_C_GetShopItemPrice Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Price != nullptr)
		*Price = Parms.Price;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.HasCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::HasCamera(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "HasCamera");

	Params::BPC_PlayerInventory_C_HasCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.HasItemOfType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    TypeName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::HasItemOfType(const class FString& TypeName, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "HasItemOfType");

	Params::BPC_PlayerInventory_C_HasItemOfType Parms{};

	Parms.TypeName = std::move(TypeName);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.Init (All)
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::Init__All_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "Init (All)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.Init (Server)
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::Init__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "Init (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_3");

	Params::BPC_PlayerInventory_C_InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_3 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_4");

	Params::BPC_PlayerInventory_C_InpActEvt_IA_FocusInventoryItem_K2Node_EnhancedInputActionEvent_4 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.InpActEvt_IA_NextInventoryItem_K2Node_EnhancedInputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::InpActEvt_IA_NextInventoryItem_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "InpActEvt_IA_NextInventoryItem_K2Node_EnhancedInputActionEvent_5");

	Params::BPC_PlayerInventory_C_InpActEvt_IA_NextInventoryItem_K2Node_EnhancedInputActionEvent_5 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.InpActEvt_IA_PreviousInventoryItem_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::InpActEvt_IA_PreviousInventoryItem_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "InpActEvt_IA_PreviousInventoryItem_K2Node_EnhancedInputActionEvent_0");

	Params::BPC_PlayerInventory_C_InpActEvt_IA_PreviousInventoryItem_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.InpActEvt_IA_ThrowInventoryItem_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::InpActEvt_IA_ThrowInventoryItem_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "InpActEvt_IA_ThrowInventoryItem_K2Node_EnhancedInputActionEvent_1");

	Params::BPC_PlayerInventory_C_InpActEvt_IA_ThrowInventoryItem_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.InpActEvt_IA_UseInventoryItem_K2Node_EnhancedInputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::InpActEvt_IA_UseInventoryItem_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "InpActEvt_IA_UseInventoryItem_K2Node_EnhancedInputActionEvent_2");

	Params::BPC_PlayerInventory_C_InpActEvt_IA_UseInventoryItem_K2Node_EnhancedInputActionEvent_2 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.IsLowPrioItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InventoryItem                         Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::IsLowPrioItem(E_InventoryItem Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "IsLowPrioItem");

	Params::BPC_PlayerInventory_C_IsLowPrioItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.LoadInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_InventoryItemSave>&    Inventory                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   ItemsAddedToStock                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::LoadInventory(TArray<struct FS_InventoryItemSave>& Inventory, bool* ItemsAddedToStock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "LoadInventory");

	Params::BPC_PlayerInventory_C_LoadInventory Parms{};

	Parms.Inventory = std::move(Inventory);

	UObject::ProcessEvent(Func, &Parms);

	Inventory = std::move(Parms.Inventory);

	if (ItemsAddedToStock != nullptr)
		*ItemsAddedToStock = Parms.ItemsAddedToStock;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.OnRep_CurrentItem
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::OnRep_CurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "OnRep_CurrentItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.PlayerKilled (Server)
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_KillableCharacter_C*          KilledCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::PlayerKilled__Server_(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "PlayerKilled (Server)");

	Params::BPC_PlayerInventory_C_PlayerKilled__Server_ Parms{};

	Parms.KilledCharacter = KilledCharacter;
	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.RagdollChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInRagdoll                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::RagdollChanged(bool IsInRagdoll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "RagdollChanged");

	Params::BPC_PlayerInventory_C_RagdollChanged Parms{};

	Parms.IsInRagdoll = IsInRagdoll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBPC_PlayerInventory_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "ReceiveEndPlay");

	Params::BPC_PlayerInventory_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.RemoveAllItems
// (BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::RemoveAllItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "RemoveAllItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.SetCurrentItemFocus
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Focus                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::SetCurrentItemFocus(bool Focus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "SetCurrentItemFocus");

	Params::BPC_PlayerInventory_C_SetCurrentItemFocus Parms{};

	Parms.Focus = Focus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.SpawnItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          Player_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_InventoryItem                         Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_InventoryItem_C**             SpawnedItem                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::SpawnItem(class ABP_UPPlayerCharacter_C* Player_0, E_InventoryItem Item, int32 ItemId, class ABP_InventoryItem_C** SpawnedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "SpawnItem");

	Params::BPC_PlayerInventory_C_SpawnItem Parms{};

	Parms.Player_0 = Player_0;
	Parms.Item = Item;
	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedItem != nullptr)
		*SpawnedItem = Parms.SpawnedItem;
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.ThrowItem
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CreatePickable                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::ThrowItem(bool CreatePickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "ThrowItem");

	Params::BPC_PlayerInventory_C_ThrowItem Parms{};

	Parms.CreatePickable = CreatePickable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.ToggleUseCurrentItem
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::ToggleUseCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "ToggleUseCurrentItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.UnEquipCurrentItem
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBPC_PlayerInventory_C::UnEquipCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "UnEquipCurrentItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_PlayerInventory.BPC_PlayerInventory_C.UpdateCapacity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MaxItems_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_PlayerInventory_C::UpdateCapacity(int32 MaxItems_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_PlayerInventory_C", "UpdateCapacity");

	Params::BPC_PlayerInventory_C_UpdateCapacity Parms{};

	Parms.MaxItems_0 = MaxItems_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

