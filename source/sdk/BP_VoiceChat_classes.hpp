#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VoiceChat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Odin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VoiceChat.BP_VoiceChat_C
// 0x0290 (0x0528 - 0x0298)
class ABP_VoiceChat_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 URL;                                               // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 AccessKey;                                         // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_LocalPlayerVoice_C*                 LocalPlayerVoice;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FOdinApmSettings                       Spatial_APMSettings;                               // 0x02D8(0x0020)(Edit, BlueprintVisible, NoDestructor)
	class FString                                 Spatial_RoomToken;                                 // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UOdinRoom*                              Spatial_Room;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UOdinAudioCapture*                      AudioCapture;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FOdinApmSettings                       Dead_APMSettings;                                  // 0x0318(0x0020)(Edit, BlueprintVisible, NoDestructor)
	class FString                                 Dead_RoomToken;                                    // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UOdinRoom*                              Dead_Room;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 SaveSlotName;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsMicrophoneMuted;                                 // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOdinApmSettings                       Radio_APMSettings;                                 // 0x0364(0x0020)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Radio_RoomToken;                                   // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UOdinRoom*                              Radio_Room;                                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 GlobalID;                                          // 0x03A0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UOdinCaptureMedia*                      Radio_CaptureMedia;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Radio_IsRoomJoined;                                // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_RadioVoiceChatParticipant_C*> Radio_Participants;                               // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FString                                 PreferedCaptureDevice;                             // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UOdinCaptureMedia*                      Dead_CaptureMedia;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int64, class FString>                    Dead_PeerIdToPlayerId;                             // 0x03E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int64, class UOdinSynthComponent*>       Dead_OdinSynthComps;                               // 0x0438(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        CaptureVolumeMultiplier;                           // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOdinCaptureMedia*                      Spatial_CaptureMedia;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int64, class FString>                    Spatial_PeerIdToPlayerId;                          // 0x0498(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int64                                         Spatial_LocalPeerId;                               // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlaybackVolumeMultiplier;                          // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundMix*                              VoicePlaybackSoundMix;                             // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundClass*                            VoicePlaybackSoundClass;                           // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PushToTalk;                                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radio_VolumeMultiplier;                            // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dead_VolumeMultiplier;                             // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_514[0x4];                                      // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TokenGeneratorUrl;                                 // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void CheckPreferedCaptureDevice();
	void CleanupPlaybackSoundMix();
	void Dead_AddMediaSuccess(int32 mediaId);
	void Dead_Connect(const class FString& UserId);
	void Dead_Disconnect();
	void Dead_JoinRoom();
	void Dead_MediaAdded(int64 peerId, class UOdinPlaybackMedia* Media, class UOdinJsonObject* properties, class UOdinRoom* room);
	void Dead_MediaRemoved(int64 peerId, class UOdinPlaybackMedia* Media, class UOdinRoom* room);
	void Dead_MutePlayerSpatial();
	void Dead_PeerJoined(int64 peerId, const class FString& UserId, const TArray<uint8>& userData, class UOdinRoom* room);
	void Dead_PeerLeft(int64 peerId, class UOdinRoom* room);
	void Dead_RegisterToPeerEvents();
	void Dead_RegsiterToMediaEvents();
	void Dead_RoomJoined(const class FString& roomId, const TArray<uint8>& roomUserData, const class FString& customer, int64 ownPeerId, const class FString& ownUserId);
	void ExecuteUbergraph_BP_VoiceChat(int32 EntryPoint);
	void GetCaptureDevices(bool* Success, TArray<struct FOdinCaptureDeviceInfo>* Devices, struct FOdinCaptureDeviceInfo* CurrentDevice);
	void GetDeadOdinSynth(const class FString& PlayerId, class UOdinSynthComponent** Synth);
	void GetIsMicrophoneMuted(bool* Muted);
	void GetPeerOdinSynth(int64 peerId, class UOdinSynthComponent** OdinSynth);
	void GetPlayerWithId(const class FString& PlayerId, class ABP_UPPlayerCharacter_C** Player);
	void GetPlayerWithPeerId(int64 peerId, class ABP_UPPlayerCharacter_C** Player);
	void InitPlaybackSoundMix();
	void InitWhenReady();
	void IsPlayerMuted(int64 SteamID, bool* Muted);
	void IsVoiceChatConnected(bool* Connected);
	void LoadSettings();
	void OnResponse_2545B4EC453CEBEAB61DD1AB86BB785F(bool Success);
	void OnResponse_2ACA8CBA4227ACF8B5CAA9A5F58E75C7(bool Success);
	void OnResponse_36BAB3384C5B656231D02BB576D57068(bool Success);
	void OnResponse_427044EE489A4E1C9BEF93ABEAEC684B(bool Success);
	void OnResponse_43A297B8421C269F5D3136B2527C1D8D(bool Success);
	void OnResponse_8789FAF748932B57DC014C94724933F5(bool Success);
	void PlayerKilled(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void PlayerSpawned(class ABP_UPPlayerCharacter_C* Player1);
	void Radio_AddMedia();
	void Radio_AddMediaSuccess(int32 mediaId);
	void Radio_Connect(const class FString& UserId);
	void Radio_Disconnect();
	void Radio_JoinRoom();
	void Radio_MediaAdded(int64 peerId, class UOdinPlaybackMedia* Media, class UOdinJsonObject* properties, class UOdinRoom* room);
	void Radio_RoomJoined(const class FString& roomId, const TArray<uint8>& roomUserData, const class FString& customer, int64 ownPeerId, const class FString& ownUserId);
	void Radio_StartTransmiting();
	void Radio_StopTransmiting();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RegisterKilledEvent(class ABP_UPPlayerCharacter_C* Player);
	void RegisterKilledEvents();
	void SaveSettings();
	void ServerTravelStarted(const class FString& DestinationMapName);
	void SetCaptureDevice(class FName DeviceName, bool* Success);
	void SetCaptureVolumeMultiplier(double CaptureVolumeMultiplier_0);
	void SetIsMicrophoneMuted(bool Muted);
	void SetPlaybackVolumeMultiplier(double PlaybackVolumeMultiplier_0);
	void SetPlayerMuted(int64 SteamID, bool Mute);
	void SetPreferedDevice(const class FString& DeviceName);
	void SetPushToTalk(bool PushToTalk_0);
	void Spatial_AddMedia();
	void Spatial_AddMediaError(int64 errorCode);
	void Spatial_AddMediaSuccess(int32 mediaId);
	void Spatial_Connect(const class FString& roomId, const class FString& UserId);
	void Spatial_Disconnect();
	void Spatial_JoinRoom();
	void Spatial_JoinRoomError(int64 errorCode);
	void Spatial_JoinRoomSuccess(const class FString& roomId, const TArray<uint8>& roomUserData, const class FString& customer, int64 ownPeerId, const class FString& ownUserId);
	void Spatial_MediaActiveStateChanged(int64 peerId, const class UOdinMediaBase* Media, bool Active, class UOdinRoom* room);
	void Spatial_MediaAdded(int64 peerId, class UOdinPlaybackMedia* Media, class UOdinJsonObject* properties, class UOdinRoom* room);
	void Spatial_MediaRemoved(int64 peerId, class UOdinPlaybackMedia* Media, class UOdinRoom* room);
	void Spatial_PeerJoined(int64 peerId, const class FString& UserId, const TArray<uint8>& userData, class UOdinRoom* room);
	void Spatial_PeerLeft(int64 peerId, class UOdinRoom* room);
	void Spatial_RegisterToMediaEvents();
	void Spatial_RegisterToPeerEvents();
	void StartLocalPlayerVoice();
	void StopLocalPlayerVoice();
	void TryGetLocalPlayerId(bool* Success, int64* SteamID);
	void UpdatePlaybackSoundMix();
	void VerifyToken(bool GeneratorSuccess, const class FString& Token, const class FString& roomId, const class FString& UserId, class FString* ValidToken);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VoiceChat_C">();
	}
	static class ABP_VoiceChat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VoiceChat_C>();
	}
};
static_assert(alignof(ABP_VoiceChat_C) == 0x000008, "Wrong alignment on ABP_VoiceChat_C");
static_assert(sizeof(ABP_VoiceChat_C) == 0x000528, "Wrong size on ABP_VoiceChat_C");
static_assert(offsetof(ABP_VoiceChat_C, UberGraphFrame) == 0x000298, "Member 'ABP_VoiceChat_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_VoiceChat_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, URL) == 0x0002A8, "Member 'ABP_VoiceChat_C::URL' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, AccessKey) == 0x0002B8, "Member 'ABP_VoiceChat_C::AccessKey' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, GameInstance) == 0x0002C8, "Member 'ABP_VoiceChat_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, LocalPlayerVoice) == 0x0002D0, "Member 'ABP_VoiceChat_C::LocalPlayerVoice' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Spatial_APMSettings) == 0x0002D8, "Member 'ABP_VoiceChat_C::Spatial_APMSettings' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Spatial_RoomToken) == 0x0002F8, "Member 'ABP_VoiceChat_C::Spatial_RoomToken' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Spatial_Room) == 0x000308, "Member 'ABP_VoiceChat_C::Spatial_Room' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, AudioCapture) == 0x000310, "Member 'ABP_VoiceChat_C::AudioCapture' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Dead_APMSettings) == 0x000318, "Member 'ABP_VoiceChat_C::Dead_APMSettings' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Dead_RoomToken) == 0x000338, "Member 'ABP_VoiceChat_C::Dead_RoomToken' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Dead_Room) == 0x000348, "Member 'ABP_VoiceChat_C::Dead_Room' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, SaveSlotName) == 0x000350, "Member 'ABP_VoiceChat_C::SaveSlotName' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, IsMicrophoneMuted) == 0x000360, "Member 'ABP_VoiceChat_C::IsMicrophoneMuted' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Radio_APMSettings) == 0x000364, "Member 'ABP_VoiceChat_C::Radio_APMSettings' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Radio_RoomToken) == 0x000388, "Member 'ABP_VoiceChat_C::Radio_RoomToken' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Radio_Room) == 0x000398, "Member 'ABP_VoiceChat_C::Radio_Room' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, GlobalID) == 0x0003A0, "Member 'ABP_VoiceChat_C::GlobalID' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Radio_CaptureMedia) == 0x0003B0, "Member 'ABP_VoiceChat_C::Radio_CaptureMedia' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Radio_IsRoomJoined) == 0x0003B8, "Member 'ABP_VoiceChat_C::Radio_IsRoomJoined' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Radio_Participants) == 0x0003C0, "Member 'ABP_VoiceChat_C::Radio_Participants' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, PreferedCaptureDevice) == 0x0003D0, "Member 'ABP_VoiceChat_C::PreferedCaptureDevice' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Dead_CaptureMedia) == 0x0003E0, "Member 'ABP_VoiceChat_C::Dead_CaptureMedia' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Dead_PeerIdToPlayerId) == 0x0003E8, "Member 'ABP_VoiceChat_C::Dead_PeerIdToPlayerId' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Dead_OdinSynthComps) == 0x000438, "Member 'ABP_VoiceChat_C::Dead_OdinSynthComps' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, CaptureVolumeMultiplier) == 0x000488, "Member 'ABP_VoiceChat_C::CaptureVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Spatial_CaptureMedia) == 0x000490, "Member 'ABP_VoiceChat_C::Spatial_CaptureMedia' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Spatial_PeerIdToPlayerId) == 0x000498, "Member 'ABP_VoiceChat_C::Spatial_PeerIdToPlayerId' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Spatial_LocalPeerId) == 0x0004E8, "Member 'ABP_VoiceChat_C::Spatial_LocalPeerId' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, PlaybackVolumeMultiplier) == 0x0004F0, "Member 'ABP_VoiceChat_C::PlaybackVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, VoicePlaybackSoundMix) == 0x0004F8, "Member 'ABP_VoiceChat_C::VoicePlaybackSoundMix' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, VoicePlaybackSoundClass) == 0x000500, "Member 'ABP_VoiceChat_C::VoicePlaybackSoundClass' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, PushToTalk) == 0x000508, "Member 'ABP_VoiceChat_C::PushToTalk' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Radio_VolumeMultiplier) == 0x00050C, "Member 'ABP_VoiceChat_C::Radio_VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, Dead_VolumeMultiplier) == 0x000510, "Member 'ABP_VoiceChat_C::Dead_VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_VoiceChat_C, TokenGeneratorUrl) == 0x000518, "Member 'ABP_VoiceChat_C::TokenGeneratorUrl' has a wrong offset!");

}

