#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_ForceLook

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_ForceLook.BTT_ForceLook_C.AbortTask
// 0x0010 (0x0010 - 0x0000)
struct BTT_ForceLook_C_AbortTask final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ForceLook_C_AbortTask) == 0x000008, "Wrong alignment on BTT_ForceLook_C_AbortTask");
static_assert(sizeof(BTT_ForceLook_C_AbortTask) == 0x000010, "Wrong size on BTT_ForceLook_C_AbortTask");
static_assert(offsetof(BTT_ForceLook_C_AbortTask, OwnerController) == 0x000000, "Member 'BTT_ForceLook_C_AbortTask::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_AbortTask, ControlledPawn) == 0x000008, "Member 'BTT_ForceLook_C_AbortTask::ControlledPawn' has a wrong offset!");

// Function BTT_ForceLook.BTT_ForceLook_C.EndTask
// 0x0010 (0x0010 - 0x0000)
struct BTT_ForceLook_C_EndTask final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ForceLook_C_EndTask) == 0x000008, "Wrong alignment on BTT_ForceLook_C_EndTask");
static_assert(sizeof(BTT_ForceLook_C_EndTask) == 0x000010, "Wrong size on BTT_ForceLook_C_EndTask");
static_assert(offsetof(BTT_ForceLook_C_EndTask, OwnerController) == 0x000000, "Member 'BTT_ForceLook_C_EndTask::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_EndTask, ControlledPawn) == 0x000008, "Member 'BTT_ForceLook_C_EndTask::ControlledPawn' has a wrong offset!");

// Function BTT_ForceLook.BTT_ForceLook_C.UnfreezeTarget
// 0x0001 (0x0001 - 0x0000)
struct BTT_ForceLook_C_UnfreezeTarget final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ForceLook_C_UnfreezeTarget) == 0x000001, "Wrong alignment on BTT_ForceLook_C_UnfreezeTarget");
static_assert(sizeof(BTT_ForceLook_C_UnfreezeTarget) == 0x000001, "Wrong size on BTT_ForceLook_C_UnfreezeTarget");
static_assert(offsetof(BTT_ForceLook_C_UnfreezeTarget, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BTT_ForceLook_C_UnfreezeTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTT_ForceLook.BTT_ForceLook_C.SetPlayerControlRotation
// 0x0090 (0x0090 - 0x0000)
struct BTT_ForceLook_C_SetPlayerControlRotation final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Parent_Enemy_C*                     K2Node_DynamicCast_AsBP_Parent_Enemy;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UPPlayerCharacter_C*                K2Node_DynamicCast_AsBP_UPPlayer_Character;        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEyesLocation_EyesLocation;             // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEyesLocation_EyesLocation_1;           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_ForceLook_C_SetPlayerControlRotation) == 0x000008, "Wrong alignment on BTT_ForceLook_C_SetPlayerControlRotation");
static_assert(sizeof(BTT_ForceLook_C_SetPlayerControlRotation) == 0x000090, "Wrong size on BTT_ForceLook_C_SetPlayerControlRotation");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, ControlledPawn) == 0x000000, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, K2Node_DynamicCast_AsBP_Parent_Enemy) == 0x000008, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::K2Node_DynamicCast_AsBP_Parent_Enemy' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, K2Node_DynamicCast_AsBP_UPPlayer_Character) == 0x000018, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::K2Node_DynamicCast_AsBP_UPPlayer_Character' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, CallFunc_GetEyesLocation_EyesLocation) == 0x000028, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::CallFunc_GetEyesLocation_EyesLocation' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, CallFunc_GetEyesLocation_EyesLocation_1) == 0x000048, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::CallFunc_GetEyesLocation_EyesLocation_1' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_SetPlayerControlRotation, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000078, "Member 'BTT_ForceLook_C_SetPlayerControlRotation::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");

// Function BTT_ForceLook.BTT_ForceLook_C.FreezeTarget
// 0x0020 (0x0020 - 0x0000)
struct BTT_ForceLook_C_FreezeTarget final
{
public:
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_KillableCharacter_C*                K2Node_DynamicCast_AsBP_Killable_Character;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ForceLook_C_FreezeTarget) == 0x000008, "Wrong alignment on BTT_ForceLook_C_FreezeTarget");
static_assert(sizeof(BTT_ForceLook_C_FreezeTarget) == 0x000020, "Wrong size on BTT_ForceLook_C_FreezeTarget");
static_assert(offsetof(BTT_ForceLook_C_FreezeTarget, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000000, "Member 'BTT_ForceLook_C_FreezeTarget::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_FreezeTarget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BTT_ForceLook_C_FreezeTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_FreezeTarget, K2Node_DynamicCast_AsBP_Killable_Character) == 0x000010, "Member 'BTT_ForceLook_C_FreezeTarget::K2Node_DynamicCast_AsBP_Killable_Character' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_FreezeTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTT_ForceLook_C_FreezeTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BTT_ForceLook.BTT_ForceLook_C.TryStartTask
// 0x0018 (0x0018 - 0x0000)
struct BTT_ForceLook_C_TryStartTask final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InstantFinish;                                     // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_ForceLook_C_TryStartTask) == 0x000008, "Wrong alignment on BTT_ForceLook_C_TryStartTask");
static_assert(sizeof(BTT_ForceLook_C_TryStartTask) == 0x000018, "Wrong size on BTT_ForceLook_C_TryStartTask");
static_assert(offsetof(BTT_ForceLook_C_TryStartTask, OwnerController) == 0x000000, "Member 'BTT_ForceLook_C_TryStartTask::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_TryStartTask, ControlledPawn) == 0x000008, "Member 'BTT_ForceLook_C_TryStartTask::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_TryStartTask, Success) == 0x000010, "Member 'BTT_ForceLook_C_TryStartTask::Success' has a wrong offset!");
static_assert(offsetof(BTT_ForceLook_C_TryStartTask, InstantFinish) == 0x000011, "Member 'BTT_ForceLook_C_TryStartTask::InstantFinish' has a wrong offset!");

}

