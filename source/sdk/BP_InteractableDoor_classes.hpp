#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractableDoor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_InteractableActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InteractableDoor.BP_InteractableDoor_C
// 0x0048 (0x0328 - 0x02E0)
class ABP_InteractableDoor_C : public ABP_InteractableActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_InteractableDoor_C;              // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_OpenDoor_OpenProgress_A82B74514720D53C1AB95F9816B04FEA; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_OpenDoor__Direction_A82B74514720D53C1AB95F9816B04FEA; // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_OpenDoor;                                 // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocked;                                          // 0x0300(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClosed;                                          // 0x0301(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          OpeningSide;                                       // 0x0302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBroken;                                          // 0x0303(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             BrokenSound;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInCooldown;                                      // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CooldownDuration;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_NavigationBridge_C*                 Bridge;                                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Close();
	void DestroyBridge();
	void DestroyDoor(const struct FVector& Origin);
	void EndClosingFX();
	void EndOpeningFX();
	void ExecuteUbergraph_BP_InteractableDoor(int32 EntryPoint);
	void GetDoorMeshes(TArray<class UStaticMeshComponent*>* Meshes);
	void GetInteractText(class FText* Text);
	void GetOpeningSide(class AActor* Interactor, bool* OpeningSide_0);
	void Interact(class ABP_UPPlayerCharacter_C* Player);
	void IsOpen(bool* Open);
	void OnRep_IsBroken();
	void OnRep_IsClosed();
	void Open();
	void ReceiveBeginPlay();
	void SpawnBridge(class UClass* BridgeClass);
	void StartClosingFX();
	void StartCooldown();
	void StartOpeningFX();
	void Timeline_OpenDoor__FinishedFunc();
	void Timeline_OpenDoor__UpdateFunc();
	void ToggleState(class AActor* Interactor);
	void UpdateBridge();
	void UpdateDoor(double OpenProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InteractableDoor_C">();
	}
	static class ABP_InteractableDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_InteractableDoor_C>();
	}
};
static_assert(alignof(ABP_InteractableDoor_C) == 0x000008, "Wrong alignment on ABP_InteractableDoor_C");
static_assert(sizeof(ABP_InteractableDoor_C) == 0x000328, "Wrong size on ABP_InteractableDoor_C");
static_assert(offsetof(ABP_InteractableDoor_C, UberGraphFrame_BP_InteractableDoor_C) == 0x0002E0, "Member 'ABP_InteractableDoor_C::UberGraphFrame_BP_InteractableDoor_C' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, NavModifier) == 0x0002E8, "Member 'ABP_InteractableDoor_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, Timeline_OpenDoor_OpenProgress_A82B74514720D53C1AB95F9816B04FEA) == 0x0002F0, "Member 'ABP_InteractableDoor_C::Timeline_OpenDoor_OpenProgress_A82B74514720D53C1AB95F9816B04FEA' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, Timeline_OpenDoor__Direction_A82B74514720D53C1AB95F9816B04FEA) == 0x0002F4, "Member 'ABP_InteractableDoor_C::Timeline_OpenDoor__Direction_A82B74514720D53C1AB95F9816B04FEA' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, Timeline_OpenDoor) == 0x0002F8, "Member 'ABP_InteractableDoor_C::Timeline_OpenDoor' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, IsLocked) == 0x000300, "Member 'ABP_InteractableDoor_C::IsLocked' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, IsClosed) == 0x000301, "Member 'ABP_InteractableDoor_C::IsClosed' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, OpeningSide) == 0x000302, "Member 'ABP_InteractableDoor_C::OpeningSide' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, IsBroken) == 0x000303, "Member 'ABP_InteractableDoor_C::IsBroken' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, BrokenSound) == 0x000308, "Member 'ABP_InteractableDoor_C::BrokenSound' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, IsInCooldown) == 0x000310, "Member 'ABP_InteractableDoor_C::IsInCooldown' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, CooldownDuration) == 0x000318, "Member 'ABP_InteractableDoor_C::CooldownDuration' has a wrong offset!");
static_assert(offsetof(ABP_InteractableDoor_C, Bridge) == 0x000320, "Member 'ABP_InteractableDoor_C::Bridge' has a wrong offset!");

}

