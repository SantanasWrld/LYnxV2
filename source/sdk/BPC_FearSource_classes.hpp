#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_FearSource

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_FearSource.BPC_FearSource_C
// 0x0040 (0x02E0 - 0x02A0)
#pragma pack(push, 0x1)
class alignas(0x10) UBPC_FearSource_C : public USceneComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       FearEmitter;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Radius;                                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FearPerSecond;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFear;                                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckSight;                                        // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JumpFear;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetFearSettings(class ABP_UPPlayerCharacter_C* Player, bool* IsActive_0, double* FearPerSecond_0, double* MaxFear_0, bool* CheckSight_0, double* JumpFear_0);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BPC_FearSource(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_FearSource_C">();
	}
	static class UBPC_FearSource_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_FearSource_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBPC_FearSource_C) == 0x000010, "Wrong alignment on UBPC_FearSource_C");
static_assert(sizeof(UBPC_FearSource_C) == 0x0002E0, "Wrong size on UBPC_FearSource_C");
static_assert(offsetof(UBPC_FearSource_C, UberGraphFrame) == 0x0002A0, "Member 'UBPC_FearSource_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_FearSource_C, FearEmitter) == 0x0002A8, "Member 'UBPC_FearSource_C::FearEmitter' has a wrong offset!");
static_assert(offsetof(UBPC_FearSource_C, Radius) == 0x0002B0, "Member 'UBPC_FearSource_C::Radius' has a wrong offset!");
static_assert(offsetof(UBPC_FearSource_C, FearPerSecond) == 0x0002B8, "Member 'UBPC_FearSource_C::FearPerSecond' has a wrong offset!");
static_assert(offsetof(UBPC_FearSource_C, MaxFear) == 0x0002C0, "Member 'UBPC_FearSource_C::MaxFear' has a wrong offset!");
static_assert(offsetof(UBPC_FearSource_C, CheckSight) == 0x0002C8, "Member 'UBPC_FearSource_C::CheckSight' has a wrong offset!");
static_assert(offsetof(UBPC_FearSource_C, JumpFear) == 0x0002D0, "Member 'UBPC_FearSource_C::JumpFear' has a wrong offset!");

}

