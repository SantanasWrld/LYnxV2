#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPPlayerCharacter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "BP_KillableCharacter_classes.hpp"
#include "E_Dismemberment_structs.hpp"
#include "E_ScoringActorState_structs.hpp"
#include "E_DeathType_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UPPlayerCharacter.BP_UPPlayerCharacter_C
// 0x02F0 (0x0C00 - 0x0910)
class ABP_UPPlayerCharacter_C final : public ABP_KillableCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_UPPlayerCharacter_C;             // 0x0910(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SelfieLight;                                       // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SelfieArrow;                                       // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FirstPersonItemDefault;                            // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_DeathFaceAnims_C*                  DeathFaceAnims;                                    // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HeadMesh;                                          // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOdinSynthComponent*                    OdinSynth;                                         // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerFear_C*                      PlayerFear;                                        // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerContextualSound_C*           Player_Contextual_Sound;                           // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EyesLocation;                                      // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       EyesTracker;                                       // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x0968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FirstPersonCameraParent;                           // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MeshCenter;                                        // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerDialogue_C*                  PlayerDialogue;                                    // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringTagsComponent_C*            Scoring_Tags;                                      // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FirstPersonItemCinematic;                          // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerEmotes_C*                    Player_Emotes;                                     // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        NeckArrow;                                         // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerPerceptionSource_C*          Player_Perception_Source;                          // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerAvatar_C*                    Player_Avatar;                                     // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LookArrow;                                         // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerInventory_C*                 Player_Inventory;                                  // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FirstPersonMesh;                                   // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Crouch_Progress_69D003BC4EBCB093FA8AD2A92DF08B02; // 0x09D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Crouch__Direction_69D003BC4EBCB093FA8AD2A92DF08B02; // 0x09DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9DD[0x3];                                      // 0x09DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Crouch;                                   // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ControlRotationSmooth_Progress_480770CC41680BDE1FBCF18C93A7AABA; // 0x09E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_ControlRotationSmooth__Direction_480770CC41680BDE1FBCF18C93A7AABA; // 0x09EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9ED[0x3];                                      // 0x09ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_ControlRotationSmooth;                    // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Fov_SprintAmount_AED37C7446B3C035960DD18D0617D777; // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Fov__Direction_AED37C7446B3C035960DD18D0617D777; // 0x09FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Fov;                                      // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UW_MainHUD_C*                           MainHudWidget;                                     // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int64                                         SteamID;                                           // 0x0A18(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultSpeed;                                      // 0x0A20(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintFovDelta;                                    // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintSpeed;                                       // 0x0A30(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedOverwrite;                                    // 0x0A38(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SprintTimerHandle;                                 // 0x0A40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSprinting;                                       // 0x0A48(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A49[0x7];                                      // 0x0A49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SprintAmount;                                      // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CrouchSpeed;                                       // 0x0A58(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultHalfHeight;                                 // 0x0A60(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A64[0x4];                                      // 0x0A64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CrouchHalfHeight;                                  // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetHalfHeight;                                  // 0x0A70(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouching;                                       // 0x0A78(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A79[0x7];                                      // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxStamina;                                        // 0x0A80(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinStamina;                                        // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentStamina;                                    // 0x0A90(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeBeforeRegenerating_Stamina;                    // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           StaminaTimerHandle;                                // 0x0AA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSpeed;                                      // 0x0AA8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxtInteractDistance;                              // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AimedActor;                                        // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnLadder;                                        // 0x0AC0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC1[0x7];                                      // 0x0AC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TScriptInterface<class IBPI_Interaction_C> Interaction)> OnInteract; // 0x0AC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsInLobby;                                         // 0x0AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInResults;                                       // 0x0AD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocalPlayer;                                     // 0x0ADA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInMovingVehicle;                                 // 0x0ADB(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInVehicle;                                       // 0x0ADC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ADD[0x3];                                      // 0x0ADD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ImmersiveWidgetClass;                              // 0x0AE0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            ImmersiveWidget;                                   // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentInteraction;                                // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        InteractElapsedSeconds;                            // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasInInterior;                                     // 0x0B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInInterior;                                      // 0x0B01(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpeaking;                                        // 0x0B02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B03[0x5];                                      // 0x0B03(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UPPlayerSpectator_C*                Spectator;                                         // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ForcedFov;                                         // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EyesRotation;                                      // 0x0B18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   LeftArmBoneName;                                   // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasLostLeftArm;                                    // 0x0B38(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasLostLeftLeg;                                    // 0x0B39(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3A[0x6];                                      // 0x0B3A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ForcedAspectRatio;                                 // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      ExteriorVoicePlaybackAttenuation;                  // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USoundAttenuation*                      InteriorVoicePlaybackAttenuation;                  // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USoundCue*                              JumpSound;                                         // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, class USoundCue*>      LandingSounds;                                     // 0x0B60(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnVehicleEntered;                                  // 0x0BB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnVehicleLeft;                                     // 0x0BC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnInteriorEntered;                                 // 0x0BD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnInteriorLeft;                                    // 0x0BE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 Text;                                              // 0x0BF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ApplyCustomGameConfig();
	void CanInteract(bool* Result);
	void CanMove(bool* Value);
	void DebugInteraction(const struct FHitResult& Hit);
	void DebugKill();
	void DisableSpectate();
	void DownloadCaptureTexture(int32 CaptureId);
	void EnableSpectate();
	void EntersLadder();
	void EntersVehicle();
	void ExecuteUbergraph_BP_UPPlayerCharacter(int32 EntryPoint);
	void ExitImmersiveWidget();
	void FrozenDeath();
	void GetDefaultScoringState(E_ScoringActorState* State);
	void GetEyesLocation(struct FVector* EyesLocation_0);
	void GetEyesRotation(const struct FVector& EyesTarget, struct FRotator* EyesRotation_0);
	void GetEyesTarget(bool* TargetFound, struct FVector* TargetLocation);
	void GetFirstPersonItemParent(class USceneComponent** Parent);
	void GetPlayerController(class ABP_UPPlayerController_C** PlayerController);
	void GetPlayerState(class ABP_UPPlayerState_C** PlayerState_0);
	void Harm(int32 Damage, bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Attacker);
	void Headbob();
	void ImmersiveWidgetVisibilityChanged(ESlateVisibility InVisibility);
	void InitDeath();
	void InitMovements();
	void InitUI();
	void InitVoicePlayback();
	void InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Look_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void Interact__Server_(class AActor* Interaction);
	void InteractInProgress(double ElapsedSeconds);
	void Interactions_Tick(double Delta_Seconds);
	void IsInSelfieMode(bool* Result);
	void Kill(bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Killer);
	void LeavesLadder();
	void LeavesVehicle();
	void LightDismemberment(const struct FVector& SourceLocation);
	void Movements_Tick(double Delta_Seconds);
	void OnJumped();
	void OnLanded(const struct FHitResult& Hit);
	void OnRep_ImmersiveWidgetClass();
	void OnRep_IsInInterior();
	void OnRep_IsInRagdoll();
	void OnRep_IsInVehicle();
	void OnRep_IsSprinting();
	void OverrideFov(double FOV);
	void OverwriteSpeed(double Speed);
	void PlayerKilled__All_(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void ProcessLookInput(double InValueX, double InValueY, double* OutValueX, double* OutValueY);
	void ProcessMoveInput(double InValueX, double InValueY, double* OutValueX, double* OutValueY);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void Regenerate_Stamina();
	void SaveCurrentControlRotation(struct FRotator* ControlRotation);
	void SetControlRotationInstant(const struct FRotator& Rotation);
	void SetControlRotationSmooth(const struct FRotator& Rotation);
	void SetCurrentSpeed(double Speed);
	void SetHudVisibility(bool Visible);
	void SetMovementEnabled(bool Enable);
	void SetOverlayMaterial(class UMaterialInterface* Material);
	void SetTargetHalfHeight(double HalfHeight);
	void ShowImmersiveWidget__Server_(class UClass* Widget, class AActor* ViewTarget);
	void SpawnBloodParticles(class FName BoneName, double Size);
	void SpawnSpectator(class ABP_UPPlayerController_C* PlayerController);
	void Sprint_Timer();
	void StartCrouch();
	void StartInteract(class AActor* Interaction);
	void StartSprint();
	void Stop_Sprint();
	void StopCrouch();
	void StopInteract();
	void TeleportPlayer(const struct FVector& Location, const struct FRotator& Rotation);
	void Timeline_ControlRotationSmooth__FinishedFunc();
	void Timeline_ControlRotationSmooth__UpdateFunc();
	void Timeline_Crouch__FinishedFunc();
	void Timeline_Crouch__UpdateFunc();
	void Timeline_Fov__FinishedFunc();
	void Timeline_Fov__UpdateFunc();
	void UpdateEyesRotation();
	void UpdateFov();
	void UpdateHalfHeight();
	void UpdateSpeed();
	void VehiclesTick();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UPPlayerCharacter_C">();
	}
	static class ABP_UPPlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UPPlayerCharacter_C>();
	}
};
static_assert(alignof(ABP_UPPlayerCharacter_C) == 0x000010, "Wrong alignment on ABP_UPPlayerCharacter_C");
static_assert(sizeof(ABP_UPPlayerCharacter_C) == 0x000C00, "Wrong size on ABP_UPPlayerCharacter_C");
static_assert(offsetof(ABP_UPPlayerCharacter_C, UberGraphFrame_BP_UPPlayerCharacter_C) == 0x000910, "Member 'ABP_UPPlayerCharacter_C::UberGraphFrame_BP_UPPlayerCharacter_C' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SelfieLight) == 0x000918, "Member 'ABP_UPPlayerCharacter_C::SelfieLight' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SelfieArrow) == 0x000920, "Member 'ABP_UPPlayerCharacter_C::SelfieArrow' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, FirstPersonItemDefault) == 0x000928, "Member 'ABP_UPPlayerCharacter_C::FirstPersonItemDefault' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, DeathFaceAnims) == 0x000930, "Member 'ABP_UPPlayerCharacter_C::DeathFaceAnims' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, HeadMesh) == 0x000938, "Member 'ABP_UPPlayerCharacter_C::HeadMesh' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, OdinSynth) == 0x000940, "Member 'ABP_UPPlayerCharacter_C::OdinSynth' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, PlayerFear) == 0x000948, "Member 'ABP_UPPlayerCharacter_C::PlayerFear' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Player_Contextual_Sound) == 0x000950, "Member 'ABP_UPPlayerCharacter_C::Player_Contextual_Sound' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, EyesLocation) == 0x000958, "Member 'ABP_UPPlayerCharacter_C::EyesLocation' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, EyesTracker) == 0x000960, "Member 'ABP_UPPlayerCharacter_C::EyesTracker' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, FirstPersonCamera) == 0x000968, "Member 'ABP_UPPlayerCharacter_C::FirstPersonCamera' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, FirstPersonCameraParent) == 0x000970, "Member 'ABP_UPPlayerCharacter_C::FirstPersonCameraParent' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, MeshCenter) == 0x000978, "Member 'ABP_UPPlayerCharacter_C::MeshCenter' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, PlayerDialogue) == 0x000980, "Member 'ABP_UPPlayerCharacter_C::PlayerDialogue' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Scoring_Tags) == 0x000988, "Member 'ABP_UPPlayerCharacter_C::Scoring_Tags' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, FirstPersonItemCinematic) == 0x000990, "Member 'ABP_UPPlayerCharacter_C::FirstPersonItemCinematic' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Player_Emotes) == 0x000998, "Member 'ABP_UPPlayerCharacter_C::Player_Emotes' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, NeckArrow) == 0x0009A0, "Member 'ABP_UPPlayerCharacter_C::NeckArrow' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Player_Perception_Source) == 0x0009A8, "Member 'ABP_UPPlayerCharacter_C::Player_Perception_Source' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, AIPerceptionStimuliSource) == 0x0009B0, "Member 'ABP_UPPlayerCharacter_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Player_Avatar) == 0x0009B8, "Member 'ABP_UPPlayerCharacter_C::Player_Avatar' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, LookArrow) == 0x0009C0, "Member 'ABP_UPPlayerCharacter_C::LookArrow' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Player_Inventory) == 0x0009C8, "Member 'ABP_UPPlayerCharacter_C::Player_Inventory' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, FirstPersonMesh) == 0x0009D0, "Member 'ABP_UPPlayerCharacter_C::FirstPersonMesh' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_Crouch_Progress_69D003BC4EBCB093FA8AD2A92DF08B02) == 0x0009D8, "Member 'ABP_UPPlayerCharacter_C::Timeline_Crouch_Progress_69D003BC4EBCB093FA8AD2A92DF08B02' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_Crouch__Direction_69D003BC4EBCB093FA8AD2A92DF08B02) == 0x0009DC, "Member 'ABP_UPPlayerCharacter_C::Timeline_Crouch__Direction_69D003BC4EBCB093FA8AD2A92DF08B02' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_Crouch) == 0x0009E0, "Member 'ABP_UPPlayerCharacter_C::Timeline_Crouch' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_ControlRotationSmooth_Progress_480770CC41680BDE1FBCF18C93A7AABA) == 0x0009E8, "Member 'ABP_UPPlayerCharacter_C::Timeline_ControlRotationSmooth_Progress_480770CC41680BDE1FBCF18C93A7AABA' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_ControlRotationSmooth__Direction_480770CC41680BDE1FBCF18C93A7AABA) == 0x0009EC, "Member 'ABP_UPPlayerCharacter_C::Timeline_ControlRotationSmooth__Direction_480770CC41680BDE1FBCF18C93A7AABA' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_ControlRotationSmooth) == 0x0009F0, "Member 'ABP_UPPlayerCharacter_C::Timeline_ControlRotationSmooth' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_Fov_SprintAmount_AED37C7446B3C035960DD18D0617D777) == 0x0009F8, "Member 'ABP_UPPlayerCharacter_C::Timeline_Fov_SprintAmount_AED37C7446B3C035960DD18D0617D777' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_Fov__Direction_AED37C7446B3C035960DD18D0617D777) == 0x0009FC, "Member 'ABP_UPPlayerCharacter_C::Timeline_Fov__Direction_AED37C7446B3C035960DD18D0617D777' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Timeline_Fov) == 0x000A00, "Member 'ABP_UPPlayerCharacter_C::Timeline_Fov' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, GameInstance) == 0x000A08, "Member 'ABP_UPPlayerCharacter_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, MainHudWidget) == 0x000A10, "Member 'ABP_UPPlayerCharacter_C::MainHudWidget' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SteamID) == 0x000A18, "Member 'ABP_UPPlayerCharacter_C::SteamID' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, DefaultSpeed) == 0x000A20, "Member 'ABP_UPPlayerCharacter_C::DefaultSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SprintFovDelta) == 0x000A28, "Member 'ABP_UPPlayerCharacter_C::SprintFovDelta' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SprintSpeed) == 0x000A30, "Member 'ABP_UPPlayerCharacter_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SpeedOverwrite) == 0x000A38, "Member 'ABP_UPPlayerCharacter_C::SpeedOverwrite' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SprintTimerHandle) == 0x000A40, "Member 'ABP_UPPlayerCharacter_C::SprintTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsSprinting) == 0x000A48, "Member 'ABP_UPPlayerCharacter_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, SprintAmount) == 0x000A50, "Member 'ABP_UPPlayerCharacter_C::SprintAmount' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, CrouchSpeed) == 0x000A58, "Member 'ABP_UPPlayerCharacter_C::CrouchSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, DefaultHalfHeight) == 0x000A60, "Member 'ABP_UPPlayerCharacter_C::DefaultHalfHeight' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, CrouchHalfHeight) == 0x000A68, "Member 'ABP_UPPlayerCharacter_C::CrouchHalfHeight' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, TargetHalfHeight) == 0x000A70, "Member 'ABP_UPPlayerCharacter_C::TargetHalfHeight' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsCrouching) == 0x000A78, "Member 'ABP_UPPlayerCharacter_C::IsCrouching' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, MaxStamina) == 0x000A80, "Member 'ABP_UPPlayerCharacter_C::MaxStamina' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, MinStamina) == 0x000A88, "Member 'ABP_UPPlayerCharacter_C::MinStamina' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, CurrentStamina) == 0x000A90, "Member 'ABP_UPPlayerCharacter_C::CurrentStamina' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, TimeBeforeRegenerating_Stamina) == 0x000A98, "Member 'ABP_UPPlayerCharacter_C::TimeBeforeRegenerating_Stamina' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, StaminaTimerHandle) == 0x000AA0, "Member 'ABP_UPPlayerCharacter_C::StaminaTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, CurrentSpeed) == 0x000AA8, "Member 'ABP_UPPlayerCharacter_C::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, MaxtInteractDistance) == 0x000AB0, "Member 'ABP_UPPlayerCharacter_C::MaxtInteractDistance' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, AimedActor) == 0x000AB8, "Member 'ABP_UPPlayerCharacter_C::AimedActor' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsOnLadder) == 0x000AC0, "Member 'ABP_UPPlayerCharacter_C::IsOnLadder' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, OnInteract) == 0x000AC8, "Member 'ABP_UPPlayerCharacter_C::OnInteract' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsInLobby) == 0x000AD8, "Member 'ABP_UPPlayerCharacter_C::IsInLobby' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsInResults) == 0x000AD9, "Member 'ABP_UPPlayerCharacter_C::IsInResults' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsLocalPlayer) == 0x000ADA, "Member 'ABP_UPPlayerCharacter_C::IsLocalPlayer' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsInMovingVehicle) == 0x000ADB, "Member 'ABP_UPPlayerCharacter_C::IsInMovingVehicle' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsInVehicle) == 0x000ADC, "Member 'ABP_UPPlayerCharacter_C::IsInVehicle' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, ImmersiveWidgetClass) == 0x000AE0, "Member 'ABP_UPPlayerCharacter_C::ImmersiveWidgetClass' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, ImmersiveWidget) == 0x000AE8, "Member 'ABP_UPPlayerCharacter_C::ImmersiveWidget' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, CurrentInteraction) == 0x000AF0, "Member 'ABP_UPPlayerCharacter_C::CurrentInteraction' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, InteractElapsedSeconds) == 0x000AF8, "Member 'ABP_UPPlayerCharacter_C::InteractElapsedSeconds' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, WasInInterior) == 0x000B00, "Member 'ABP_UPPlayerCharacter_C::WasInInterior' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsInInterior) == 0x000B01, "Member 'ABP_UPPlayerCharacter_C::IsInInterior' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, IsSpeaking) == 0x000B02, "Member 'ABP_UPPlayerCharacter_C::IsSpeaking' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Spectator) == 0x000B08, "Member 'ABP_UPPlayerCharacter_C::Spectator' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, ForcedFov) == 0x000B10, "Member 'ABP_UPPlayerCharacter_C::ForcedFov' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, EyesRotation) == 0x000B18, "Member 'ABP_UPPlayerCharacter_C::EyesRotation' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, LeftArmBoneName) == 0x000B30, "Member 'ABP_UPPlayerCharacter_C::LeftArmBoneName' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, HasLostLeftArm) == 0x000B38, "Member 'ABP_UPPlayerCharacter_C::HasLostLeftArm' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, HasLostLeftLeg) == 0x000B39, "Member 'ABP_UPPlayerCharacter_C::HasLostLeftLeg' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, ForcedAspectRatio) == 0x000B40, "Member 'ABP_UPPlayerCharacter_C::ForcedAspectRatio' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, ExteriorVoicePlaybackAttenuation) == 0x000B48, "Member 'ABP_UPPlayerCharacter_C::ExteriorVoicePlaybackAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, InteriorVoicePlaybackAttenuation) == 0x000B50, "Member 'ABP_UPPlayerCharacter_C::InteriorVoicePlaybackAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, JumpSound) == 0x000B58, "Member 'ABP_UPPlayerCharacter_C::JumpSound' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, LandingSounds) == 0x000B60, "Member 'ABP_UPPlayerCharacter_C::LandingSounds' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, OnVehicleEntered) == 0x000BB0, "Member 'ABP_UPPlayerCharacter_C::OnVehicleEntered' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, OnVehicleLeft) == 0x000BC0, "Member 'ABP_UPPlayerCharacter_C::OnVehicleLeft' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, OnInteriorEntered) == 0x000BD0, "Member 'ABP_UPPlayerCharacter_C::OnInteriorEntered' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, OnInteriorLeft) == 0x000BE0, "Member 'ABP_UPPlayerCharacter_C::OnInteriorLeft' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerCharacter_C, Text) == 0x000BF0, "Member 'ABP_UPPlayerCharacter_C::Text' has a wrong offset!");

}

