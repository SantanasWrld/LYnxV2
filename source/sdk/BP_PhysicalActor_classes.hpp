#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PhysicalActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PhysicalActor.BP_PhysicalActor_C
// 0x0090 (0x0338 - 0x02A8)
class ABP_PhysicalActor_C : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USoundBase*                             SmallCollisionSound;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BigCollisionSound;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            PhysicsPowerForImpulse;                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            NonPhysicsPowerForVelocity;                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystem*>                SmallCollisionParticles;                           // 0x02D0(0x0010)(Edit, BlueprintVisible)
	bool                                          AutoSimulatePhysics;                               // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraSystem*>                 BigCollisionParticles;                             // 0x02E8(0x0010)(Edit, BlueprintVisible)
	double                                        CollisionFXDelay;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastCollisionTime;                                 // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Velocities;                                        // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         VelocityIndex;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAwake;                                           // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              KillCollisionSound;                                // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        KillVelocityAbsorption;                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KillCollisionEffectPower;                          // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_PhysicalActor(int32 EntryPoint);
	void GetAvgVelocity(struct FVector* AvgVelocity);
	void AddVelocityToBuffer();
	void EnableCollisions();
	void GetCollisionEffectPower(class AActor* HitActor, const struct FVector& Impulse, bool* TriggerEffects, double* EffetPower);
	void HasHarmed__All_(TScriptInterface<class IBPI_Killable_C> HarmedActor);
	void HasHarmed__Server_(TScriptInterface<class IBPI_Killable_C> HarmedActor);
	void CollisionEffects(float Power, const struct FVector& Location, const struct FVector& Normal);
	void ReceiveTick(float DeltaSeconds);
	void SleepChanged(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void UpdateIsAwake();
	void HasKilled__All_(TScriptInterface<class IBPI_Killable_C> KilledActor);
	void HasKilled__Server_(TScriptInterface<class IBPI_Killable_C> KilledActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PhysicalActor_C">();
	}
	static class ABP_PhysicalActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PhysicalActor_C>();
	}
};
static_assert(alignof(ABP_PhysicalActor_C) == 0x000008, "Wrong alignment on ABP_PhysicalActor_C");
static_assert(sizeof(ABP_PhysicalActor_C) == 0x000338, "Wrong size on ABP_PhysicalActor_C");
static_assert(offsetof(ABP_PhysicalActor_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_PhysicalActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, SmallCollisionSound) == 0x0002B0, "Member 'ABP_PhysicalActor_C::SmallCollisionSound' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, BigCollisionSound) == 0x0002B8, "Member 'ABP_PhysicalActor_C::BigCollisionSound' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, PhysicsPowerForImpulse) == 0x0002C0, "Member 'ABP_PhysicalActor_C::PhysicsPowerForImpulse' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, NonPhysicsPowerForVelocity) == 0x0002C8, "Member 'ABP_PhysicalActor_C::NonPhysicsPowerForVelocity' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, SmallCollisionParticles) == 0x0002D0, "Member 'ABP_PhysicalActor_C::SmallCollisionParticles' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, AutoSimulatePhysics) == 0x0002E0, "Member 'ABP_PhysicalActor_C::AutoSimulatePhysics' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, BigCollisionParticles) == 0x0002E8, "Member 'ABP_PhysicalActor_C::BigCollisionParticles' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, CollisionFXDelay) == 0x0002F8, "Member 'ABP_PhysicalActor_C::CollisionFXDelay' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, LastCollisionTime) == 0x000300, "Member 'ABP_PhysicalActor_C::LastCollisionTime' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, Velocities) == 0x000308, "Member 'ABP_PhysicalActor_C::Velocities' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, VelocityIndex) == 0x000318, "Member 'ABP_PhysicalActor_C::VelocityIndex' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, IsAwake) == 0x00031C, "Member 'ABP_PhysicalActor_C::IsAwake' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, KillCollisionSound) == 0x000320, "Member 'ABP_PhysicalActor_C::KillCollisionSound' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, KillVelocityAbsorption) == 0x000328, "Member 'ABP_PhysicalActor_C::KillVelocityAbsorption' has a wrong offset!");
static_assert(offsetof(ABP_PhysicalActor_C, KillCollisionEffectPower) == 0x000330, "Member 'ABP_PhysicalActor_C::KillCollisionEffectPower' has a wrong offset!");

}

