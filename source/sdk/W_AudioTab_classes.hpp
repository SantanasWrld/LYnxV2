#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_AudioTab

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_AudioTab.W_AudioTab_C
// 0x00B0 (0x0370 - 0x02C0)
class UW_AudioTab_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                BlackBackground;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         MasterVolumeHBox;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                MasterVolumeSlider;                                // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MasterVolumeValue;                                 // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Microphone;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        MicrophoneQBox;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         MicVolumeHBox;                                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                MicVolumeSlider;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MicVolumeValue;                                    // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        ModeQBox;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              MusicCheckBox;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           ResetVBox;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                ResetVoiceChatBtn;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         VoicePlaybackVolumeHBox;                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                VoicePlaybackVolumeSlider;                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             VoicePlaybackVolumeValue;                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MainMenu_C*                          MainMenu;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentDeviceName;                                 // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundClass*                            VoiceChatSoundClass;                               // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__W_AudioTab_BlackBackground_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__W_AudioTab_IlluminationQBox_K2Node_ComponentBoundEvent_1_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__W_AudioTab_MasterVolumeSlider_K2Node_ComponentBoundEvent_6_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__W_AudioTab_ModeQBox_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__W_AudioTab_MusicCheckBox_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__W_AudioTab_ResetVoiceChatBtn_K2Node_ComponentBoundEvent_8_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__W_AudioTab_VoiceChatVolumeSlider_K2Node_ComponentBoundEvent_5_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void BndEvt__W_AudioTab_VolumeSlider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void ExecuteUbergraph_W_AudioTab(int32 EntryPoint);
	void MainMenuDisplayed();
	void TabDisplayed();
	void TabFocus();
	void TabHidden();
	void TabInit(class UW_MainMenu_C* MainMenu_0);
	void UpdateCaptureDevices(const TArray<struct FOdinCaptureDeviceInfo>& Devices, const struct FOdinCaptureDeviceInfo& CurrentDevice);
	void UpdateMasterVolume();
	void UpdateMicrophone();
	void UpdateMicVolume();
	void UpdateMode();
	void UpdateMusic();
	void UpdateResetVisibility();
	void UpdateVoicePlaybackVolume();
	void VisibilityChanged(ESlateVisibility InVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_AudioTab_C">();
	}
	static class UW_AudioTab_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_AudioTab_C>();
	}
};
static_assert(alignof(UW_AudioTab_C) == 0x000008, "Wrong alignment on UW_AudioTab_C");
static_assert(sizeof(UW_AudioTab_C) == 0x000370, "Wrong size on UW_AudioTab_C");
static_assert(offsetof(UW_AudioTab_C, UberGraphFrame) == 0x0002C0, "Member 'UW_AudioTab_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, BlackBackground) == 0x0002C8, "Member 'UW_AudioTab_C::BlackBackground' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MasterVolumeHBox) == 0x0002D0, "Member 'UW_AudioTab_C::MasterVolumeHBox' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MasterVolumeSlider) == 0x0002D8, "Member 'UW_AudioTab_C::MasterVolumeSlider' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MasterVolumeValue) == 0x0002E0, "Member 'UW_AudioTab_C::MasterVolumeValue' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, Microphone) == 0x0002E8, "Member 'UW_AudioTab_C::Microphone' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MicrophoneQBox) == 0x0002F0, "Member 'UW_AudioTab_C::MicrophoneQBox' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MicVolumeHBox) == 0x0002F8, "Member 'UW_AudioTab_C::MicVolumeHBox' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MicVolumeSlider) == 0x000300, "Member 'UW_AudioTab_C::MicVolumeSlider' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MicVolumeValue) == 0x000308, "Member 'UW_AudioTab_C::MicVolumeValue' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, ModeQBox) == 0x000310, "Member 'UW_AudioTab_C::ModeQBox' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MusicCheckBox) == 0x000318, "Member 'UW_AudioTab_C::MusicCheckBox' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, ResetVBox) == 0x000320, "Member 'UW_AudioTab_C::ResetVBox' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, ResetVoiceChatBtn) == 0x000328, "Member 'UW_AudioTab_C::ResetVoiceChatBtn' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, VoicePlaybackVolumeHBox) == 0x000330, "Member 'UW_AudioTab_C::VoicePlaybackVolumeHBox' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, VoicePlaybackVolumeSlider) == 0x000338, "Member 'UW_AudioTab_C::VoicePlaybackVolumeSlider' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, VoicePlaybackVolumeValue) == 0x000340, "Member 'UW_AudioTab_C::VoicePlaybackVolumeValue' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, MainMenu) == 0x000348, "Member 'UW_AudioTab_C::MainMenu' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, CurrentDeviceName) == 0x000350, "Member 'UW_AudioTab_C::CurrentDeviceName' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, GameInstance) == 0x000360, "Member 'UW_AudioTab_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UW_AudioTab_C, VoiceChatSoundClass) == 0x000368, "Member 'UW_AudioTab_C::VoiceChatSoundClass' has a wrong offset!");

}

