#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Insect

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Parent_Enemy_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Insect.BP_Insect_C
// 0x0070 (0x0B00 - 0x0A90)
class ABP_Insect_C : public ABP_Parent_Enemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Insect_C;                        // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   InteractionCollision;                              // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        DetachInteractDistance;                            // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DetachInteractText;                                // 0x0AA0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         InfectedTypes;                                     // 0x0AB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        DetachInteractDuration;                            // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              JumpSound;                                         // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              AttachedSound;                                     // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              WalkSound;                                         // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WalkAudio;                                         // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AttachedAudio;                                     // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ReleaseJumpVelocity;                               // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsAttachedToLocalPlayer(bool* Result);
	void CanPlayerKillInsect(class ABP_UPPlayerCharacter_C* Player, bool* Result);
	void GetInteractDuration(double* Duration);
	void GetInteractDistance(double* Distance);
	void GetInteractText(class FText* Text);
	void GetInteractNoise(bool* NoiseOnInteract, double* NoiseRange);
	void JumpOnTarget(const struct FVector& LaunchVelocity);
	void AttachToCharacter(class ABP_KillableCharacter_C* Character, class FName BoneName);
	void Interact(class ABP_UPPlayerCharacter_C* Player);
	void Killed__Server_(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void StopCameraShakeWhenDead(class ABP_UPPlayerController_C* PlayerController, int32 CameraShakeIndex);
	void InfectTarget(class ABP_KillableCharacter_C* Killable);
	void ReceiveTick(float DeltaSeconds);
	void JumpStarted__All_();
	void DetachFromCharacter();
	void ExecuteUbergraph_BP_Insect(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Insect_C">();
	}
	static class ABP_Insect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Insect_C>();
	}
};
static_assert(alignof(ABP_Insect_C) == 0x000010, "Wrong alignment on ABP_Insect_C");
static_assert(sizeof(ABP_Insect_C) == 0x000B00, "Wrong size on ABP_Insect_C");
static_assert(offsetof(ABP_Insect_C, UberGraphFrame_BP_Insect_C) == 0x000A88, "Member 'ABP_Insect_C::UberGraphFrame_BP_Insect_C' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, InteractionCollision) == 0x000A90, "Member 'ABP_Insect_C::InteractionCollision' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, DetachInteractDistance) == 0x000A98, "Member 'ABP_Insect_C::DetachInteractDistance' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, DetachInteractText) == 0x000AA0, "Member 'ABP_Insect_C::DetachInteractText' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, InfectedTypes) == 0x000AB8, "Member 'ABP_Insect_C::InfectedTypes' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, DetachInteractDuration) == 0x000AC8, "Member 'ABP_Insect_C::DetachInteractDuration' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, JumpSound) == 0x000AD0, "Member 'ABP_Insect_C::JumpSound' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, AttachedSound) == 0x000AD8, "Member 'ABP_Insect_C::AttachedSound' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, WalkSound) == 0x000AE0, "Member 'ABP_Insect_C::WalkSound' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, WalkAudio) == 0x000AE8, "Member 'ABP_Insect_C::WalkAudio' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, AttachedAudio) == 0x000AF0, "Member 'ABP_Insect_C::AttachedAudio' has a wrong offset!");
static_assert(offsetof(ABP_Insect_C, ReleaseJumpVelocity) == 0x000AF8, "Member 'ABP_Insect_C::ReleaseJumpVelocity' has a wrong offset!");

}

