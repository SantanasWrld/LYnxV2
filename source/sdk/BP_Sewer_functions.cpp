#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Sewer

#include "Basic.hpp"

#include "BP_Sewer_classes.hpp"
#include "BP_Sewer_parameters.hpp"


namespace SDK
{

// Function BP_Sewer.BP_Sewer_C.BeforeExplosionEffects
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Sewer_C::BeforeExplosionEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "BeforeExplosionEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Sewer.BP_Sewer_C.BndEvt__BP_Mine_MineRadius_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Sewer_C::BndEvt__BP_Mine_MineRadius_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "BndEvt__BP_Mine_MineRadius_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_Sewer_C_BndEvt__BP_Mine_MineRadius_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Sewer.BP_Sewer_C.ExecuteUbergraph_BP_Sewer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Sewer_C::ExecuteUbergraph_BP_Sewer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "ExecuteUbergraph_BP_Sewer");

	Params::BP_Sewer_C_ExecuteUbergraph_BP_Sewer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Sewer.BP_Sewer_C.Explosion (Server)
// (BlueprintCallable, BlueprintEvent)

void ABP_Sewer_C::Explosion__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "Explosion (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Sewer.BP_Sewer_C.ExplosionEffects
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Sewer_C::ExplosionEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "ExplosionEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Sewer.BP_Sewer_C.FreezeTargets
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class ABP_KillableCharacter_C*>&Killables                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Sewer_C::FreezeTargets(const TArray<class ABP_KillableCharacter_C*>& Killables)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "FreezeTargets");

	Params::BP_Sewer_C_FreezeTargets Parms{};

	Parms.Killables = std::move(Killables);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Sewer.BP_Sewer_C.GetKillablesInDanger
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_KillableCharacter_C*>* Killables                                              (Parm, OutParm)

void ABP_Sewer_C::GetKillablesInDanger(TArray<class ABP_KillableCharacter_C*>* Killables)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "GetKillablesInDanger");

	Params::BP_Sewer_C_GetKillablesInDanger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Killables != nullptr)
		*Killables = std::move(Parms.Killables);
}


// Function BP_Sewer.BP_Sewer_C.OnRep_IsTrapActive
// (BlueprintCallable, BlueprintEvent)

void ABP_Sewer_C::OnRep_IsTrapActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "OnRep_IsTrapActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Sewer.BP_Sewer_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Sewer_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Sewer.BP_Sewer_C.SewerVibration
// (BlueprintCallable, BlueprintEvent)

void ABP_Sewer_C::SewerVibration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "SewerVibration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Sewer.BP_Sewer_C.SnapToGround
// (BlueprintCallable, BlueprintEvent)

void ABP_Sewer_C::SnapToGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "SnapToGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Sewer.BP_Sewer_C.UnfreezeTargets
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class ABP_KillableCharacter_C*>&Killables                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Sewer_C::UnfreezeTargets(const TArray<class ABP_KillableCharacter_C*>& Killables)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Sewer_C", "UnfreezeTargets");

	Params::BP_Sewer_C_UnfreezeTargets Parms{};

	Parms.Killables = std::move(Killables);

	UObject::ProcessEvent(Func, &Parms);
}

}

