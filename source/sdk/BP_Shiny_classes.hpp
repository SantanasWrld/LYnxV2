#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Shiny

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Parent_Enemy_classes.hpp"
#include "E_ScoringActorState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Shiny.BP_Shiny_C
// 0x0090 (0x0B20 - 0x0A90)
class ABP_Shiny_C : public ABP_Parent_Enemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Shiny_C;                         // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      ExplosionPreparationParticles;                     // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PlayerDetector;                                    // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Teleport_Rotation_382FFE5B4C5ACE07DF226499C5770E47; // 0x0AA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Teleport__Direction_382FFE5B4C5ACE07DF226499C5770E47; // 0x0AA4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA5[0x3];                                      // 0x0AA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Teleport;                                 // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ExplosionPreparationAudio;                         // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   GlowParamName;                                     // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   OpacityParamName;                                  // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeleporting;                                     // 0x0AD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPreparingToExplode;                              // 0x0AD1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD2[0x6];                                      // 0x0AD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ExplosionPreparationSound;                         // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              TeleportingSound;                                  // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        TeleportingAudio;                                  // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          HasExploded;                                       // 0x0AF0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultGlow;                                       // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TeleportGlow;                                      // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackGlow;                                        // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExplodedGlow;                                      // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetGlow(double Glow);
	void GetDefaultScoringState(E_ScoringActorState* State);
	void Timeline_Teleport__FinishedFunc();
	void Timeline_Teleport__UpdateFunc();
	void Explode();
	void ReceiveBeginPlay();
	void OnRep_IsTeleporting();
	void OnRep_IsPreparingToExplode();
	void Killed__Server_(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void OnRep_HasExploded();
	void UpdateGlow();
	void ExecuteUbergraph_BP_Shiny(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Shiny_C">();
	}
	static class ABP_Shiny_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Shiny_C>();
	}
};
static_assert(alignof(ABP_Shiny_C) == 0x000010, "Wrong alignment on ABP_Shiny_C");
static_assert(sizeof(ABP_Shiny_C) == 0x000B20, "Wrong size on ABP_Shiny_C");
static_assert(offsetof(ABP_Shiny_C, UberGraphFrame_BP_Shiny_C) == 0x000A88, "Member 'ABP_Shiny_C::UberGraphFrame_BP_Shiny_C' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, ExplosionPreparationParticles) == 0x000A90, "Member 'ABP_Shiny_C::ExplosionPreparationParticles' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, PlayerDetector) == 0x000A98, "Member 'ABP_Shiny_C::PlayerDetector' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, Timeline_Teleport_Rotation_382FFE5B4C5ACE07DF226499C5770E47) == 0x000AA0, "Member 'ABP_Shiny_C::Timeline_Teleport_Rotation_382FFE5B4C5ACE07DF226499C5770E47' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, Timeline_Teleport__Direction_382FFE5B4C5ACE07DF226499C5770E47) == 0x000AA4, "Member 'ABP_Shiny_C::Timeline_Teleport__Direction_382FFE5B4C5ACE07DF226499C5770E47' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, Timeline_Teleport) == 0x000AA8, "Member 'ABP_Shiny_C::Timeline_Teleport' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, MaterialInstance) == 0x000AB0, "Member 'ABP_Shiny_C::MaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, ExplosionPreparationAudio) == 0x000AB8, "Member 'ABP_Shiny_C::ExplosionPreparationAudio' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, GlowParamName) == 0x000AC0, "Member 'ABP_Shiny_C::GlowParamName' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, OpacityParamName) == 0x000AC8, "Member 'ABP_Shiny_C::OpacityParamName' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, IsTeleporting) == 0x000AD0, "Member 'ABP_Shiny_C::IsTeleporting' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, IsPreparingToExplode) == 0x000AD1, "Member 'ABP_Shiny_C::IsPreparingToExplode' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, ExplosionPreparationSound) == 0x000AD8, "Member 'ABP_Shiny_C::ExplosionPreparationSound' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, TeleportingSound) == 0x000AE0, "Member 'ABP_Shiny_C::TeleportingSound' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, TeleportingAudio) == 0x000AE8, "Member 'ABP_Shiny_C::TeleportingAudio' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, HasExploded) == 0x000AF0, "Member 'ABP_Shiny_C::HasExploded' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, DefaultGlow) == 0x000AF8, "Member 'ABP_Shiny_C::DefaultGlow' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, TeleportGlow) == 0x000B00, "Member 'ABP_Shiny_C::TeleportGlow' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, AttackGlow) == 0x000B08, "Member 'ABP_Shiny_C::AttackGlow' has a wrong offset!");
static_assert(offsetof(ABP_Shiny_C, ExplodedGlow) == 0x000B10, "Member 'ABP_Shiny_C::ExplodedGlow' has a wrong offset!");

}

