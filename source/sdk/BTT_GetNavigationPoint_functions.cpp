#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_GetNavigationPoint

#include "Basic.hpp"

#include "BTT_GetNavigationPoint_classes.hpp"
#include "BTT_GetNavigationPoint_parameters.hpp"


namespace SDK
{

// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.IsNavPointAvailable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_NavigationPoint_C*            NavPoint                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_GetNavigationPoint_C::IsNavPointAvailable(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, class ABP_NavigationPoint_C* NavPoint, bool* Available, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_GetNavigationPoint_C", "IsNavPointAvailable");

	Params::BTT_GetNavigationPoint_C_IsNavPointAvailable Parms{};

	Parms.Controller = Controller;
	Parms.Pawn = Pawn;
	Parms.NavPoint = NavPoint;

	UObject::ProcessEvent(Func, &Parms);

	if (Available != nullptr)
		*Available = Parms.Available;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.GetNavPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   PointFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_GetNavigationPoint_C::GetNavPoint(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, bool* PointFound, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_GetNavigationPoint_C", "GetNavPoint");

	Params::BTT_GetNavigationPoint_C_GetNavPoint Parms{};

	Parms.Controller = Controller;
	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (PointFound != nullptr)
		*PointFound = Parms.PointFound;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_GetNavigationPoint_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_GetNavigationPoint_C", "ReceiveExecuteAI");

	Params::BTT_GetNavigationPoint_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.ExecuteUbergraph_BTT_GetNavigationPoint
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_GetNavigationPoint_C::ExecuteUbergraph_BTT_GetNavigationPoint(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_GetNavigationPoint_C", "ExecuteUbergraph_BTT_GetNavigationPoint");

	Params::BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

