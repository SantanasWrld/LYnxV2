#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Sewer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Sewer.BP_Sewer_C
// 0x00A8 (0x0340 - 0x0298)
class ABP_Sewer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        VibrationImpulse1;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        VibrationImpulse2;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HoleCircle;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeParticles;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DangerEffects;                                     // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                ScoringMonster;                                    // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Monster;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayersProximity_C*                Players_Proximity;                                 // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sewer;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DangerRadius;                                      // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SewerRadius;                                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsInDanger;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Damage;                                            // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTrapActive;                                      // 0x0314(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ExplosionImpulse;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinActivationDelay;                                // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxActivationDelay;                                // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SewerVibrationDelay;                               // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SewerVibrationTimer;                               // 0x0338(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BeforeExplosionEffects();
	void BndEvt__BP_Mine_MineRadius_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_BP_Sewer(int32 EntryPoint);
	void Explosion__Server_();
	void ExplosionEffects();
	void FreezeTargets(const TArray<class ABP_KillableCharacter_C*>& Killables);
	void GetKillablesInDanger(TArray<class ABP_KillableCharacter_C*>* Killables);
	void OnRep_IsTrapActive();
	void ReceiveBeginPlay();
	void SewerVibration();
	void SnapToGround();
	void UnfreezeTargets(const TArray<class ABP_KillableCharacter_C*>& Killables);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Sewer_C">();
	}
	static class ABP_Sewer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Sewer_C>();
	}
};
static_assert(alignof(ABP_Sewer_C) == 0x000008, "Wrong alignment on ABP_Sewer_C");
static_assert(sizeof(ABP_Sewer_C) == 0x000340, "Wrong size on ABP_Sewer_C");
static_assert(offsetof(ABP_Sewer_C, UberGraphFrame) == 0x000298, "Member 'ABP_Sewer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, VibrationImpulse1) == 0x0002A0, "Member 'ABP_Sewer_C::VibrationImpulse1' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, VibrationImpulse2) == 0x0002A8, "Member 'ABP_Sewer_C::VibrationImpulse2' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, HoleCircle) == 0x0002B0, "Member 'ABP_Sewer_C::HoleCircle' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, SmokeParticles) == 0x0002B8, "Member 'ABP_Sewer_C::SmokeParticles' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, DangerEffects) == 0x0002C0, "Member 'ABP_Sewer_C::DangerEffects' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, ScoringMonster) == 0x0002C8, "Member 'ABP_Sewer_C::ScoringMonster' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, Monster) == 0x0002D0, "Member 'ABP_Sewer_C::Monster' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, Players_Proximity) == 0x0002D8, "Member 'ABP_Sewer_C::Players_Proximity' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, Sewer) == 0x0002E0, "Member 'ABP_Sewer_C::Sewer' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, DangerRadius) == 0x0002E8, "Member 'ABP_Sewer_C::DangerRadius' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, SewerRadius) == 0x0002F0, "Member 'ABP_Sewer_C::SewerRadius' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, DefaultSceneRoot) == 0x0002F8, "Member 'ABP_Sewer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, ActorsInDanger) == 0x000300, "Member 'ABP_Sewer_C::ActorsInDanger' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, Damage) == 0x000310, "Member 'ABP_Sewer_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, IsTrapActive) == 0x000314, "Member 'ABP_Sewer_C::IsTrapActive' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, ExplosionImpulse) == 0x000318, "Member 'ABP_Sewer_C::ExplosionImpulse' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, MinActivationDelay) == 0x000320, "Member 'ABP_Sewer_C::MinActivationDelay' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, MaxActivationDelay) == 0x000328, "Member 'ABP_Sewer_C::MaxActivationDelay' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, SewerVibrationDelay) == 0x000330, "Member 'ABP_Sewer_C::SewerVibrationDelay' has a wrong offset!");
static_assert(offsetof(ABP_Sewer_C, SewerVibrationTimer) == 0x000338, "Member 'ABP_Sewer_C::SewerVibrationTimer' has a wrong offset!");

}

