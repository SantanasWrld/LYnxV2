#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Interaction

#include "Basic.hpp"

#include "BPI_Interaction_classes.hpp"
#include "BPI_Interaction_parameters.hpp"


namespace SDK
{

// Function BPI_Interaction.BPI_Interaction_C.GetInteractDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Interaction_C::GetInteractDistance(double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Interaction_C", "GetInteractDistance");

	Params::BPI_Interaction_C_GetInteractDistance Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BPI_Interaction.BPI_Interaction_C.GetInteractDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Duration                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Interaction_C::GetInteractDuration(double* Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Interaction_C", "GetInteractDuration");

	Params::BPI_Interaction_C_GetInteractDuration Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Duration != nullptr)
		*Duration = Parms.Duration;
}


// Function BPI_Interaction.BPI_Interaction_C.GetInteractNoise
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   NoiseOnInteract                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 NoiseRange                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Interaction_C::GetInteractNoise(bool* NoiseOnInteract, double* NoiseRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Interaction_C", "GetInteractNoise");

	Params::BPI_Interaction_C_GetInteractNoise Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (NoiseOnInteract != nullptr)
		*NoiseOnInteract = Parms.NoiseOnInteract;

	if (NoiseRange != nullptr)
		*NoiseRange = Parms.NoiseRange;
}


// Function BPI_Interaction.BPI_Interaction_C.GetInteractText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText*                            Text                                                   (Parm, OutParm)

void IBPI_Interaction_C::GetInteractText(class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Interaction_C", "GetInteractText");

	Params::BPI_Interaction_C_GetInteractText Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BPI_Interaction.BPI_Interaction_C.Interact
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Interaction_C::Interact(class ABP_UPPlayerCharacter_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Interaction_C", "Interact");

	Params::BPI_Interaction_C_Interact Parms{};

	Parms.Player = Player;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Interaction.BPI_Interaction_C.InteractionStarted
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Interaction_C::InteractionStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Interaction_C", "InteractionStarted");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Interaction.BPI_Interaction_C.InteractionStopped
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Interaction_C::InteractionStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Interaction_C", "InteractionStopped");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

