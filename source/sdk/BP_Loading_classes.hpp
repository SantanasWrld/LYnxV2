#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Loading

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Loading.BP_Loading_C
// 0x0020 (0x02B8 - 0x0298)
class ABP_Loading_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadingCompleted;                                // 0x02A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UPGameViewportClient_C*             ViewportClient;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Loading(int32 EntryPoint);
	void GetEpisodeData(int32* Difficulty, int32* CurrentPoints, int32* Objective, int32* RemainingDays);
	void OnRep_IsLoadingCompleted();
	void ReceiveBeginPlay();
	void ServerTravelStarted(const class FString& DestinationMapName);
	void StartLoading(const class FString& MapName, int32 Difficulty, int32 CurrentPoints, int32 Objective, int32 RemainingDays);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Loading_C">();
	}
	static class ABP_Loading_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Loading_C>();
	}
};
static_assert(alignof(ABP_Loading_C) == 0x000008, "Wrong alignment on ABP_Loading_C");
static_assert(sizeof(ABP_Loading_C) == 0x0002B8, "Wrong size on ABP_Loading_C");
static_assert(offsetof(ABP_Loading_C, UberGraphFrame) == 0x000298, "Member 'ABP_Loading_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Loading_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_Loading_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Loading_C, IsLoadingCompleted) == 0x0002A8, "Member 'ABP_Loading_C::IsLoadingCompleted' has a wrong offset!");
static_assert(offsetof(ABP_Loading_C, ViewportClient) == 0x0002B0, "Member 'ABP_Loading_C::ViewportClient' has a wrong offset!");

}

