#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_GetNavPointAvoidingTarget

#include "Basic.hpp"

#include "BTT_GetNavPointAvoidingTarget_classes.hpp"
#include "BTT_GetNavPointAvoidingTarget_parameters.hpp"


namespace SDK
{

// Function BTT_GetNavPointAvoidingTarget.BTT_GetNavPointAvoidingTarget_C.IsNavPointAvailable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_NavigationPoint_C*            NavPoint                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_GetNavPointAvoidingTarget_C::IsNavPointAvailable(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, class ABP_NavigationPoint_C* NavPoint, bool* Available, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_GetNavPointAvoidingTarget_C", "IsNavPointAvailable");

	Params::BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable Parms{};

	Parms.Controller = Controller;
	Parms.Pawn = Pawn;
	Parms.NavPoint = NavPoint;

	UObject::ProcessEvent(Func, &Parms);

	if (Available != nullptr)
		*Available = Parms.Available;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BTT_GetNavPointAvoidingTarget.BTT_GetNavPointAvoidingTarget_C.IsValidPath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNavigationPath*                  Path                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   AILocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_GetNavPointAvoidingTarget_C::IsValidPath(class UNavigationPath* Path, const struct FVector& AILocation, const struct FVector& TargetLocation, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_GetNavPointAvoidingTarget_C", "IsValidPath");

	Params::BTT_GetNavPointAvoidingTarget_C_IsValidPath Parms{};

	Parms.Path = Path;
	Parms.AILocation = std::move(AILocation);
	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}

}

