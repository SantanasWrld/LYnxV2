#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tormentor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Parent_Enemy_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Tormentor.BP_Tormentor_C
// 0x0070 (0x0B00 - 0x0A90)
class ABP_Tormentor_C : public ABP_Parent_Enemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Tormentor_C;                     // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RadialForce;                                       // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowForce;                                        // 0x0A9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  MeshParts;                                         // 0x0AA0(0x0010)(Edit, BlueprintVisible)
	class USkeleton*                              Skeleton;                                          // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPhysicsAsset*                          PhysicsAsset;                                      // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   MaterialSlot;                                      // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_KillableCharacter_C*                DanceTarget;                                       // 0x0AD0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABP_KillableCharacter_C*                SecondaryTarget;                                   // 0x0AD8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DanceDamageTimerHandle;                            // 0x0AE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              DanceImpactSound;                                  // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DanceImpactCameraShakeRadius;                      // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF4[0x4];                                      // 0x0AF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           DanceImpactCameraShake;                            // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void MergeMeshParts();
	void FindSecondaryTarget(class ABP_KillableCharacter_C** Character);
	void GetThrowDirection(struct FVector* Direction);
	void UserConstructionScript();
	void OnRep_IsAttacking();
	void OnRep_DanceTarget();
	void KnockOut(double Duration);
	void ReceiveTick(float DeltaSeconds);
	void GrabTarget(class ABP_KillableCharacter_C* Character);
	void ReleaseTarget(class ABP_KillableCharacter_C* Character);
	void ThrowTarget(class ABP_KillableCharacter_C* Character, const struct FVector& Impulse);
	void UpdateSecondaryTarget();
	void ReceiveBeginPlay();
	void EnableRagdoll(const struct FVector& SourceLocation, double Force);
	void DanceImpact();
	void StartDanceImpactCameraShake();
	void ExecuteUbergraph_BP_Tormentor(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Tormentor_C">();
	}
	static class ABP_Tormentor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Tormentor_C>();
	}
};
static_assert(alignof(ABP_Tormentor_C) == 0x000010, "Wrong alignment on ABP_Tormentor_C");
static_assert(sizeof(ABP_Tormentor_C) == 0x000B00, "Wrong size on ABP_Tormentor_C");
static_assert(offsetof(ABP_Tormentor_C, UberGraphFrame_BP_Tormentor_C) == 0x000A88, "Member 'ABP_Tormentor_C::UberGraphFrame_BP_Tormentor_C' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, PhysicsConstraint) == 0x000A90, "Member 'ABP_Tormentor_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, RadialForce) == 0x000A98, "Member 'ABP_Tormentor_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, ThrowForce) == 0x000A9C, "Member 'ABP_Tormentor_C::ThrowForce' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, MeshParts) == 0x000AA0, "Member 'ABP_Tormentor_C::MeshParts' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, Skeleton) == 0x000AB0, "Member 'ABP_Tormentor_C::Skeleton' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, PhysicsAsset) == 0x000AB8, "Member 'ABP_Tormentor_C::PhysicsAsset' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, MaterialSlot) == 0x000AC0, "Member 'ABP_Tormentor_C::MaterialSlot' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, Material) == 0x000AC8, "Member 'ABP_Tormentor_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, DanceTarget) == 0x000AD0, "Member 'ABP_Tormentor_C::DanceTarget' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, SecondaryTarget) == 0x000AD8, "Member 'ABP_Tormentor_C::SecondaryTarget' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, DanceDamageTimerHandle) == 0x000AE0, "Member 'ABP_Tormentor_C::DanceDamageTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, DanceImpactSound) == 0x000AE8, "Member 'ABP_Tormentor_C::DanceImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, DanceImpactCameraShakeRadius) == 0x000AF0, "Member 'ABP_Tormentor_C::DanceImpactCameraShakeRadius' has a wrong offset!");
static_assert(offsetof(ABP_Tormentor_C, DanceImpactCameraShake) == 0x000AF8, "Member 'ABP_Tormentor_C::DanceImpactCameraShake' has a wrong offset!");

}

