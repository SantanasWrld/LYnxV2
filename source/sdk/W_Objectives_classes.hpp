#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Objectives

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Objectives.W_Objectives_C
// 0x0090 (0x0350 - 0x02C0)
class UW_Objectives_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URichTextBlock*                         Description;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Title;                                             // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsInResults;                                       // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ExitHelicopterObjective;                           // 0x02E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PublicationObjective;                              // 0x02F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   GoToSessionObjective;                              // 0x0310(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SessionObjective;                                  // 0x0328(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ResultTV_C*                         ResultTV;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void DisplaySessionObjective();
	void ExecuteUbergraph_W_Objectives(int32 EntryPoint);
	void OnInitialized();
	void ResultsUpdate();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TryGetTV(bool* IsValid, class ABP_ResultTV_C** ResultTV_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Objectives_C">();
	}
	static class UW_Objectives_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Objectives_C>();
	}
};
static_assert(alignof(UW_Objectives_C) == 0x000008, "Wrong alignment on UW_Objectives_C");
static_assert(sizeof(UW_Objectives_C) == 0x000350, "Wrong size on UW_Objectives_C");
static_assert(offsetof(UW_Objectives_C, UberGraphFrame) == 0x0002C0, "Member 'UW_Objectives_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, Description) == 0x0002C8, "Member 'UW_Objectives_C::Description' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, Title) == 0x0002D0, "Member 'UW_Objectives_C::Title' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, IsInResults) == 0x0002D8, "Member 'UW_Objectives_C::IsInResults' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, ExitHelicopterObjective) == 0x0002E0, "Member 'UW_Objectives_C::ExitHelicopterObjective' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, PublicationObjective) == 0x0002F8, "Member 'UW_Objectives_C::PublicationObjective' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, GoToSessionObjective) == 0x000310, "Member 'UW_Objectives_C::GoToSessionObjective' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, SessionObjective) == 0x000328, "Member 'UW_Objectives_C::SessionObjective' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, GameInstance) == 0x000340, "Member 'UW_Objectives_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UW_Objectives_C, ResultTV) == 0x000348, "Member 'UW_Objectives_C::ResultTV' has a wrong offset!");

}

