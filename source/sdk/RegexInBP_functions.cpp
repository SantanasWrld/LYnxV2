#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RegexInBP

#include "Basic.hpp"

#include "RegexInBP_classes.hpp"
#include "RegexInBP_parameters.hpp"


namespace SDK
{

// Function RegexInBP.RegexBPLibrary.CanMatch
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Pattern                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URegexBPLibrary::CanMatch(const class FString& Pattern, const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RegexBPLibrary", "CanMatch");

	Params::RegexBPLibrary_CanMatch Parms{};

	Parms.Pattern = std::move(Pattern);
	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RegexInBP.RegexBPLibrary.Match
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Pattern                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> URegexBPLibrary::Match(const class FString& Pattern, const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RegexBPLibrary", "Match");

	Params::RegexBPLibrary_Match Parms{};

	Parms.Pattern = std::move(Pattern);
	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RegexInBP.RegexBPLibrary.MatchExtended
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Pattern                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRegexExtendedResult>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FRegexExtendedResult> URegexBPLibrary::MatchExtended(const class FString& Pattern, const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RegexBPLibrary", "MatchExtended");

	Params::RegexBPLibrary_MatchExtended Parms{};

	Parms.Pattern = std::move(Pattern);
	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

