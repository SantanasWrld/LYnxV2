#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPGameState

#include "Basic.hpp"

#include "BP_UPGameState_classes.hpp"
#include "BP_UPGameState_parameters.hpp"


namespace SDK
{

// Function BP_UPGameState.BP_UPGameState_C.AddCaptureToGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_CameroidCaptureGroup&   InCaptureGroup                                         (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FS_CameroidCapture&        Capture                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FS_CameroidCaptureGroup*         OutCaptureGroup                                        (Parm, OutParm, HasGetValueTypeHash)

void ABP_UPGameState_C::AddCaptureToGroup(const struct FS_CameroidCaptureGroup& InCaptureGroup, const struct FS_CameroidCapture& Capture, struct FS_CameroidCaptureGroup* OutCaptureGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "AddCaptureToGroup");

	Params::BP_UPGameState_C_AddCaptureToGroup Parms{};

	Parms.InCaptureGroup = std::move(InCaptureGroup);
	Parms.Capture = std::move(Capture);

	UObject::ProcessEvent(Func, &Parms);

	if (OutCaptureGroup != nullptr)
		*OutCaptureGroup = std::move(Parms.OutCaptureGroup);
}


// Function BP_UPGameState.BP_UPGameState_C.AddMoney
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::AddMoney(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "AddMoney");

	Params::BP_UPGameState_C_AddMoney Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.AddTopCaptureToSave
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_TopCapturesSave_C*            Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_UPGameInstance_C*             GameInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_UPGameState_C::AddTopCaptureToSave(class UBP_TopCapturesSave_C* Save, class UBP_UPGameInstance_C* GameInstance, int32 Index_0, const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "AddTopCaptureToSave");

	Params::BP_UPGameState_C_AddTopCaptureToSave Parms{};

	Parms.Save = Save;
	Parms.GameInstance = GameInstance;
	Parms.Index_0 = Index_0;
	Parms.SlotName = std::move(SlotName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.AllPlayersDiedLastSession
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   AllPlayersDied                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::AllPlayersDiedLastSession(bool* AllPlayersDied)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "AllPlayersDiedLastSession");

	Params::BP_UPGameState_C_AllPlayersDiedLastSession Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllPlayersDied != nullptr)
		*AllPlayersDied = Parms.AllPlayersDied;
}


// Function BP_UPGameState.BP_UPGameState_C.AreCapturesInSameGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FS_CameroidCapture&        Capture1                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FS_CameroidCapture&        Capture2                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::AreCapturesInSameGroup(const struct FS_CameroidCapture& Capture1, const struct FS_CameroidCapture& Capture2, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "AreCapturesInSameGroup");

	Params::BP_UPGameState_C_AreCapturesInSameGroup Parms{};

	Parms.Capture1 = std::move(Capture1);
	Parms.Capture2 = std::move(Capture2);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_UPGameState.BP_UPGameState_C.AreSameActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>&                          Actors1                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>&                          Actors2                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::AreSameActors(TArray<int32>& Actors1, TArray<int32>& Actors2, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "AreSameActors");

	Params::BP_UPGameState_C_AreSameActors Parms{};

	Parms.Actors1 = std::move(Actors1);
	Parms.Actors2 = std::move(Actors2);

	UObject::ProcessEvent(Func, &Parms);

	Actors1 = std::move(Parms.Actors1);
	Actors2 = std::move(Parms.Actors2);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_UPGameState.BP_UPGameState_C.CreateSave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_UPGameStateSave_C**           Save                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::CreateSave(class UBP_UPGameStateSave_C** Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "CreateSave");

	Params::BP_UPGameState_C_CreateSave Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Save != nullptr)
		*Save = Parms.Save;
}


// Function BP_UPGameState.BP_UPGameState_C.EndSavingTopCapturesToDisk
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_TopCapturesSave_C*            Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class FString&                    SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_UPGameState_C::EndSavingTopCapturesToDisk(class UBP_TopCapturesSave_C* Save, const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "EndSavingTopCapturesToDisk");

	Params::BP_UPGameState_C_EndSavingTopCapturesToDisk Parms{};

	Parms.Save = Save;
	Parms.SlotName = std::move(SlotName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.ExecuteUbergraph_BP_UPGameState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::ExecuteUbergraph_BP_UPGameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ExecuteUbergraph_BP_UPGameState");

	Params::BP_UPGameState_C_ExecuteUbergraph_BP_UPGameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.GetActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FS_CameroidCapture&        Capture                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TArray<int32>*                          ScoringActors                                          (Parm, OutParm)
// TArray<int32>*                          NonScoringActors                                       (Parm, OutParm)

void ABP_UPGameState_C::GetActors(const struct FS_CameroidCapture& Capture, TArray<int32>* ScoringActors, TArray<int32>* NonScoringActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetActors");

	Params::BP_UPGameState_C_GetActors Parms{};

	Parms.Capture = std::move(Capture);

	UObject::ProcessEvent(Func, &Parms);

	if (ScoringActors != nullptr)
		*ScoringActors = std::move(Parms.ScoringActors);

	if (NonScoringActors != nullptr)
		*NonScoringActors = std::move(Parms.NonScoringActors);
}


// Function BP_UPGameState.BP_UPGameState_C.GetCameroidIds
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>*                          ItemIds                                                (Parm, OutParm)

void ABP_UPGameState_C::GetCameroidIds(TArray<int32>* ItemIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetCameroidIds");

	Params::BP_UPGameState_C_GetCameroidIds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemIds != nullptr)
		*ItemIds = std::move(Parms.ItemIds);
}


// Function BP_UPGameState.BP_UPGameState_C.GetCaptureGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FS_CameroidCapture&        Capture                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FS_CameroidCaptureGroup*         CaptureGroup                                           (Parm, OutParm, HasGetValueTypeHash)
// int32*                                  GroupIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::GetCaptureGroup(const struct FS_CameroidCapture& Capture, struct FS_CameroidCaptureGroup* CaptureGroup, int32* GroupIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetCaptureGroup");

	Params::BP_UPGameState_C_GetCaptureGroup Parms{};

	Parms.Capture = std::move(Capture);

	UObject::ProcessEvent(Func, &Parms);

	if (CaptureGroup != nullptr)
		*CaptureGroup = std::move(Parms.CaptureGroup);

	if (GroupIndex != nullptr)
		*GroupIndex = Parms.GroupIndex;
}


// Function BP_UPGameState.BP_UPGameState_C.GetItemCaptures
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_CameroidCapture>*      Captures_0                                             (Parm, OutParm)

void ABP_UPGameState_C::GetItemCaptures(int32 ItemId, TArray<struct FS_CameroidCapture>* Captures_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetItemCaptures");

	Params::BP_UPGameState_C_GetItemCaptures Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Captures_0 != nullptr)
		*Captures_0 = std::move(Parms.Captures_0);
}


// Function BP_UPGameState.BP_UPGameState_C.GetMaxScoringGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CameroidCaptureGroup*         Group                                                  (Parm, OutParm, HasGetValueTypeHash)
// int32*                                  GroupIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::GetMaxScoringGroup(struct FS_CameroidCaptureGroup* Group, int32* GroupIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetMaxScoringGroup");

	Params::BP_UPGameState_C_GetMaxScoringGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Group != nullptr)
		*Group = std::move(Parms.Group);

	if (GroupIndex != nullptr)
		*GroupIndex = Parms.GroupIndex;
}


// Function BP_UPGameState.BP_UPGameState_C.GetPlayerIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Player_Index                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::GetPlayerIndex(int64 SteamID, int32* Player_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetPlayerIndex");

	Params::BP_UPGameState_C_GetPlayerIndex Parms{};

	Parms.SteamID = SteamID;

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Index != nullptr)
		*Player_Index = Parms.Player_Index;
}


// Function BP_UPGameState.BP_UPGameState_C.GetPlayerState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_UPPlayerState_C**             PlayerState                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::GetPlayerState(int32 PlayerIndex, class ABP_UPPlayerState_C** PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetPlayerState");

	Params::BP_UPGameState_C_GetPlayerState Parms{};

	Parms.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerState != nullptr)
		*PlayerState = Parms.PlayerState;
}


// Function BP_UPGameState.BP_UPGameState_C.GetPlayerStateById
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_UPPlayerState_C**             PlayerState                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::GetPlayerStateById(int64 SteamID, class ABP_UPPlayerState_C** PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "GetPlayerStateById");

	Params::BP_UPGameState_C_GetPlayerStateById Parms{};

	Parms.SteamID = SteamID;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerState != nullptr)
		*PlayerState = Parms.PlayerState;
}


// Function BP_UPGameState.BP_UPGameState_C.IsCaptureInGroup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FS_CameroidCaptureGroup&   CaptureGroup                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FS_CameroidCapture&        Capture                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::IsCaptureInGroup(const struct FS_CameroidCaptureGroup& CaptureGroup, const struct FS_CameroidCapture& Capture, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "IsCaptureInGroup");

	Params::BP_UPGameState_C_IsCaptureInGroup Parms{};

	Parms.CaptureGroup = std::move(CaptureGroup);
	Parms.Capture = std::move(Capture);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_UPGameState.BP_UPGameState_C.IsPlayerAlive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsAlive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::IsPlayerAlive(int64 SteamID, bool* IsAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "IsPlayerAlive");

	Params::BP_UPGameState_C_IsPlayerAlive Parms{};

	Parms.SteamID = SteamID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAlive != nullptr)
		*IsAlive = Parms.IsAlive;
}


// Function BP_UPGameState.BP_UPGameState_C.KickPlayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::KickPlayer(int64 SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "KickPlayer");

	Params::BP_UPGameState_C_KickPlayer Parms{};

	Parms.SteamID = SteamID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.LoadSave
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::LoadSave(class UObject* Save)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "LoadSave");

	Params::BP_UPGameState_C_LoadSave Parms{};

	Parms.Save = Save;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.LoadState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::LoadState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "LoadState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.LoadTopCaptureFromSave
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_TopCapturesSave_C*            Save                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_UPGameInstance_C*             GameInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::LoadTopCaptureFromSave(class UBP_TopCapturesSave_C* Save, class UBP_UPGameInstance_C* GameInstance, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "LoadTopCaptureFromSave");

	Params::BP_UPGameState_C_LoadTopCaptureFromSave Parms{};

	Parms.Save = Save;
	Parms.GameInstance = GameInstance;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.LoadTopCapturesFromDisk
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_UPGameState_C::LoadTopCapturesFromDisk(const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "LoadTopCapturesFromDisk");

	Params::BP_UPGameState_C_LoadTopCapturesFromDisk Parms{};

	Parms.SlotName = std::move(SlotName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.OnRep_KickedSteamIds
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::OnRep_KickedSteamIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "OnRep_KickedSteamIds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.ProcessCapture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_CameroidCapture&        Capture                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPGameState_C::ProcessCapture(const struct FS_CameroidCapture& Capture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ProcessCapture");

	Params::BP_UPGameState_C_ProcessCapture Parms{};

	Parms.Capture = std::move(Capture);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.ProcessCaptures
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::ProcessCaptures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ProcessCaptures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_UPGameState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ReceiveEndPlay");

	Params::BP_UPGameState_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.RemoveMoney
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::RemoveMoney(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "RemoveMoney");

	Params::BP_UPGameState_C_RemoveMoney Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.ResetItemsStock
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::ResetItemsStock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ResetItemsStock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.ResetKickedSteamIds
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::ResetKickedSteamIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ResetKickedSteamIds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.ResetWallet
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::ResetWallet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "ResetWallet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.SavePlayers
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::SavePlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "SavePlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.SaveState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::SaveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "SaveState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.SaveTopCapture
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::SaveTopCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "SaveTopCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.SaveTopCapturesToDisk
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_UPGameState_C::SaveTopCapturesToDisk(const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "SaveTopCapturesToDisk");

	Params::BP_UPGameState_C_SaveTopCapturesToDisk Parms{};

	Parms.SlotName = std::move(SlotName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPGameState.BP_UPGameState_C.SessionEnded
// (BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::SessionEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "SessionEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.SortGroups
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_UPGameState_C::SortGroups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "SortGroups");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPGameState.BP_UPGameState_C.WasInSession
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPGameState_C::WasInSession(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPGameState_C", "WasInSession");

	Params::BP_UPGameState_C_WasInSession Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

