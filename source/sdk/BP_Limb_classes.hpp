#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Limb

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Limb.BP_Limb_C
// 0x0098 (0x0330 - 0x0298)
class ABP_Limb_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       InteractionCollision;                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  DynamicMesh;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPoseableMeshComponent*                 PoseableMesh;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_Dismemberment_C*                   DismembermentComponent;                            // 0x02C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                InitialImpulseDirection;                           // 0x02D0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LifeSpan;                                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DestroyAfterLifeSpan;                              // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LifeTimer;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        InteractDistance;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InteractText;                                      // 0x0308(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_KillableCharacter_C*                KillableCharacter;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityForKO;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Limb_DynamicMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_Limb_DynamicMesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EndLife();
	void ExecuteUbergraph_BP_Limb(int32 EntryPoint);
	void GetInteractDistance(double* Distance);
	void GetInteractDuration(double* Duration);
	void GetInteractNoise(bool* NoiseOnInteract, double* NoiseRange);
	void GetInteractText(class FText* Text);
	void Interact(class ABP_UPPlayerCharacter_C* Player);
	void InteractionStarted();
	void InteractionStopped();
	void PostLimbSetup();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void StartLifeTimer();
	void TeleportMeshToLocation(const struct FVector& Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Limb_C">();
	}
	static class ABP_Limb_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Limb_C>();
	}
};
static_assert(alignof(ABP_Limb_C) == 0x000008, "Wrong alignment on ABP_Limb_C");
static_assert(sizeof(ABP_Limb_C) == 0x000330, "Wrong size on ABP_Limb_C");
static_assert(offsetof(ABP_Limb_C, UberGraphFrame) == 0x000298, "Member 'ABP_Limb_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, InteractionCollision) == 0x0002A0, "Member 'ABP_Limb_C::InteractionCollision' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, Scoring) == 0x0002A8, "Member 'ABP_Limb_C::Scoring' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, DynamicMesh) == 0x0002B0, "Member 'ABP_Limb_C::DynamicMesh' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, PoseableMesh) == 0x0002B8, "Member 'ABP_Limb_C::PoseableMesh' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, DismembermentComponent) == 0x0002C0, "Member 'ABP_Limb_C::DismembermentComponent' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, BoneName) == 0x0002C8, "Member 'ABP_Limb_C::BoneName' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, InitialImpulseDirection) == 0x0002D0, "Member 'ABP_Limb_C::InitialImpulseDirection' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, LifeSpan) == 0x0002E8, "Member 'ABP_Limb_C::LifeSpan' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, DestroyAfterLifeSpan) == 0x0002F0, "Member 'ABP_Limb_C::DestroyAfterLifeSpan' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, LifeTimer) == 0x0002F8, "Member 'ABP_Limb_C::LifeTimer' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, InteractDistance) == 0x000300, "Member 'ABP_Limb_C::InteractDistance' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, InteractText) == 0x000308, "Member 'ABP_Limb_C::InteractText' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, KillableCharacter) == 0x000320, "Member 'ABP_Limb_C::KillableCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Limb_C, VelocityForKO) == 0x000328, "Member 'ABP_Limb_C::VelocityForKO' has a wrong offset!");

}

