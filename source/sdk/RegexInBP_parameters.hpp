#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RegexInBP

#include "Basic.hpp"

#include "RegexInBP_structs.hpp"


namespace SDK::Params
{

// Function RegexInBP.RegexBPLibrary.CanMatch
// 0x0028 (0x0028 - 0x0000)
struct RegexBPLibrary_CanMatch final
{
public:
	class FString                                 Pattern;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Input;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RegexBPLibrary_CanMatch) == 0x000008, "Wrong alignment on RegexBPLibrary_CanMatch");
static_assert(sizeof(RegexBPLibrary_CanMatch) == 0x000028, "Wrong size on RegexBPLibrary_CanMatch");
static_assert(offsetof(RegexBPLibrary_CanMatch, Pattern) == 0x000000, "Member 'RegexBPLibrary_CanMatch::Pattern' has a wrong offset!");
static_assert(offsetof(RegexBPLibrary_CanMatch, Input) == 0x000010, "Member 'RegexBPLibrary_CanMatch::Input' has a wrong offset!");
static_assert(offsetof(RegexBPLibrary_CanMatch, ReturnValue) == 0x000020, "Member 'RegexBPLibrary_CanMatch::ReturnValue' has a wrong offset!");

// Function RegexInBP.RegexBPLibrary.Match
// 0x0030 (0x0030 - 0x0000)
struct RegexBPLibrary_Match final
{
public:
	class FString                                 Pattern;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Input;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RegexBPLibrary_Match) == 0x000008, "Wrong alignment on RegexBPLibrary_Match");
static_assert(sizeof(RegexBPLibrary_Match) == 0x000030, "Wrong size on RegexBPLibrary_Match");
static_assert(offsetof(RegexBPLibrary_Match, Pattern) == 0x000000, "Member 'RegexBPLibrary_Match::Pattern' has a wrong offset!");
static_assert(offsetof(RegexBPLibrary_Match, Input) == 0x000010, "Member 'RegexBPLibrary_Match::Input' has a wrong offset!");
static_assert(offsetof(RegexBPLibrary_Match, ReturnValue) == 0x000020, "Member 'RegexBPLibrary_Match::ReturnValue' has a wrong offset!");

// Function RegexInBP.RegexBPLibrary.MatchExtended
// 0x0030 (0x0030 - 0x0000)
struct RegexBPLibrary_MatchExtended final
{
public:
	class FString                                 Pattern;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Input;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRegexExtendedResult>           ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RegexBPLibrary_MatchExtended) == 0x000008, "Wrong alignment on RegexBPLibrary_MatchExtended");
static_assert(sizeof(RegexBPLibrary_MatchExtended) == 0x000030, "Wrong size on RegexBPLibrary_MatchExtended");
static_assert(offsetof(RegexBPLibrary_MatchExtended, Pattern) == 0x000000, "Member 'RegexBPLibrary_MatchExtended::Pattern' has a wrong offset!");
static_assert(offsetof(RegexBPLibrary_MatchExtended, Input) == 0x000010, "Member 'RegexBPLibrary_MatchExtended::Input' has a wrong offset!");
static_assert(offsetof(RegexBPLibrary_MatchExtended, ReturnValue) == 0x000020, "Member 'RegexBPLibrary_MatchExtended::ReturnValue' has a wrong offset!");

}

