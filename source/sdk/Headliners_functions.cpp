#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Headliners

#include "Basic.hpp"

#include "Headliners_classes.hpp"
#include "Headliners_parameters.hpp"


namespace SDK
{

// Function Headliners.HeadlinersBPUtils.CompressTextureToJpgAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          CompressedData                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FAsyncCoroutine                  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAsyncCoroutine UHeadlinersBPUtils::CompressTextureToJpgAsync(const struct FLatentActionInfo& LatentInfo, class UTexture2D* Texture, TArray<uint8>* CompressedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "CompressTextureToJpgAsync");

	Params::HeadlinersBPUtils_CompressTextureToJpgAsync Parms{};

	Parms.LatentInfo = std::move(LatentInfo);
	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CompressedData != nullptr)
		*CompressedData = std::move(Parms.CompressedData);

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.CreateTextureFromJPEGAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    CompressedData                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D**                      OutTexture                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAsyncCoroutine                  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAsyncCoroutine UHeadlinersBPUtils::CreateTextureFromJPEGAsync(const struct FLatentActionInfo& LatentInfo, const TArray<uint8>& CompressedData, class UTexture2D** OutTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "CreateTextureFromJPEGAsync");

	Params::HeadlinersBPUtils_CreateTextureFromJPEGAsync Parms{};

	Parms.LatentInfo = std::move(LatentInfo);
	Parms.CompressedData = std::move(CompressedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTexture != nullptr)
		*OutTexture = Parms.OutTexture;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.CreateTextureFromRGBA
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FColor>&            Data                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UHeadlinersBPUtils::CreateTextureFromRGBA(const TArray<struct FColor>& Data, int32 Width, int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "CreateTextureFromRGBA");

	Params::HeadlinersBPUtils_CreateTextureFromRGBA Parms{};

	Parms.Data = std::move(Data);
	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.ExportAsTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UHeadlinersBPUtils::ExportAsTexture(class UTextureRenderTarget2D* RenderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "ExportAsTexture");

	Params::HeadlinersBPUtils_ExportAsTexture Parms{};

	Parms.RenderTarget = RenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.ExportAsTextureAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D**                      OutTexture                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAsyncCoroutine                  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAsyncCoroutine UHeadlinersBPUtils::ExportAsTextureAsync(const struct FLatentActionInfo& LatentInfo, class UTextureRenderTarget2D* RenderTarget, class UTexture2D** OutTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "ExportAsTextureAsync");

	Params::HeadlinersBPUtils_ExportAsTextureAsync Parms{};

	Parms.LatentInfo = std::move(LatentInfo);
	Parms.RenderTarget = RenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTexture != nullptr)
		*OutTexture = Parms.OutTexture;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.ForceCrash
// (Final, Native, Static, Public, BlueprintCallable)

void UHeadlinersBPUtils::ForceCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "ForceCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HeadlinersBPUtils.GetAllActorsOfClassFromLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           Level                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UHeadlinersBPUtils::GetAllActorsOfClassFromLevel(class ULevel* Level, TSubclassOf<class AActor> ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetAllActorsOfClassFromLevel");

	Params::HeadlinersBPUtils_GetAllActorsOfClassFromLevel Parms{};

	Parms.Level = Level;
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetAllSaveFileNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UHeadlinersBPUtils::GetAllSaveFileNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetAllSaveFileNames");

	Params::HeadlinersBPUtils_GetAllSaveFileNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetCameraView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMinimalViewInfo                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMinimalViewInfo UHeadlinersBPUtils::GetCameraView(class USceneCaptureComponent2D* CaptureComponent, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetCameraView");

	Params::HeadlinersBPUtils_GetCameraView Parms{};

	Parms.CaptureComponent = CaptureComponent;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetDefaultObjectOfClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UObject>              Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UHeadlinersBPUtils::GetDefaultObjectOfClass(TSubclassOf<class UObject> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetDefaultObjectOfClass");

	Params::HeadlinersBPUtils_GetDefaultObjectOfClass Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetDesktopFolderPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHeadlinersBPUtils::GetDesktopFolderPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetDesktopFolderPath");

	Params::HeadlinersBPUtils_GetDesktopFolderPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetFocusedWidgetGeometry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry*                       OutGeometry                                            (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHeadlinersBPUtils::GetFocusedWidgetGeometry(struct FGeometry* OutGeometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetFocusedWidgetGeometry");

	Params::HeadlinersBPUtils_GetFocusedWidgetGeometry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGeometry != nullptr)
		*OutGeometry = std::move(Parms.OutGeometry);

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetMaterialExpressions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMaterialExpression*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMaterialExpression*> UHeadlinersBPUtils::GetMaterialExpressions(class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetMaterialExpressions");

	Params::HeadlinersBPUtils_GetMaterialExpressions Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetProjectVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHeadlinersBPUtils::GetProjectVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetProjectVersion");

	Params::HeadlinersBPUtils_GetProjectVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetSoftWorldRef
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSoftObjectPath&           Path                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UWorld>            ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UWorld> UHeadlinersBPUtils::GetSoftWorldRef(const struct FSoftObjectPath& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetSoftWorldRef");

	Params::HeadlinersBPUtils_GetSoftWorldRef Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.GetViewportClient
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUPGameViewportClient*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUPGameViewportClient* UHeadlinersBPUtils::GetViewportClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "GetViewportClient");

	Params::HeadlinersBPUtils_GetViewportClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.JPEGCompressionAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           RenderTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          CompressedData                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FAsyncCoroutine                  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAsyncCoroutine UHeadlinersBPUtils::JPEGCompressionAsync(const struct FLatentActionInfo& LatentInfo, class UTextureRenderTarget2D* RenderTarget, TArray<uint8>* CompressedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "JPEGCompressionAsync");

	Params::HeadlinersBPUtils_JPEGCompressionAsync Parms{};

	Parms.LatentInfo = std::move(LatentInfo);
	Parms.RenderTarget = RenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CompressedData != nullptr)
		*CompressedData = std::move(Parms.CompressedData);

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.ParseStringToInt64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHeadlinersBPUtils::ParseStringToInt64(const class FString& InString, int64* OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "ParseStringToInt64");

	Params::HeadlinersBPUtils_ParseStringToInt64 Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.SampleBoundsPoints
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Extent                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BoundsScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Resolution                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UHeadlinersBPUtils::SampleBoundsPoints(const struct FVector& Origin, const struct FVector& Extent, float BoundsScale, int32 Resolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "SampleBoundsPoints");

	Params::HeadlinersBPUtils_SampleBoundsPoints Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Extent = std::move(Extent);
	Parms.BoundsScale = BoundsScale;
	Parms.Resolution = Resolution;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HeadlinersBPUtils.SaveJPEG
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    CompressedData                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    OutPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHeadlinersBPUtils::SaveJPEG(const TArray<uint8>& CompressedData, const class FString& OutPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "SaveJPEG");

	Params::HeadlinersBPUtils_SaveJPEG Parms{};

	Parms.CompressedData = std::move(CompressedData);
	Parms.OutPath = std::move(OutPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HeadlinersBPUtils.SetMapsToCook
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Maps                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UHeadlinersBPUtils::SetMapsToCook(const TArray<class FString>& Maps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "SetMapsToCook");

	Params::HeadlinersBPUtils_SetMapsToCook Parms{};

	Parms.Maps = std::move(Maps);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HeadlinersBPUtils.SetViewportRenderingEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHeadlinersBPUtils::SetViewportRenderingEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "SetViewportRenderingEnabled");

	Params::HeadlinersBPUtils_SetViewportRenderingEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HeadlinersBPUtils.SortIntegerArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    InIntegerArray                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>*                          OutIntegerArray                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHeadlinersBPUtils::SortIntegerArray(const TArray<int32>& InIntegerArray, TArray<int32>* OutIntegerArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "SortIntegerArray");

	Params::HeadlinersBPUtils_SortIntegerArray Parms{};

	Parms.InIntegerArray = std::move(InIntegerArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntegerArray != nullptr)
		*OutIntegerArray = std::move(Parms.OutIntegerArray);
}


// Function Headliners.HeadlinersBPUtils.SortStringArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            InStringArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutStringArray                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UHeadlinersBPUtils::SortStringArray(const TArray<class FString>& InStringArray, TArray<class FString>* OutStringArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "SortStringArray");

	Params::HeadlinersBPUtils_SortStringArray Parms{};

	Parms.InStringArray = std::move(InStringArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStringArray != nullptr)
		*OutStringArray = std::move(Parms.OutStringArray);
}


// Function Headliners.HeadlinersBPUtils.UpdateCamera
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerCameraManager*             PlayerCameraManager                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHeadlinersBPUtils::UpdateCamera(class APlayerCameraManager* PlayerCameraManager, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "UpdateCamera");

	Params::HeadlinersBPUtils_UpdateCamera Parms{};

	Parms.PlayerCameraManager = PlayerCameraManager;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HeadlinersBPUtils.WrapText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InputText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxCharactersPerLine                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHeadlinersBPUtils::WrapText(const class FString& InputText, int32 MaxCharactersPerLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HeadlinersBPUtils", "WrapText");

	Params::HeadlinersBPUtils_WrapText Parms{};

	Parms.InputText = std::move(InputText);
	Parms.MaxCharactersPerLine = MaxCharactersPerLine;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HLocalizationUtils.ExportTranslationsToCSV
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LocalizationFolder                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    OutputCSVPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHLocalizationUtils::ExportTranslationsToCSV(const class FString& LocalizationFolder, const class FString& OutputCSVPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HLocalizationUtils", "ExportTranslationsToCSV");

	Params::HLocalizationUtils_ExportTranslationsToCSV Parms{};

	Parms.LocalizationFolder = std::move(LocalizationFolder);
	Parms.OutputCSVPath = std::move(OutputCSVPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HLocalizationUtils.ImportTranslationsFromCSV
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LocalizationFolder                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CSVFilePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHLocalizationUtils::ImportTranslationsFromCSV(const class FString& LocalizationFolder, const class FString& CSVFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HLocalizationUtils", "ImportTranslationsFromCSV");

	Params::HLocalizationUtils_ImportTranslationsFromCSV Parms{};

	Parms.LocalizationFolder = std::move(LocalizationFolder);
	Parms.CSVFilePath = std::move(CSVFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HNetworkUtil.GetNetworkStatistics
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  InBytesPerSecond                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutBytesPerSecond                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHNetworkUtil::GetNetworkStatistics(class UObject* WorldContextObject, float* InBytesPerSecond, float* OutBytesPerSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HNetworkUtil", "GetNetworkStatistics");

	Params::HNetworkUtil_GetNetworkStatistics Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InBytesPerSecond != nullptr)
		*InBytesPerSecond = Parms.InBytesPerSecond;

	if (OutBytesPerSecond != nullptr)
		*OutBytesPerSecond = Parms.OutBytesPerSecond;
}


// Function Headliners.HSkeletalMeshUtil.GetSkeletalMeshBodies
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBodyInstance>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBodyInstance> UHSkeletalMeshUtil::GetSkeletalMeshBodies(class USkeletalMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "GetSkeletalMeshBodies");

	Params::HSkeletalMeshUtil_GetSkeletalMeshBodies Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HSkeletalMeshUtil.GetSkeletalMeshBodiesBoneIndices
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UHSkeletalMeshUtil::GetSkeletalMeshBodiesBoneIndices(class USkeletalMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "GetSkeletalMeshBodiesBoneIndices");

	Params::HSkeletalMeshUtil_GetSkeletalMeshBodiesBoneIndices Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HSkeletalMeshUtil.GetSkeletalMeshBodyAngularVelocity
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BodyIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHSkeletalMeshUtil::GetSkeletalMeshBodyAngularVelocity(class USkeletalMeshComponent* Mesh, int32 BodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "GetSkeletalMeshBodyAngularVelocity");

	Params::HSkeletalMeshUtil_GetSkeletalMeshBodyAngularVelocity Parms{};

	Parms.Mesh = Mesh;
	Parms.BodyIndex = BodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HSkeletalMeshUtil.GetSkeletalMeshBodyLinearVelocity
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BodyIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHSkeletalMeshUtil::GetSkeletalMeshBodyLinearVelocity(class USkeletalMeshComponent* Mesh, int32 BodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "GetSkeletalMeshBodyLinearVelocity");

	Params::HSkeletalMeshUtil_GetSkeletalMeshBodyLinearVelocity Parms{};

	Parms.Mesh = Mesh;
	Parms.BodyIndex = BodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HSkeletalMeshUtil.GetSkeletalMeshBodyTransform
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BodyIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UHSkeletalMeshUtil::GetSkeletalMeshBodyTransform(class USkeletalMeshComponent* Mesh, int32 BodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "GetSkeletalMeshBodyTransform");

	Params::HSkeletalMeshUtil_GetSkeletalMeshBodyTransform Parms{};

	Parms.Mesh = Mesh;
	Parms.BodyIndex = BodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Headliners.HSkeletalMeshUtil.RebuildSkeletalMeshSocketMap
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHSkeletalMeshUtil::RebuildSkeletalMeshSocketMap(class USkeletalMesh* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "RebuildSkeletalMeshSocketMap");

	Params::HSkeletalMeshUtil_RebuildSkeletalMeshSocketMap Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HSkeletalMeshUtil.SetSkeletalMeshBodyAngularVelocity
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BodyIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   AngularVelocity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHSkeletalMeshUtil::SetSkeletalMeshBodyAngularVelocity(class USkeletalMeshComponent* Mesh, int32 BodyIndex, const struct FVector& AngularVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "SetSkeletalMeshBodyAngularVelocity");

	Params::HSkeletalMeshUtil_SetSkeletalMeshBodyAngularVelocity Parms{};

	Parms.Mesh = Mesh;
	Parms.BodyIndex = BodyIndex;
	Parms.AngularVelocity = std::move(AngularVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HSkeletalMeshUtil.SetSkeletalMeshBodyLinearVelocity
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BodyIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LinearVelocity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHSkeletalMeshUtil::SetSkeletalMeshBodyLinearVelocity(class USkeletalMeshComponent* Mesh, int32 BodyIndex, const struct FVector& LinearVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "SetSkeletalMeshBodyLinearVelocity");

	Params::HSkeletalMeshUtil_SetSkeletalMeshBodyLinearVelocity Parms{};

	Parms.Mesh = Mesh;
	Parms.BodyIndex = BodyIndex;
	Parms.LinearVelocity = std::move(LinearVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.HSkeletalMeshUtil.SetSkeletalMeshBodyTransform
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BodyIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                BodyTransform                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHSkeletalMeshUtil::SetSkeletalMeshBodyTransform(class USkeletalMeshComponent* Mesh, int32 BodyIndex, const struct FTransform& BodyTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HSkeletalMeshUtil", "SetSkeletalMeshBodyTransform");

	Params::HSkeletalMeshUtil_SetSkeletalMeshBodyTransform Parms{};

	Parms.Mesh = Mesh;
	Parms.BodyIndex = BodyIndex;
	Parms.BodyTransform = std::move(BodyTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.ModuleLevelInstance.SetLevelInstanceWorldAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UWorld>            NewWorldAsset                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AModuleLevelInstance::SetLevelInstanceWorldAsset(TSoftObjectPtr<class UWorld> NewWorldAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModuleLevelInstance", "SetLevelInstanceWorldAsset");

	Params::ModuleLevelInstance_SetLevelInstanceWorldAsset Parms{};

	Parms.NewWorldAsset = NewWorldAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.UPGameViewportClient.AddViewportWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ZOrder                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUPGameViewportClient::AddViewportWidget(class UUserWidget* Widget, int32 ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPGameViewportClient", "AddViewportWidget");

	Params::UPGameViewportClient_AddViewportWidget Parms{};

	Parms.Widget = Widget;
	Parms.ZOrder = ZOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.UPGameViewportClient.RemoveViewportWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUPGameViewportClient::RemoveViewportWidget(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPGameViewportClient", "RemoveViewportWidget");

	Params::UPGameViewportClient_RemoveViewportWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.UPGameViewportClient.SetViewportSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   OriginX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OriginY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUPGameViewportClient::SetViewportSize(float OriginX, float OriginY, float SizeX, float SizeY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPGameViewportClient", "SetViewportSize");

	Params::UPGameViewportClient_SetViewportSize Parms{};

	Parms.OriginX = OriginX;
	Parms.OriginY = OriginY;
	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.UPGameViewportClient.TakeCapture
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   TargetWidth                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetHeight                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          CompressedImage                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FAsyncCoroutine                  ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAsyncCoroutine UUPGameViewportClient::TakeCapture(const struct FLatentActionInfo& LatentInfo, int32 TargetWidth, int32 TargetHeight, TArray<uint8>* CompressedImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPGameViewportClient", "TakeCapture");

	Params::UPGameViewportClient_TakeCapture Parms{};

	Parms.LatentInfo = std::move(LatentInfo);
	Parms.TargetWidth = TargetWidth;
	Parms.TargetHeight = TargetHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CompressedImage != nullptr)
		*CompressedImage = std::move(Parms.CompressedImage);

	return Parms.ReturnValue;
}


// Function Headliners.UPGameViewportClient.ViewportSizeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUPGameViewportClient::ViewportSizeChanged(int32 Width, int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPGameViewportClient", "ViewportSizeChanged");

	Params::UPGameViewportClient_ViewportSizeChanged Parms{};

	Parms.Width = Width;
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Headliners.UPNavLinkProxy.SetSmartLinkLocations
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   RelativeStartLocation                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RelativeEndLocation                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENavLinkDirection                       Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUPNavLinkProxy::SetSmartLinkLocations(const struct FVector& RelativeStartLocation, const struct FVector& RelativeEndLocation, ENavLinkDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPNavLinkProxy", "SetSmartLinkLocations");

	Params::UPNavLinkProxy_SetSmartLinkLocations Parms{};

	Parms.RelativeStartLocation = std::move(RelativeStartLocation);
	Parms.RelativeEndLocation = std::move(RelativeEndLocation);
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.UPNavLinkProxy.UpdateAreaClass
// (Final, Native, Public, BlueprintCallable)

void AUPNavLinkProxy::UpdateAreaClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPNavLinkProxy", "UpdateAreaClass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Headliners.UPNavModifierComponent.SetFailsafeExtent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InFailsafeExtent                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUPNavModifierComponent::SetFailsafeExtent(const struct FVector& InFailsafeExtent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UPNavModifierComponent", "SetFailsafeExtent");

	Params::UPNavModifierComponent_SetFailsafeExtent Parms{};

	Parms.InFailsafeExtent = std::move(InFailsafeExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

