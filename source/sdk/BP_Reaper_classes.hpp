#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Reaper

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Reaper.BP_Reaper_C
// 0x0088 (0x0320 - 0x0298)
class ABP_Reaper_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TargetDetector;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MainScene;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_KillableCharacter_C*                CatchedTarget;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        MinReleaseDelay;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxReleaseDelay;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachBoneName;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CatchDamage;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        FlyAudio;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              FlySound;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CatchSound;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ReleaseDamage;                                     // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ReleaseSound;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              WingbeatSound;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Reaper(int32 EntryPoint);
	void GetTargetInRange(class ABP_KillableCharacter_C** Character);
	void OnRep_CatchedTarget();
	void PlayWingbeatSound();
	void ReceiveTick(float DeltaSeconds);
	void ReleaseTarget(class ABP_KillableCharacter_C* Character);
	void SetAudioAttachedEnabled(class UAudioComponent* InAudio, class USoundCue* Sound, bool Enabled, class UAudioComponent** OutAudio);
	void TryCatchTarget();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Reaper_C">();
	}
	static class ABP_Reaper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Reaper_C>();
	}
};
static_assert(alignof(ABP_Reaper_C) == 0x000008, "Wrong alignment on ABP_Reaper_C");
static_assert(sizeof(ABP_Reaper_C) == 0x000320, "Wrong size on ABP_Reaper_C");
static_assert(offsetof(ABP_Reaper_C, UberGraphFrame) == 0x000298, "Member 'ABP_Reaper_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, Scoring) == 0x0002A0, "Member 'ABP_Reaper_C::Scoring' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, PhysicsConstraint) == 0x0002A8, "Member 'ABP_Reaper_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, TargetDetector) == 0x0002B0, "Member 'ABP_Reaper_C::TargetDetector' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, SkeletalMesh) == 0x0002B8, "Member 'ABP_Reaper_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, MainScene) == 0x0002C0, "Member 'ABP_Reaper_C::MainScene' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, CatchedTarget) == 0x0002C8, "Member 'ABP_Reaper_C::CatchedTarget' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, MinReleaseDelay) == 0x0002D0, "Member 'ABP_Reaper_C::MinReleaseDelay' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, MaxReleaseDelay) == 0x0002D8, "Member 'ABP_Reaper_C::MaxReleaseDelay' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, AttachBoneName) == 0x0002E0, "Member 'ABP_Reaper_C::AttachBoneName' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, CatchDamage) == 0x0002E8, "Member 'ABP_Reaper_C::CatchDamage' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, FlyAudio) == 0x0002F0, "Member 'ABP_Reaper_C::FlyAudio' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, FlySound) == 0x0002F8, "Member 'ABP_Reaper_C::FlySound' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, CatchSound) == 0x000300, "Member 'ABP_Reaper_C::CatchSound' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, ReleaseDamage) == 0x000308, "Member 'ABP_Reaper_C::ReleaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, ReleaseSound) == 0x000310, "Member 'ABP_Reaper_C::ReleaseSound' has a wrong offset!");
static_assert(offsetof(ABP_Reaper_C, WingbeatSound) == 0x000318, "Member 'ABP_Reaper_C::WingbeatSound' has a wrong offset!");

}

