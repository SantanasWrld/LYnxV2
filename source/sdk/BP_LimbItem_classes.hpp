#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LimbItem

#include "Basic.hpp"

#include "BP_InventoryItem_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LimbItem.BP_LimbItem_C
// 0x0020 (0x0390 - 0x0370)
class ABP_LimbItem_C final : public ABP_InventoryItem_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LimbItem_C;                      // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_Limb_C*                             Limb;                                              // 0x0378(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowImpulse;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsThrow;                                           // 0x0384(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ThrowSound;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LimbItem(int32 EntryPoint);
	struct FVector GetThrowImpulseVector();
	struct FVector GetThrowOriginLocation();
	void OnRep_IsInUse();
	void OnRep_Limb();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetLimb(class ABP_Limb_C* Limb_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LimbItem_C">();
	}
	static class ABP_LimbItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LimbItem_C>();
	}
};
static_assert(alignof(ABP_LimbItem_C) == 0x000008, "Wrong alignment on ABP_LimbItem_C");
static_assert(sizeof(ABP_LimbItem_C) == 0x000390, "Wrong size on ABP_LimbItem_C");
static_assert(offsetof(ABP_LimbItem_C, UberGraphFrame_BP_LimbItem_C) == 0x000370, "Member 'ABP_LimbItem_C::UberGraphFrame_BP_LimbItem_C' has a wrong offset!");
static_assert(offsetof(ABP_LimbItem_C, Limb) == 0x000378, "Member 'ABP_LimbItem_C::Limb' has a wrong offset!");
static_assert(offsetof(ABP_LimbItem_C, ThrowImpulse) == 0x000380, "Member 'ABP_LimbItem_C::ThrowImpulse' has a wrong offset!");
static_assert(offsetof(ABP_LimbItem_C, IsThrow) == 0x000384, "Member 'ABP_LimbItem_C::IsThrow' has a wrong offset!");
static_assert(offsetof(ABP_LimbItem_C, ThrowSound) == 0x000388, "Member 'ABP_LimbItem_C::ThrowSound' has a wrong offset!");

}

