#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pulpo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Parent_Enemy_classes.hpp"
#include "E_ScoringActorState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Pulpo.BP_Pulpo_C
// 0x0150 (0x0BE0 - 0x0A90)
class ABP_Pulpo_C : public ABP_Parent_Enemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Pulpo_C;                         // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPhysicsConstraintComponent*            GrabPhysicsConstraint;                             // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TentacleTarget;                                    // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ZOffset_8D1BCCB54A7172BDE274D3A8199C53C9; // 0x0AA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Progress_8D1BCCB54A7172BDE274D3A8199C53C9; // 0x0AA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_8D1BCCB54A7172BDE274D3A8199C53C9; // 0x0AA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA9[0x7];                                      // 0x0AA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideTentacleTransform;                         // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB9[0x7];                                      // 0x0AB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TentacleLocation;                                  // 0x0AC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TentacleRotation;                                  // 0x0AD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_KillableCharacter_C*                GrabbedTarget;                                     // 0x0AF0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         PullingForce;                                      // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AFC[0x4];                                      // 0x0AFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VerticalForce;                                     // 0x0B00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InteractionDuration;                               // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InteractionDistance;                               // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InteractionText;                                   // 0x0B28(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                PrevTentacleLocation;                              // 0x0B40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        KODuration;                                        // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RegularImpulseDelay;                               // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RegularImpulseTimer;                               // 0x0B68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RegularImpulsePower;                               // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TentacleRange;                                     // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PredictionTime;                                    // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              PullingSound;                                      // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PullingAudio;                                      // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              KnockOutRecoverSound;                              // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              KnockedOutSound;                                   // 0x0BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              GrabSound;                                         // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TentacleTargetLocation;                            // 0x0BB0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttackDuration;                                    // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AttackTimer;                                       // 0x0BD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void GetInteractNoise(bool* NoiseOnInteract, double* NoiseRange);
	void GetInteractText(class FText* Text);
	void GetInteractDistance(double* Distance);
	void GetInteractDuration(double* Duration);
	void GetDefaultScoringState(E_ScoringActorState* State);
	void CheckObstacles(const struct FVector& TargetLocation, struct FVector* StopLocation);
	void IsInStringTrap(class ABP_KillableCharacter_C* Killable, class ABP_StringTrap_C** StringTrap);
	void GetGrabbedTentacleLocation(struct FVector* TargetLocation);
	void GetPredictedTentacleLocation(struct FVector* TargetLocation);
	void GetTargetTentacleLocation(struct FVector* TargetLocation);
	void GetCurrentTentacleLocation(struct FVector* CurrentLocation);
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void ReceiveBeginPlay();
	void OnRep_IsAttacking();
	void StartAttack();
	void StopAttack();
	void OnRep_GrabbedTarget();
	void ReceiveTick(float DeltaSeconds);
	void Interact(class ABP_UPPlayerCharacter_C* Player);
	void KnockedOutEffect();
	void GrabEffect();
	void TentacleAnimation(const struct FVector& OriginLocation, const struct FVector& TargetLocation, bool IsAttack);
	void GrabTarget(class ABP_KillableCharacter_C* Killable);
	void UpdatePullingAudio();
	void OnRep_IsInRagdoll();
	void KnockOutRecoverEffect();
	void RegularImpulse();
	void StopTentacleAnimation();
	void EnableRagdoll(const struct FVector& SourceLocation, double Force);
	void Freedom();
	void AttackTimerEnded();
	void ExecuteUbergraph_BP_Pulpo(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Pulpo_C">();
	}
	static class ABP_Pulpo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Pulpo_C>();
	}
};
static_assert(alignof(ABP_Pulpo_C) == 0x000010, "Wrong alignment on ABP_Pulpo_C");
static_assert(sizeof(ABP_Pulpo_C) == 0x000BE0, "Wrong size on ABP_Pulpo_C");
static_assert(offsetof(ABP_Pulpo_C, UberGraphFrame_BP_Pulpo_C) == 0x000A88, "Member 'ABP_Pulpo_C::UberGraphFrame_BP_Pulpo_C' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, GrabPhysicsConstraint) == 0x000A90, "Member 'ABP_Pulpo_C::GrabPhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, TentacleTarget) == 0x000A98, "Member 'ABP_Pulpo_C::TentacleTarget' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, Timeline_ZOffset_8D1BCCB54A7172BDE274D3A8199C53C9) == 0x000AA0, "Member 'ABP_Pulpo_C::Timeline_ZOffset_8D1BCCB54A7172BDE274D3A8199C53C9' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, Timeline_Progress_8D1BCCB54A7172BDE274D3A8199C53C9) == 0x000AA4, "Member 'ABP_Pulpo_C::Timeline_Progress_8D1BCCB54A7172BDE274D3A8199C53C9' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, Timeline__Direction_8D1BCCB54A7172BDE274D3A8199C53C9) == 0x000AA8, "Member 'ABP_Pulpo_C::Timeline__Direction_8D1BCCB54A7172BDE274D3A8199C53C9' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, Timeline) == 0x000AB0, "Member 'ABP_Pulpo_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, OverrideTentacleTransform) == 0x000AB8, "Member 'ABP_Pulpo_C::OverrideTentacleTransform' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, TentacleLocation) == 0x000AC0, "Member 'ABP_Pulpo_C::TentacleLocation' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, TentacleRotation) == 0x000AD8, "Member 'ABP_Pulpo_C::TentacleRotation' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, GrabbedTarget) == 0x000AF0, "Member 'ABP_Pulpo_C::GrabbedTarget' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, PullingForce) == 0x000AF8, "Member 'ABP_Pulpo_C::PullingForce' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, VerticalForce) == 0x000B00, "Member 'ABP_Pulpo_C::VerticalForce' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, InteractionDuration) == 0x000B18, "Member 'ABP_Pulpo_C::InteractionDuration' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, InteractionDistance) == 0x000B20, "Member 'ABP_Pulpo_C::InteractionDistance' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, InteractionText) == 0x000B28, "Member 'ABP_Pulpo_C::InteractionText' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, PrevTentacleLocation) == 0x000B40, "Member 'ABP_Pulpo_C::PrevTentacleLocation' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, KODuration) == 0x000B58, "Member 'ABP_Pulpo_C::KODuration' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, RegularImpulseDelay) == 0x000B60, "Member 'ABP_Pulpo_C::RegularImpulseDelay' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, RegularImpulseTimer) == 0x000B68, "Member 'ABP_Pulpo_C::RegularImpulseTimer' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, RegularImpulsePower) == 0x000B70, "Member 'ABP_Pulpo_C::RegularImpulsePower' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, TentacleRange) == 0x000B78, "Member 'ABP_Pulpo_C::TentacleRange' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, PredictionTime) == 0x000B80, "Member 'ABP_Pulpo_C::PredictionTime' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, PullingSound) == 0x000B88, "Member 'ABP_Pulpo_C::PullingSound' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, PullingAudio) == 0x000B90, "Member 'ABP_Pulpo_C::PullingAudio' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, KnockOutRecoverSound) == 0x000B98, "Member 'ABP_Pulpo_C::KnockOutRecoverSound' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, KnockedOutSound) == 0x000BA0, "Member 'ABP_Pulpo_C::KnockedOutSound' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, GrabSound) == 0x000BA8, "Member 'ABP_Pulpo_C::GrabSound' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, TentacleTargetLocation) == 0x000BB0, "Member 'ABP_Pulpo_C::TentacleTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, AttackDuration) == 0x000BC8, "Member 'ABP_Pulpo_C::AttackDuration' has a wrong offset!");
static_assert(offsetof(ABP_Pulpo_C, AttackTimer) == 0x000BD0, "Member 'ABP_Pulpo_C::AttackTimer' has a wrong offset!");

}

