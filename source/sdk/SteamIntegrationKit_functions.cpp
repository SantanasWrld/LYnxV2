#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamIntegrationKit

#include "Basic.hpp"

#include "SteamIntegrationKit_classes.hpp"
#include "SteamIntegrationKit_parameters.hpp"


namespace SDK
{

// Function SteamIntegrationKit.HostMigrationSubsystem.StartHostMigration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHostMigrationSubsystem::StartHostMigration(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HostMigrationSubsystem", "StartHostMigration");

	Params::HostMigrationSubsystem_StartHostMigration Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_RemoveDependency_AsyncFunction.RemoveDependency
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      ParentPublishedFileID                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_PublishedFileId&      ChildPublishedFileID                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_RemoveDependency_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RemoveDependency_AsyncFunction* USIK_RemoveDependency_AsyncFunction::RemoveDependency(const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoveDependency_AsyncFunction", "RemoveDependency");

	Params::SIK_RemoveDependency_AsyncFunction_RemoveDependency Parms{};

	Parms.ParentPublishedFileID = std::move(ParentPublishedFileID);
	Parms.ChildPublishedFileID = std::move(ChildPublishedFileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AddAppDependency_AsyncFunction.AddAppDependency
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_AddAppDependency_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_AddAppDependency_AsyncFunction* USIK_AddAppDependency_AsyncFunction::AddAppDependency(const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AddAppDependency_AsyncFunction", "AddAppDependency");

	Params::SIK_AddAppDependency_AsyncFunction_AddAppDependency Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);
	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AddDependency_AsyncFunction.AddDependency
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      ParentPublishedFileID                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_PublishedFileId&      ChildPublishedFileID                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_AddDependency_AsyncFunction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_AddDependency_AsyncFunction* USIK_AddDependency_AsyncFunction::AddDependency(const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AddDependency_AsyncFunction", "AddDependency");

	Params::SIK_AddDependency_AsyncFunction_AddDependency Parms{};

	Parms.ParentPublishedFileID = std::move(ParentPublishedFileID);
	Parms.ChildPublishedFileID = std::move(ChildPublishedFileID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AddItemToFavorites_AsyncFunction.AddItemToFavorites
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_AddItemToFavorites_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_AddItemToFavorites_AsyncFunction* USIK_AddItemToFavorites_AsyncFunction::AddItemToFavorites(const struct FSIK_AppId& AppID, const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AddItemToFavorites_AsyncFunction", "AddItemToFavorites");

	Params::SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites Parms{};

	Parms.AppID = std::move(AppID);
	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestEncryptedAppTicket_AsyncFunction.RequestEncryptedAppTicket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    EncryptedAppTicket                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USIK_RequestEncryptedAppTicket_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestEncryptedAppTicket_AsyncFunction* USIK_RequestEncryptedAppTicket_AsyncFunction::RequestEncryptedAppTicket(const TArray<uint8>& EncryptedAppTicket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestEncryptedAppTicket_AsyncFunction", "RequestEncryptedAppTicket");

	Params::SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket Parms{};

	Parms.EncryptedAppTicket = std::move(EncryptedAppTicket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetAppBuildID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_AppLibrary::GetAppBuildID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetAppBuildID");

	Params::SIK_AppLibrary_GetAppBuildID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetAppInstallDir
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   AppID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_AppLibrary::GetAppInstallDir(int32 AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetAppInstallDir");

	Params::SIK_AppLibrary_GetAppInstallDir Parms{};

	Parms.AppID = AppID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetAppOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_AppLibrary::GetAppOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetAppOwner");

	Params::SIK_AppLibrary_GetAppOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetAvailableGameLanguages
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USIK_AppLibrary::GetAvailableGameLanguages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetAvailableGameLanguages");

	Params::SIK_AppLibrary_GetAvailableGameLanguages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetCurrentBetaName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::GetCurrentBetaName(class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetCurrentBetaName");

	Params::SIK_AppLibrary_GetCurrentBetaName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetCurrentGameLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_AppLibrary::GetCurrentGameLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetCurrentGameLanguage");

	Params::SIK_AppLibrary_GetCurrentGameLanguage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetDLCCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_AppLibrary::GetDLCCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetDLCCount");

	Params::SIK_AppLibrary_GetDLCCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetDLCDataByIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_AppId*                      AppID                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::GetDLCDataByIndex(int32 Index_0, struct FSIK_AppId* AppID, bool* Available, class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetDLCDataByIndex");

	Params::SIK_AppLibrary_GetDLCDataByIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AppID != nullptr)
		*AppID = std::move(Parms.AppID);

	if (Available != nullptr)
		*Available = Parms.Available;

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetDLCDownloadProgress
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int64*                                  BytesDownloaded                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  BytesTotal                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::GetDLCDownloadProgress(const struct FSIK_AppId& AppID, int64* BytesDownloaded, int64* BytesTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetDLCDownloadProgress");

	Params::SIK_AppLibrary_GetDLCDownloadProgress Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BytesDownloaded != nullptr)
		*BytesDownloaded = Parms.BytesDownloaded;

	if (BytesTotal != nullptr)
		*BytesTotal = Parms.BytesTotal;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetEarliestPurchaseUnixTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_AppLibrary::GetEarliestPurchaseUnixTime(const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetEarliestPurchaseUnixTime");

	Params::SIK_AppLibrary_GetEarliestPurchaseUnixTime Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetInstalledDepots
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> USIK_AppLibrary::GetInstalledDepots(const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetInstalledDepots");

	Params::SIK_AppLibrary_GetInstalledDepots Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetLaunchCommandLine
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          CommandLine                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_AppLibrary::GetLaunchCommandLine(class FString* CommandLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetLaunchCommandLine");

	Params::SIK_AppLibrary_GetLaunchCommandLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CommandLine != nullptr)
		*CommandLine = std::move(Parms.CommandLine);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.GetLaunchQueryParam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_AppLibrary::GetLaunchQueryParam(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "GetLaunchQueryParam");

	Params::SIK_AppLibrary_GetLaunchQueryParam Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.InstallDLC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_AppLibrary::InstallDLC(const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "InstallDLC");

	Params::SIK_AppLibrary_InstallDLC Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsAppInstalled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsAppInstalled(const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsAppInstalled");

	Params::SIK_AppLibrary_IsAppInstalled Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsCybercafe
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsCybercafe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsCybercafe");

	Params::SIK_AppLibrary_IsCybercafe Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsDLCInstalled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   AppID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsDLCInstalled(int32 AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsDLCInstalled");

	Params::SIK_AppLibrary_IsDLCInstalled Parms{};

	Parms.AppID = AppID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsLowViolence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsLowViolence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsLowViolence");

	Params::SIK_AppLibrary_IsLowViolence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsSubscribed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsSubscribed");

	Params::SIK_AppLibrary_IsSubscribed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribedApp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   AppID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsSubscribedApp(int32 AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsSubscribedApp");

	Params::SIK_AppLibrary_IsSubscribedApp Parms{};

	Parms.AppID = AppID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribedFromFamilySharing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsSubscribedFromFamilySharing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsSubscribedFromFamilySharing");

	Params::SIK_AppLibrary_IsSubscribedFromFamilySharing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribedFromFreeWeekend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsSubscribedFromFreeWeekend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsSubscribedFromFreeWeekend");

	Params::SIK_AppLibrary_IsSubscribedFromFreeWeekend Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsTimedTrial
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  SecondsAllowed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  SecondsPlayed                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsTimedTrial(int32* SecondsAllowed, int32* SecondsPlayed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsTimedTrial");

	Params::SIK_AppLibrary_IsTimedTrial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SecondsAllowed != nullptr)
		*SecondsAllowed = Parms.SecondsAllowed;

	if (SecondsPlayed != nullptr)
		*SecondsPlayed = Parms.SecondsPlayed;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.IsVACBanned
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::IsVACBanned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "IsVACBanned");

	Params::SIK_AppLibrary_IsVACBanned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.MarkContentCorrupt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    MissingFilesOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_AppLibrary::MarkContentCorrupt(bool MissingFilesOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "MarkContentCorrupt");

	Params::SIK_AppLibrary_MarkContentCorrupt Parms{};

	Parms.MissingFilesOnly = MissingFilesOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_AppLibrary.UninstallDLC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_AppLibrary::UninstallDLC(const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AppLibrary", "UninstallDLC");

	Params::SIK_AppLibrary_UninstallDLC Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_AssociateWithClan_AsyncFunction.AssociateWithClan
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_AssociateWithClan_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_AssociateWithClan_AsyncFunction* USIK_AssociateWithClan_AsyncFunction::AssociateWithClan(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_AssociateWithClan_AsyncFunction", "AssociateWithClan");

	Params::SIK_AssociateWithClan_AsyncFunction_AssociateWithClan Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FindLeaderboard_AsyncFunction.FindLeaderboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LeaderboardName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_FindLeaderboard_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_FindLeaderboard_AsyncFunction* USIK_FindLeaderboard_AsyncFunction::FindLeaderboard(const class FString& LeaderboardName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FindLeaderboard_AsyncFunction", "FindLeaderboard");

	Params::SIK_FindLeaderboard_AsyncFunction_FindLeaderboard Parms{};

	Parms.LeaderboardName = std::move(LeaderboardName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ChangeNumOpenSlots_AsyncFunction.ChangeNumOpenSlots
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_PartyBeaconID&        PartyBeaconID                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OpenSlots                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_ChangeNumOpenSlots_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_ChangeNumOpenSlots_AsyncFunction* USIK_ChangeNumOpenSlots_AsyncFunction::ChangeNumOpenSlots(const struct FSIK_PartyBeaconID& PartyBeaconID, int32 OpenSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ChangeNumOpenSlots_AsyncFunction", "ChangeNumOpenSlots");

	Params::SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots Parms{};

	Parms.PartyBeaconID = std::move(PartyBeaconID);
	Parms.OpenSlots = OpenSlots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ComputeNewPlayerCompatibility_AsyncFunction.ComputeNewPlayerCompatibility
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              PlayerSteamId                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_ComputeNewPlayerCompatibility_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_ComputeNewPlayerCompatibility_AsyncFunction* USIK_ComputeNewPlayerCompatibility_AsyncFunction::ComputeNewPlayerCompatibility(const struct FSIK_SteamId& PlayerSteamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ComputeNewPlayerCompatibility_AsyncFunction", "ComputeNewPlayerCompatibility");

	Params::SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility Parms{};

	Parms.PlayerSteamId = std::move(PlayerSteamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_DownloadClanActivityCounts_AsyncFunction.DownloadClanActivityCounts
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int64>&                    ClanIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USIK_DownloadClanActivityCounts_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_DownloadClanActivityCounts_AsyncFunction* USIK_DownloadClanActivityCounts_AsyncFunction::DownloadClanActivityCounts(const TArray<int64>& ClanIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_DownloadClanActivityCounts_AsyncFunction", "DownloadClanActivityCounts");

	Params::SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts Parms{};

	Parms.ClanIds = std::move(ClanIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_CreateBeacon_AsyncFunction.CreateBeacon
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   OpenSlots                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSIK_SteamPartyBeaconLocation&Location                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    ConnectString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MetaData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_CreateBeacon_AsyncFunction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_CreateBeacon_AsyncFunction* USIK_CreateBeacon_AsyncFunction::CreateBeacon(int32 OpenSlots, const struct FSIK_SteamPartyBeaconLocation& Location, const class FString& ConnectString, const class FString& MetaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_CreateBeacon_AsyncFunction", "CreateBeacon");

	Params::SIK_CreateBeacon_AsyncFunction_CreateBeacon Parms{};

	Parms.OpenSlots = OpenSlots;
	Parms.Location = std::move(Location);
	Parms.ConnectString = std::move(ConnectString);
	Parms.MetaData = std::move(MetaData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_CreateItem_AsyncFunction.CreateItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                ConsumerAppID                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_WorkshopFileType                   FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_CreateItem_AsyncFunction*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_CreateItem_AsyncFunction* USIK_CreateItem_AsyncFunction::CreateItem(const struct FSIK_AppId& ConsumerAppID, ESIK_WorkshopFileType FileType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_CreateItem_AsyncFunction", "CreateItem");

	Params::SIK_CreateItem_AsyncFunction_CreateItem Parms{};

	Parms.ConsumerAppID = std::move(ConsumerAppID);
	Parms.FileType = FileType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_CreateLeaderboard_AsyncFunction.CreateLeaderboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LeaderboardName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LeaderboardSortMethod              SortMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LeaderboardDisplayType             DisplayType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_CreateLeaderboard_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_CreateLeaderboard_AsyncFunction* USIK_CreateLeaderboard_AsyncFunction::CreateLeaderboard(const class FString& LeaderboardName, ESIK_LeaderboardSortMethod SortMethod, ESIK_LeaderboardDisplayType DisplayType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_CreateLeaderboard_AsyncFunction", "CreateLeaderboard");

	Params::SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard Parms{};

	Parms.LeaderboardName = std::move(LeaderboardName);
	Parms.SortMethod = SortMethod;
	Parms.DisplayType = DisplayType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_CreateLobby_AsyncFunction.CreateSIKLobby
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TMap<class FString, struct FSIKAttribute>&SessionSettings                                        (Parm, NativeAccessSpecifierPublic)
// class FName                             SessionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfPublicConnections                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSIKCreateLobbySettings&   ExtraSettings                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_CreateLobby_AsyncFunction*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_CreateLobby_AsyncFunction* USIK_CreateLobby_AsyncFunction::CreateSIKLobby(const TMap<class FString, struct FSIKAttribute>& SessionSettings, class FName SessionName, int32 NumberOfPublicConnections, const struct FSIKCreateLobbySettings& ExtraSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_CreateLobby_AsyncFunction", "CreateSIKLobby");

	Params::SIK_CreateLobby_AsyncFunction_CreateSIKLobby Parms{};

	Parms.SessionSettings = std::move(SessionSettings);
	Parms.SessionName = SessionName;
	Parms.NumberOfPublicConnections = NumberOfPublicConnections;
	Parms.ExtraSettings = std::move(ExtraSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FileShare_AsyncFunction.FileShareAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_FileShare_AsyncFunction*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_FileShare_AsyncFunction* USIK_FileShare_AsyncFunction::FileShareAsync(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FileShare_AsyncFunction", "FileShareAsync");

	Params::SIK_FileShare_AsyncFunction_FileShareAsync Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_CreateSession_AsyncFunction.CreateEIKSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TMap<class FString, struct FSIKAttribute>&SessionSettings                                        (Parm, NativeAccessSpecifierPublic)
// class FName                             SessionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfPublicConnections                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSIKDedicatedServerSettings&DedicatedServerSettings                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_CreateSessionExtraSettings&ExtraSettings                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_CreateSession_AsyncFunction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_CreateSession_AsyncFunction* USIK_CreateSession_AsyncFunction::CreateEIKSession(const TMap<class FString, struct FSIKAttribute>& SessionSettings, class FName SessionName, int32 NumberOfPublicConnections, const struct FSIKDedicatedServerSettings& DedicatedServerSettings, const struct FSIK_CreateSessionExtraSettings& ExtraSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_CreateSession_AsyncFunction", "CreateEIKSession");

	Params::SIK_CreateSession_AsyncFunction_CreateEIKSession Parms{};

	Parms.SessionSettings = std::move(SessionSettings);
	Parms.SessionName = SessionName;
	Parms.NumberOfPublicConnections = NumberOfPublicConnections;
	Parms.DedicatedServerSettings = std::move(DedicatedServerSettings);
	Parms.ExtraSettings = std::move(ExtraSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_DeleteItem_AsyncFunction.DeleteItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_DeleteItem_AsyncFunction*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_DeleteItem_AsyncFunction* USIK_DeleteItem_AsyncFunction::DeleteItem(const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_DeleteItem_AsyncFunction", "DeleteItem");

	Params::SIK_DeleteItem_AsyncFunction_DeleteItem Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_DestroySession_AsyncFunction.DestroySIKSessions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             SessionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_DestroySession_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_DestroySession_AsyncFunction* USIK_DestroySession_AsyncFunction::DestroySIKSessions(class FName SessionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_DestroySession_AsyncFunction", "DestroySIKSessions");

	Params::SIK_DestroySession_AsyncFunction_DestroySIKSessions Parms{};

	Parms.SessionName = SessionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_DownloadLeaderboardEntries_AsyncFunction.DownloadLeaderboardEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   LeaderboardID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RangeStart                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RangeEnd                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LeaderboardDataRequest             LeaderboardDataRequest                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_DownloadLeaderboardEntries_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_DownloadLeaderboardEntries_AsyncFunction* USIK_DownloadLeaderboardEntries_AsyncFunction::DownloadLeaderboardEntries(int32 LeaderboardID, int32 RangeStart, int32 RangeEnd, ESIK_LeaderboardDataRequest LeaderboardDataRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_DownloadLeaderboardEntries_AsyncFunction", "DownloadLeaderboardEntries");

	Params::SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries Parms{};

	Parms.LeaderboardID = LeaderboardID;
	Parms.RangeStart = RangeStart;
	Parms.RangeEnd = RangeEnd;
	Parms.LeaderboardDataRequest = LeaderboardDataRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_EnumerateFollowingList_AsyncFunction.EnumerateFollowingList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_EnumerateFollowingList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_EnumerateFollowingList_AsyncFunction* USIK_EnumerateFollowingList_AsyncFunction::EnumerateFollowingList(int32 StartIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_EnumerateFollowingList_AsyncFunction", "EnumerateFollowingList");

	Params::SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList Parms{};

	Parms.StartIndex = StartIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FileReadAsync_AsyncFunction.FileReadAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   nOffset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   nBytesToRead                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_FileReadAsync_AsyncFunction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_FileReadAsync_AsyncFunction* USIK_FileReadAsync_AsyncFunction::FileReadAsync(const class FString& Filename, int32 nOffset, int32 nBytesToRead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FileReadAsync_AsyncFunction", "FileReadAsync");

	Params::SIK_FileReadAsync_AsyncFunction_FileReadAsync Parms{};

	Parms.Filename = std::move(Filename);
	Parms.nOffset = nOffset;
	Parms.nBytesToRead = nBytesToRead;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FileWriteAsync_AsyncFunction.FileWriteAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    FileData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USIK_FileWriteAsync_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_FileWriteAsync_AsyncFunction* USIK_FileWriteAsync_AsyncFunction::FileWriteAsync(const class FString& Filename, const TArray<uint8>& FileData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FileWriteAsync_AsyncFunction", "FileWriteAsync");

	Params::SIK_FileWriteAsync_AsyncFunction_FileWriteAsync Parms{};

	Parms.Filename = std::move(Filename);
	Parms.FileData = std::move(FileData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FindSessions_AsyncFunction.FindSIKSessions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TMap<class FName, struct FSIKAttribute>&SessionSettings                                        (Parm, NativeAccessSpecifierPublic)
// ESMatchType                             MatchType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxResults                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLanSearch                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEmptyServerOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSecureServerOnly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_FindSessions_AsyncFunction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_FindSessions_AsyncFunction* USIK_FindSessions_AsyncFunction::FindSIKSessions(const TMap<class FName, struct FSIKAttribute>& SessionSettings, ESMatchType MatchType, int32 MaxResults, bool bLanSearch, bool bEmptyServerOnly, bool bSecureServerOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FindSessions_AsyncFunction", "FindSIKSessions");

	Params::SIK_FindSessions_AsyncFunction_FindSIKSessions Parms{};

	Parms.SessionSettings = std::move(SessionSettings);
	Parms.MatchType = MatchType;
	Parms.MaxResults = MaxResults;
	Parms.bLanSearch = bLanSearch;
	Parms.bEmptyServerOnly = bEmptyServerOnly;
	Parms.bSecureServerOnly = bSecureServerOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DialogToOpen                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::ActivateGameOverlay(const class FString& DialogToOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "ActivateGameOverlay");

	Params::SIK_FriendsLibrary_ActivateGameOverlay Parms{};

	Parms.DialogToOpen = std::move(DialogToOpen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayInviteDialog
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int64&                            SteamIdLobby                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::ActivateGameOverlayInviteDialog(const int64& SteamIdLobby)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "ActivateGameOverlayInviteDialog");

	Params::SIK_FriendsLibrary_ActivateGameOverlayInviteDialog Parms{};

	Parms.SteamIdLobby = SteamIdLobby;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayToStore
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAddToCartAndShow                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::ActivateGameOverlayToStore(const struct FSIK_AppId& AppID, bool bAddToCartAndShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "ActivateGameOverlayToStore");

	Params::SIK_FriendsLibrary_ActivateGameOverlayToStore Parms{};

	Parms.AppID = std::move(AppID);
	Parms.bAddToCartAndShow = bAddToCartAndShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayToUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Dialog                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   steamIDUser                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::ActivateGameOverlayToUser(const class FString& Dialog, int64 steamIDUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "ActivateGameOverlayToUser");

	Params::SIK_FriendsLibrary_ActivateGameOverlayToUser Parms{};

	Parms.Dialog = std::move(Dialog);
	Parms.steamIDUser = steamIDUser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayToWebPage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseModal                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::ActivateGameOverlayToWebPage(const class FString& URL, bool bUseModal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "ActivateGameOverlayToWebPage");

	Params::SIK_FriendsLibrary_ActivateGameOverlayToWebPage Parms{};

	Parms.URL = std::move(URL);
	Parms.bUseModal = bUseModal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.BHasEquippedProfileItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              steamIDUser                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_ECommunityProfileItemType          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::BHasEquippedProfileItem(const struct FSIK_SteamId& steamIDUser, ESIK_ECommunityProfileItemType ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "BHasEquippedProfileItem");

	Params::SIK_FriendsLibrary_BHasEquippedProfileItem Parms{};

	Parms.steamIDUser = std::move(steamIDUser);
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.ClearRichPresence
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_FriendsLibrary::ClearRichPresence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "ClearRichPresence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.CloseClanChatWindowInSteam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   SteamIdClanChat                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::CloseClanChatWindowInSteam(int64 SteamIdClanChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "CloseClanChatWindowInSteam");

	Params::SIK_FriendsLibrary_CloseClanChatWindowInSteam Parms{};

	Parms.SteamIdClanChat = SteamIdClanChat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetChatMemberByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MemberIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_FriendsLibrary::GetChatMemberByIndex(const struct FSIK_SteamId& SteamIdClan, int32 MemberIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetChatMemberByIndex");

	Params::SIK_FriendsLibrary_GetChatMemberByIndex Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);
	Parms.MemberIndex = MemberIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanActivityCounts
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  Online                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  InGame                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Chatting                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::GetClanActivityCounts(const struct FSIK_SteamId& SteamIdClan, int32* Online, int32* InGame, int32* Chatting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanActivityCounts");

	Params::SIK_FriendsLibrary_GetClanActivityCounts Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Online != nullptr)
		*Online = Parms.Online;

	if (InGame != nullptr)
		*InGame = Parms.InGame;

	if (Chatting != nullptr)
		*Chatting = Parms.Chatting;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ClanIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_FriendsLibrary::GetClanByIndex(int32 ClanIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanByIndex");

	Params::SIK_FriendsLibrary_GetClanByIndex Parms{};

	Parms.ClanIndex = ClanIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanChatMemberCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetClanChatMemberCount(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanChatMemberCount");

	Params::SIK_FriendsLibrary_GetClanChatMemberCount Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanChatMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MessageIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Text                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSIK_SteamId*                    steamIDUser                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          ChatEntryType                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetClanChatMessage(const struct FSIK_SteamId& SteamIdClan, int32 MessageIndex, const TArray<uint8>& Text, struct FSIK_SteamId* steamIDUser, class FString* ChatEntryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanChatMessage");

	Params::SIK_FriendsLibrary_GetClanChatMessage Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);
	Parms.MessageIndex = MessageIndex;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (steamIDUser != nullptr)
		*steamIDUser = std::move(Parms.steamIDUser);

	if (ChatEntryType != nullptr)
		*ChatEntryType = std::move(Parms.ChatEntryType);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetClanCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanCount");

	Params::SIK_FriendsLibrary_GetClanCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetClanName(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanName");

	Params::SIK_FriendsLibrary_GetClanName Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanOfficerByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OfficerIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_FriendsLibrary::GetClanOfficerByIndex(const struct FSIK_SteamId& SteamIdClan, int32 OfficerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanOfficerByIndex");

	Params::SIK_FriendsLibrary_GetClanOfficerByIndex Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);
	Parms.OfficerIndex = OfficerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanOfficerCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetClanOfficerCount(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanOfficerCount");

	Params::SIK_FriendsLibrary_GetClanOfficerCount Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_FriendsLibrary::GetClanOwner(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanOwner");

	Params::SIK_FriendsLibrary_GetClanOwner Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetClanTag(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetClanTag");

	Params::SIK_FriendsLibrary_GetClanTag Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetCoplayFriend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CoplayFriend                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_FriendsLibrary::GetCoplayFriend(int32 CoplayFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetCoplayFriend");

	Params::SIK_FriendsLibrary_GetCoplayFriend Parms{};

	Parms.CoplayFriend = CoplayFriend;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetCoplayFriendCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetCoplayFriendCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetCoplayFriendCount");

	Params::SIK_FriendsLibrary_GetCoplayFriendCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FriendIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<ESIK_FriendFlags>&         FriendFlags                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_FriendsLibrary::GetFriendByIndex(int32 FriendIndex, const TArray<ESIK_FriendFlags>& FriendFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendByIndex");

	Params::SIK_FriendsLibrary_GetFriendByIndex Parms{};

	Parms.FriendIndex = FriendIndex;
	Parms.FriendFlags = std::move(FriendFlags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCoplayGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_AppId                       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_AppId USIK_FriendsLibrary::GetFriendCoplayGame(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendCoplayGame");

	Params::SIK_FriendsLibrary_GetFriendCoplayGame Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCoplayTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USIK_FriendsLibrary::GetFriendCoplayTime(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendCoplayTime");

	Params::SIK_FriendsLibrary_GetFriendCoplayTime Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<ESIK_FriendFlags>&         FriendFlags                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetFriendCount(const TArray<ESIK_FriendFlags>& FriendFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendCount");

	Params::SIK_FriendsLibrary_GetFriendCount Parms{};

	Parms.FriendFlags = std::move(FriendFlags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCountFromSource
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdSource                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetFriendCountFromSource(const struct FSIK_SteamId& SteamIdSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendCountFromSource");

	Params::SIK_FriendsLibrary_GetFriendCountFromSource Parms{};

	Parms.SteamIdSource = std::move(SteamIdSource);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendFromSourceByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdSource                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   FriendIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_FriendsLibrary::GetFriendFromSourceByIndex(const struct FSIK_SteamId& SteamIdSource, int32 FriendIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendFromSourceByIndex");

	Params::SIK_FriendsLibrary_GetFriendFromSourceByIndex Parms{};

	Parms.SteamIdSource = std::move(SteamIdSource);
	Parms.FriendIndex = FriendIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGamePlayed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_FriendGameInfo*             GameInfo                                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::GetFriendGamePlayed(const struct FSIK_SteamId& SteamIdFriend, struct FSIK_FriendGameInfo* GameInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendGamePlayed");

	Params::SIK_FriendsLibrary_GetFriendGamePlayed Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GameInfo != nullptr)
		*GameInfo = std::move(Parms.GameInfo);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGroupCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetFriendGroupCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendGroupCount");

	Params::SIK_FriendsLibrary_GetFriendGroupCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGroupIDByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   GroupIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_FriendsGroupID              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_FriendsGroupID USIK_FriendsLibrary::GetFriendGroupIDByIndex(int32 GroupIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendGroupIDByIndex");

	Params::SIK_FriendsLibrary_GetFriendGroupIDByIndex Parms{};

	Parms.GroupIndex = GroupIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGroupMembersCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_FriendsGroupID&       FriendsGroupID                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetFriendGroupMembersCount(const struct FSIK_FriendsGroupID& FriendsGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendGroupMembersCount");

	Params::SIK_FriendsLibrary_GetFriendGroupMembersCount Parms{};

	Parms.FriendsGroupID = std::move(FriendsGroupID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MessageIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          Text                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString*                          ChatEntryType                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetFriendMessage(const struct FSIK_SteamId& SteamIdFriend, int32 MessageIndex, TArray<uint8>* Text, class FString* ChatEntryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendMessage");

	Params::SIK_FriendsLibrary_GetFriendMessage Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.MessageIndex = MessageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Text != nullptr)
		*Text = std::move(Parms.Text);

	if (ChatEntryType != nullptr)
		*ChatEntryType = std::move(Parms.ChatEntryType);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendPersonaName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetFriendPersonaName(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendPersonaName");

	Params::SIK_FriendsLibrary_GetFriendPersonaName Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendPersonaNameHistory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   PersonaNameIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetFriendPersonaNameHistory(const struct FSIK_SteamId& SteamIdFriend, int32 PersonaNameIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendPersonaNameHistory");

	Params::SIK_FriendsLibrary_GetFriendPersonaNameHistory Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.PersonaNameIndex = PersonaNameIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendPersonaState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_PersonaState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_PersonaState USIK_FriendsLibrary::GetFriendPersonaState(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendPersonaState");

	Params::SIK_FriendsLibrary_GetFriendPersonaState Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRelationship
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_FriendRelationship                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_FriendRelationship USIK_FriendsLibrary::GetFriendRelationship(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendRelationship");

	Params::SIK_FriendsLibrary_GetFriendRelationship Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRichPresence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetFriendRichPresence(const struct FSIK_SteamId& SteamIdFriend, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendRichPresence");

	Params::SIK_FriendsLibrary_GetFriendRichPresence Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRichPresenceKeyByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   KeyIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetFriendRichPresenceKeyByIndex(const struct FSIK_SteamId& SteamIdFriend, int32 KeyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendRichPresenceKeyByIndex");

	Params::SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.KeyIndex = KeyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRichPresenceKeyCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetFriendRichPresenceKeyCount(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendRichPresenceKeyCount");

	Params::SIK_FriendsLibrary_GetFriendRichPresenceKeyCount Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendsGroupMembersList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_FriendsGroupID&       FriendsGroupID                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MembersCount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSIK_SteamId>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSIK_SteamId> USIK_FriendsLibrary::GetFriendsGroupMembersList(const struct FSIK_FriendsGroupID& FriendsGroupID, int32 MembersCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendsGroupMembersList");

	Params::SIK_FriendsLibrary_GetFriendsGroupMembersList Parms{};

	Parms.FriendsGroupID = std::move(FriendsGroupID);
	Parms.MembersCount = MembersCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendsGroupName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_FriendsGroupID&       FriendsGroupID                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetFriendsGroupName(const struct FSIK_FriendsGroupID& FriendsGroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendsGroupName");

	Params::SIK_FriendsLibrary_GetFriendsGroupName Parms{};

	Parms.FriendsGroupID = std::move(FriendsGroupID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendSteamLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetFriendSteamLevel(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetFriendSteamLevel");

	Params::SIK_FriendsLibrary_GetFriendSteamLevel Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetLargeFriendAvatar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetLargeFriendAvatar(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetLargeFriendAvatar");

	Params::SIK_FriendsLibrary_GetLargeFriendAvatar Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetMediumFriendAvatar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetMediumFriendAvatar(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetMediumFriendAvatar");

	Params::SIK_FriendsLibrary_GetMediumFriendAvatar Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetPersonaName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetPersonaName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetPersonaName");

	Params::SIK_FriendsLibrary_GetPersonaName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetPersonaState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_PersonaState                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_PersonaState USIK_FriendsLibrary::GetPersonaState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetPersonaState");

	Params::SIK_FriendsLibrary_GetPersonaState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetPlayerNickname
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdPlayer                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_FriendsLibrary::GetPlayerNickname(const struct FSIK_SteamId& SteamIdPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetPlayerNickname");

	Params::SIK_FriendsLibrary_GetPlayerNickname Parms{};

	Parms.SteamIdPlayer = std::move(SteamIdPlayer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetProfileItemPropertyString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              steamIDUser                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_ECommunityProfileItemType          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_ECommunityProfileItemProperty      Property                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::GetProfileItemPropertyString(const struct FSIK_SteamId& steamIDUser, ESIK_ECommunityProfileItemType ItemType, ESIK_ECommunityProfileItemProperty Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetProfileItemPropertyString");

	Params::SIK_FriendsLibrary_GetProfileItemPropertyString Parms{};

	Parms.steamIDUser = std::move(steamIDUser);
	Parms.ItemType = ItemType;
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetProfileItemPropertyUint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              steamIDUser                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_ECommunityProfileItemType          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_ECommunityProfileItemProperty      Property                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::GetProfileItemPropertyUint(const struct FSIK_SteamId& steamIDUser, ESIK_ECommunityProfileItemType ItemType, ESIK_ECommunityProfileItemProperty Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetProfileItemPropertyUint");

	Params::SIK_FriendsLibrary_GetProfileItemPropertyUint Parms{};

	Parms.steamIDUser = std::move(steamIDUser);
	Parms.ItemType = ItemType;
	Parms.Property = Property;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetSmallFriendAvatar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* USIK_FriendsLibrary::GetSmallFriendAvatar(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetSmallFriendAvatar");

	Params::SIK_FriendsLibrary_GetSmallFriendAvatar Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.GetUserRestrictions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_FriendsLibrary::GetUserRestrictions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "GetUserRestrictions");

	Params::SIK_FriendsLibrary_GetUserRestrictions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.HasFriend
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<ESIK_FriendFlags>&         FriendFlags                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::HasFriend(const struct FSIK_SteamId& SteamIdFriend, const TArray<ESIK_FriendFlags>& FriendFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "HasFriend");

	Params::SIK_FriendsLibrary_HasFriend Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.FriendFlags = std::move(FriendFlags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.InviteUserToGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    ConnectString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::InviteUserToGame(const struct FSIK_SteamId& SteamIdFriend, const class FString& ConnectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "InviteUserToGame");

	Params::SIK_FriendsLibrary_InviteUserToGame Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.ConnectString = std::move(ConnectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanChatAdmin
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClanChat                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              steamIDUser                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::IsClanChatAdmin(const struct FSIK_SteamId& SteamIdClanChat, const struct FSIK_SteamId& steamIDUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "IsClanChatAdmin");

	Params::SIK_FriendsLibrary_IsClanChatAdmin Parms{};

	Parms.SteamIdClanChat = std::move(SteamIdClanChat);
	Parms.steamIDUser = std::move(steamIDUser);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanChatWindowOpenInSteam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClanChat                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::IsClanChatWindowOpenInSteam(const struct FSIK_SteamId& SteamIdClanChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "IsClanChatWindowOpenInSteam");

	Params::SIK_FriendsLibrary_IsClanChatWindowOpenInSteam Parms{};

	Parms.SteamIdClanChat = std::move(SteamIdClanChat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanOfficialGameGroup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::IsClanOfficialGameGroup(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "IsClanOfficialGameGroup");

	Params::SIK_FriendsLibrary_IsClanOfficialGameGroup Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanPublic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClan                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::IsClanPublic(const struct FSIK_SteamId& SteamIdClan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "IsClanPublic");

	Params::SIK_FriendsLibrary_IsClanPublic Parms{};

	Parms.SteamIdClan = std::move(SteamIdClan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.IsFollowing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::IsFollowing(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "IsFollowing");

	Params::SIK_FriendsLibrary_IsFollowing Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.IsUserInSource
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamIdSource                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::IsUserInSource(const struct FSIK_SteamId& SteamIdFriend, const struct FSIK_SteamId& SteamIdSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "IsUserInSource");

	Params::SIK_FriendsLibrary_IsUserInSource Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.SteamIdSource = std::move(SteamIdSource);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.LeaveClanChatRoom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClanChat                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::LeaveClanChatRoom(const struct FSIK_SteamId& SteamIdClanChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "LeaveClanChatRoom");

	Params::SIK_FriendsLibrary_LeaveClanChatRoom Parms{};

	Parms.SteamIdClanChat = std::move(SteamIdClanChat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.ReplyToFriendMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::ReplyToFriendMessage(const struct FSIK_SteamId& SteamIdFriend, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "ReplyToFriendMessage");

	Params::SIK_FriendsLibrary_ReplyToFriendMessage Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.RequestFriendRichPresence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::RequestFriendRichPresence(const struct FSIK_SteamId& SteamIdFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "RequestFriendRichPresence");

	Params::SIK_FriendsLibrary_RequestFriendRichPresence Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.RequestUserInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              steamIDUser                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bRequireNameOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::RequestUserInfo(const struct FSIK_SteamId& steamIDUser, bool bRequireNameOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "RequestUserInfo");

	Params::SIK_FriendsLibrary_RequestUserInfo Parms{};

	Parms.steamIDUser = std::move(steamIDUser);
	Parms.bRequireNameOnly = bRequireNameOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.SendClanChatMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdClanChat                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::SendClanChatMessage(const struct FSIK_SteamId& SteamIdClanChat, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "SendClanChatMessage");

	Params::SIK_FriendsLibrary_SendClanChatMessage Parms{};

	Parms.SteamIdClanChat = std::move(SteamIdClanChat);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.SetInGameVoiceSpeaking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIdFriend                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bSpeaking                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::SetInGameVoiceSpeaking(const struct FSIK_SteamId& SteamIdFriend, bool bSpeaking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "SetInGameVoiceSpeaking");

	Params::SIK_FriendsLibrary_SetInGameVoiceSpeaking Parms{};

	Parms.SteamIdFriend = std::move(SteamIdFriend);
	Parms.bSpeaking = bSpeaking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.SetListenForFriendMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bInterceptEnabled                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::SetListenForFriendMessage(bool bInterceptEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "SetListenForFriendMessage");

	Params::SIK_FriendsLibrary_SetListenForFriendMessage Parms{};

	Parms.bInterceptEnabled = bInterceptEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.SetPlayedWith
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              steamIDUser                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_FriendsLibrary::SetPlayedWith(const struct FSIK_SteamId& steamIDUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "SetPlayedWith");

	Params::SIK_FriendsLibrary_SetPlayedWith Parms{};

	Parms.steamIDUser = std::move(steamIDUser);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_FriendsLibrary.SetRichPresence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_FriendsLibrary::SetRichPresence(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_FriendsLibrary", "SetRichPresence");

	Params::SIK_FriendsLibrary_SetRichPresence Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.BeginAuthSession
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    Token                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_BeginAuthSessionResult             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_BeginAuthSessionResult USIK_GameServerLibrary::BeginAuthSession(const TArray<uint8>& Token, const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "BeginAuthSession");

	Params::SIK_GameServerLibrary_BeginAuthSession Parms{};

	Parms.Token = std::move(Token);
	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.CancelAuthTicket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AuthTicket&           AuthTicket                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::CancelAuthTicket(const struct FSIK_AuthTicket& AuthTicket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "CancelAuthTicket");

	Params::SIK_GameServerLibrary_CancelAuthTicket Parms{};

	Parms.AuthTicket = std::move(AuthTicket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.ClearAllKeyValues
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_GameServerLibrary::ClearAllKeyValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "ClearAllKeyValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.CreateUnauthenticatedUserConnection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_GameServerLibrary::CreateUnauthenticatedUserConnection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "CreateUnauthenticatedUserConnection");

	Params::SIK_GameServerLibrary_CreateUnauthenticatedUserConnection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.EnableHeartbeats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::EnableHeartbeats(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "EnableHeartbeats");

	Params::SIK_GameServerLibrary_EnableHeartbeats Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.EndAuthSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::EndAuthSession(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "EndAuthSession");

	Params::SIK_GameServerLibrary_EndAuthSession Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.ForceHeartbeat
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_GameServerLibrary::ForceHeartbeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "ForceHeartbeat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.GetAuthSessionTicket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> USIK_GameServerLibrary::GetAuthSessionTicket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "GetAuthSessionTicket");

	Params::SIK_GameServerLibrary_GetAuthSessionTicket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.GetPublicIP
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSIK_SteamIPAddress              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamIPAddress USIK_GameServerLibrary::GetPublicIP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "GetPublicIP");

	Params::SIK_GameServerLibrary_GetPublicIP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.GetSteamID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_GameServerLibrary::GetSteamID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "GetSteamID");

	Params::SIK_GameServerLibrary_GetSteamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.LoggedOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerLibrary::LoggedOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "LoggedOn");

	Params::SIK_GameServerLibrary_LoggedOn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.LogOff
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_GameServerLibrary::LogOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "LogOff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.LogOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::LogOn(const class FString& Token)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "LogOn");

	Params::SIK_GameServerLibrary_LogOn Parms{};

	Parms.Token = std::move(Token);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.LogOnAnonymous
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_GameServerLibrary::LogOnAnonymous()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "LogOnAnonymous");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.RequestUserGroupStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              GroupID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerLibrary::RequestUserGroupStatus(const struct FSIK_SteamId& SteamID, const struct FSIK_SteamId& GroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "RequestUserGroupStatus");

	Params::SIK_GameServerLibrary_RequestUserGroupStatus Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.GroupID = std::move(GroupID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.Secure
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerLibrary::Secure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "Secure");

	Params::SIK_GameServerLibrary_Secure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetBotPlayerCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BotPlayerCount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetBotPlayerCount(int32 BotPlayerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetBotPlayerCount");

	Params::SIK_GameServerLibrary_SetBotPlayerCount Parms{};

	Parms.BotPlayerCount = BotPlayerCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetDedicatedServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bDedicated                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetDedicatedServer(bool bDedicated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetDedicatedServer");

	Params::SIK_GameServerLibrary_SetDedicatedServer Parms{};

	Parms.bDedicated = bDedicated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetGameData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetGameData(const class FString& GameData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetGameData");

	Params::SIK_GameServerLibrary_SetGameData Parms{};

	Parms.GameData = std::move(GameData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetGameDescription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameDescription                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetGameDescription(const class FString& GameDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetGameDescription");

	Params::SIK_GameServerLibrary_SetGameDescription Parms{};

	Parms.GameDescription = std::move(GameDescription);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetGameTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    GameTags                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetGameTags(const class FString& GameTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetGameTags");

	Params::SIK_GameServerLibrary_SetGameTags Parms{};

	Parms.GameTags = std::move(GameTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetKeyValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetKeyValue(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetKeyValue");

	Params::SIK_GameServerLibrary_SetKeyValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetMapName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetMapName(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetMapName");

	Params::SIK_GameServerLibrary_SetMapName Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetMaxPlayerCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxPlayerCount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetMaxPlayerCount(int32 MaxPlayerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetMaxPlayerCount");

	Params::SIK_GameServerLibrary_SetMaxPlayerCount Parms{};

	Parms.MaxPlayerCount = MaxPlayerCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetModDir
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ModDir                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetModDir(const class FString& ModDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetModDir");

	Params::SIK_GameServerLibrary_SetModDir Parms{};

	Parms.ModDir = std::move(ModDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetPasswordProtected
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bPasswordProtected                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetPasswordProtected(bool bPasswordProtected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetPasswordProtected");

	Params::SIK_GameServerLibrary_SetPasswordProtected Parms{};

	Parms.bPasswordProtected = bPasswordProtected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetProduct
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Product                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetProduct(const class FString& Product)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetProduct");

	Params::SIK_GameServerLibrary_SetProduct Parms{};

	Parms.Product = std::move(Product);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetRegion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Region                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetRegion(const class FString& Region)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetRegion");

	Params::SIK_GameServerLibrary_SetRegion Parms{};

	Parms.Region = std::move(Region);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetServerName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ServerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetServerName(const class FString& ServerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetServerName");

	Params::SIK_GameServerLibrary_SetServerName Parms{};

	Parms.ServerName = std::move(ServerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetSpectatorPort
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   SpectatorPort                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetSpectatorPort(int32 SpectatorPort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetSpectatorPort");

	Params::SIK_GameServerLibrary_SetSpectatorPort Parms{};

	Parms.SpectatorPort = SpectatorPort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.SetSpectatorServerName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SpectatorServerName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_GameServerLibrary::SetSpectatorServerName(const class FString& SpectatorServerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "SetSpectatorServerName");

	Params::SIK_GameServerLibrary_SetSpectatorServerName Parms{};

	Parms.SpectatorServerName = std::move(SpectatorServerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.UpdateUserData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerLibrary::UpdateUserData(const struct FSIK_SteamId& SteamID, const class FString& PlayerName, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "UpdateUserData");

	Params::SIK_GameServerLibrary_UpdateUserData Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.PlayerName = std::move(PlayerName);
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.UserHasLicenseForApp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   AppID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_UserHasLicenseForAppResult         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_UserHasLicenseForAppResult USIK_GameServerLibrary::UserHasLicenseForApp(const struct FSIK_SteamId& SteamID, int32 AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "UserHasLicenseForApp");

	Params::SIK_GameServerLibrary_UserHasLicenseForApp Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.AppID = AppID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerLibrary.WasRestartRequested
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerLibrary::WasRestartRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerLibrary", "WasRestartRequested");

	Params::SIK_GameServerLibrary_WasRestartRequested Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.ClearUserAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::ClearUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "ClearUserAchievement");

	Params::SIK_GameServerStatsLibrary_ClearUserAchievement Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.GetFloatUserStat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Data                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::GetFloatUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, float* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "GetFloatUserStat");

	Params::SIK_GameServerStatsLibrary_GetFloatUserStat Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = Parms.Data;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.GetIntUserStat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Data                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::GetIntUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, int32* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "GetIntUserStat");

	Params::SIK_GameServerStatsLibrary_GetIntUserStat Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = Parms.Data;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.GetUserAchievement
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAchieved                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::GetUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName, bool* bAchieved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "GetUserAchievement");

	Params::SIK_GameServerStatsLibrary_GetUserAchievement Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bAchieved != nullptr)
		*bAchieved = Parms.bAchieved;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.RequestUserStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::RequestUserStats(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "RequestUserStats");

	Params::SIK_GameServerStatsLibrary_RequestUserStats Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.SetFloatUserStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::SetFloatUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, float Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "SetFloatUserStat");

	Params::SIK_GameServerStatsLibrary_SetFloatUserStat Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.StatName = std::move(StatName);
	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.SetIntUserStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::SetIntUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, int32 Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "SetIntUserStat");

	Params::SIK_GameServerStatsLibrary_SetIntUserStat Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.StatName = std::move(StatName);
	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.SetUserAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::SetUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "SetUserAchievement");

	Params::SIK_GameServerStatsLibrary_SetUserAchievement Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.StoreUserStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::StoreUserStats(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "StoreUserStats");

	Params::SIK_GameServerStatsLibrary_StoreUserStats Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.UpdateUserAvgRateStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CountThisSession                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SessionLength                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_GameServerStatsLibrary::UpdateUserAvgRateStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, float CountThisSession, float SessionLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GameServerStatsLibrary", "UpdateUserAvgRateStat");

	Params::SIK_GameServerStatsLibrary_UpdateUserAvgRateStat Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.StatName = std::move(StatName);
	Parms.CountThisSession = CountThisSession;
	Parms.SessionLength = SessionLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GetAppDependencies_AsyncFunction.GetAppDependencies
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_GetAppDependencies_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_GetAppDependencies_AsyncFunction* USIK_GetAppDependencies_AsyncFunction::GetAppDependencies(const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GetAppDependencies_AsyncFunction", "GetAppDependencies");

	Params::SIK_GetAppDependencies_AsyncFunction_GetAppDependencies Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GetDurationControl_AsyncFunction.GetDurationControl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USIK_GetDurationControl_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_GetDurationControl_AsyncFunction* USIK_GetDurationControl_AsyncFunction::GetDurationControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GetDurationControl_AsyncFunction", "GetDurationControl");

	Params::SIK_GetDurationControl_AsyncFunction_GetDurationControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GetFileDetails_AsyncFunction.GetFileDetails
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_GetFileDetails_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_GetFileDetails_AsyncFunction* USIK_GetFileDetails_AsyncFunction::GetFileDetails(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GetFileDetails_AsyncFunction", "GetFileDetails");

	Params::SIK_GetFileDetails_AsyncFunction_GetFileDetails Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GetFollowerCount_AsyncFunction.GetFollowerCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_GetFollowerCount_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_GetFollowerCount_AsyncFunction* USIK_GetFollowerCount_AsyncFunction::GetFollowerCount(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GetFollowerCount_AsyncFunction", "GetFollowerCount");

	Params::SIK_GetFollowerCount_AsyncFunction_GetFollowerCount Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GetNumberOfCurrentPlayers_AsyncFunction.GetNumberOfCurrentPlayers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USIK_GetNumberOfCurrentPlayers_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_GetNumberOfCurrentPlayers_AsyncFunction* USIK_GetNumberOfCurrentPlayers_AsyncFunction::GetNumberOfCurrentPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GetNumberOfCurrentPlayers_AsyncFunction", "GetNumberOfCurrentPlayers");

	Params::SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_GetUserItemVote_AsyncFunction.GetUserItemVote
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_GetUserItemVote_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_GetUserItemVote_AsyncFunction* USIK_GetUserItemVote_AsyncFunction::GetUserItemVote(const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_GetUserItemVote_AsyncFunction", "GetUserItemVote");

	Params::SIK_GetUserItemVote_AsyncFunction_GetUserItemVote Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.AddPromoItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamItemDef&         ItemDef                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::AddPromoItem(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemDef& ItemDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "AddPromoItem");

	Params::SIK_InventoryLibrary_AddPromoItem Parms{};

	Parms.ItemDef = std::move(ItemDef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.AddPromoItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FSIK_SteamItemDef>& ItemDefs                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::AddPromoItems(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemDef>& ItemDefs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "AddPromoItems");

	Params::SIK_InventoryLibrary_AddPromoItems Parms{};

	Parms.ItemDefs = std::move(ItemDefs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.CheckResultSteamID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryResult& InventoryResult                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::CheckResultSteamID(const struct FSIK_SteamInventoryResult& InventoryResult, const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "CheckResultSteamID");

	Params::SIK_InventoryLibrary_CheckResultSteamID Parms{};

	Parms.InventoryResult = std::move(InventoryResult);
	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.ConsumeItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamItemInstanceID&  ItemInstance                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::ConsumeItem(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemInstanceID& ItemInstance, int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "ConsumeItem");

	Params::SIK_InventoryLibrary_ConsumeItem Parms{};

	Parms.ItemInstance = std::move(ItemInstance);
	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.DeserializeResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Buffer                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::DeserializeResult(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<uint8>& Buffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "DeserializeResult");

	Params::SIK_InventoryLibrary_DeserializeResult Parms{};

	Parms.Buffer = std::move(Buffer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.DestroyResult
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryResult& InventoryResult                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_InventoryLibrary::DestroyResult(const struct FSIK_SteamInventoryResult& InventoryResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "DestroyResult");

	Params::SIK_InventoryLibrary_DestroyResult Parms{};

	Parms.InventoryResult = std::move(InventoryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.ExchangeItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FSIK_SteamItemDef>& ItemDefsToCreate                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    ArrayGenerateQuantity                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FSIK_SteamItemInstanceID>&ItemDefsToDestroy                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    DestroyQuantity                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::ExchangeItems(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemDef>& ItemDefsToCreate, const TArray<int32>& ArrayGenerateQuantity, const TArray<struct FSIK_SteamItemInstanceID>& ItemDefsToDestroy, const TArray<int32>& DestroyQuantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "ExchangeItems");

	Params::SIK_InventoryLibrary_ExchangeItems Parms{};

	Parms.ItemDefsToCreate = std::move(ItemDefsToCreate);
	Parms.ArrayGenerateQuantity = std::move(ArrayGenerateQuantity);
	Parms.ItemDefsToDestroy = std::move(ItemDefsToDestroy);
	Parms.DestroyQuantity = std::move(DestroyQuantity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GenerateItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FSIK_SteamItemDef>& ItemDefs                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Quantity                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GenerateItems(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemDef>& ItemDefs, const TArray<int32>& Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GenerateItems");

	Params::SIK_InventoryLibrary_GenerateItems Parms{};

	Parms.ItemDefs = std::move(ItemDefs);
	Parms.Quantity = std::move(Quantity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetAllItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetAllItems(struct FSIK_SteamInventoryResult* InventoryResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetAllItems");

	Params::SIK_InventoryLibrary_GetAllItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetEligiblePromoItemDefinitionIDs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FSIK_SteamItemDef>*       ItemDefs                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetEligiblePromoItemDefinitionIDs(const struct FSIK_SteamId& SteamID, TArray<struct FSIK_SteamItemDef>* ItemDefs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetEligiblePromoItemDefinitionIDs");

	Params::SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemDefs != nullptr)
		*ItemDefs = std::move(Parms.ItemDefs);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemDefinitionIDs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSIK_SteamItemDef>*       ItemDefs                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetItemDefinitionIDs(TArray<struct FSIK_SteamItemDef>* ItemDefs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetItemDefinitionIDs");

	Params::SIK_InventoryLibrary_GetItemDefinitionIDs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemDefs != nullptr)
		*ItemDefs = std::move(Parms.ItemDefs);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemDefinitionProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamItemDef&         ItemDef                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetItemDefinitionProperty(const struct FSIK_SteamItemDef& ItemDef, const class FString& PropertyName, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetItemDefinitionProperty");

	Params::SIK_InventoryLibrary_GetItemDefinitionProperty Parms{};

	Parms.ItemDef = std::move(ItemDef);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemPrice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamItemDef&         ItemDef                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int64*                                  CurrentPrice                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  BasePrice                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetItemPrice(const struct FSIK_SteamItemDef& ItemDef, int64* CurrentPrice, int64* BasePrice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetItemPrice");

	Params::SIK_InventoryLibrary_GetItemPrice Parms{};

	Parms.ItemDef = std::move(ItemDef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentPrice != nullptr)
		*CurrentPrice = Parms.CurrentPrice;

	if (BasePrice != nullptr)
		*BasePrice = Parms.BasePrice;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemsByID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FSIK_SteamItemInstanceID>&ItemInstances                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetItemsByID(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemInstanceID>& ItemInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetItemsByID");

	Params::SIK_InventoryLibrary_GetItemsByID Parms{};

	Parms.ItemInstances = std::move(ItemInstances);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemsWithPrices
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSIK_SteamItemDef>*       ItemDefs                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int64>*                          CurrentPrices                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int64>*                          BasePrices                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ArraySize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetItemsWithPrices(TArray<struct FSIK_SteamItemDef>* ItemDefs, TArray<int64>* CurrentPrices, TArray<int64>* BasePrices, int32 ArraySize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetItemsWithPrices");

	Params::SIK_InventoryLibrary_GetItemsWithPrices Parms{};

	Parms.ArraySize = ArraySize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemDefs != nullptr)
		*ItemDefs = std::move(Parms.ItemDefs);

	if (CurrentPrices != nullptr)
		*CurrentPrices = std::move(Parms.CurrentPrices);

	if (BasePrices != nullptr)
		*BasePrices = std::move(Parms.BasePrices);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetNumItemsWithPrices
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_InventoryLibrary::GetNumItemsWithPrices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetNumItemsWithPrices");

	Params::SIK_InventoryLibrary_GetNumItemsWithPrices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultItemProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryResult& InventoryResult                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetResultItemProperty(const struct FSIK_SteamInventoryResult& InventoryResult, int32 ItemIndex, const class FString& PropertyName, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetResultItemProperty");

	Params::SIK_InventoryLibrary_GetResultItemProperty Parms{};

	Parms.InventoryResult = std::move(InventoryResult);
	Parms.ItemIndex = ItemIndex;
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryResult& InventoryResult                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FSIK_SteamItemDetails>*   ItemInstances                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GetResultItems(const struct FSIK_SteamInventoryResult& InventoryResult, TArray<struct FSIK_SteamItemDetails>* ItemInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetResultItems");

	Params::SIK_InventoryLibrary_GetResultItems Parms{};

	Parms.InventoryResult = std::move(InventoryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ItemInstances != nullptr)
		*ItemInstances = std::move(Parms.ItemInstances);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryResult& InventoryResult                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_Result                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_Result USIK_InventoryLibrary::GetResultStatus(const struct FSIK_SteamInventoryResult& InventoryResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetResultStatus");

	Params::SIK_InventoryLibrary_GetResultStatus Parms{};

	Parms.InventoryResult = std::move(InventoryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultTimestamp
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryResult& InventoryResult                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  Timestamp                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USIK_InventoryLibrary::GetResultTimestamp(const struct FSIK_SteamInventoryResult& InventoryResult, int32* Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GetResultTimestamp");

	Params::SIK_InventoryLibrary_GetResultTimestamp Parms{};

	Parms.InventoryResult = std::move(InventoryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Timestamp != nullptr)
		*Timestamp = Parms.Timestamp;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.GrantPromoItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::GrantPromoItems(struct FSIK_SteamInventoryResult* InventoryResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "GrantPromoItems");

	Params::SIK_InventoryLibrary_GrantPromoItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.LoadItemDefinitions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::LoadItemDefinitions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "LoadItemDefinitions");

	Params::SIK_InventoryLibrary_LoadItemDefinitions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.RemoveProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryUpdateHandle&UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamItemInstanceID&  ItemInstance                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::RemoveProperty(const struct FSIK_SteamInventoryUpdateHandle& UpdateHandle, const struct FSIK_SteamItemInstanceID& ItemInstance, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "RemoveProperty");

	Params::SIK_InventoryLibrary_RemoveProperty Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.ItemInstance = std::move(ItemInstance);
	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.SerializeResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryResult& InventoryResult                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<uint8>*                          Buffer                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::SerializeResult(const struct FSIK_SteamInventoryResult& InventoryResult, TArray<uint8>* Buffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "SerializeResult");

	Params::SIK_InventoryLibrary_SerializeResult Parms{};

	Parms.InventoryResult = std::move(InventoryResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Buffer != nullptr)
		*Buffer = std::move(Parms.Buffer);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.SetProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryUpdateHandle&UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamItemInstanceID&  ItemInstance                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::SetProperty(const struct FSIK_SteamInventoryUpdateHandle& UpdateHandle, const struct FSIK_SteamItemInstanceID& ItemInstance, const class FString& PropertyName, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "SetProperty");

	Params::SIK_InventoryLibrary_SetProperty Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.ItemInstance = std::move(ItemInstance);
	Parms.PropertyName = std::move(PropertyName);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.StartUpdateProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryUpdateHandle  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamInventoryUpdateHandle USIK_InventoryLibrary::StartUpdateProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "StartUpdateProperties");

	Params::SIK_InventoryLibrary_StartUpdateProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.SubmitUpdateProperties
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamInventoryUpdateHandle&UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::SubmitUpdateProperties(const struct FSIK_SteamInventoryUpdateHandle& UpdateHandle, struct FSIK_SteamInventoryResult* InventoryResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "SubmitUpdateProperties");

	Params::SIK_InventoryLibrary_SubmitUpdateProperties Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.TransferItemQuantity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamItemInstanceID&  ItemInstance                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSIK_SteamItemInstanceID&  itemIdDest                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::TransferItemQuantity(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemInstanceID& ItemInstance, int32 Quantity, const struct FSIK_SteamItemInstanceID& itemIdDest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "TransferItemQuantity");

	Params::SIK_InventoryLibrary_TransferItemQuantity Parms{};

	Parms.ItemInstance = std::move(ItemInstance);
	Parms.Quantity = Quantity;
	Parms.itemIdDest = std::move(itemIdDest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_InventoryLibrary.TriggerItemDrop
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamInventoryResult*       InventoryResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamItemDef&         ItemDef                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_InventoryLibrary::TriggerItemDrop(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemDef& ItemDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_InventoryLibrary", "TriggerItemDrop");

	Params::SIK_InventoryLibrary_TriggerItemDrop Parms{};

	Parms.ItemDef = std::move(ItemDef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InventoryResult != nullptr)
		*InventoryResult = std::move(Parms.InventoryResult);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_JoinClanChatRoom_AsyncFunction.JoinClanChatRoom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              ClanId                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_JoinClanChatRoom_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_JoinClanChatRoom_AsyncFunction* USIK_JoinClanChatRoom_AsyncFunction::JoinClanChatRoom(const struct FSIK_SteamId& ClanId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_JoinClanChatRoom_AsyncFunction", "JoinClanChatRoom");

	Params::SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom Parms{};

	Parms.ClanId = std::move(ClanId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_JoinLobby_AsyncFunction.JoinLobby
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_JoinLobby_AsyncFunction*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_JoinLobby_AsyncFunction* USIK_JoinLobby_AsyncFunction::JoinLobby(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_JoinLobby_AsyncFunction", "JoinLobby");

	Params::SIK_JoinLobby_AsyncFunction_JoinLobby Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_JoinParty_AsyncFunction.JoinParty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PartyBeaconID&        SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_JoinParty_AsyncFunction*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_JoinParty_AsyncFunction* USIK_JoinParty_AsyncFunction::JoinParty(const struct FSIK_PartyBeaconID& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_JoinParty_AsyncFunction", "JoinParty");

	Params::SIK_JoinParty_AsyncFunction_JoinParty Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_JoinSession_AsyncFunction.JoinSIKSessions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SessionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSSessionFindStruct&       SessionToJoin                                          (Parm, NativeAccessSpecifierPublic)
// class USIK_JoinSession_AsyncFunction*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_JoinSession_AsyncFunction* USIK_JoinSession_AsyncFunction::JoinSIKSessions(class UObject* WorldContextObject, class FName SessionName, const struct FSSessionFindStruct& SessionToJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_JoinSession_AsyncFunction", "JoinSIKSessions");

	Params::SIK_JoinSession_AsyncFunction_JoinSIKSessions Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SessionName = SessionName;
	Parms.SessionToJoin = std::move(SessionToJoin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddFavoriteGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    IP                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ConnPort                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QueryPort                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Flags_0                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   Time32LastPlayedOnServer                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_MatchmakingLibrary::AddFavoriteGame(const struct FSIK_AppId& AppID, const class FString& IP, int32 ConnPort, int32 QueryPort, const TArray<int32>& Flags_0, int32 Time32LastPlayedOnServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddFavoriteGame");

	Params::SIK_MatchmakingLibrary_AddFavoriteGame Parms{};

	Parms.AppID = std::move(AppID);
	Parms.IP = std::move(IP);
	Parms.ConnPort = ConnPort;
	Parms.QueryPort = QueryPort;
	Parms.Flags_0 = std::move(Flags_0);
	Parms.Time32LastPlayedOnServer = Time32LastPlayedOnServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListCompatibleMembersFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::AddRequestLobbyListCompatibleMembersFilter(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddRequestLobbyListCompatibleMembersFilter");

	Params::SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListDistanceFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_LobbyDistanceFilter                LobbyDistanceFilter                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::AddRequestLobbyListDistanceFilter(ESIK_LobbyDistanceFilter LobbyDistanceFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddRequestLobbyListDistanceFilter");

	Params::SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter Parms{};

	Parms.LobbyDistanceFilter = LobbyDistanceFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListFilterSlotsAvailable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   SlotsAvailable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::AddRequestLobbyListFilterSlotsAvailable(int32 SlotsAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddRequestLobbyListFilterSlotsAvailable");

	Params::SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable Parms{};

	Parms.SlotsAvailable = SlotsAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListNearValueFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    KeyToMatch                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ValueToBeCloseTo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::AddRequestLobbyListNearValueFilter(const class FString& KeyToMatch, int32 ValueToBeCloseTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddRequestLobbyListNearValueFilter");

	Params::SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter Parms{};

	Parms.KeyToMatch = std::move(KeyToMatch);
	Parms.ValueToBeCloseTo = ValueToBeCloseTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListNumericalFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    KeyToMatch                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ValueToMatch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LobbyComparisonType                ComparisonType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::AddRequestLobbyListNumericalFilter(const class FString& KeyToMatch, int32 ValueToMatch, ESIK_LobbyComparisonType ComparisonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddRequestLobbyListNumericalFilter");

	Params::SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter Parms{};

	Parms.KeyToMatch = std::move(KeyToMatch);
	Parms.ValueToMatch = ValueToMatch;
	Parms.ComparisonType = ComparisonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListResultCountFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxResults                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::AddRequestLobbyListResultCountFilter(int32 MaxResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddRequestLobbyListResultCountFilter");

	Params::SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter Parms{};

	Parms.MaxResults = MaxResults;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListStringFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    KeyToMatch                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ValueToMatch                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LobbyComparisonType                ComparisonType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::AddRequestLobbyListStringFilter(const class FString& KeyToMatch, const class FString& ValueToMatch, ESIK_LobbyComparisonType ComparisonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "AddRequestLobbyListStringFilter");

	Params::SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter Parms{};

	Parms.KeyToMatch = std::move(KeyToMatch);
	Parms.ValueToMatch = std::move(ValueToMatch);
	Parms.ComparisonType = ComparisonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.DeleteLobbyData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::DeleteLobbyData(const struct FSIK_SteamId& SteamID, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "DeleteLobbyData");

	Params::SIK_MatchmakingLibrary_DeleteLobbyData Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetFavoriteGame
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GameIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_AppId*                      AppID                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          IP                                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  ConnPort                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  QueryPort                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>*                          Flags_0                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  Time32LastPlayedOnServer                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::GetFavoriteGame(int32 GameIndex, struct FSIK_AppId* AppID, class FString* IP, int32* ConnPort, int32* QueryPort, TArray<int32>* Flags_0, int32* Time32LastPlayedOnServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetFavoriteGame");

	Params::SIK_MatchmakingLibrary_GetFavoriteGame Parms{};

	Parms.GameIndex = GameIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AppID != nullptr)
		*AppID = std::move(Parms.AppID);

	if (IP != nullptr)
		*IP = std::move(Parms.IP);

	if (ConnPort != nullptr)
		*ConnPort = Parms.ConnPort;

	if (QueryPort != nullptr)
		*QueryPort = Parms.QueryPort;

	if (Flags_0 != nullptr)
		*Flags_0 = std::move(Parms.Flags_0);

	if (Time32LastPlayedOnServer != nullptr)
		*Time32LastPlayedOnServer = Parms.Time32LastPlayedOnServer;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetFavoriteGameCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_MatchmakingLibrary::GetFavoriteGameCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetFavoriteGameCount");

	Params::SIK_MatchmakingLibrary_GetFavoriteGameCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   LobbyIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_MatchmakingLibrary::GetLobbyByIndex(int32 LobbyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyByIndex");

	Params::SIK_MatchmakingLibrary_GetLobbyByIndex Parms{};

	Parms.LobbyIndex = LobbyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyChatEntry
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ChatID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId*                    steamIDUser                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          ChatEntry                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LobbyChatEntryType*                ChatEntryType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::GetLobbyChatEntry(const struct FSIK_SteamId& SteamID, int32 ChatID, struct FSIK_SteamId* steamIDUser, class FString* ChatEntry, ESIK_LobbyChatEntryType* ChatEntryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyChatEntry");

	Params::SIK_MatchmakingLibrary_GetLobbyChatEntry Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.ChatID = ChatID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (steamIDUser != nullptr)
		*steamIDUser = std::move(Parms.steamIDUser);

	if (ChatEntry != nullptr)
		*ChatEntry = std::move(Parms.ChatEntry);

	if (ChatEntryType != nullptr)
		*ChatEntryType = Parms.ChatEntryType;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_MatchmakingLibrary::GetLobbyData(const struct FSIK_SteamId& LobbyID, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyData");

	Params::SIK_MatchmakingLibrary_GetLobbyData Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyDataByIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   DataIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Key                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::GetLobbyDataByIndex(const struct FSIK_SteamId& LobbyID, int32 DataIndex, class FString* Key, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyDataByIndex");

	Params::SIK_MatchmakingLibrary_GetLobbyDataByIndex Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.DataIndex = DataIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Key != nullptr)
		*Key = std::move(Parms.Key);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyDataCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_MatchmakingLibrary::GetLobbyDataCount(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyDataCount");

	Params::SIK_MatchmakingLibrary_GetLobbyDataCount Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyGameServer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          ServerIP                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  ServerPort                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId*                    SteamID                                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::GetLobbyGameServer(const struct FSIK_SteamId& LobbyID, class FString* ServerIP, int32* ServerPort, struct FSIK_SteamId* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyGameServer");

	Params::SIK_MatchmakingLibrary_GetLobbyGameServer Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ServerIP != nullptr)
		*ServerIP = std::move(Parms.ServerIP);

	if (ServerPort != nullptr)
		*ServerPort = Parms.ServerPort;

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyMemberByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MemberIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_MatchmakingLibrary::GetLobbyMemberByIndex(const struct FSIK_SteamId& LobbyID, int32 MemberIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyMemberByIndex");

	Params::SIK_MatchmakingLibrary_GetLobbyMemberByIndex Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.MemberIndex = MemberIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyMemberData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              UserId                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_MatchmakingLibrary::GetLobbyMemberData(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& UserId, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyMemberData");

	Params::SIK_MatchmakingLibrary_GetLobbyMemberData Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.UserId = std::move(UserId);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyMemberLimit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_MatchmakingLibrary::GetLobbyMemberLimit(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyMemberLimit");

	Params::SIK_MatchmakingLibrary_GetLobbyMemberLimit Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_MatchmakingLibrary::GetLobbyOwner(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetLobbyOwner");

	Params::SIK_MatchmakingLibrary_GetLobbyOwner Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetNumLobbyMembers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_MatchmakingLibrary::GetNumLobbyMembers(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "GetNumLobbyMembers");

	Params::SIK_MatchmakingLibrary_GetNumLobbyMembers Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.InviteUserToLobby
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::InviteUserToLobby(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "InviteUserToLobby");

	Params::SIK_MatchmakingLibrary_InviteUserToLobby Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.LeaveLobby
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::LeaveLobby(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "LeaveLobby");

	Params::SIK_MatchmakingLibrary_LeaveLobby Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.RemoveFavoriteGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    IP                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ConnPort                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QueryPort                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Flags_0                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::RemoveFavoriteGame(const struct FSIK_AppId& AppID, const class FString& IP, int32 ConnPort, int32 QueryPort, const TArray<int32>& Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "RemoveFavoriteGame");

	Params::SIK_MatchmakingLibrary_RemoveFavoriteGame Parms{};

	Parms.AppID = std::move(AppID);
	Parms.IP = std::move(IP);
	Parms.ConnPort = ConnPort;
	Parms.QueryPort = QueryPort;
	Parms.Flags_0 = std::move(Flags_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.RequestLobbyData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::RequestLobbyData(const struct FSIK_SteamId& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "RequestLobbyData");

	Params::SIK_MatchmakingLibrary_RequestLobbyData Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SendLobbyChatMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::SendLobbyChatMessage(const struct FSIK_SteamId& LobbyID, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SendLobbyChatMessage");

	Params::SIK_MatchmakingLibrary_SendLobbyChatMessage Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLinkedLobby
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              DependentLobbyID                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::SetLinkedLobby(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& DependentLobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLinkedLobby");

	Params::SIK_MatchmakingLibrary_SetLinkedLobby Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.DependentLobbyID = std::move(DependentLobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::SetLobbyData(const struct FSIK_SteamId& LobbyID, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLobbyData");

	Params::SIK_MatchmakingLibrary_SetLobbyData Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyGameServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    ServerIP                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ServerPort                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::SetLobbyGameServer(const struct FSIK_SteamId& LobbyID, const class FString& ServerIP, int32 ServerPort, const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLobbyGameServer");

	Params::SIK_MatchmakingLibrary_SetLobbyGameServer Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.ServerIP = std::move(ServerIP);
	Parms.ServerPort = ServerPort;
	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyJoinable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bJoinable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::SetLobbyJoinable(const struct FSIK_SteamId& LobbyID, bool bJoinable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLobbyJoinable");

	Params::SIK_MatchmakingLibrary_SetLobbyJoinable Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.bJoinable = bJoinable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyMemberData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::SetLobbyMemberData(const struct FSIK_SteamId& LobbyID, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLobbyMemberData");

	Params::SIK_MatchmakingLibrary_SetLobbyMemberData Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyMemberLimit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MemberLimit                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::SetLobbyMemberLimit(const struct FSIK_SteamId& LobbyID, int32 MemberLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLobbyMemberLimit");

	Params::SIK_MatchmakingLibrary_SetLobbyMemberLimit Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.MemberLimit = MemberLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_MatchmakingLibrary::SetLobbyOwner(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLobbyOwner");

	Params::SIK_MatchmakingLibrary_SetLobbyOwner Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              LobbyID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_LobbyType                          LobbyType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MatchmakingLibrary::SetLobbyType(const struct FSIK_SteamId& LobbyID, ESIK_LobbyType LobbyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MatchmakingLibrary", "SetLobbyType");

	Params::SIK_MatchmakingLibrary_SetLobbyType Parms{};

	Parms.LobbyID = std::move(LobbyID);
	Parms.LobbyType = LobbyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.GetPlaybackStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_AudioPlayback_Status               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_AudioPlayback_Status USIK_MusicLibrary::GetPlaybackStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "GetPlaybackStatus");

	Params::SIK_MusicLibrary_GetPlaybackStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.GetVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USIK_MusicLibrary::GetVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "GetVolume");

	Params::SIK_MusicLibrary_GetVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.IsEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicLibrary::IsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "IsEnabled");

	Params::SIK_MusicLibrary_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.IsPlaying
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicLibrary::IsPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "IsPlaying");

	Params::SIK_MusicLibrary_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.Pause
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_MusicLibrary::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.Play
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_MusicLibrary::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.PlayNext
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_MusicLibrary::PlayNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "PlayNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.PlayPrevious
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_MusicLibrary::PlayPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "PlayPrevious");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MusicLibrary.SetVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_MusicLibrary::SetVolume(float Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicLibrary", "SetVolume");

	Params::SIK_MusicLibrary_SetVolume Parms{};

	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.ActivationSuccess
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::ActivationSuccess(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "ActivationSuccess");

	Params::SIK_MusicRemoteLibrary_ActivationSuccess Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.CurrentEntryDidChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::CurrentEntryDidChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "CurrentEntryDidChange");

	Params::SIK_MusicRemoteLibrary_CurrentEntryDidChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.CurrentEntryIsAvailable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bAvailable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::CurrentEntryIsAvailable(bool bAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "CurrentEntryIsAvailable");

	Params::SIK_MusicRemoteLibrary_CurrentEntryIsAvailable Parms{};

	Parms.bAvailable = bAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.CurrentEntryWillChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::CurrentEntryWillChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "CurrentEntryWillChange");

	Params::SIK_MusicRemoteLibrary_CurrentEntryWillChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.DeregisterSteamMusicRemote
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::DeregisterSteamMusicRemote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "DeregisterSteamMusicRemote");

	Params::SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnableLooped
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::EnableLooped(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "EnableLooped");

	Params::SIK_MusicRemoteLibrary_EnableLooped Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnablePlaylists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::EnablePlaylists(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "EnablePlaylists");

	Params::SIK_MusicRemoteLibrary_EnablePlaylists Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnablePlayNext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::EnablePlayNext(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "EnablePlayNext");

	Params::SIK_MusicRemoteLibrary_EnablePlayNext Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnablePlayPrevious
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::EnablePlayPrevious(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "EnablePlayPrevious");

	Params::SIK_MusicRemoteLibrary_EnablePlayPrevious Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnableQueue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::EnableQueue(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "EnableQueue");

	Params::SIK_MusicRemoteLibrary_EnableQueue Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnableShuffled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::EnableShuffled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "EnableShuffled");

	Params::SIK_MusicRemoteLibrary_EnableShuffled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.IsCurrentMusicRemote
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::IsCurrentMusicRemote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "IsCurrentMusicRemote");

	Params::SIK_MusicRemoteLibrary_IsCurrentMusicRemote Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.PlaylistDidChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::PlaylistDidChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "PlaylistDidChange");

	Params::SIK_MusicRemoteLibrary_PlaylistDidChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.PlaylistWillChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::PlaylistWillChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "PlaylistWillChange");

	Params::SIK_MusicRemoteLibrary_PlaylistWillChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.QueueDidChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::QueueDidChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "QueueDidChange");

	Params::SIK_MusicRemoteLibrary_QueueDidChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.QueueWillChange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::QueueWillChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "QueueWillChange");

	Params::SIK_MusicRemoteLibrary_QueueWillChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.RegisterSteamMusicRemote
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::RegisterSteamMusicRemote(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "RegisterSteamMusicRemote");

	Params::SIK_MusicRemoteLibrary_RegisterSteamMusicRemote Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.ResetPlaylistEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::ResetPlaylistEntries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "ResetPlaylistEntries");

	Params::SIK_MusicRemoteLibrary_ResetPlaylistEntries Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.ResetQueueEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::ResetQueueEntries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "ResetQueueEntries");

	Params::SIK_MusicRemoteLibrary_ResetQueueEntries Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetCurrentPlaylistEntry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   nID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::SetCurrentPlaylistEntry(int32 nID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "SetCurrentPlaylistEntry");

	Params::SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry Parms{};

	Parms.nID = nID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetCurrentQueueEntry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   nID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::SetCurrentQueueEntry(int32 nID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "SetCurrentQueueEntry");

	Params::SIK_MusicRemoteLibrary_SetCurrentQueueEntry Parms{};

	Parms.nID = nID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetDisplayName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DisplayName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::SetDisplayName(const class FString& DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "SetDisplayName");

	Params::SIK_MusicRemoteLibrary_SetDisplayName Parms{};

	Parms.DisplayName = std::move(DisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetPlaylistEntry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   nID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   nPosition                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    EntryText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::SetPlaylistEntry(int32 nID, int32 nPosition, const class FString& EntryText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "SetPlaylistEntry");

	Params::SIK_MusicRemoteLibrary_SetPlaylistEntry Parms{};

	Parms.nID = nID;
	Parms.nPosition = nPosition;
	Parms.EntryText = std::move(EntryText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetPNGIcon_64x64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    PNGData                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::SetPNGIcon_64x64(const TArray<uint8>& PNGData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "SetPNGIcon_64x64");

	Params::SIK_MusicRemoteLibrary_SetPNGIcon_64x64 Parms{};

	Parms.PNGData = std::move(PNGData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetQueueEntry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   nID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   nPosition                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    EntryText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::SetQueueEntry(int32 nID, int32 nPosition, const class FString& EntryText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "SetQueueEntry");

	Params::SIK_MusicRemoteLibrary_SetQueueEntry Parms{};

	Parms.nID = nID;
	Parms.nPosition = nPosition;
	Parms.EntryText = std::move(EntryText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateCurrentEntryCoverArt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    PNGData                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::UpdateCurrentEntryCoverArt(const TArray<uint8>& PNGData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "UpdateCurrentEntryCoverArt");

	Params::SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt Parms{};

	Parms.PNGData = std::move(PNGData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateCurrentEntryElapsedSeconds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   nValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::UpdateCurrentEntryElapsedSeconds(int32 nValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "UpdateCurrentEntryElapsedSeconds");

	Params::SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds Parms{};

	Parms.nValue = nValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateCurrentEntryText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::UpdateCurrentEntryText(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "UpdateCurrentEntryText");

	Params::SIK_MusicRemoteLibrary_UpdateCurrentEntryText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateLooped
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bLooped                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::UpdateLooped(bool bLooped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "UpdateLooped");

	Params::SIK_MusicRemoteLibrary_UpdateLooped Parms{};

	Parms.bLooped = bLooped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdatePlaybackStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_AudioPlayback_Status               Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::UpdatePlaybackStatus(ESIK_AudioPlayback_Status Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "UpdatePlaybackStatus");

	Params::SIK_MusicRemoteLibrary_UpdatePlaybackStatus Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateShuffled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bShuffled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::UpdateShuffled(bool bShuffled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "UpdateShuffled");

	Params::SIK_MusicRemoteLibrary_UpdateShuffled Parms{};

	Parms.bShuffled = bShuffled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   flValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_MusicRemoteLibrary::UpdateVolume(float flValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_MusicRemoteLibrary", "UpdateVolume");

	Params::SIK_MusicRemoteLibrary_UpdateVolume Parms{};

	Parms.flValue = flValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.AcceptP2PSessionWithUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIDRemote                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::AcceptP2PSessionWithUser(const struct FSIK_SteamId& SteamIDRemote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "AcceptP2PSessionWithUser");

	Params::SIK_NetworkingLibrary_AcceptP2PSessionWithUser Parms{};

	Parms.SteamIDRemote = std::move(SteamIDRemote);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.AllowP2PPacketRelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Allow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::AllowP2PPacketRelay(bool Allow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "AllowP2PPacketRelay");

	Params::SIK_NetworkingLibrary_AllowP2PPacketRelay Parms{};

	Parms.Allow = Allow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.CloseP2PChannelWithUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIDRemote                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::CloseP2PChannelWithUser(const struct FSIK_SteamId& SteamIDRemote, int32 Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "CloseP2PChannelWithUser");

	Params::SIK_NetworkingLibrary_CloseP2PChannelWithUser Parms{};

	Parms.SteamIDRemote = std::move(SteamIDRemote);
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.CloseP2PSessionWithUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIDRemote                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::CloseP2PSessionWithUser(const struct FSIK_SteamId& SteamIDRemote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "CloseP2PSessionWithUser");

	Params::SIK_NetworkingLibrary_CloseP2PSessionWithUser Parms{};

	Parms.SteamIDRemote = std::move(SteamIDRemote);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.GetP2PSessionState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIDRemote                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_P2PSessionState*            OutP2PSessionState                                     (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::GetP2PSessionState(const struct FSIK_SteamId& SteamIDRemote, struct FSIK_P2PSessionState* OutP2PSessionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "GetP2PSessionState");

	Params::SIK_NetworkingLibrary_GetP2PSessionState Parms{};

	Parms.SteamIDRemote = std::move(SteamIDRemote);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutP2PSessionState != nullptr)
		*OutP2PSessionState = std::move(Parms.OutP2PSessionState);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.IsP2PPacketAvailable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  MsgSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::IsP2PPacketAvailable(int32* MsgSize, int32 Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "IsP2PPacketAvailable");

	Params::SIK_NetworkingLibrary_IsP2PPacketAvailable Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MsgSize != nullptr)
		*MsgSize = Parms.MsgSize;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.ReadP2PPacket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>*                          OutMsg                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   MsgSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId*                    OutSteamIDRemote                                       (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::ReadP2PPacket(TArray<uint8>* OutMsg, int32 MsgSize, struct FSIK_SteamId* OutSteamIDRemote, int32 Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "ReadP2PPacket");

	Params::SIK_NetworkingLibrary_ReadP2PPacket Parms{};

	Parms.MsgSize = MsgSize;
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMsg != nullptr)
		*OutMsg = std::move(Parms.OutMsg);

	if (OutSteamIDRemote != nullptr)
		*OutSteamIDRemote = std::move(Parms.OutSteamIDRemote);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingLibrary.SendP2PPacket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamIDRemote                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Msg                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_P2PSend                            SendType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingLibrary::SendP2PPacket(const struct FSIK_SteamId& SteamIDRemote, const TArray<uint8>& Msg, int32 Channel, ESIK_P2PSend SendType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingLibrary", "SendP2PPacket");

	Params::SIK_NetworkingLibrary_SendP2PPacket Parms{};

	Parms.SteamIDRemote = std::move(SteamIDRemote);
	Parms.Msg = std::move(Msg);
	Parms.Channel = Channel;
	Parms.SendType = SendType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.CheckPingDataUpToDate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   MaxAgeSeconds                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingUtilsLibrary::CheckPingDataUpToDate(float MaxAgeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "CheckPingDataUpToDate");

	Params::SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate Parms{};

	Parms.MaxAgeSeconds = MaxAgeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.ConvertPingLocationToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamNetworkPingLocation&Location                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_NetworkingUtilsLibrary::ConvertPingLocationToString(const struct FSIK_SteamNetworkPingLocation& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "ConvertPingLocationToString");

	Params::SIK_NetworkingUtilsLibrary_ConvertPingLocationToString Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.EstimatePingTimeBetweenTwoLocations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamNetworkPingLocation&Location1                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSIK_SteamNetworkPingLocation&Location2                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_NetworkingUtilsLibrary::EstimatePingTimeBetweenTwoLocations(const struct FSIK_SteamNetworkPingLocation& Location1, const struct FSIK_SteamNetworkPingLocation& Location2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "EstimatePingTimeBetweenTwoLocations");

	Params::SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations Parms{};

	Parms.Location1 = std::move(Location1);
	Parms.Location2 = std::move(Location2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.EstimatePingTimeFromLocalHost
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamNetworkPingLocation&Location                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_NetworkingUtilsLibrary::EstimatePingTimeFromLocalHost(const struct FSIK_SteamNetworkPingLocation& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "EstimatePingTimeFromLocalHost");

	Params::SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetDirectPingToPOP
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamNetworkingPOPID& PopID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_NetworkingUtilsLibrary::GetDirectPingToPOP(const struct FSIK_SteamNetworkingPOPID& PopID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "GetDirectPingToPOP");

	Params::SIK_NetworkingUtilsLibrary_GetDirectPingToPOP Parms{};

	Parms.PopID = std::move(PopID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetLocalPingLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSIK_SteamNetworkPingLocation*   OutPingLocation                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USIK_NetworkingUtilsLibrary::GetLocalPingLocation(struct FSIK_SteamNetworkPingLocation* OutPingLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "GetLocalPingLocation");

	Params::SIK_NetworkingUtilsLibrary_GetLocalPingLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPingLocation != nullptr)
		*OutPingLocation = std::move(Parms.OutPingLocation);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetPingToDataCenter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamNetworkingPOPID& PopID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_SteamNetworkingPOPID*       ViaRelayPoP                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_NetworkingUtilsLibrary::GetPingToDataCenter(const struct FSIK_SteamNetworkingPOPID& PopID, struct FSIK_SteamNetworkingPOPID* ViaRelayPoP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "GetPingToDataCenter");

	Params::SIK_NetworkingUtilsLibrary_GetPingToDataCenter Parms{};

	Parms.PopID = std::move(PopID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ViaRelayPoP != nullptr)
		*ViaRelayPoP = std::move(Parms.ViaRelayPoP);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetPOPCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_NetworkingUtilsLibrary::GetPOPCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "GetPOPCount");

	Params::SIK_NetworkingUtilsLibrary_GetPOPCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetPOPList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   ListSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSIK_SteamNetworkingPOPID>*OutPOPIDList                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_NetworkingUtilsLibrary::GetPOPList(int32 ListSize, TArray<struct FSIK_SteamNetworkingPOPID>* OutPOPIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "GetPOPList");

	Params::SIK_NetworkingUtilsLibrary_GetPOPList Parms{};

	Parms.ListSize = ListSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPOPIDList != nullptr)
		*OutPOPIDList = std::move(Parms.OutPOPIDList);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetRelayNetworkStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_SteamNetworkingAvailability        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_SteamNetworkingAvailability USIK_NetworkingUtilsLibrary::GetRelayNetworkStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "GetRelayNetworkStatus");

	Params::SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.InitRelayNetworkAccess
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_NetworkingUtilsLibrary::InitRelayNetworkAccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "InitRelayNetworkAccess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.IsPingMeasurementInProgress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingUtilsLibrary::IsPingMeasurementInProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "IsPingMeasurementInProgress");

	Params::SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.ParsePingLocationString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PingLocationString                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamNetworkPingLocation*   OutPingLocation                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_NetworkingUtilsLibrary::ParsePingLocationString(const class FString& PingLocationString, struct FSIK_SteamNetworkPingLocation* OutPingLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_NetworkingUtilsLibrary", "ParsePingLocationString");

	Params::SIK_NetworkingUtilsLibrary_ParsePingLocationString Parms{};

	Parms.PingLocationString = std::move(PingLocationString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPingLocation != nullptr)
		*OutPingLocation = std::move(Parms.OutPingLocation);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.DestroyBeacon
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PartyBeaconID&        BeaconID                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_PartiesLibrary::DestroyBeacon(const struct FSIK_PartyBeaconID& BeaconID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "DestroyBeacon");

	Params::SIK_PartiesLibrary_DestroyBeacon Parms{};

	Parms.BeaconID = std::move(BeaconID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.GetAvailableBeaconLocations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   MaxNumberOfLocations                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSIK_SteamPartyBeaconLocation>*Locations                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_PartiesLibrary::GetAvailableBeaconLocations(int32 MaxNumberOfLocations, TArray<struct FSIK_SteamPartyBeaconLocation>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "GetAvailableBeaconLocations");

	Params::SIK_PartiesLibrary_GetAvailableBeaconLocations Parms{};

	Parms.MaxNumberOfLocations = MaxNumberOfLocations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.GetBeaconByIndex
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_PartyBeaconID               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_PartyBeaconID USIK_PartiesLibrary::GetBeaconByIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "GetBeaconByIndex");

	Params::SIK_PartiesLibrary_GetBeaconByIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.GetBeaconDetails
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_PartyBeaconID&        BeaconID                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_SteamId*                    CreatorId                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_SteamPartyBeaconLocation*   Location                                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          MetaData                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_PartiesLibrary::GetBeaconDetails(const struct FSIK_PartyBeaconID& BeaconID, struct FSIK_SteamId* CreatorId, struct FSIK_SteamPartyBeaconLocation* Location, class FString* MetaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "GetBeaconDetails");

	Params::SIK_PartiesLibrary_GetBeaconDetails Parms{};

	Parms.BeaconID = std::move(BeaconID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CreatorId != nullptr)
		*CreatorId = std::move(Parms.CreatorId);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (MetaData != nullptr)
		*MetaData = std::move(Parms.MetaData);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.GetBeaconLocationData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamPartyBeaconLocation&BeaconLocation                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_SteamPartyBeaconLocationType*      LocationType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          LocationString                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_PartiesLibrary::GetBeaconLocationData(const struct FSIK_SteamPartyBeaconLocation& BeaconLocation, ESIK_SteamPartyBeaconLocationType* LocationType, class FString* LocationString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "GetBeaconLocationData");

	Params::SIK_PartiesLibrary_GetBeaconLocationData Parms{};

	Parms.BeaconLocation = std::move(BeaconLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LocationType != nullptr)
		*LocationType = Parms.LocationType;

	if (LocationString != nullptr)
		*LocationString = std::move(Parms.LocationString);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.GetNumActiveBeacons
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  NumActiveBeacons                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_PartiesLibrary::GetNumActiveBeacons(int32* NumActiveBeacons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "GetNumActiveBeacons");

	Params::SIK_PartiesLibrary_GetNumActiveBeacons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NumActiveBeacons != nullptr)
		*NumActiveBeacons = Parms.NumActiveBeacons;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.GetNumAvailableBeaconLocations
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  NumLocations                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_PartiesLibrary::GetNumAvailableBeaconLocations(int32* NumLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "GetNumAvailableBeaconLocations");

	Params::SIK_PartiesLibrary_GetNumAvailableBeaconLocations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NumLocations != nullptr)
		*NumLocations = Parms.NumLocations;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_PartiesLibrary.OnReservationCompleted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PartyBeaconID&        BeaconID                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              UserSteamId                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_PartiesLibrary::OnReservationCompleted(const struct FSIK_PartyBeaconID& BeaconID, const struct FSIK_SteamId& UserSteamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PartiesLibrary", "OnReservationCompleted");

	Params::SIK_PartiesLibrary_OnReservationCompleted Parms{};

	Parms.BeaconID = std::move(BeaconID);
	Parms.UserSteamId = std::move(UserSteamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_PlayerDetails_AsyncFunction.RequestPlayerDetails
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ServerIP                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ServerPort                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_PlayerDetails_AsyncFunction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_PlayerDetails_AsyncFunction* USIK_PlayerDetails_AsyncFunction::RequestPlayerDetails(const class FString& ServerIP, int32 ServerPort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_PlayerDetails_AsyncFunction", "RequestPlayerDetails");

	Params::SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails Parms{};

	Parms.ServerIP = std::move(ServerIP);
	Parms.ServerPort = ServerPort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.BeginFileWriteBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::BeginFileWriteBatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "BeginFileWriteBatch");

	Params::SIK_RemoteStorageLibrary_BeginFileWriteBatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.EndFileWriteBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::EndFileWriteBatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "EndFileWriteBatch");

	Params::SIK_RemoteStorageLibrary_EndFileWriteBatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileDelete
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FileDelete(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileDelete");

	Params::SIK_RemoteStorageLibrary_FileDelete Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FileExists(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileExists");

	Params::SIK_RemoteStorageLibrary_FileExists Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileForget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FileForget(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileForget");

	Params::SIK_RemoteStorageLibrary_FileForget Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FilePersisted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FilePersisted(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FilePersisted");

	Params::SIK_RemoteStorageLibrary_FilePersisted Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileRead
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          Data                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_RemoteStorageLibrary::FileRead(const class FString& Filename, TArray<uint8>* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileRead");

	Params::SIK_RemoteStorageLibrary_FileRead Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWrite
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FileWrite(const class FString& Filename, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileWrite");

	Params::SIK_RemoteStorageLibrary_FileWrite Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamCancel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCFileWriteStreamHandle&WriteStreamHandle                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FileWriteStreamCancel(const struct FSIK_UGCFileWriteStreamHandle& WriteStreamHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileWriteStreamCancel");

	Params::SIK_RemoteStorageLibrary_FileWriteStreamCancel Parms{};

	Parms.WriteStreamHandle = std::move(WriteStreamHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamClose
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCFileWriteStreamHandle&WriteStreamHandle                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FileWriteStreamClose(const struct FSIK_UGCFileWriteStreamHandle& WriteStreamHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileWriteStreamClose");

	Params::SIK_RemoteStorageLibrary_FileWriteStreamClose Parms{};

	Parms.WriteStreamHandle = std::move(WriteStreamHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamOpen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_UGCFileWriteStreamHandle    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_UGCFileWriteStreamHandle USIK_RemoteStorageLibrary::FileWriteStreamOpen(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileWriteStreamOpen");

	Params::SIK_RemoteStorageLibrary_FileWriteStreamOpen Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamWriteChunk
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCFileWriteStreamHandle&WriteStreamHandle                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::FileWriteStreamWriteChunk(const struct FSIK_UGCFileWriteStreamHandle& WriteStreamHandle, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "FileWriteStreamWriteChunk");

	Params::SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk Parms{};

	Parms.WriteStreamHandle = std::move(WriteStreamHandle);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetCachedUGCCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_RemoteStorageLibrary::GetCachedUGCCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetCachedUGCCount");

	Params::SIK_RemoteStorageLibrary_GetCachedUGCCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetCachedUGCHandle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CachedContent                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_UGCHandle                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_UGCHandle USIK_RemoteStorageLibrary::GetCachedUGCHandle(int32 CachedContent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetCachedUGCHandle");

	Params::SIK_RemoteStorageLibrary_GetCachedUGCHandle Parms{};

	Parms.CachedContent = CachedContent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_RemoteStorageLibrary::GetFileCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetFileCount");

	Params::SIK_RemoteStorageLibrary_GetFileCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileNameAndSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   File                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  FileSize                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_RemoteStorageLibrary::GetFileNameAndSize(int32 File, int32* FileSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetFileNameAndSize");

	Params::SIK_RemoteStorageLibrary_GetFileNameAndSize Parms{};

	Parms.File = File;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileSize != nullptr)
		*FileSize = Parms.FileSize;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_RemoteStorageLibrary::GetFileSize(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetFileSize");

	Params::SIK_RemoteStorageLibrary_GetFileSize Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileTimestamp
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  Timestamp                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USIK_RemoteStorageLibrary::GetFileTimestamp(const class FString& Filename, int64* Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetFileTimestamp");

	Params::SIK_RemoteStorageLibrary_GetFileTimestamp Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Timestamp != nullptr)
		*Timestamp = Parms.Timestamp;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetLocalFileChange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   File                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_RemoteStorageLocalFileChange*      ChangeType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_RemoteStorageFilePathType*         PathType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_RemoteStorageLibrary::GetLocalFileChange(int32 File, ESIK_RemoteStorageLocalFileChange* ChangeType, ESIK_RemoteStorageFilePathType* PathType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetLocalFileChange");

	Params::SIK_RemoteStorageLibrary_GetLocalFileChange Parms{};

	Parms.File = File;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChangeType != nullptr)
		*ChangeType = Parms.ChangeType;

	if (PathType != nullptr)
		*PathType = Parms.PathType;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetLocalFileChangeCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_RemoteStorageLibrary::GetLocalFileChangeCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetLocalFileChangeCount");

	Params::SIK_RemoteStorageLibrary_GetLocalFileChangeCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetQuota
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64*                                  TotalBytes                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  AvailableBytes                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::GetQuota(int64* TotalBytes, int64* AvailableBytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetQuota");

	Params::SIK_RemoteStorageLibrary_GetQuota Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TotalBytes != nullptr)
		*TotalBytes = Parms.TotalBytes;

	if (AvailableBytes != nullptr)
		*AvailableBytes = Parms.AvailableBytes;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetSyncPlatforms
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_RemoteStoragePlatform              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_RemoteStoragePlatform USIK_RemoteStorageLibrary::GetSyncPlatforms(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetSyncPlatforms");

	Params::SIK_RemoteStorageLibrary_GetSyncPlatforms Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetUGCDetails
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCHandle&            UGCHandle                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  FileSize                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId*                    OwnerID                                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::GetUGCDetails(const struct FSIK_UGCHandle& UGCHandle, class FString* Filename, int32* FileSize, struct FSIK_SteamId* OwnerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetUGCDetails");

	Params::SIK_RemoteStorageLibrary_GetUGCDetails Parms{};

	Parms.UGCHandle = std::move(UGCHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);

	if (FileSize != nullptr)
		*FileSize = Parms.FileSize;

	if (OwnerID != nullptr)
		*OwnerID = std::move(Parms.OwnerID);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetUGCDownloadProgress
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCHandle&            UGCHandle                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  BytesDownloaded                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  BytesExpected                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::GetUGCDownloadProgress(const struct FSIK_UGCHandle& UGCHandle, int32* BytesDownloaded, int32* BytesExpected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "GetUGCDownloadProgress");

	Params::SIK_RemoteStorageLibrary_GetUGCDownloadProgress Parms{};

	Parms.UGCHandle = std::move(UGCHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BytesDownloaded != nullptr)
		*BytesDownloaded = Parms.BytesDownloaded;

	if (BytesExpected != nullptr)
		*BytesExpected = Parms.BytesExpected;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.IsCloudEnabledForAccount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::IsCloudEnabledForAccount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "IsCloudEnabledForAccount");

	Params::SIK_RemoteStorageLibrary_IsCloudEnabledForAccount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.IsCloudEnabledForApp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::IsCloudEnabledForApp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "IsCloudEnabledForApp");

	Params::SIK_RemoteStorageLibrary_IsCloudEnabledForApp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.SetCloudEnabledForApp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_RemoteStorageLibrary::SetCloudEnabledForApp(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "SetCloudEnabledForApp");

	Params::SIK_RemoteStorageLibrary_SetCloudEnabledForApp Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.SetSyncPlatforms
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_RemoteStoragePlatform              RemoteStoragePlatform                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_RemoteStorageLibrary::SetSyncPlatforms(const class FString& Filename, ESIK_RemoteStoragePlatform RemoteStoragePlatform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "SetSyncPlatforms");

	Params::SIK_RemoteStorageLibrary_SetSyncPlatforms Parms{};

	Parms.Filename = std::move(Filename);
	Parms.RemoteStoragePlatform = RemoteStoragePlatform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.UGCRead
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCHandle&            UGCHandle                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<uint8>*                          Data                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   DataToRead                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_UGCReadAction                      Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_RemoteStorageLibrary::UGCRead(const struct FSIK_UGCHandle& UGCHandle, TArray<uint8>* Data, int32 DataToRead, int32 Offset, ESIK_UGCReadAction Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoteStorageLibrary", "UGCRead");

	Params::SIK_RemoteStorageLibrary_UGCRead Parms{};

	Parms.UGCHandle = std::move(UGCHandle);
	Parms.DataToRead = DataToRead;
	Parms.Offset = Offset;
	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoveAppDependency_AsyncFunction.RemoveAppDependency
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_RemoveAppDependency_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RemoveAppDependency_AsyncFunction* USIK_RemoveAppDependency_AsyncFunction::RemoveAppDependency(const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoveAppDependency_AsyncFunction", "RemoveAppDependency");

	Params::SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);
	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RemoveItemFromFavorites_AsyncFunction.RemoveItemFromFavorites
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_RemoveItemFromFavorites_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RemoveItemFromFavorites_AsyncFunction* USIK_RemoveItemFromFavorites_AsyncFunction::RemoveItemFromFavorites(const struct FSIK_AppId& AppID, const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RemoveItemFromFavorites_AsyncFunction", "RemoveItemFromFavorites");

	Params::SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites Parms{};

	Parms.AppID = std::move(AppID);
	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestClanOfficerList_AsyncFunction.RequestClanOfficerList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              ClanId                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_RequestClanOfficerList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestClanOfficerList_AsyncFunction* USIK_RequestClanOfficerList_AsyncFunction::RequestClanOfficerList(const struct FSIK_SteamId& ClanId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestClanOfficerList_AsyncFunction", "RequestClanOfficerList");

	Params::SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList Parms{};

	Parms.ClanId = std::move(ClanId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction.RequestEligiblePromoItemDefinitionsIDs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction* USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction::RequestEligiblePromoItemDefinitionsIDs(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction", "RequestEligiblePromoItemDefinitionsIDs");

	Params::SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestFavoritesServerList_AsyncFunction.RequestFavoritesServerList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Filters                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestFavoritesServerList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestFavoritesServerList_AsyncFunction* USIK_RequestFavoritesServerList_AsyncFunction::RequestFavoritesServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestFavoritesServerList_AsyncFunction", "RequestFavoritesServerList");

	Params::SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList Parms{};

	Parms.AppID = std::move(AppID);
	Parms.Filters = std::move(Filters);
	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestFriendsServerList_AsyncFunction.RequestFriendsServerList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Filters                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestFriendsServerList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestFriendsServerList_AsyncFunction* USIK_RequestFriendsServerList_AsyncFunction::RequestFriendsServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestFriendsServerList_AsyncFunction", "RequestFriendsServerList");

	Params::SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList Parms{};

	Parms.AppID = std::move(AppID);
	Parms.Filters = std::move(Filters);
	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestGlobalStats_AsyncFunction.RequestGlobalStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   HistoryDays                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestGlobalStats_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestGlobalStats_AsyncFunction* USIK_RequestGlobalStats_AsyncFunction::RequestGlobalStats(int32 HistoryDays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestGlobalStats_AsyncFunction", "RequestGlobalStats");

	Params::SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats Parms{};

	Parms.HistoryDays = HistoryDays;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestHistoryServerList_AsyncFunction.RequestHistoryServerList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Filters                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestHistoryServerList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestHistoryServerList_AsyncFunction* USIK_RequestHistoryServerList_AsyncFunction::RequestHistoryServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestHistoryServerList_AsyncFunction", "RequestHistoryServerList");

	Params::SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList Parms{};

	Parms.AppID = std::move(AppID);
	Parms.Filters = std::move(Filters);
	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestInternetServerList_AsyncFunction.RequestInternetServerList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Filters                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestInternetServerList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestInternetServerList_AsyncFunction* USIK_RequestInternetServerList_AsyncFunction::RequestInternetServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestInternetServerList_AsyncFunction", "RequestInternetServerList");

	Params::SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList Parms{};

	Parms.AppID = std::move(AppID);
	Parms.Filters = std::move(Filters);
	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestLANServerList_AsyncFunction.RequestLANServerList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestLANServerList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestLANServerList_AsyncFunction* USIK_RequestLANServerList_AsyncFunction::RequestLANServerList(const struct FSIK_AppId& AppID, float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestLANServerList_AsyncFunction", "RequestLANServerList");

	Params::SIK_RequestLANServerList_AsyncFunction_RequestLANServerList Parms{};

	Parms.AppID = std::move(AppID);
	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestLobbyList_AsyncFunction.RequestLobbyList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USIK_RequestLobbyList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestLobbyList_AsyncFunction* USIK_RequestLobbyList_AsyncFunction::RequestLobbyList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestLobbyList_AsyncFunction", "RequestLobbyList");

	Params::SIK_RequestLobbyList_AsyncFunction_RequestLobbyList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestPrices_AsyncFunction.RequestPrices
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USIK_RequestPrices_AsyncFunction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestPrices_AsyncFunction* USIK_RequestPrices_AsyncFunction::RequestPrices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestPrices_AsyncFunction", "RequestPrices");

	Params::SIK_RequestPrices_AsyncFunction_RequestPrices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestSpectatorServerList_AsyncFunction.RequestSpectatorServerList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Filters                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestSpectatorServerList_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestSpectatorServerList_AsyncFunction* USIK_RequestSpectatorServerList_AsyncFunction::RequestSpectatorServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestSpectatorServerList_AsyncFunction", "RequestSpectatorServerList");

	Params::SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList Parms{};

	Parms.AppID = std::move(AppID);
	Parms.Filters = std::move(Filters);
	Parms.Timeout = Timeout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestStoreAuthURL_AsyncFunction.RequestStoreAuthURL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_RequestStoreAuthURL_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestStoreAuthURL_AsyncFunction* USIK_RequestStoreAuthURL_AsyncFunction::RequestStoreAuthURL(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestStoreAuthURL_AsyncFunction", "RequestStoreAuthURL");

	Params::SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_RequestUserStats_AsyncFunction.RequestUserStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_RequestUserStats_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_RequestUserStats_AsyncFunction* USIK_RequestUserStats_AsyncFunction::RequestUserStats(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_RequestUserStats_AsyncFunction", "RequestUserStats");

	Params::SIK_RequestUserStats_AsyncFunction_RequestUserStats Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.AddScreenshotToLibrary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ThumbnailFileName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_ScreenshotHandle            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_ScreenshotHandle USIK_ScreenshotsLibrary::AddScreenshotToLibrary(const class FString& Filename, const class FString& ThumbnailFileName, int32 Width, int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "AddScreenshotToLibrary");

	Params::SIK_ScreenshotsLibrary_AddScreenshotToLibrary Parms{};

	Parms.Filename = std::move(Filename);
	Parms.ThumbnailFileName = std::move(ThumbnailFileName);
	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.AddVRScreenshotToLibrary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_VRScreenshotType                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    VR_Filename                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_ScreenshotHandle            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_ScreenshotHandle USIK_ScreenshotsLibrary::AddVRScreenshotToLibrary(ESIK_VRScreenshotType Type, const class FString& Filename, const class FString& VR_Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "AddVRScreenshotToLibrary");

	Params::SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary Parms{};

	Parms.Type = Type;
	Parms.Filename = std::move(Filename);
	Parms.VR_Filename = std::move(VR_Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.HookScreenshots
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bHook                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_ScreenshotsLibrary::HookScreenshots(bool bHook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "HookScreenshots");

	Params::SIK_ScreenshotsLibrary_HookScreenshots Parms{};

	Parms.bHook = bHook;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.IsScreenshotsHooked
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_ScreenshotsLibrary::IsScreenshotsHooked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "IsScreenshotsHooked");

	Params::SIK_ScreenshotsLibrary_IsScreenshotsHooked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.SetLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_ScreenshotHandle&     Handle                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Location                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_ScreenshotsLibrary::SetLocation(const struct FSIK_ScreenshotHandle& Handle, const class FString& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "SetLocation");

	Params::SIK_ScreenshotsLibrary_SetLocation Parms{};

	Parms.Handle = std::move(Handle);
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.TagPublishedFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_ScreenshotHandle&     Handle                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_ScreenshotsLibrary::TagPublishedFile(const struct FSIK_ScreenshotHandle& Handle, const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "TagPublishedFile");

	Params::SIK_ScreenshotsLibrary_TagPublishedFile Parms{};

	Parms.Handle = std::move(Handle);
	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.TagUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_ScreenshotHandle&     Handle                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_ScreenshotsLibrary::TagUser(const struct FSIK_ScreenshotHandle& Handle, const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "TagUser");

	Params::SIK_ScreenshotsLibrary_TagUser Parms{};

	Parms.Handle = std::move(Handle);
	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.TriggerScreenshot
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_ScreenshotsLibrary::TriggerScreenshot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "TriggerScreenshot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.WriteScreenshot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    Data                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_ScreenshotHandle            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_ScreenshotHandle USIK_ScreenshotsLibrary::WriteScreenshot(const TArray<uint8>& Data, int32 Width, int32 Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_ScreenshotsLibrary", "WriteScreenshot");

	Params::SIK_ScreenshotsLibrary_WriteScreenshot Parms{};

	Parms.Data = std::move(Data);
	Parms.Width = Width;
	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SendQueryUGCRequest_AsyncFunction.SendQueryUGCRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_SendQueryUGCRequest_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_SendQueryUGCRequest_AsyncFunction* USIK_SendQueryUGCRequest_AsyncFunction::SendQueryUGCRequest(const struct FSIK_UGCQueryHandle& QueryHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SendQueryUGCRequest_AsyncFunction", "SendQueryUGCRequest");

	Params::SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest Parms{};

	Parms.QueryHandle = std::move(QueryHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SessionsSubsystem.GetAllJoinedSessionsAndLobbies
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSIK_CurrentSessionInfo>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSIK_CurrentSessionInfo> USIK_SessionsSubsystem::GetAllJoinedSessionsAndLobbies(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SessionsSubsystem", "GetAllJoinedSessionsAndLobbies");

	Params::SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SessionsSubsystem.IsSIKActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_SessionsSubsystem::IsSIKActive(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SessionsSubsystem", "IsSIKActive");

	Params::SIK_SessionsSubsystem_IsSIKActive Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SetPersonaName_AsyncFunction.SetPersonaName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PersonaName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_SetPersonaName_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_SetPersonaName_AsyncFunction* USIK_SetPersonaName_AsyncFunction::SetPersonaName(const class FString& PersonaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SetPersonaName_AsyncFunction", "SetPersonaName");

	Params::SIK_SetPersonaName_AsyncFunction_SetPersonaName Parms{};

	Parms.PersonaName = std::move(PersonaName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SetUserItemVote_AsyncFunction.SetUserItemVote
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bVoteUp                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_SetUserItemVote_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_SetUserItemVote_AsyncFunction* USIK_SetUserItemVote_AsyncFunction::SetUserItemVote(const struct FSIK_PublishedFileId& PublishedFileId, bool bVoteUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SetUserItemVote_AsyncFunction", "SetUserItemVote");

	Params::SIK_SetUserItemVote_AsyncFunction_SetUserItemVote Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);
	Parms.bVoteUp = bVoteUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.ConvertFileToUint8Array
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> USIK_SharedFile::ConvertFileToUint8Array(const class FString& FilePath, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "ConvertFileToUint8Array");

	Params::SIK_SharedFile_ConvertFileToUint8Array Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.ConvertInt64ToSteamId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Int64                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_SharedFile::ConvertInt64ToSteamId(int64 Int64)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "ConvertInt64ToSteamId");

	Params::SIK_SharedFile_ConvertInt64ToSteamId Parms{};

	Parms.Int64 = Int64;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.ConvertSteamIdToInt64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 USIK_SharedFile::ConvertSteamIdToInt64(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "ConvertSteamIdToInt64");

	Params::SIK_SharedFile_ConvertSteamIdToInt64 Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.ConvertStringToUint8Array
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> USIK_SharedFile::ConvertStringToUint8Array(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "ConvertStringToUint8Array");

	Params::SIK_SharedFile_ConvertStringToUint8Array Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.ConvertUint8ArrayToString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    Array                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_SharedFile::ConvertUint8ArrayToString(const TArray<uint8>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "ConvertUint8ArrayToString");

	Params::SIK_SharedFile_ConvertUint8ArrayToString Parms{};

	Parms.Array = std::move(Array);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.GetAccountID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_AccountID                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_AccountID USIK_SharedFile::GetAccountID(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "GetAccountID");

	Params::SIK_SharedFile_GetAccountID Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.GetUniverse
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_Universe                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_Universe USIK_SharedFile::GetUniverse(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "GetUniverse");

	Params::SIK_SharedFile_GetUniverse Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.IsEqualGameId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSIK_GameID&               GameId1                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_GameID&               GameId2                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_SharedFile::IsEqualGameId(const struct FSIK_GameID& GameId1, const struct FSIK_GameID& GameId2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "IsEqualGameId");

	Params::SIK_SharedFile_IsEqualGameId Parms{};

	Parms.GameId1 = std::move(GameId1);
	Parms.GameId2 = std::move(GameId2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.IsEqualSteamId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSIK_SteamId&              SteamId1                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              SteamId2                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_SharedFile::IsEqualSteamId(const struct FSIK_SteamId& SteamId1, const struct FSIK_SteamId& SteamId2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "IsEqualSteamId");

	Params::SIK_SharedFile_IsEqualSteamId Parms{};

	Parms.SteamId1 = std::move(SteamId1);
	Parms.SteamId2 = std::move(SteamId2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.IsValidGameId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSIK_GameID&               GameID                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_SharedFile::IsValidGameId(const struct FSIK_GameID& GameID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "IsValidGameId");

	Params::SIK_SharedFile_IsValidGameId Parms{};

	Parms.GameID = std::move(GameID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SharedFile.IsValidSteamId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_SharedFile::IsValidSteamId(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SharedFile", "IsValidSteamId");

	Params::SIK_SharedFile_IsValidSteamId Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_StartPlaytimeTracking_AsyncFunction.StartPlaytimeTracking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FSIK_PublishedFileId>&PublishedFileId                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   NumPublishedFileIDs                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_StartPlaytimeTracking_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_StartPlaytimeTracking_AsyncFunction* USIK_StartPlaytimeTracking_AsyncFunction::StartPlaytimeTracking(const TArray<struct FSIK_PublishedFileId>& PublishedFileId, int32 NumPublishedFileIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_StartPlaytimeTracking_AsyncFunction", "StartPlaytimeTracking");

	Params::SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);
	Parms.NumPublishedFileIDs = NumPublishedFileIDs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_StartPurchase_AsyncFunction.StartPurchase
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FSIK_SteamItemDef>& Items                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Quantity                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USIK_StartPurchase_AsyncFunction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_StartPurchase_AsyncFunction* USIK_StartPurchase_AsyncFunction::StartPurchase(const TArray<struct FSIK_SteamItemDef>& Items, const TArray<int32>& Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_StartPurchase_AsyncFunction", "StartPurchase");

	Params::SIK_StartPurchase_AsyncFunction_StartPurchase Parms{};

	Parms.Items = std::move(Items);
	Parms.Quantity = std::move(Quantity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SteamCreateLobby_AsyncFunction.CreateLobby
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxMembers                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LobbyType                          LobbyType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_SteamCreateLobby_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_SteamCreateLobby_AsyncFunction* USIK_SteamCreateLobby_AsyncFunction::CreateLobby(int32 MaxMembers, ESIK_LobbyType LobbyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SteamCreateLobby_AsyncFunction", "CreateLobby");

	Params::SIK_SteamCreateLobby_AsyncFunction_CreateLobby Parms{};

	Parms.MaxMembers = MaxMembers;
	Parms.LobbyType = LobbyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_StopPlaytimeTrackingForAllItems_AsyncFunction.StopPlaytimeTrackingForAllItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USIK_StopPlaytimeTrackingForAllItems_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_StopPlaytimeTrackingForAllItems_AsyncFunction* USIK_StopPlaytimeTrackingForAllItems_AsyncFunction::StopPlaytimeTrackingForAllItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_StopPlaytimeTrackingForAllItems_AsyncFunction", "StopPlaytimeTrackingForAllItems");

	Params::SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_StopPlaytimeTracking_AsyncFunction.StopPlaytimeTracking
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FSIK_PublishedFileId>&PublishedFileId                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   NumPublishedFileIDs                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_StopPlaytimeTracking_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_StopPlaytimeTracking_AsyncFunction* USIK_StopPlaytimeTracking_AsyncFunction::StopPlaytimeTracking(const TArray<struct FSIK_PublishedFileId>& PublishedFileId, int32 NumPublishedFileIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_StopPlaytimeTracking_AsyncFunction", "StopPlaytimeTracking");

	Params::SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);
	Parms.NumPublishedFileIDs = NumPublishedFileIDs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SubmitItemUpdate_AsyncFunction.SubmitItemUpdate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UgcUpdateHandle                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    ChangeNote                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_SubmitItemUpdate_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_SubmitItemUpdate_AsyncFunction* USIK_SubmitItemUpdate_AsyncFunction::SubmitItemUpdate(const struct FSIK_UGCUpdateHandle& UgcUpdateHandle, const class FString& ChangeNote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SubmitItemUpdate_AsyncFunction", "SubmitItemUpdate");

	Params::SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate Parms{};

	Parms.UgcUpdateHandle = std::move(UgcUpdateHandle);
	Parms.ChangeNote = std::move(ChangeNote);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_SubscribeItem_AsyncFunction.SubscribeItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_SubscribeItem_AsyncFunction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_SubscribeItem_AsyncFunction* USIK_SubscribeItem_AsyncFunction::SubscribeItem(const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_SubscribeItem_AsyncFunction", "SubscribeItem");

	Params::SIK_SubscribeItem_AsyncFunction_SubscribeItem Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_TimelineLibrary.ClearTimelineStateDescription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   flTimeDelta                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_TimelineLibrary::ClearTimelineStateDescription(float flTimeDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_TimelineLibrary", "ClearTimelineStateDescription");

	Params::SIK_TimelineLibrary_ClearTimelineStateDescription Parms{};

	Parms.flTimeDelta = flTimeDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_TimelineLibrary.SetTimelineStateDescription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    pchDescription                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   flTimeDelta                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_TimelineLibrary::SetTimelineStateDescription(const class FString& pchDescription, float flTimeDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_TimelineLibrary", "SetTimelineStateDescription");

	Params::SIK_TimelineLibrary_SetTimelineStateDescription Parms{};

	Parms.pchDescription = std::move(pchDescription);
	Parms.flTimeDelta = flTimeDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_TimelineLibrary.AddTimelineEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    pchIcon                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    pchTitle                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    pchDescription                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   unPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   flStartOffsetSeconds                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   flDurationSecondsm                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_TimelineEventClipPriority          ePossibleClip                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_TimelineLibrary::AddTimelineEvent(const class FString& pchIcon, const class FString& pchTitle, const class FString& pchDescription, int32 unPriority, float flStartOffsetSeconds, float flDurationSecondsm, ESIK_TimelineEventClipPriority ePossibleClip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SIK_TimelineLibrary", "AddTimelineEvent");

	Params::SIK_TimelineLibrary_AddTimelineEvent Parms{};

	Parms.pchIcon = std::move(pchIcon);
	Parms.pchTitle = std::move(pchTitle);
	Parms.pchDescription = std::move(pchDescription);
	Parms.unPriority = unPriority;
	Parms.flStartOffsetSeconds = flStartOffsetSeconds;
	Parms.flDurationSecondsm = flDurationSecondsm;
	Parms.ePossibleClip = ePossibleClip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_TimelineLibrary.SetTimelineGameMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESIK_TimelineGameMode                   eMode                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_TimelineLibrary::SetTimelineGameMode(ESIK_TimelineGameMode eMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SIK_TimelineLibrary", "SetTimelineGameMode");

	Params::SIK_TimelineLibrary_SetTimelineGameMode Parms{};

	Parms.eMode = eMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddContentDescriptor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_UGCContentDescriptorID             ContentDescriptor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddContentDescriptor(const struct FSIK_UGCUpdateHandle& UpdateHandle, ESIK_UGCContentDescriptorID ContentDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddContentDescriptor");

	Params::SIK_UGCLibrary_AddContentDescriptor Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.ContentDescriptor = ContentDescriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddExcludedTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    TagName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddExcludedTag(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddExcludedTag");

	Params::SIK_UGCLibrary_AddExcludedTag Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.TagName = std::move(TagName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddItemKeyValueTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddItemKeyValueTag(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddItemKeyValueTag");

	Params::SIK_UGCLibrary_AddItemKeyValueTag Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddItemPreviewFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    PreviewFile                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_ItemPreviewType                    FileType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddItemPreviewFile(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& PreviewFile, ESIK_ItemPreviewType FileType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddItemPreviewFile");

	Params::SIK_UGCLibrary_AddItemPreviewFile Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.PreviewFile = std::move(PreviewFile);
	Parms.FileType = FileType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddItemPreviewVideo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    VideoID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddItemPreviewVideo(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& VideoID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddItemPreviewVideo");

	Params::SIK_UGCLibrary_AddItemPreviewVideo Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.VideoID = std::move(VideoID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddRequiredKeyValueTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddRequiredKeyValueTag(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddRequiredKeyValueTag");

	Params::SIK_UGCLibrary_AddRequiredKeyValueTag Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddRequiredTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    TagName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddRequiredTag(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddRequiredTag");

	Params::SIK_UGCLibrary_AddRequiredTag Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.TagName = std::move(TagName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.AddRequiredTagGroup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<class FString>&            TagNames                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::AddRequiredTagGroup(const struct FSIK_UGCQueryHandle& QueryHandle, const TArray<class FString>& TagNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "AddRequiredTagGroup");

	Params::SIK_UGCLibrary_AddRequiredTagGroup Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.TagNames = std::move(TagNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.BInitWorkshopForGameServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_DepotId&              DepotID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Folder                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::BInitWorkshopForGameServer(const struct FSIK_DepotId& DepotID, const class FString& Folder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "BInitWorkshopForGameServer");

	Params::SIK_UGCLibrary_BInitWorkshopForGameServer Parms{};

	Parms.DepotID = std::move(DepotID);
	Parms.Folder = std::move(Folder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.CreateQueryAllUGCRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_UGCQuery                           QueryType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_UGCMatchingUGCType                 MatchingType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSIK_AppId&                CreatorAppID                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_AppId&                ConsumerAppID                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_UGCQueryHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_UGCQueryHandle USIK_UGCLibrary::CreateQueryAllUGCRequest(ESIK_UGCQuery QueryType, ESIK_UGCMatchingUGCType MatchingType, const struct FSIK_AppId& CreatorAppID, const struct FSIK_AppId& ConsumerAppID, int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "CreateQueryAllUGCRequest");

	Params::SIK_UGCLibrary_CreateQueryAllUGCRequest Parms{};

	Parms.QueryType = QueryType;
	Parms.MatchingType = MatchingType;
	Parms.CreatorAppID = std::move(CreatorAppID);
	Parms.ConsumerAppID = std::move(ConsumerAppID);
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.CreateQueryUGCDetailsRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FSIK_PublishedFileId>&PublishedFileIDs                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FSIK_UGCQueryHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_UGCQueryHandle USIK_UGCLibrary::CreateQueryUGCDetailsRequest(const TArray<struct FSIK_PublishedFileId>& PublishedFileIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "CreateQueryUGCDetailsRequest");

	Params::SIK_UGCLibrary_CreateQueryUGCDetailsRequest Parms{};

	Parms.PublishedFileIDs = std::move(PublishedFileIDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.CreateQueryUserUGCRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AccountID&            AccountId                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_UserUGCList                        ListType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_UGCMatchingUGCType                 MatchingType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_UserUGCListSortOrder               SortOrder                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSIK_AppId&                CreatorAppID                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_AppId&                ConsumerAppID                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_UGCQueryHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_UGCQueryHandle USIK_UGCLibrary::CreateQueryUserUGCRequest(const struct FSIK_AccountID& AccountId, ESIK_UserUGCList ListType, ESIK_UGCMatchingUGCType MatchingType, ESIK_UserUGCListSortOrder SortOrder, const struct FSIK_AppId& CreatorAppID, const struct FSIK_AppId& ConsumerAppID, int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "CreateQueryUserUGCRequest");

	Params::SIK_UGCLibrary_CreateQueryUserUGCRequest Parms{};

	Parms.AccountId = std::move(AccountId);
	Parms.ListType = ListType;
	Parms.MatchingType = MatchingType;
	Parms.SortOrder = SortOrder;
	Parms.CreatorAppID = std::move(CreatorAppID);
	Parms.ConsumerAppID = std::move(ConsumerAppID);
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.DownloadItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bHighPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::DownloadItem(const struct FSIK_PublishedFileId& PublishedFileId, bool bHighPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "DownloadItem");

	Params::SIK_UGCLibrary_DownloadItem Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);
	Parms.bHighPriority = bHighPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetAppDependencies
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetAppDependencies(const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetAppDependencies");

	Params::SIK_UGCLibrary_GetAppDependencies Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemDownloadInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int64*                                  BytesDownloaded                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  BytesTotal                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetItemDownloadInfo(const struct FSIK_PublishedFileId& PublishedFileId, int64* BytesDownloaded, int64* BytesTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetItemDownloadInfo");

	Params::SIK_UGCLibrary_GetItemDownloadInfo Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BytesDownloaded != nullptr)
		*BytesDownloaded = Parms.BytesDownloaded;

	if (BytesTotal != nullptr)
		*BytesTotal = Parms.BytesTotal;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemInstallInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int64*                                  SizeOnDisk                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Folder                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Timestamp                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetItemInstallInfo(const struct FSIK_PublishedFileId& PublishedFileId, int64* SizeOnDisk, class FString* Folder, int32* Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetItemInstallInfo");

	Params::SIK_UGCLibrary_GetItemInstallInfo Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SizeOnDisk != nullptr)
		*SizeOnDisk = Parms.SizeOnDisk;

	if (Folder != nullptr)
		*Folder = std::move(Parms.Folder);

	if (Timestamp != nullptr)
		*Timestamp = Parms.Timestamp;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UGCLibrary::GetItemState(const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetItemState");

	Params::SIK_UGCLibrary_GetItemState Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemUpdateProgress
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int64*                                  BytesProcessed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  BytesTotal                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_ItemUpdateStatus                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_ItemUpdateStatus USIK_UGCLibrary::GetItemUpdateProgress(const struct FSIK_UGCUpdateHandle& UpdateHandle, int64* BytesProcessed, int64* BytesTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetItemUpdateProgress");

	Params::SIK_UGCLibrary_GetItemUpdateProgress Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BytesProcessed != nullptr)
		*BytesProcessed = Parms.BytesProcessed;

	if (BytesTotal != nullptr)
		*BytesTotal = Parms.BytesTotal;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetNumSubscribedItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UGCLibrary::GetNumSubscribedItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetNumSubscribedItems");

	Params::SIK_UGCLibrary_GetNumSubscribedItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCAdditionalPreview
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PreviewIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          PreviewURL                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OriginalFileName                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_ItemPreviewType*                   FileType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCAdditionalPreview(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, int32 PreviewIndex, class FString* PreviewURL, class FString* OriginalFileName, ESIK_ItemPreviewType* FileType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCAdditionalPreview");

	Params::SIK_UGCLibrary_GetQueryUGCAdditionalPreview Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;
	Parms.PreviewIndex = PreviewIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PreviewURL != nullptr)
		*PreviewURL = std::move(Parms.PreviewURL);

	if (OriginalFileName != nullptr)
		*OriginalFileName = std::move(Parms.OriginalFileName);

	if (FileType != nullptr)
		*FileType = Parms.FileType;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSIK_PublishedFileId>*    PublishedFileIDs                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   MaxEntries                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCChildren(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, TArray<struct FSIK_PublishedFileId>* PublishedFileIDs, int32 MaxEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCChildren");

	Params::SIK_UGCLibrary_GetQueryUGCChildren Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;
	Parms.MaxEntries = MaxEntries;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PublishedFileIDs != nullptr)
		*PublishedFileIDs = std::move(Parms.PublishedFileIDs);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCContentDescriptors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<ESIK_UGCContentDescriptorID>*    ContentDescriptors                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   MaxEntries                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UGCLibrary::GetQueryUGCContentDescriptors(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, TArray<ESIK_UGCContentDescriptorID>* ContentDescriptors, int32 MaxEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCContentDescriptors");

	Params::SIK_UGCLibrary_GetQueryUGCContentDescriptors Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;
	Parms.MaxEntries = MaxEntries;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ContentDescriptors != nullptr)
		*ContentDescriptors = std::move(Parms.ContentDescriptors);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCKeyValueTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCKeyValueTag(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, const class FString& Key, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCKeyValueTag");

	Params::SIK_UGCLibrary_GetQueryUGCKeyValueTag Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          MetaData                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCMetadata(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, class FString* MetaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCMetadata");

	Params::SIK_UGCLibrary_GetQueryUGCMetadata Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MetaData != nullptr)
		*MetaData = std::move(Parms.MetaData);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCNumAdditionalPreviews
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UGCLibrary::GetQueryUGCNumAdditionalPreviews(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCNumAdditionalPreviews");

	Params::SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCNumKeyValueTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UGCLibrary::GetQueryUGCNumKeyValueTags(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCNumKeyValueTags");

	Params::SIK_UGCLibrary_GetQueryUGCNumKeyValueTags Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCNumTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UGCLibrary::GetQueryUGCNumTags(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCNumTags");

	Params::SIK_UGCLibrary_GetQueryUGCNumTags Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCPreviewURL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          URL                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCPreviewURL(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, class FString* URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCPreviewURL");

	Params::SIK_UGCLibrary_GetQueryUGCPreviewURL Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (URL != nullptr)
		*URL = std::move(Parms.URL);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSIK_SteamUGCDetails*            Details                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCResult(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, struct FSIK_SteamUGCDetails* Details)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCResult");

	Params::SIK_UGCLibrary_GetQueryUGCResult Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Details != nullptr)
		*Details = std::move(Parms.Details);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCStatistic
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_ItemStatistic                      StatType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCStatistic(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, ESIK_ItemStatistic StatType, int64* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCStatistic");

	Params::SIK_UGCLibrary_GetQueryUGCStatistic Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;
	Parms.StatType = StatType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TagIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          TagName                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCTag(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, int32 TagIndex, class FString* TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCTag");

	Params::SIK_UGCLibrary_GetQueryUGCTag Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;
	Parms.TagIndex = TagIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TagName != nullptr)
		*TagName = std::move(Parms.TagName);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCTagDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TagIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          TagName                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::GetQueryUGCTagDisplayName(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, int32 TagIndex, class FString* TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetQueryUGCTagDisplayName");

	Params::SIK_UGCLibrary_GetQueryUGCTagDisplayName Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Index_0 = Index_0;
	Parms.TagIndex = TagIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TagName != nullptr)
		*TagName = std::move(Parms.TagName);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.GetSubscribedItems
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSIK_PublishedFileId>*    PublishedFileIDs                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   MaxEntries                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UGCLibrary::GetSubscribedItems(TArray<struct FSIK_PublishedFileId>* PublishedFileIDs, int32 MaxEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "GetSubscribedItems");

	Params::SIK_UGCLibrary_GetSubscribedItems Parms{};

	Parms.MaxEntries = MaxEntries;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PublishedFileIDs != nullptr)
		*PublishedFileIDs = std::move(Parms.PublishedFileIDs);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.ReleaseQueryUGCRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::ReleaseQueryUGCRequest(const struct FSIK_UGCQueryHandle& QueryHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "ReleaseQueryUGCRequest");

	Params::SIK_UGCLibrary_ReleaseQueryUGCRequest Parms{};

	Parms.QueryHandle = std::move(QueryHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.RemoveContentDescriptor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_UGCContentDescriptorID             ContentDescriptor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::RemoveContentDescriptor(const struct FSIK_UGCUpdateHandle& UpdateHandle, ESIK_UGCContentDescriptorID ContentDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "RemoveContentDescriptor");

	Params::SIK_UGCLibrary_RemoveContentDescriptor Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.ContentDescriptor = ContentDescriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.RemoveItemKeyValueTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::RemoveItemKeyValueTags(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "RemoveItemKeyValueTags");

	Params::SIK_UGCLibrary_RemoveItemKeyValueTags Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.RemoveItemPreview
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   PreviewIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::RemoveItemPreview(const struct FSIK_UGCUpdateHandle& UpdateHandle, int32 PreviewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "RemoveItemPreview");

	Params::SIK_UGCLibrary_RemoveItemPreview Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.PreviewIndex = PreviewIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetAllowCachedResponse
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   MaxAgeSeconds                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetAllowCachedResponse(const struct FSIK_UGCQueryHandle& QueryHandle, int32 MaxAgeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetAllowCachedResponse");

	Params::SIK_UGCLibrary_SetAllowCachedResponse Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.MaxAgeSeconds = MaxAgeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetCloudFileNameFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    MatchCloudFileName                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetCloudFileNameFilter(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& MatchCloudFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetCloudFileNameFilter");

	Params::SIK_UGCLibrary_SetCloudFileNameFilter Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.MatchCloudFileName = std::move(MatchCloudFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemContent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Content                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemContent(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemContent");

	Params::SIK_UGCLibrary_SetItemContent Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Content = std::move(Content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemDescription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemDescription(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemDescription");

	Params::SIK_UGCLibrary_SetItemDescription Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemMetadata
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    MetaData                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemMetadata(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& MetaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemMetadata");

	Params::SIK_UGCLibrary_SetItemMetadata Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.MetaData = std::move(MetaData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemPreview
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    PreviewFile                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemPreview(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& PreviewFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemPreview");

	Params::SIK_UGCLibrary_SetItemPreview Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.PreviewFile = std::move(PreviewFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemTags(const struct FSIK_UGCUpdateHandle& UpdateHandle, const TArray<class FString>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemTags");

	Params::SIK_UGCLibrary_SetItemTags Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemTitle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemTitle(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemTitle");

	Params::SIK_UGCLibrary_SetItemTitle Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Title = std::move(Title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemUpdateLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemUpdateLanguage(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Language)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemUpdateLanguage");

	Params::SIK_UGCLibrary_SetItemUpdateLanguage Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Language = std::move(Language);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemVisibility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_RemoteStoragePublishedFileVisibilityVisibility                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetItemVisibility(const struct FSIK_UGCUpdateHandle& UpdateHandle, ESIK_RemoteStoragePublishedFileVisibility Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetItemVisibility");

	Params::SIK_UGCLibrary_SetItemVisibility Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.Visibility = Visibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetLanguage(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& Language)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetLanguage");

	Params::SIK_UGCLibrary_SetLanguage Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Language = std::move(Language);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetMatchAnyTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bMatchAnyTag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetMatchAnyTag(const struct FSIK_UGCQueryHandle& QueryHandle, bool bMatchAnyTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetMatchAnyTag");

	Params::SIK_UGCLibrary_SetMatchAnyTag Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bMatchAnyTag = bMatchAnyTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetRankedByTrendDays
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Days                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetRankedByTrendDays(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Days)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetRankedByTrendDays");

	Params::SIK_UGCLibrary_SetRankedByTrendDays Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Days = Days;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnAdditionalPreviews
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReturnAdditionalPreviews                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnAdditionalPreviews(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnAdditionalPreviews)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnAdditionalPreviews");

	Params::SIK_UGCLibrary_SetReturnAdditionalPreviews Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bReturnAdditionalPreviews = bReturnAdditionalPreviews;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnChildren
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReturnChildren                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnChildren(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnChildren");

	Params::SIK_UGCLibrary_SetReturnChildren Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bReturnChildren = bReturnChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnKeyValueTags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReturnKeyValueTags                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnKeyValueTags(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnKeyValueTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnKeyValueTags");

	Params::SIK_UGCLibrary_SetReturnKeyValueTags Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bReturnKeyValueTags = bReturnKeyValueTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnLongDescription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReturnLongDescription                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnLongDescription(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnLongDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnLongDescription");

	Params::SIK_UGCLibrary_SetReturnLongDescription Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bReturnLongDescription = bReturnLongDescription;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnMetadata
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReturnMetadata                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnMetadata(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnMetadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnMetadata");

	Params::SIK_UGCLibrary_SetReturnMetadata Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bReturnMetadata = bReturnMetadata;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnOnlyIDs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReturnOnlyIDs                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnOnlyIDs(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnOnlyIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnOnlyIDs");

	Params::SIK_UGCLibrary_SetReturnOnlyIDs Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bReturnOnlyIDs = bReturnOnlyIDs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnPlaytimeStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Days                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnPlaytimeStats(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Days)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnPlaytimeStats");

	Params::SIK_UGCLibrary_SetReturnPlaytimeStats Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.Days = Days;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnTotalOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReturnTotalOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetReturnTotalOnly(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnTotalOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetReturnTotalOnly");

	Params::SIK_UGCLibrary_SetReturnTotalOnly Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.bReturnTotalOnly = bReturnTotalOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetSearchText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCQueryHandle&       QueryHandle                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    SearchText                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetSearchText(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& SearchText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetSearchText");

	Params::SIK_UGCLibrary_SetSearchText Parms{};

	Parms.QueryHandle = std::move(QueryHandle);
	Parms.SearchText = std::move(SearchText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SetUserItemVote
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bVoteUp                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::SetUserItemVote(const struct FSIK_PublishedFileId& PublishedFileId, bool bVoteUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SetUserItemVote");

	Params::SIK_UGCLibrary_SetUserItemVote Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);
	Parms.bVoteUp = bVoteUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.ShowWorkshopEULA
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::ShowWorkshopEULA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "ShowWorkshopEULA");

	Params::SIK_UGCLibrary_ShowWorkshopEULA Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.StartItemUpdate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSIK_UGCUpdateHandle             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_UGCUpdateHandle USIK_UGCLibrary::StartItemUpdate(const struct FSIK_AppId& AppID, const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "StartItemUpdate");

	Params::SIK_UGCLibrary_StartItemUpdate Parms{};

	Parms.AppID = std::move(AppID);
	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.SuspendDownloads
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuspend                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UGCLibrary::SuspendDownloads(bool bSuspend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "SuspendDownloads");

	Params::SIK_UGCLibrary_SuspendDownloads Parms{};

	Parms.bSuspend = bSuspend;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.UpdateItemPreviewFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   PreviewIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PreviewFile                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::UpdateItemPreviewFile(const struct FSIK_UGCUpdateHandle& UpdateHandle, int32 PreviewIndex, const class FString& PreviewFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "UpdateItemPreviewFile");

	Params::SIK_UGCLibrary_UpdateItemPreviewFile Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.PreviewIndex = PreviewIndex;
	Parms.PreviewFile = std::move(PreviewFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UGCLibrary.UpdateItemPreviewVideo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_UGCUpdateHandle&      UpdateHandle                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   PreviewIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    VideoID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UGCLibrary::UpdateItemPreviewVideo(const struct FSIK_UGCUpdateHandle& UpdateHandle, int32 PreviewIndex, const class FString& VideoID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UGCLibrary", "UpdateItemPreviewVideo");

	Params::SIK_UGCLibrary_UpdateItemPreviewVideo Parms{};

	Parms.UpdateHandle = std::move(UpdateHandle);
	Parms.PreviewIndex = PreviewIndex;
	Parms.VideoID = std::move(VideoID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UnsubscribeItem_AsyncFunction.UnsubscribeItem
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_PublishedFileId&      PublishedFileId                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USIK_UnsubscribeItem_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_UnsubscribeItem_AsyncFunction* USIK_UnsubscribeItem_AsyncFunction::UnsubscribeItem(const struct FSIK_PublishedFileId& PublishedFileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UnsubscribeItem_AsyncFunction", "UnsubscribeItem");

	Params::SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem Parms{};

	Parms.PublishedFileId = std::move(PublishedFileId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UploadLeaderboardScore_AsyncFunction.UploadLeaderboardScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   LeaderboardID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LeaderboardUploadScoreMethod       UploadScoreMethod                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_UploadLeaderboardScore_AsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_UploadLeaderboardScore_AsyncFunction* USIK_UploadLeaderboardScore_AsyncFunction::UploadLeaderboardScore(int32 LeaderboardID, ESIK_LeaderboardUploadScoreMethod UploadScoreMethod, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UploadLeaderboardScore_AsyncFunction", "UploadLeaderboardScore");

	Params::SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore Parms{};

	Parms.LeaderboardID = LeaderboardID;
	Parms.UploadScoreMethod = UploadScoreMethod;
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.AdvertiseGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              GameServerId                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    GameServerIP                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GameServerPort                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UserLibrary::AdvertiseGame(const struct FSIK_SteamId& GameServerId, const class FString& GameServerIP, int32 GameServerPort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "AdvertiseGame");

	Params::SIK_UserLibrary_AdvertiseGame Parms{};

	Parms.GameServerId = std::move(GameServerId);
	Parms.GameServerIP = std::move(GameServerIP);
	Parms.GameServerPort = GameServerPort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UserLibrary.BeginAuthSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    Ticket                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamId&              EntitySteamId                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ESIK_BeginAuthSessionResult             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_BeginAuthSessionResult USIK_UserLibrary::BeginAuthSession(const TArray<uint8>& Ticket, const struct FSIK_SteamId& EntitySteamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "BeginAuthSession");

	Params::SIK_UserLibrary_BeginAuthSession Parms{};

	Parms.Ticket = std::move(Ticket);
	Parms.EntitySteamId = std::move(EntitySteamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.CancelAuthTicket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   AuthTicket                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UserLibrary::CancelAuthTicket(int32 AuthTicket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "CancelAuthTicket");

	Params::SIK_UserLibrary_CancelAuthTicket Parms{};

	Parms.AuthTicket = AuthTicket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UserLibrary.DecompressVoice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    Compressed                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   DesiredSampleRate                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          Uncompressed                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  BytesWritten                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_VoiceResult                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_VoiceResult USIK_UserLibrary::DecompressVoice(const TArray<uint8>& Compressed, int32 DesiredSampleRate, TArray<uint8>* Uncompressed, int32* BytesWritten)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "DecompressVoice");

	Params::SIK_UserLibrary_DecompressVoice Parms{};

	Parms.Compressed = std::move(Compressed);
	Parms.DesiredSampleRate = DesiredSampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Uncompressed != nullptr)
		*Uncompressed = std::move(Parms.Uncompressed);

	if (BytesWritten != nullptr)
		*BytesWritten = Parms.BytesWritten;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.EndAuthSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_UserLibrary::EndAuthSession(const struct FSIK_SteamId& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "EndAuthSession");

	Params::SIK_UserLibrary_EndAuthSession Parms{};

	Parms.SteamID = std::move(SteamID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetAuthSessionTicket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>*                          Ticket                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FSIK_SteamNetworkingIdentity&Identity                                               (Parm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserLibrary::GetAuthSessionTicket(TArray<uint8>* Ticket, const struct FSIK_SteamNetworkingIdentity& Identity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetAuthSessionTicket");

	Params::SIK_UserLibrary_GetAuthSessionTicket Parms{};

	Parms.Identity = std::move(Identity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Ticket != nullptr)
		*Ticket = std::move(Parms.Ticket);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetAuthTicketForWebApi
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Identity                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserLibrary::GetAuthTicketForWebApi(const class FString& Identity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetAuthTicketForWebApi");

	Params::SIK_UserLibrary_GetAuthTicketForWebApi Parms{};

	Parms.Identity = std::move(Identity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetAvailableVoice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  Compressed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Uncompressed                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredSampleRate                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_VoiceResult                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_VoiceResult USIK_UserLibrary::GetAvailableVoice(int32* Compressed, int32* Uncompressed, int32 DesiredSampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetAvailableVoice");

	Params::SIK_UserLibrary_GetAvailableVoice Parms{};

	Parms.DesiredSampleRate = DesiredSampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Compressed != nullptr)
		*Compressed = Parms.Compressed;

	if (Uncompressed != nullptr)
		*Uncompressed = Parms.Uncompressed;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetEncryptedAppTicket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>*                          Ticket                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::GetEncryptedAppTicket(TArray<uint8>* Ticket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetEncryptedAppTicket");

	Params::SIK_UserLibrary_GetEncryptedAppTicket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Ticket != nullptr)
		*Ticket = std::move(Parms.Ticket);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetGameBadgeLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Series                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Foil                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserLibrary::GetGameBadgeLevel(int32 Series, bool Foil)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetGameBadgeLevel");

	Params::SIK_UserLibrary_GetGameBadgeLevel Parms{};

	Parms.Series = Series;
	Parms.Foil = Foil;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetPlayerSteamLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserLibrary::GetPlayerSteamLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetPlayerSteamLevel");

	Params::SIK_UserLibrary_GetPlayerSteamLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetSteamID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_UserLibrary::GetSteamID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetSteamID");

	Params::SIK_UserLibrary_GetSteamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetSteamIdPure
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSIK_SteamId                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_SteamId USIK_UserLibrary::GetSteamIdPure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetSteamIdPure");

	Params::SIK_UserLibrary_GetSteamIdPure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetVoice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bWantCompressed                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          DestBuffer                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  BytesWritten                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_VoiceResult                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_VoiceResult USIK_UserLibrary::GetVoice(bool bWantCompressed, TArray<uint8>* DestBuffer, int32* BytesWritten)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetVoice");

	Params::SIK_UserLibrary_GetVoice Parms{};

	Parms.bWantCompressed = bWantCompressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DestBuffer != nullptr)
		*DestBuffer = std::move(Parms.DestBuffer);

	if (BytesWritten != nullptr)
		*BytesWritten = Parms.BytesWritten;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.GetVoiceOptimalSampleRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserLibrary::GetVoiceOptimalSampleRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "GetVoiceOptimalSampleRate");

	Params::SIK_UserLibrary_GetVoiceOptimalSampleRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.IsBehindNAT
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::IsBehindNAT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "IsBehindNAT");

	Params::SIK_UserLibrary_IsBehindNAT Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.IsPhoneIdentifying
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::IsPhoneIdentifying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "IsPhoneIdentifying");

	Params::SIK_UserLibrary_IsPhoneIdentifying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.IsPhoneRequiringVerification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::IsPhoneRequiringVerification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "IsPhoneRequiringVerification");

	Params::SIK_UserLibrary_IsPhoneRequiringVerification Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.IsPhoneVerified
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::IsPhoneVerified()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "IsPhoneVerified");

	Params::SIK_UserLibrary_IsPhoneVerified Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.IsTwoFactorEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::IsTwoFactorEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "IsTwoFactorEnabled");

	Params::SIK_UserLibrary_IsTwoFactorEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.LoggedOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::LoggedOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "LoggedOn");

	Params::SIK_UserLibrary_LoggedOn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.LoggedOnPure
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::LoggedOnPure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "LoggedOnPure");

	Params::SIK_UserLibrary_LoggedOnPure Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserLibrary.StartVoiceRecording
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_UserLibrary::StartVoiceRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "StartVoiceRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UserLibrary.StopVoiceRecording
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_UserLibrary::StopVoiceRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "StopVoiceRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UserLibrary.UserHasLicenseForApp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   AppID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserLibrary::UserHasLicenseForApp(const struct FSIK_SteamId& SteamID, int32 AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserLibrary", "UserHasLicenseForApp");

	Params::SIK_UserLibrary_UserHasLicenseForApp Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.AppID = AppID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.CacheCurrentStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::CacheCurrentStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "CacheCurrentStats");

	Params::SIK_UserStatsLibrary_CacheCurrentStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.ClearAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::ClearAchievement(const class FString& AchievementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "ClearAchievement");

	Params::SIK_UserStatsLibrary_ClearAchievement Parms{};

	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievement
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetAchievement(const class FString& AchievementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetAchievement");

	Params::SIK_UserStatsLibrary_GetAchievement Parms{};

	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementAchievedPercent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetAchievementAchievedPercent(const class FString& AchievementName, float* Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetAchievementAchievedPercent");

	Params::SIK_UserStatsLibrary_GetAchievementAchievedPercent Parms{};

	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Percent != nullptr)
		*Percent = Parms.Percent;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementAndUnlockTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAchieved                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime*                       UnlockTime                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UserStatsLibrary::GetAchievementAndUnlockTime(const class FString& AchievementName, bool* bAchieved, struct FDateTime* UnlockTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetAchievementAndUnlockTime");

	Params::SIK_UserStatsLibrary_GetAchievementAndUnlockTime Parms{};

	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bAchieved != nullptr)
		*bAchieved = Parms.bAchieved;

	if (UnlockTime != nullptr)
		*UnlockTime = std::move(Parms.UnlockTime);
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementDisplayAttribute
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_UserStatsLibrary::GetAchievementDisplayAttribute(const class FString& AchievementName, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetAchievementDisplayAttribute");

	Params::SIK_UserStatsLibrary_GetAchievementDisplayAttribute Parms{};

	Parms.AchievementName = std::move(AchievementName);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementIcon
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D**                      Icon                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UserStatsLibrary::GetAchievementIcon(const class FString& AchievementName, class UTexture2D** Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetAchievementIcon");

	Params::SIK_UserStatsLibrary_GetAchievementIcon Parms{};

	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Icon != nullptr)
		*Icon = Parms.Icon;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   AchievementIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_UserStatsLibrary::GetAchievementName(int32 AchievementIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetAchievementName");

	Params::SIK_UserStatsLibrary_GetAchievementName Parms{};

	Parms.AchievementIndex = AchievementIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Data                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetGlobalStatFloat(const class FString& StatName, float* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetGlobalStatFloat");

	Params::SIK_UserStatsLibrary_GetGlobalStatFloat Parms{};

	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = Parms.Data;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatHistoryFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>*                          Data                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserStatsLibrary::GetGlobalStatHistoryFloat(const class FString& StatName, TArray<float>* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetGlobalStatHistoryFloat");

	Params::SIK_UserStatsLibrary_GetGlobalStatHistoryFloat Parms{};

	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatHistoryInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>*                          Data                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserStatsLibrary::GetGlobalStatHistoryInt(const class FString& StatName, TArray<int32>* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetGlobalStatHistoryInt");

	Params::SIK_UserStatsLibrary_GetGlobalStatHistoryInt Parms{};

	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64*                                  Data                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetGlobalStatInt(const class FString& StatName, int64* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetGlobalStatInt");

	Params::SIK_UserStatsLibrary_GetGlobalStatInt Parms{};

	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = Parms.Data;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardDisplayType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   LeaderboardID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LeaderboardDisplayType             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_LeaderboardDisplayType USIK_UserStatsLibrary::GetLeaderboardDisplayType(int32 LeaderboardID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetLeaderboardDisplayType");

	Params::SIK_UserStatsLibrary_GetLeaderboardDisplayType Parms{};

	Parms.LeaderboardID = LeaderboardID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardEntryCount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   LeaderboardID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserStatsLibrary::GetLeaderboardEntryCount(int32 LeaderboardID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetLeaderboardEntryCount");

	Params::SIK_UserStatsLibrary_GetLeaderboardEntryCount Parms{};

	Parms.LeaderboardID = LeaderboardID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   LeaderboardID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_UserStatsLibrary::GetLeaderboardName(int32 LeaderboardID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetLeaderboardName");

	Params::SIK_UserStatsLibrary_GetLeaderboardName Parms{};

	Parms.LeaderboardID = LeaderboardID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardSortMethod
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   LeaderboardID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_LeaderboardSortMethod              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESIK_LeaderboardSortMethod USIK_UserStatsLibrary::GetLeaderboardSortMethod(int32 LeaderboardID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetLeaderboardSortMethod");

	Params::SIK_UserStatsLibrary_GetLeaderboardSortMethod Parms{};

	Parms.LeaderboardID = LeaderboardID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetMostAchievedAchievementInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          AchievementName                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bIsAchieved                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserStatsLibrary::GetMostAchievedAchievementInfo(class FString* AchievementName, float* Percent, bool* bIsAchieved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetMostAchievedAchievementInfo");

	Params::SIK_UserStatsLibrary_GetMostAchievedAchievementInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AchievementName != nullptr)
		*AchievementName = std::move(Parms.AchievementName);

	if (Percent != nullptr)
		*Percent = Parms.Percent;

	if (bIsAchieved != nullptr)
		*bIsAchieved = Parms.bIsAchieved;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetNextMostAchievedAchievementInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   IteratorPrevious                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          AchievementName                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bIsAchieved                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserStatsLibrary::GetNextMostAchievedAchievementInfo(int32 IteratorPrevious, class FString* AchievementName, float* Percent, bool* bIsAchieved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetNextMostAchievedAchievementInfo");

	Params::SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo Parms{};

	Parms.IteratorPrevious = IteratorPrevious;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AchievementName != nullptr)
		*AchievementName = std::move(Parms.AchievementName);

	if (Percent != nullptr)
		*Percent = Parms.Percent;

	if (bIsAchieved != nullptr)
		*bIsAchieved = Parms.bIsAchieved;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetNumOfAchievements
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UserStatsLibrary::GetNumOfAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetNumOfAchievements");

	Params::SIK_UserStatsLibrary_GetNumOfAchievements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetStatFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetStatFloat(const class FString& StatName, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetStatFloat");

	Params::SIK_UserStatsLibrary_GetStatFloat Parms{};

	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetStatInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetStatInt(const class FString& StatName, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetStatInt");

	Params::SIK_UserStatsLibrary_GetStatInt Parms{};

	Parms.StatName = std::move(StatName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetUserAchievement
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAchieved                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName, bool* bAchieved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetUserAchievement");

	Params::SIK_UserStatsLibrary_GetUserAchievement Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bAchieved != nullptr)
		*bAchieved = Parms.bAchieved;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetUserAchievementAndUnlockTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FSIK_SteamId&              SteamID                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bAchieved                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime*                       UnlockTime                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::GetUserAchievementAndUnlockTime(const struct FSIK_SteamId& SteamID, const class FString& AchievementName, bool* bAchieved, struct FDateTime* UnlockTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "GetUserAchievementAndUnlockTime");

	Params::SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bAchieved != nullptr)
		*bAchieved = Parms.bAchieved;

	if (UnlockTime != nullptr)
		*UnlockTime = std::move(Parms.UnlockTime);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.IndicateAchievementProgress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxProgress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::IndicateAchievementProgress(const class FString& AchievementName, int32 CurProgress, int32 MaxProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "IndicateAchievementProgress");

	Params::SIK_UserStatsLibrary_IndicateAchievementProgress Parms{};

	Parms.AchievementName = std::move(AchievementName);
	Parms.CurProgress = CurProgress;
	Parms.MaxProgress = MaxProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.RequestCurrentStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::RequestCurrentStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "RequestCurrentStats");

	Params::SIK_UserStatsLibrary_RequestCurrentStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.ResetAllStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    AchievementsToo                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::ResetAllStats(bool AchievementsToo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "ResetAllStats");

	Params::SIK_UserStatsLibrary_ResetAllStats Parms{};

	Parms.AchievementsToo = AchievementsToo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.SetAchievement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AchievementName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::SetAchievement(const class FString& AchievementName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "SetAchievement");

	Params::SIK_UserStatsLibrary_SetAchievement Parms{};

	Parms.AchievementName = std::move(AchievementName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.SetStatFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::SetStatFloat(const class FString& StatName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "SetStatFloat");

	Params::SIK_UserStatsLibrary_SetStatFloat Parms{};

	Parms.StatName = std::move(StatName);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.SetStatInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::SetStatInt(const class FString& StatName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "SetStatInt");

	Params::SIK_UserStatsLibrary_SetStatInt Parms{};

	Parms.StatName = std::move(StatName);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.StoreStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::StoreStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "StoreStats");

	Params::SIK_UserStatsLibrary_StoreStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UserStatsLibrary.UpdateAvgRateStat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StatName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UserStatsLibrary::UpdateAvgRateStat(const class FString& StatName, float Value, float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UserStatsLibrary", "UpdateAvgRateStat");

	Params::SIK_UserStatsLibrary_UpdateAvgRateStat Parms{};

	Parms.StatName = std::move(StatName);
	Parms.Value = Value;
	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetAppID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSIK_AppId                       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSIK_AppId USIK_UtilsLibrary::GetAppID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetAppID");

	Params::SIK_UtilsLibrary_GetAppID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetCurrentBatteryPower
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UtilsLibrary::GetCurrentBatteryPower()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetCurrentBatteryPower");

	Params::SIK_UtilsLibrary_GetCurrentBatteryPower Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetEnteredGamepadTextInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_UtilsLibrary::GetEnteredGamepadTextInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetEnteredGamepadTextInput");

	Params::SIK_UtilsLibrary_GetEnteredGamepadTextInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetEnteredGamepadTextLength
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UtilsLibrary::GetEnteredGamepadTextLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetEnteredGamepadTextLength");

	Params::SIK_UtilsLibrary_GetEnteredGamepadTextLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetImageRGBA
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Image                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>*                  OutData                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  OutWidth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutHeight                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::GetImageRGBA(int32 Image, TArray<struct FColor>* OutData, int32* OutWidth, int32* OutHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetImageRGBA");

	Params::SIK_UtilsLibrary_GetImageRGBA Parms{};

	Parms.Image = Image;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);

	if (OutWidth != nullptr)
		*OutWidth = Parms.OutWidth;

	if (OutHeight != nullptr)
		*OutHeight = Parms.OutHeight;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetIPCountry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_UtilsLibrary::GetIPCountry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetIPCountry");

	Params::SIK_UtilsLibrary_GetIPCountry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetSecondsSinceAppActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UtilsLibrary::GetSecondsSinceAppActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetSecondsSinceAppActive");

	Params::SIK_UtilsLibrary_GetSecondsSinceAppActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetSecondsSinceComputerActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UtilsLibrary::GetSecondsSinceComputerActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetSecondsSinceComputerActive");

	Params::SIK_UtilsLibrary_GetSecondsSinceComputerActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetServerRealTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USIK_UtilsLibrary::GetServerRealTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetServerRealTime");

	Params::SIK_UtilsLibrary_GetServerRealTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.GetSteamUILanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USIK_UtilsLibrary::GetSteamUILanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "GetSteamUILanguage");

	Params::SIK_UtilsLibrary_GetSteamUILanguage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.InitFilterText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::InitFilterText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "InitFilterText");

	Params::SIK_UtilsLibrary_InitFilterText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.IsOverlayEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::IsOverlayEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "IsOverlayEnabled");

	Params::SIK_UtilsLibrary_IsOverlayEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamChinaLauncher
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::IsSteamChinaLauncher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "IsSteamChinaLauncher");

	Params::SIK_UtilsLibrary_IsSteamChinaLauncher Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamInBigPictureMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::IsSteamInBigPictureMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "IsSteamInBigPictureMode");

	Params::SIK_UtilsLibrary_IsSteamInBigPictureMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamRunningInVR
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::IsSteamRunningInVR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "IsSteamRunningInVR");

	Params::SIK_UtilsLibrary_IsSteamRunningInVR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamRunningOnSteamDeck
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::IsSteamRunningOnSteamDeck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "IsSteamRunningOnSteamDeck");

	Params::SIK_UtilsLibrary_IsSteamRunningOnSteamDeck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.IsVRHeadsetStreamingEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::IsVRHeadsetStreamingEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "IsVRHeadsetStreamingEnabled");

	Params::SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.OverlayNeedsPresent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::OverlayNeedsPresent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "OverlayNeedsPresent");

	Params::SIK_UtilsLibrary_OverlayNeedsPresent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.SetGameLauncherMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bLauncherMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UtilsLibrary::SetGameLauncherMode(bool bLauncherMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "SetGameLauncherMode");

	Params::SIK_UtilsLibrary_SetGameLauncherMode Parms{};

	Parms.bLauncherMode = bLauncherMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.SetOverlayNotificationInset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   HorizontalInset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VerticalInset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UtilsLibrary::SetOverlayNotificationInset(int32 HorizontalInset, int32 VerticalInset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "SetOverlayNotificationInset");

	Params::SIK_UtilsLibrary_SetOverlayNotificationInset Parms{};

	Parms.HorizontalInset = HorizontalInset;
	Parms.VerticalInset = VerticalInset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.SetOverlayNotificationPosition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_NotificationPosition               NotificationPosition                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UtilsLibrary::SetOverlayNotificationPosition(ESIK_NotificationPosition NotificationPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "SetOverlayNotificationPosition");

	Params::SIK_UtilsLibrary_SetOverlayNotificationPosition Parms{};

	Parms.NotificationPosition = NotificationPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.SetVRHeadsetStreamingEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USIK_UtilsLibrary::SetVRHeadsetStreamingEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "SetVRHeadsetStreamingEnabled");

	Params::SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.ShowFloatingGamepadTextInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_EFloatingGamepadTextInputMode      KeyboardMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TextFieldXPosition                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TextFieldYPosition                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TextFieldWidth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TextFieldHeight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::ShowFloatingGamepadTextInput(ESIK_EFloatingGamepadTextInputMode KeyboardMode, int32 TextFieldXPosition, int32 TextFieldYPosition, int32 TextFieldWidth, int32 TextFieldHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "ShowFloatingGamepadTextInput");

	Params::SIK_UtilsLibrary_ShowFloatingGamepadTextInput Parms{};

	Parms.KeyboardMode = KeyboardMode;
	Parms.TextFieldXPosition = TextFieldXPosition;
	Parms.TextFieldYPosition = TextFieldYPosition;
	Parms.TextFieldWidth = TextFieldWidth;
	Parms.TextFieldHeight = TextFieldHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.ShowGamepadTextInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESIK_EGamepadTextInputMode              InputMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESIK_EGamepadTextInputLineMode          LineInputMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Description                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharMax                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ExistingText                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_UtilsLibrary::ShowGamepadTextInput(ESIK_EGamepadTextInputMode InputMode, ESIK_EGamepadTextInputLineMode LineInputMode, const class FString& Description, int32 CharMax, const class FString& ExistingText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "ShowGamepadTextInput");

	Params::SIK_UtilsLibrary_ShowGamepadTextInput Parms{};

	Parms.InputMode = InputMode;
	Parms.LineInputMode = LineInputMode;
	Parms.Description = std::move(Description);
	Parms.CharMax = CharMax;
	Parms.ExistingText = std::move(ExistingText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_UtilsLibrary.StartVrDashboard
// (Final, Native, Static, Public, BlueprintCallable)

void USIK_UtilsLibrary::StartVrDashboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_UtilsLibrary", "StartVrDashboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_VideoLibrary.GetOPFSettings
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_VideoLibrary::GetOPFSettings(const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_VideoLibrary", "GetOPFSettings");

	Params::SIK_VideoLibrary_GetOPFSettings Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_VideoLibrary.GetOPFStringForApp
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FString*                          OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_VideoLibrary::GetOPFStringForApp(const struct FSIK_AppId& AppID, class FString* OutString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_VideoLibrary", "GetOPFStringForApp");

	Params::SIK_VideoLibrary_GetOPFStringForApp Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_VideoLibrary.GetVideoURL
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const struct FSIK_AppId&                AppID                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USIK_VideoLibrary::GetVideoURL(const struct FSIK_AppId& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_VideoLibrary", "GetVideoURL");

	Params::SIK_VideoLibrary_GetVideoURL Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SIK_VideoLibrary.IsBroadcasting
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNumViewers                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USIK_VideoLibrary::IsBroadcasting(int32* OutNumViewers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_VideoLibrary", "IsBroadcasting");

	Params::SIK_VideoLibrary_IsBroadcasting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNumViewers != nullptr)
		*OutNumViewers = Parms.OutNumViewers;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_WebApi_AuthenticateUser.AuthenticateUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SteamID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SessionKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    EncryptedLoginKey                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_WebApi_AuthenticateUser*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_WebApi_AuthenticateUser* USIK_WebApi_AuthenticateUser::AuthenticateUser(const class FString& SteamID, const class FString& SessionKey, const class FString& EncryptedLoginKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_WebApi_AuthenticateUser", "AuthenticateUser");

	Params::SIK_WebApi_AuthenticateUser_AuthenticateUser Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.SessionKey = std::move(SessionKey);
	Parms.EncryptedLoginKey = std::move(EncryptedLoginKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SIK_WebApi_GetFriendList.GetFriendList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SteamID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Relationship                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USIK_WebApi_GetFriendList*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USIK_WebApi_GetFriendList* USIK_WebApi_GetFriendList::GetFriendList(const class FString& Key, const class FString& SteamID, const class FString& Relationship)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SIK_WebApi_GetFriendList", "GetFriendList");

	Params::SIK_WebApi_GetFriendList_GetFriendList Parms{};

	Parms.Key = std::move(Key);
	Parms.SteamID = std::move(SteamID);
	Parms.Relationship = std::move(Relationship);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SteamIntegrationKit.SteamWebApi.AuthenticateUser
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SteamID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    SessionKey                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    EncryptedLoginKey                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSuccess, const class FString& Response)>OnComplete                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USteamWebApi::AuthenticateUser(const class FString& SteamID, const TArray<uint8>& SessionKey, const TArray<uint8>& EncryptedLoginKey, TDelegate<void(bool bSuccess, const class FString& Response)> OnComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SteamWebApi", "AuthenticateUser");

	Params::SteamWebApi_AuthenticateUser Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.SessionKey = std::move(SessionKey);
	Parms.EncryptedLoginKey = std::move(EncryptedLoginKey);
	Parms.OnComplete = OnComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SteamIntegrationKit.SteamWebApi.AuthenticateUserTicket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AppID                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Ticket                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Identity                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bSuccess, const class FString& Response)>OnComplete                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USteamWebApi::AuthenticateUserTicket(const class FString& Key, const class FString& AppID, const class FString& Ticket, const class FString& Identity, TDelegate<void(bool bSuccess, const class FString& Response)> OnComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SteamWebApi", "AuthenticateUserTicket");

	Params::SteamWebApi_AuthenticateUserTicket Parms{};

	Parms.Key = std::move(Key);
	Parms.AppID = std::move(AppID);
	Parms.Ticket = std::move(Ticket);
	Parms.Identity = std::move(Identity);
	Parms.OnComplete = OnComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

