#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BatogonFlightTarget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_BatogonFlightTarget.BP_BatogonFlightTarget_C.ExecuteUbergraph_BP_BatogonFlightTarget
// 0x0520 (0x0520 - 0x0000)
struct BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlyLocationAccessible_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0060(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0150(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_BatogonFlightNextPoint_C*           CallFunc_FinishSpawningActor_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x01C0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRandomDestination_Destination;         // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0328(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetFlyLocation_FlyLocation;               // 0x0418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_2;     // 0x0430(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_2;        // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget) == 0x000010, "Wrong alignment on BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget");
static_assert(sizeof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget) == 0x000520, "Wrong size on BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, EntryPoint) == 0x000000, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, Temp_object_Variable) == 0x000008, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_IsFlyLocationAccessible_ReturnValue) == 0x000048, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_IsFlyLocationAccessible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_Vector_Distance_ReturnValue) == 0x000050, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000060, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000148, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_GetTransform_ReturnValue) == 0x000150, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001B0, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_FinishSpawningActor_ReturnValue) == 0x0001B8, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x0001C0, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x0002A8, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_GetRandomDestination_Destination) == 0x0002B0, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_GetRandomDestination_Destination' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0002C8, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_BreakVector_X) == 0x0002E0, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_BreakVector_Y) == 0x0002E8, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_BreakVector_Z) == 0x0002F0, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_MakeVector_ReturnValue) == 0x0002F8, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_MakeVector_ReturnValue_1) == 0x000310, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_SphereTraceSingle_OutHit) == 0x000328, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_SphereTraceSingle_ReturnValue) == 0x000410, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_GetFlyLocation_FlyLocation) == 0x000418, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_GetFlyLocation_FlyLocation' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_SetActorLocation_SweepHitResult_2) == 0x000430, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_SetActorLocation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget, CallFunc_K2_SetActorLocation_ReturnValue_2) == 0x000518, "Member 'BP_BatogonFlightTarget_C_ExecuteUbergraph_BP_BatogonFlightTarget::CallFunc_K2_SetActorLocation_ReturnValue_2' has a wrong offset!");

// Function BP_BatogonFlightTarget.BP_BatogonFlightTarget_C.GetFlyLocation
// 0x02A8 (0x02A8 - 0x0000)
struct BP_BatogonFlightTarget_C_GetFlyLocation final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                FlyLocation;                                       // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BatogonFlightTarget_C_GetFlyLocation) == 0x000008, "Wrong alignment on BP_BatogonFlightTarget_C_GetFlyLocation");
static_assert(sizeof(BP_BatogonFlightTarget_C_GetFlyLocation) == 0x0002A8, "Wrong size on BP_BatogonFlightTarget_C_GetFlyLocation");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, Hit) == 0x000000, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::Hit' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, FlyLocation) == 0x0000E8, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::FlyLocation' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000100, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x000118, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x000119, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_Time) == 0x00011C, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_Distance) == 0x000120, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_Location) == 0x000128, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x000140, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_Normal) == 0x000158, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x000170, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_PhysMat) == 0x000188, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_HitActor) == 0x000190, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_HitComponent) == 0x000198, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_HitBoneName) == 0x0001A0, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_BoneName) == 0x0001A8, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_HitItem) == 0x0001B0, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_ElementIndex) == 0x0001B4, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_FaceIndex) == 0x0001B8, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_TraceStart) == 0x0001C0, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakHitResult_TraceEnd) == 0x0001D8, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_X) == 0x0001F0, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_Y) == 0x0001F8, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_Z) == 0x000200, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_X_1) == 0x000208, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_Y_1) == 0x000210, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_Z_1) == 0x000218, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000220, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_X_2) == 0x000238, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_Y_2) == 0x000240, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_BreakVector_Z_2) == 0x000248, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_MakeVector_ReturnValue) == 0x000250, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000268, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_MakeVector_ReturnValue_1) == 0x000270, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000288, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000290, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000298, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetFlyLocation, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0002A0, "Member 'BP_BatogonFlightTarget_C_GetFlyLocation::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_BatogonFlightTarget.BP_BatogonFlightTarget_C.GetNavigationPointFlyLocation
// 0x0068 (0x0068 - 0x0000)
struct BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation final
{
public:
	class ABP_NavigationPoint_C*                  NavigationPoint;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FlyLocation;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation) == 0x000008, "Wrong alignment on BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation");
static_assert(sizeof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation) == 0x000068, "Wrong size on BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation, NavigationPoint) == 0x000000, "Member 'BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation::NavigationPoint' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation, FlyLocation) == 0x000008, "Member 'BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation::FlyLocation' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation, CallFunc_BreakVector_X) == 0x000038, "Member 'BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation, CallFunc_BreakVector_Y) == 0x000040, "Member 'BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation, CallFunc_BreakVector_Z) == 0x000048, "Member 'BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'BP_BatogonFlightTarget_C_GetNavigationPointFlyLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_BatogonFlightTarget.BP_BatogonFlightTarget_C.GetRandomDestination
// 0x0090 (0x0090 - 0x0000)
struct BP_BatogonFlightTarget_C_GetRandomDestination final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NavigationPoint_C*>          _NavigationPoints;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NavigationPoint_C*                  CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetNavigationPointFlyLocation_FlyLocation; // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlyLocationAccessible_ReturnValue;      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NavigationPoint_C*                  CallFunc_Array_Random_OutItem;                     // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetNavigationPointFlyLocation_FlyLocation_1; // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BatogonFlightTarget_C_GetRandomDestination) == 0x000008, "Wrong alignment on BP_BatogonFlightTarget_C_GetRandomDestination");
static_assert(sizeof(BP_BatogonFlightTarget_C_GetRandomDestination) == 0x000090, "Wrong size on BP_BatogonFlightTarget_C_GetRandomDestination");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, Destination) == 0x000000, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::Destination' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, _NavigationPoints) == 0x000018, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::_NavigationPoints' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_GetNavigationPointFlyLocation_FlyLocation) == 0x000048, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_GetNavigationPointFlyLocation_FlyLocation' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_IsFlyLocationAccessible_ReturnValue) == 0x000061, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_IsFlyLocationAccessible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_Array_Random_OutItem) == 0x000068, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_Array_Random_OutIndex) == 0x000070, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_GetRandomDestination, CallFunc_GetNavigationPointFlyLocation_FlyLocation_1) == 0x000078, "Member 'BP_BatogonFlightTarget_C_GetRandomDestination::CallFunc_GetNavigationPointFlyLocation_FlyLocation_1' has a wrong offset!");

// Function BP_BatogonFlightTarget.BP_BatogonFlightTarget_C.IsFlyLocationAccessible
// 0x0138 (0x0138 - 0x0000)
struct BP_BatogonFlightTarget_C_IsFlyLocationAccessible final
{
public:
	struct FVector                                FlyLocation;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0048(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible) == 0x000008, "Wrong alignment on BP_BatogonFlightTarget_C_IsFlyLocationAccessible");
static_assert(sizeof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible) == 0x000138, "Wrong size on BP_BatogonFlightTarget_C_IsFlyLocationAccessible");
static_assert(offsetof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible, FlyLocation) == 0x000000, "Member 'BP_BatogonFlightTarget_C_IsFlyLocationAccessible::FlyLocation' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible, ReturnValue) == 0x000018, "Member 'BP_BatogonFlightTarget_C_IsFlyLocationAccessible::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible, Temp_object_Variable) == 0x000020, "Member 'BP_BatogonFlightTarget_C_IsFlyLocationAccessible::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_BatogonFlightTarget_C_IsFlyLocationAccessible::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible, CallFunc_SphereTraceSingle_OutHit) == 0x000048, "Member 'BP_BatogonFlightTarget_C_IsFlyLocationAccessible::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible, CallFunc_SphereTraceSingle_ReturnValue) == 0x000130, "Member 'BP_BatogonFlightTarget_C_IsFlyLocationAccessible::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BatogonFlightTarget_C_IsFlyLocationAccessible, CallFunc_Not_PreBool_ReturnValue) == 0x000131, "Member 'BP_BatogonFlightTarget_C_IsFlyLocationAccessible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_BatogonFlightTarget.BP_BatogonFlightTarget_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BatogonFlightTarget_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BatogonFlightTarget_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BatogonFlightTarget_C_ReceiveTick");
static_assert(sizeof(BP_BatogonFlightTarget_C_ReceiveTick) == 0x000004, "Wrong size on BP_BatogonFlightTarget_C_ReceiveTick");
static_assert(offsetof(BP_BatogonFlightTarget_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BatogonFlightTarget_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

