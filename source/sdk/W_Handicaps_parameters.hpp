#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Handicaps

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_Handicaps.W_Handicaps_C.ExecuteUbergraph_W_Handicaps
// 0x0050 (0x0050 - 0x0000)
struct W_Handicaps_C_ExecuteUbergraph_W_Handicaps final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UPPlayerCharacter_C*                CallFunc_GetLocalPlayer_Player;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Handicaps_C_ExecuteUbergraph_W_Handicaps) == 0x000008, "Wrong alignment on W_Handicaps_C_ExecuteUbergraph_W_Handicaps");
static_assert(sizeof(W_Handicaps_C_ExecuteUbergraph_W_Handicaps) == 0x000050, "Wrong size on W_Handicaps_C_ExecuteUbergraph_W_Handicaps");
static_assert(offsetof(W_Handicaps_C_ExecuteUbergraph_W_Handicaps, EntryPoint) == 0x000000, "Member 'W_Handicaps_C_ExecuteUbergraph_W_Handicaps::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_ExecuteUbergraph_W_Handicaps, CallFunc_GetLocalPlayer_Player) == 0x000008, "Member 'W_Handicaps_C_ExecuteUbergraph_W_Handicaps::CallFunc_GetLocalPlayer_Player' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_ExecuteUbergraph_W_Handicaps, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'W_Handicaps_C_ExecuteUbergraph_W_Handicaps::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_ExecuteUbergraph_W_Handicaps, K2Node_Event_MyGeometry) == 0x000014, "Member 'W_Handicaps_C_ExecuteUbergraph_W_Handicaps::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_ExecuteUbergraph_W_Handicaps, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'W_Handicaps_C_ExecuteUbergraph_W_Handicaps::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function W_Handicaps.W_Handicaps_C.GetLocalPlayer
// 0x0028 (0x0028 - 0x0000)
struct W_Handicaps_C_GetLocalPlayer final
{
public:
	class ABP_UPPlayerCharacter_C*                Player;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_UPPlayerCharacter_C*                K2Node_DynamicCast_AsBP_UPPlayer_Character;        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Handicaps_C_GetLocalPlayer) == 0x000008, "Wrong alignment on W_Handicaps_C_GetLocalPlayer");
static_assert(sizeof(W_Handicaps_C_GetLocalPlayer) == 0x000028, "Wrong size on W_Handicaps_C_GetLocalPlayer");
static_assert(offsetof(W_Handicaps_C_GetLocalPlayer, Player) == 0x000000, "Member 'W_Handicaps_C_GetLocalPlayer::Player' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_GetLocalPlayer, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_Handicaps_C_GetLocalPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_GetLocalPlayer, CallFunc_GetPlayerPawn_ReturnValue) == 0x000010, "Member 'W_Handicaps_C_GetLocalPlayer::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_GetLocalPlayer, K2Node_DynamicCast_AsBP_UPPlayer_Character) == 0x000018, "Member 'W_Handicaps_C_GetLocalPlayer::K2Node_DynamicCast_AsBP_UPPlayer_Character' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_GetLocalPlayer, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'W_Handicaps_C_GetLocalPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_GetLocalPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'W_Handicaps_C_GetLocalPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function W_Handicaps.W_Handicaps_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_Handicaps_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Handicaps_C_Tick) == 0x000004, "Wrong alignment on W_Handicaps_C_Tick");
static_assert(sizeof(W_Handicaps_C_Tick) == 0x00003C, "Wrong size on W_Handicaps_C_Tick");
static_assert(offsetof(W_Handicaps_C_Tick, MyGeometry) == 0x000000, "Member 'W_Handicaps_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Handicaps_C_Tick, InDeltaTime) == 0x000038, "Member 'W_Handicaps_C_Tick::InDeltaTime' has a wrong offset!");

}

