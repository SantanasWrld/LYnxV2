#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerPerceptionSource

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_PlayerPerceptionSource.BPC_PlayerPerceptionSource_C
// 0x00B0 (0x0150 - 0x00A0)
class UBPC_PlayerPerceptionSource_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<EPhysicalSurface, double>                RangeForSurface;                                   // 0x00A8(0x0050)(Edit, BlueprintVisible)
	class UCurveFloat*                            LoudnessForSpeed;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_UPPlayerCharacter_C*                Player;                                            // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UABP_LowPolyAvatar_C*                   AnimationBlueprint;                                // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ItemEquippedRange;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ItemUsedRange;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_InventoryItem_C*                    CurrentItem;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LightStimulusDistance;                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LightStimulusTimerHandle;                          // 0x0130(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxVoiceNoiseDistance;                             // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NextVoiceNoise;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReportNoise(const struct FVector& NoiseLocation, float Loudness, float MaxRange);
	void ReportPlayerNoise(float Loudness, float MaxRange);
	void ReceiveBeginPlay();
	void Footstep(EPhysicalSurface Surface);
	void RegisterToFootsteps();
	void InitInventory();
	void ItemEquipped(class ABP_InventoryItem_C* Item);
	void OnItemUsed(class ABP_InventoryItem_C* Item, bool IsUsed);
	void CheckLight();
	void StartLightStimulus();
	void EndLightStimulus();
	void LightStimulus();
	void InitInteractions();
	void Interaction(TScriptInterface<class IBPI_Interaction_C> Interaction_0);
	void InitFootsteps();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BPC_PlayerPerceptionSource(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_PlayerPerceptionSource_C">();
	}
	static class UBPC_PlayerPerceptionSource_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_PlayerPerceptionSource_C>();
	}
};
static_assert(alignof(UBPC_PlayerPerceptionSource_C) == 0x000008, "Wrong alignment on UBPC_PlayerPerceptionSource_C");
static_assert(sizeof(UBPC_PlayerPerceptionSource_C) == 0x000150, "Wrong size on UBPC_PlayerPerceptionSource_C");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_PlayerPerceptionSource_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, RangeForSurface) == 0x0000A8, "Member 'UBPC_PlayerPerceptionSource_C::RangeForSurface' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, LoudnessForSpeed) == 0x0000F8, "Member 'UBPC_PlayerPerceptionSource_C::LoudnessForSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, Player) == 0x000100, "Member 'UBPC_PlayerPerceptionSource_C::Player' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, AnimationBlueprint) == 0x000108, "Member 'UBPC_PlayerPerceptionSource_C::AnimationBlueprint' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, ItemEquippedRange) == 0x000110, "Member 'UBPC_PlayerPerceptionSource_C::ItemEquippedRange' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, ItemUsedRange) == 0x000118, "Member 'UBPC_PlayerPerceptionSource_C::ItemUsedRange' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, CurrentItem) == 0x000120, "Member 'UBPC_PlayerPerceptionSource_C::CurrentItem' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, LightStimulusDistance) == 0x000128, "Member 'UBPC_PlayerPerceptionSource_C::LightStimulusDistance' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, LightStimulusTimerHandle) == 0x000130, "Member 'UBPC_PlayerPerceptionSource_C::LightStimulusTimerHandle' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, Debug) == 0x000138, "Member 'UBPC_PlayerPerceptionSource_C::Debug' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, MaxVoiceNoiseDistance) == 0x000140, "Member 'UBPC_PlayerPerceptionSource_C::MaxVoiceNoiseDistance' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerPerceptionSource_C, NextVoiceNoise) == 0x000148, "Member 'UBPC_PlayerPerceptionSource_C::NextVoiceNoise' has a wrong offset!");

}

