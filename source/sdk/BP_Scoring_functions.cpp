#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Scoring

#include "Basic.hpp"

#include "BP_Scoring_classes.hpp"
#include "BP_Scoring_parameters.hpp"


namespace SDK
{

// Function BP_Scoring.BP_Scoring_C.CanCreateCapture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::CanCreateCapture(class ABP_Cameroid_C* Cameroid, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "CanCreateCapture");

	Params::BP_Scoring_C_CanCreateCapture Parms{};

	Parms.Cameroid = Cameroid;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Scoring.BP_Scoring_C.ComputeActorScore
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CaptureLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  CaptureRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  HorizontalHalfFov                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VerticalHalfFov                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HorizontalFov                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsScoring                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBPC_ScoringComponent_C**         Scoring                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double*                                 RelativeScore                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ComputeActorScore(class ABP_Cameroid_C* Cameroid, class AActor* Actor, const struct FVector& CaptureLocation, const struct FRotator& CaptureRotation, double HorizontalHalfFov, double VerticalHalfFov, double HorizontalFov, bool Debug, bool* IsScoring, class UBPC_ScoringComponent_C** Scoring, double* RelativeScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ComputeActorScore");

	Params::BP_Scoring_C_ComputeActorScore Parms{};

	Parms.Cameroid = Cameroid;
	Parms.Actor = Actor;
	Parms.CaptureLocation = std::move(CaptureLocation);
	Parms.CaptureRotation = std::move(CaptureRotation);
	Parms.HorizontalHalfFov = HorizontalHalfFov;
	Parms.VerticalHalfFov = VerticalHalfFov;
	Parms.HorizontalFov = HorizontalFov;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (IsScoring != nullptr)
		*IsScoring = Parms.IsScoring;

	if (Scoring != nullptr)
		*Scoring = Parms.Scoring;

	if (RelativeScore != nullptr)
		*RelativeScore = Parms.RelativeScore;
}


// Function BP_Scoring.BP_Scoring_C.ComputeActorScores
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CaptureLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  CaptureRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  HorizontalFov                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_CameroidActorScore>*   ActorsScores                                           (Parm, OutParm)

void ABP_Scoring_C::ComputeActorScores(class ABP_Cameroid_C* Cameroid, const struct FVector& CaptureLocation, const struct FRotator& CaptureRotation, double HorizontalFov, bool Debug, TArray<struct FS_CameroidActorScore>* ActorsScores)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ComputeActorScores");

	Params::BP_Scoring_C_ComputeActorScores Parms{};

	Parms.Cameroid = Cameroid;
	Parms.CaptureLocation = std::move(CaptureLocation);
	Parms.CaptureRotation = std::move(CaptureRotation);
	Parms.HorizontalFov = HorizontalFov;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (ActorsScores != nullptr)
		*ActorsScores = std::move(Parms.ActorsScores);
}


// Function BP_Scoring.BP_Scoring_C.ComputeAngleScore
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>&                 Points                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<bool>&                           PointsVisibility                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FVector&                   CaptureLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HorizontalFov                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 AngleScore                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ComputeAngleScore(TArray<struct FVector>& Points, TArray<bool>& PointsVisibility, const struct FVector& CaptureLocation, double HorizontalFov, double* AngleScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ComputeAngleScore");

	Params::BP_Scoring_C_ComputeAngleScore Parms{};

	Parms.Points = std::move(Points);
	Parms.PointsVisibility = std::move(PointsVisibility);
	Parms.CaptureLocation = std::move(CaptureLocation);
	Parms.HorizontalFov = HorizontalFov;

	UObject::ProcessEvent(Func, &Parms);

	Points = std::move(Parms.Points);
	PointsVisibility = std::move(Parms.PointsVisibility);

	if (AngleScore != nullptr)
		*AngleScore = Parms.AngleScore;
}


// Function BP_Scoring.BP_Scoring_C.ComputeCaptureScore
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_CameroidActorScore>&   ActorsScores                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<E_ScoringTag>&                   Tags_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FS_ScoringCategory&        Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32*                                  Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ComputeCaptureScore(TArray<struct FS_CameroidActorScore>& ActorsScores, TArray<E_ScoringTag>& Tags_0, const struct FS_ScoringCategory& Category, int32* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ComputeCaptureScore");

	Params::BP_Scoring_C_ComputeCaptureScore Parms{};

	Parms.ActorsScores = std::move(ActorsScores);
	Parms.Tags_0 = std::move(Tags_0);
	Parms.Category = std::move(Category);

	UObject::ProcessEvent(Func, &Parms);

	ActorsScores = std::move(Parms.ActorsScores);
	Tags_0 = std::move(Parms.Tags_0);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_Scoring.BP_Scoring_C.ComputeDirectionScore
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_ScoringComponent_C*          Scoring                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  CaptureRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ComputeDirectionScore(class UBPC_ScoringComponent_C* Scoring, const struct FRotator& CaptureRotation, double* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ComputeDirectionScore");

	Params::BP_Scoring_C_ComputeDirectionScore Parms{};

	Parms.Scoring = Scoring;
	Parms.CaptureRotation = std::move(CaptureRotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_Scoring.BP_Scoring_C.ComputeVisibilityScore
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBPC_ScoringComponent_C*          Scoring                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ScoringActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CaptureLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  CaptureRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  HorizontalHalfFov                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VerticalHalfFov                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 VisibilityScore                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>*                 SamplePoints                                           (Parm, OutParm)
// TArray<bool>*                           PointsVisibility                                       (Parm, OutParm)

void ABP_Scoring_C::ComputeVisibilityScore(class ABP_Cameroid_C* Cameroid, class UBPC_ScoringComponent_C* Scoring, class AActor* ScoringActor, const struct FVector& CaptureLocation, const struct FRotator& CaptureRotation, double HorizontalHalfFov, double VerticalHalfFov, bool Debug, double* VisibilityScore, TArray<struct FVector>* SamplePoints, TArray<bool>* PointsVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ComputeVisibilityScore");

	Params::BP_Scoring_C_ComputeVisibilityScore Parms{};

	Parms.Cameroid = Cameroid;
	Parms.Scoring = Scoring;
	Parms.ScoringActor = ScoringActor;
	Parms.CaptureLocation = std::move(CaptureLocation);
	Parms.CaptureRotation = std::move(CaptureRotation);
	Parms.HorizontalHalfFov = HorizontalHalfFov;
	Parms.VerticalHalfFov = VerticalHalfFov;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (VisibilityScore != nullptr)
		*VisibilityScore = Parms.VisibilityScore;

	if (SamplePoints != nullptr)
		*SamplePoints = std::move(Parms.SamplePoints);

	if (PointsVisibility != nullptr)
		*PointsVisibility = std::move(Parms.PointsVisibility);
}


// Function BP_Scoring.BP_Scoring_C.ContainsActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_CameroidActorScore>&   ActorsScores                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_ScoringActor                          Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ScoringActorState                     State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSet<int32>&                            IgnoredActors                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ContainsActor(TArray<struct FS_CameroidActorScore>& ActorsScores, E_ScoringActor Actor, E_ScoringActorState State, TSet<int32>& IgnoredActors, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ContainsActor");

	Params::BP_Scoring_C_ContainsActor Parms{};

	Parms.ActorsScores = std::move(ActorsScores);
	Parms.Actor = Actor;
	Parms.State = State;
	Parms.IgnoredActors = std::move(IgnoredActors);

	UObject::ProcessEvent(Func, &Parms);

	ActorsScores = std::move(Parms.ActorsScores);
	IgnoredActors = std::move(Parms.IgnoredActors);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Scoring.BP_Scoring_C.ContainsActorGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_CameroidActorScore>&   ActorsScores                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_ScoringActorGroup                     Group                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ScoringActorState                     State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSet<int32>&                            IgnoredActors                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ContainsActorGroup(TArray<struct FS_CameroidActorScore>& ActorsScores, E_ScoringActorGroup Group, E_ScoringActorState State, TSet<int32>& IgnoredActors, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ContainsActorGroup");

	Params::BP_Scoring_C_ContainsActorGroup Parms{};

	Parms.ActorsScores = std::move(ActorsScores);
	Parms.Group = Group;
	Parms.State = State;
	Parms.IgnoredActors = std::move(IgnoredActors);

	UObject::ProcessEvent(Func, &Parms);

	ActorsScores = std::move(Parms.ActorsScores);
	IgnoredActors = std::move(Parms.IgnoredActors);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Scoring.BP_Scoring_C.ContainsCombo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_ScoringCombo&           Combo                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TArray<struct FS_CameroidActorScore>&   ActorsScores                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<E_ScoringTag>&                   Tags_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ContainsCombo(const struct FS_ScoringCombo& Combo, TArray<struct FS_CameroidActorScore>& ActorsScores, TArray<E_ScoringTag>& Tags_0, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ContainsCombo");

	Params::BP_Scoring_C_ContainsCombo Parms{};

	Parms.Combo = std::move(Combo);
	Parms.ActorsScores = std::move(ActorsScores);
	Parms.Tags_0 = std::move(Tags_0);

	UObject::ProcessEvent(Func, &Parms);

	ActorsScores = std::move(Parms.ActorsScores);
	Tags_0 = std::move(Parms.Tags_0);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Scoring.BP_Scoring_C.ContainsComboItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_ScoringComboItem&       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_CameroidActorScore>&   ActorsScores                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<E_ScoringTag>&                   Tags_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TSet<int32>&                            IgnoredActors                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ContainsComboItem(const struct FS_ScoringComboItem& Item, TArray<struct FS_CameroidActorScore>& ActorsScores, TArray<E_ScoringTag>& Tags_0, TSet<int32>& IgnoredActors, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ContainsComboItem");

	Params::BP_Scoring_C_ContainsComboItem Parms{};

	Parms.Item = std::move(Item);
	Parms.ActorsScores = std::move(ActorsScores);
	Parms.Tags_0 = std::move(Tags_0);
	Parms.IgnoredActors = std::move(IgnoredActors);

	UObject::ProcessEvent(Func, &Parms);

	ActorsScores = std::move(Parms.ActorsScores);
	Tags_0 = std::move(Parms.Tags_0);
	IgnoredActors = std::move(Parms.IgnoredActors);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Scoring.BP_Scoring_C.ContainsTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_ScoringTag>&                   Tags_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_ScoringTag                            Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ContainsTag(TArray<E_ScoringTag>& Tags_0, E_ScoringTag Tag, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ContainsTag");

	Params::BP_Scoring_C_ContainsTag Parms{};

	Parms.Tags_0 = std::move(Tags_0);
	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);

	Tags_0 = std::move(Parms.Tags_0);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Scoring.BP_Scoring_C.CreateActorScore
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_ScoringComponent_C*          Scoring                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  RelativeScore                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CameroidActorScore*           ActorScore                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::CreateActorScore(class UBPC_ScoringComponent_C* Scoring, double RelativeScore, struct FS_CameroidActorScore* ActorScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "CreateActorScore");

	Params::BP_Scoring_C_CreateActorScore Parms{};

	Parms.Scoring = Scoring;
	Parms.RelativeScore = RelativeScore;

	UObject::ProcessEvent(Func, &Parms);

	if (ActorScore != nullptr)
		*ActorScore = std::move(Parms.ActorScore);
}


// Function BP_Scoring.BP_Scoring_C.CreateCapture
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CaptureLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  CaptureRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  HorizontalFov                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CameroidCapture*              Capture                                                (Parm, OutParm, HasGetValueTypeHash)

void ABP_Scoring_C::CreateCapture(int32 CaptureId, class ABP_Cameroid_C* Cameroid, const struct FVector& CaptureLocation, const struct FRotator& CaptureRotation, double HorizontalFov, bool Debug, struct FS_CameroidCapture* Capture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "CreateCapture");

	Params::BP_Scoring_C_CreateCapture Parms{};

	Parms.CaptureId = CaptureId;
	Parms.Cameroid = Cameroid;
	Parms.CaptureLocation = std::move(CaptureLocation);
	Parms.CaptureRotation = std::move(CaptureRotation);
	Parms.HorizontalFov = HorizontalFov;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (Capture != nullptr)
		*Capture = std::move(Parms.Capture);
}


// Function BP_Scoring.BP_Scoring_C.CreateSave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ScoringSave_C**               ScoringSave                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::CreateSave(class UBP_ScoringSave_C** ScoringSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "CreateSave");

	Params::BP_Scoring_C_CreateSave Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ScoringSave != nullptr)
		*ScoringSave = Parms.ScoringSave;
}


// Function BP_Scoring.BP_Scoring_C.ExecuteUbergraph_BP_Scoring
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ExecuteUbergraph_BP_Scoring(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ExecuteUbergraph_BP_Scoring");

	Params::BP_Scoring_C_ExecuteUbergraph_BP_Scoring Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scoring.BP_Scoring_C.FindCategory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ScoringCategory                       ECategory                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_ScoringCategory*              Category                                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_Scoring_C::FindCategory(E_ScoringCategory ECategory, struct FS_ScoringCategory* Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "FindCategory");

	Params::BP_Scoring_C_FindCategory Parms{};

	Parms.ECategory = ECategory;

	UObject::ProcessEvent(Func, &Parms);

	if (Category != nullptr)
		*Category = std::move(Parms.Category);
}


// Function BP_Scoring.BP_Scoring_C.GetActiveScoringComponent
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBPC_ScoringComponent_C**         Scoring                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::GetActiveScoringComponent(class AActor* Actor, class UBPC_ScoringComponent_C** Scoring)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetActiveScoringComponent");

	Params::BP_Scoring_C_GetActiveScoringComponent Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Scoring != nullptr)
		*Scoring = Parms.Scoring;
}


// Function BP_Scoring.BP_Scoring_C.GetGroups
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ScoringActor                          Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<E_ScoringActorGroup>*            Groups                                                 (Parm, OutParm)

void ABP_Scoring_C::GetGroups(E_ScoringActor Actor, TArray<E_ScoringActorGroup>* Groups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetGroups");

	Params::BP_Scoring_C_GetGroups Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Groups != nullptr)
		*Groups = std::move(Parms.Groups);
}


// Function BP_Scoring.BP_Scoring_C.GetNewCaptureID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  CaptureId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::GetNewCaptureID(int32* CaptureId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetNewCaptureID");

	Params::BP_Scoring_C_GetNewCaptureID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CaptureId != nullptr)
		*CaptureId = Parms.CaptureId;
}


// Function BP_Scoring.BP_Scoring_C.GetPointsVisibility
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>&                 Points                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FVector&                   CaptureLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  CaptureRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  HorizontalHalfFov                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VerticalHalfFov                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<bool>*                           PointsVisbility                                        (Parm, OutParm)
// int32*                                  VisiblePointsCount                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::GetPointsVisibility(class ABP_Cameroid_C* Cameroid, class AActor* Actor, TArray<struct FVector>& Points, const struct FVector& CaptureLocation, const struct FRotator& CaptureRotation, double HorizontalHalfFov, double VerticalHalfFov, bool Debug, TArray<bool>* PointsVisbility, int32* VisiblePointsCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetPointsVisibility");

	Params::BP_Scoring_C_GetPointsVisibility Parms{};

	Parms.Cameroid = Cameroid;
	Parms.Actor = Actor;
	Parms.Points = std::move(Points);
	Parms.CaptureLocation = std::move(CaptureLocation);
	Parms.CaptureRotation = std::move(CaptureRotation);
	Parms.HorizontalHalfFov = HorizontalHalfFov;
	Parms.VerticalHalfFov = VerticalHalfFov;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	Points = std::move(Parms.Points);

	if (PointsVisbility != nullptr)
		*PointsVisbility = std::move(Parms.PointsVisbility);

	if (VisiblePointsCount != nullptr)
		*VisiblePointsCount = Parms.VisiblePointsCount;
}


// Function BP_Scoring.BP_Scoring_C.GetPointVisibility
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CaptureLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  CaptureRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  HorizontalHalfFov                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VerticalHalfFov                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsVisible                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::GetPointVisibility(class ABP_Cameroid_C* Cameroid, class AActor* Actor, const struct FVector& Point, const struct FVector& CaptureLocation, const struct FRotator& CaptureRotation, double HorizontalHalfFov, double VerticalHalfFov, bool Debug, bool* IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetPointVisibility");

	Params::BP_Scoring_C_GetPointVisibility Parms{};

	Parms.Cameroid = Cameroid;
	Parms.Actor = Actor;
	Parms.Point = std::move(Point);
	Parms.CaptureLocation = std::move(CaptureLocation);
	Parms.CaptureRotation = std::move(CaptureRotation);
	Parms.HorizontalHalfFov = HorizontalHalfFov;
	Parms.VerticalHalfFov = VerticalHalfFov;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (IsVisible != nullptr)
		*IsVisible = Parms.IsVisible;
}


// Function BP_Scoring.BP_Scoring_C.GetSamplePoints
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   BoxExtent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BoundsScale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Debug                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>*                 SamplePoints                                           (Parm, OutParm)

void ABP_Scoring_C::GetSamplePoints(const struct FVector& Origin, const struct FVector& BoxExtent, double BoundsScale, bool Debug, TArray<struct FVector>* SamplePoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetSamplePoints");

	Params::BP_Scoring_C_GetSamplePoints Parms{};

	Parms.Origin = std::move(Origin);
	Parms.BoxExtent = std::move(BoxExtent);
	Parms.BoundsScale = BoundsScale;
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (SamplePoints != nullptr)
		*SamplePoints = std::move(Parms.SamplePoints);
}


// Function BP_Scoring.BP_Scoring_C.GetScoringActorGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ScoringActorGroup                     GroupEnum                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_ScoringActorGroup*            Group                                                  (Parm, OutParm, HasGetValueTypeHash)

void ABP_Scoring_C::GetScoringActorGroup(E_ScoringActorGroup GroupEnum, struct FS_ScoringActorGroup* Group)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetScoringActorGroup");

	Params::BP_Scoring_C_GetScoringActorGroup Parms{};

	Parms.GroupEnum = GroupEnum;

	UObject::ProcessEvent(Func, &Parms);

	if (Group != nullptr)
		*Group = std::move(Parms.Group);
}


// Function BP_Scoring.BP_Scoring_C.GetScoringCategory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_CameroidActorScore>&   ActorsScores                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<E_ScoringTag>&                   Tags_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FS_ScoringCategory*              Category                                               (Parm, OutParm, HasGetValueTypeHash)

void ABP_Scoring_C::GetScoringCategory(TArray<struct FS_CameroidActorScore>& ActorsScores, TArray<E_ScoringTag>& Tags_0, struct FS_ScoringCategory* Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetScoringCategory");

	Params::BP_Scoring_C_GetScoringCategory Parms{};

	Parms.ActorsScores = std::move(ActorsScores);
	Parms.Tags_0 = std::move(Tags_0);

	UObject::ProcessEvent(Func, &Parms);

	ActorsScores = std::move(Parms.ActorsScores);
	Tags_0 = std::move(Parms.Tags_0);

	if (Category != nullptr)
		*Category = std::move(Parms.Category);
}


// Function BP_Scoring.BP_Scoring_C.GetScoringTags
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<E_ScoringTag>*                   Tags_0                                                 (Parm, OutParm)

void ABP_Scoring_C::GetScoringTags(class ABP_Cameroid_C* Cameroid, TArray<E_ScoringTag>* Tags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetScoringTags");

	Params::BP_Scoring_C_GetScoringTags Parms{};

	Parms.Cameroid = Cameroid;

	UObject::ProcessEvent(Func, &Parms);

	if (Tags_0 != nullptr)
		*Tags_0 = std::move(Parms.Tags_0);
}


// Function BP_Scoring.BP_Scoring_C.GetStateMultiplier
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_ScoringActorState                     State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 StateMultiplier                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::GetStateMultiplier(E_ScoringActorState State, double* StateMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetStateMultiplier");

	Params::BP_Scoring_C_GetStateMultiplier Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (StateMultiplier != nullptr)
		*StateMultiplier = Parms.StateMultiplier;
}


// Function BP_Scoring.BP_Scoring_C.GetVariantMultiplier
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_ScoringActorVariant                   Variant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 VariantMultiplier                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::GetVariantMultiplier(E_ScoringActorVariant Variant, double* VariantMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "GetVariantMultiplier");

	Params::BP_Scoring_C_GetVariantMultiplier Parms{};

	Parms.Variant = Variant;

	UObject::ProcessEvent(Func, &Parms);

	if (VariantMultiplier != nullptr)
		*VariantMultiplier = Parms.VariantMultiplier;
}


// Function BP_Scoring.BP_Scoring_C.IsStateCompatible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_ScoringActorState                     WantedState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ScoringActorState                     ActorState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::IsStateCompatible(E_ScoringActorState WantedState, E_ScoringActorState ActorState, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "IsStateCompatible");

	Params::BP_Scoring_C_IsStateCompatible Parms{};

	Parms.WantedState = WantedState;
	Parms.ActorState = ActorState;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_Scoring.BP_Scoring_C.IsValidScoringActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBPC_ScoringComponent_C**         ScoringComponent                                       (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::IsValidScoringActor(class ABP_Cameroid_C* Cameroid, class AActor* Actor, bool* IsValid, class UBPC_ScoringComponent_C** ScoringComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "IsValidScoringActor");

	Params::BP_Scoring_C_IsValidScoringActor Parms{};

	Parms.Cameroid = Cameroid;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (ScoringComponent != nullptr)
		*ScoringComponent = Parms.ScoringComponent;
}


// Function BP_Scoring.BP_Scoring_C.LoadFromDisk
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Scoring_C::LoadFromDisk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "LoadFromDisk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scoring.BP_Scoring_C.LoadSave
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          SaveObject                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::LoadSave(class UObject* SaveObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "LoadSave");

	Params::BP_Scoring_C_LoadSave Parms{};

	Parms.SaveObject = SaveObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scoring.BP_Scoring_C.MakeCapture
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Cameroid_C*                   Cameroid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_CameroidActorScore>&   ActorsScores                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<E_ScoringTag>&                   Tags_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_ScoringCategory                       ScoringCategory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CameroidCapture*              Capture                                                (Parm, OutParm, HasGetValueTypeHash)

void ABP_Scoring_C::MakeCapture(int32 CaptureId, class ABP_Cameroid_C* Cameroid, TArray<struct FS_CameroidActorScore>& ActorsScores, TArray<E_ScoringTag>& Tags_0, E_ScoringCategory ScoringCategory, int32 Score, struct FS_CameroidCapture* Capture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "MakeCapture");

	Params::BP_Scoring_C_MakeCapture Parms{};

	Parms.CaptureId = CaptureId;
	Parms.Cameroid = Cameroid;
	Parms.ActorsScores = std::move(ActorsScores);
	Parms.Tags_0 = std::move(Tags_0);
	Parms.ScoringCategory = ScoringCategory;
	Parms.Score = Score;

	UObject::ProcessEvent(Func, &Parms);

	ActorsScores = std::move(Parms.ActorsScores);
	Tags_0 = std::move(Parms.Tags_0);

	if (Capture != nullptr)
		*Capture = std::move(Parms.Capture);
}


// Function BP_Scoring.BP_Scoring_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Scoring_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Scoring.BP_Scoring_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Scoring_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "ReceiveEndPlay");

	Params::BP_Scoring_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Scoring.BP_Scoring_C.SaveToDisk
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Scoring_C::SaveToDisk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Scoring_C", "SaveToDisk");

	UObject::ProcessEvent(Func, nullptr);
}

}

