#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Episodes

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_EpisodeDefinition_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Episodes.BP_Episodes_C
// 0x00B8 (0x0350 - 0x0298)
class ABP_Episodes_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 SaveSlotName;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FS_EpisodeDefinition>           EpisodeDefinitions;                                // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_UPGameState_C*                      GameState;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_EpisodeDefinition                   EpisodeDefinition;                                 // 0x02D8(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         MapIndex;                                          // 0x02F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentDay;                                        // 0x02FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDays;                                         // 0x0300(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPoints;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastSessionPoints;                                 // 0x0308(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastTotalPoints;                                   // 0x030C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_EpisodeDefinition                   LastEpisodeDefinition;                             // 0x0310(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          LastEpisodeFailed;                                 // 0x0330(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_Episodes_C* Episodes)> OnDayEnded__All_;                 // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FreshStart;                                        // 0x0348(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyCustomGameConfig();
	void ArePlayerStatesReady(bool* Ready);
	void CheckEpisodeEndAchievements();
	void CheckPerfectScoreAchievement();
	void CheckPlayersCountAchievements();
	void CheckScoreAchievements();
	void CheckTopCapturesAchivements();
	void CreateSave(class UBP_EpisodesSave_C** OutputPin);
	void CreateWidgetIfNeeded();
	void DayEnded(int32 SessionPoints);
	void EndEpisode(bool Failure);
	void ExecuteUbergraph_BP_Episodes(int32 EntryPoint);
	void GetDeadPlayerNames(TArray<class FString>* PlayerNames);
	void GetEpisodeDefinition(int32 Difficulty, struct FS_EpisodeDefinition* EpisodeDefinition_0);
	void GetMaxDifficulty(int32* MaxDifficulty);
	void GetNextSessionMap(class FString* MapName);
	void GetRemainingDays(int32* RemainingDays);
	void GiveReward(int32 Reward);
	void Init__All_();
	void Init__Server_();
	void LoadEpisodes();
	void LoadSave(class USaveGame* SaveObject);
	void Multicast_OnDayEnded();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ResetProgression();
	void RestartFromZero(bool Failure);
	void SaveEpisodes();
	void StartNewEpisode(int32 Difficulty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Episodes_C">();
	}
	static class ABP_Episodes_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Episodes_C>();
	}
};
static_assert(alignof(ABP_Episodes_C) == 0x000008, "Wrong alignment on ABP_Episodes_C");
static_assert(sizeof(ABP_Episodes_C) == 0x000350, "Wrong size on ABP_Episodes_C");
static_assert(offsetof(ABP_Episodes_C, UberGraphFrame) == 0x000298, "Member 'ABP_Episodes_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_Episodes_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, SaveSlotName) == 0x0002A8, "Member 'ABP_Episodes_C::SaveSlotName' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, EpisodeDefinitions) == 0x0002B8, "Member 'ABP_Episodes_C::EpisodeDefinitions' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, GameInstance) == 0x0002C8, "Member 'ABP_Episodes_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, GameState) == 0x0002D0, "Member 'ABP_Episodes_C::GameState' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, EpisodeDefinition) == 0x0002D8, "Member 'ABP_Episodes_C::EpisodeDefinition' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, MapIndex) == 0x0002F8, "Member 'ABP_Episodes_C::MapIndex' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, CurrentDay) == 0x0002FC, "Member 'ABP_Episodes_C::CurrentDay' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, TotalDays) == 0x000300, "Member 'ABP_Episodes_C::TotalDays' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, CurrentPoints) == 0x000304, "Member 'ABP_Episodes_C::CurrentPoints' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, LastSessionPoints) == 0x000308, "Member 'ABP_Episodes_C::LastSessionPoints' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, LastTotalPoints) == 0x00030C, "Member 'ABP_Episodes_C::LastTotalPoints' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, LastEpisodeDefinition) == 0x000310, "Member 'ABP_Episodes_C::LastEpisodeDefinition' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, LastEpisodeFailed) == 0x000330, "Member 'ABP_Episodes_C::LastEpisodeFailed' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, OnDayEnded__All_) == 0x000338, "Member 'ABP_Episodes_C::OnDayEnded__All_' has a wrong offset!");
static_assert(offsetof(ABP_Episodes_C, FreshStart) == 0x000348, "Member 'ABP_Episodes_C::FreshStart' has a wrong offset!");

}

