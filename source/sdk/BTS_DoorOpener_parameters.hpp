#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_DoorOpener

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTS_DoorOpener.BTS_DoorOpener_C.ExecuteUbergraph_BTS_DoorOpener
// 0x0050 (0x0050 - 0x0000)
struct BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_InteractableDoor_C*                 CallFunc_GetDoor_Door;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener) == 0x000008, "Wrong alignment on BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener");
static_assert(sizeof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener) == 0x000050, "Wrong size on BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, EntryPoint) == 0x000000, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, K2Node_Event_OwnerController_2) == 0x000008, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, K2Node_Event_ControlledPawn_2) == 0x000010, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, CallFunc_GetDoor_Door) == 0x000020, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::CallFunc_GetDoor_Door' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, K2Node_Event_OwnerController_1) == 0x000028, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, K2Node_Event_ControlledPawn_1) == 0x000030, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, K2Node_Event_OwnerController) == 0x000040, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener, K2Node_Event_ControlledPawn) == 0x000048, "Member 'BTS_DoorOpener_C_ExecuteUbergraph_BTS_DoorOpener::K2Node_Event_ControlledPawn' has a wrong offset!");

// Function BTS_DoorOpener.BTS_DoorOpener_C.GetDoor
// 0x0110 (0x0110 - 0x0000)
struct BTS_DoorOpener_C_GetDoor final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_InteractableDoor_C*                 Door;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0080(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue;             // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x00D8(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_InteractableDoor_C*                 K2Node_DynamicCast_AsBP_Interactable_Door;         // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_DoorOpener_C_GetDoor) == 0x000008, "Wrong alignment on BTS_DoorOpener_C_GetDoor");
static_assert(sizeof(BTS_DoorOpener_C_GetDoor) == 0x000110, "Wrong size on BTS_DoorOpener_C_GetDoor");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, Pawn) == 0x000000, "Member 'BTS_DoorOpener_C_GetDoor::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, Door) == 0x000008, "Member 'BTS_DoorOpener_C_GetDoor::Door' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, K2Node_MakeArray_Array) == 0x000010, "Member 'BTS_DoorOpener_C_GetDoor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_GetVelocity_ReturnValue) == 0x000038, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Normal_ReturnValue) == 0x000058, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, Temp_int_Array_Index_Variable) == 0x000070, "Member 'BTS_DoorOpener_C_GetDoor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'BTS_DoorOpener_C_GetDoor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, K2Node_MakeArray_Array_1) == 0x000080, "Member 'BTS_DoorOpener_C_GetDoor::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Conv_IntToVector_ReturnValue) == 0x000090, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Conv_IntToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000A8, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C0, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_SphereOverlapActors_OutActors) == 0x0000D8, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_SphereOverlapActors_ReturnValue) == 0x0000E8, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Array_Length_ReturnValue) == 0x0000EC, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Less_IntInt_ReturnValue) == 0x0000F0, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, K2Node_DynamicCast_AsBP_Interactable_Door) == 0x000100, "Member 'BTS_DoorOpener_C_GetDoor::K2Node_DynamicCast_AsBP_Interactable_Door' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'BTS_DoorOpener_C_GetDoor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_Not_PreBool_ReturnValue) == 0x000109, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_GetDoor, CallFunc_BooleanAND_ReturnValue) == 0x00010A, "Member 'BTS_DoorOpener_C_GetDoor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BTS_DoorOpener.BTS_DoorOpener_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_DoorOpener_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_DoorOpener_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BTS_DoorOpener_C_ReceiveActivationAI");
static_assert(sizeof(BTS_DoorOpener_C_ReceiveActivationAI) == 0x000010, "Wrong size on BTS_DoorOpener_C_ReceiveActivationAI");
static_assert(offsetof(BTS_DoorOpener_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BTS_DoorOpener_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ReceiveActivationAI, ControlledPawn) == 0x000008, "Member 'BTS_DoorOpener_C_ReceiveActivationAI::ControlledPawn' has a wrong offset!");

// Function BTS_DoorOpener.BTS_DoorOpener_C.ReceiveDeactivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_DoorOpener_C_ReceiveDeactivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_DoorOpener_C_ReceiveDeactivationAI) == 0x000008, "Wrong alignment on BTS_DoorOpener_C_ReceiveDeactivationAI");
static_assert(sizeof(BTS_DoorOpener_C_ReceiveDeactivationAI) == 0x000010, "Wrong size on BTS_DoorOpener_C_ReceiveDeactivationAI");
static_assert(offsetof(BTS_DoorOpener_C_ReceiveDeactivationAI, OwnerController) == 0x000000, "Member 'BTS_DoorOpener_C_ReceiveDeactivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ReceiveDeactivationAI, ControlledPawn) == 0x000008, "Member 'BTS_DoorOpener_C_ReceiveDeactivationAI::ControlledPawn' has a wrong offset!");

// Function BTS_DoorOpener.BTS_DoorOpener_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_DoorOpener_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_DoorOpener_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_DoorOpener_C_ReceiveTickAI");
static_assert(sizeof(BTS_DoorOpener_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_DoorOpener_C_ReceiveTickAI");
static_assert(offsetof(BTS_DoorOpener_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_DoorOpener_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_DoorOpener_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_DoorOpener_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_DoorOpener_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

}

