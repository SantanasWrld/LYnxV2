#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPPlayerState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_PlayerAvatar_structs.hpp"
#include "S_InventoryItemSave_structs.hpp"
#include "E_InventoryItem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UPPlayerState.BP_UPPlayerState_C
// 0x0070 (0x03C0 - 0x0350)
class ABP_UPPlayerState_C final : public APlayerState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_UPGameState_C*                      GameState;                                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int64                                         SteamID;                                           // 0x0368(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FString                                 PlayerName;                                        // 0x0370(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	E_PlayerAvatar                                PlayerAvatar;                                      // 0x0380(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0381(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_InventoryItemSave>           Inventory;                                         // 0x0388(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class UTexture2D*                             ProfilePicture;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_UPPlayerState_C* PlayerState)> OnAvatarChanged;          // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsInit;                                            // 0x03B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddInventoryItem(E_InventoryItem Item, class ABP_InventoryItem_C* SpawnedItem);
	void AddMinimumItems();
	void AskPlayername();
	void CheckPlayername();
	void ClearIfNeeded();
	void CreateSave(class UBP_UPPlayerStateSave_C** Save);
	void ExecuteUbergraph_BP_UPPlayerState(int32 EntryPoint);
	void GetPlayerCharacter(class ABP_UPPlayerCharacter_C** Player);
	void GetSaveSlotName(class FString* SlotName);
	void Initialize();
	void InitInventory(class ABP_UPPlayerCharacter_C* Player);
	void ItemsRecoveredNotification();
	void LoadSave();
	void OnRep_PlayerAvatar();
	void OnRep_SteamId();
	void PlayerJoinedNotification();
	void PlayerKilled(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void PlayerLeftNotification(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RegisterToDeath(class ABP_UPPlayerCharacter_C* Player);
	void SaveData();
	void ShouldResetInventory(bool* Reset);
	void UpdateInventoryItems();
	void UpdatePlayerAvatar(E_PlayerAvatar Avatar);
	void UpdatePlayername(const class FString& PlayerName_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UPPlayerState_C">();
	}
	static class ABP_UPPlayerState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UPPlayerState_C>();
	}
};
static_assert(alignof(ABP_UPPlayerState_C) == 0x000008, "Wrong alignment on ABP_UPPlayerState_C");
static_assert(sizeof(ABP_UPPlayerState_C) == 0x0003C0, "Wrong size on ABP_UPPlayerState_C");
static_assert(offsetof(ABP_UPPlayerState_C, UberGraphFrame) == 0x000350, "Member 'ABP_UPPlayerState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, DefaultSceneRoot) == 0x000358, "Member 'ABP_UPPlayerState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, GameState) == 0x000360, "Member 'ABP_UPPlayerState_C::GameState' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, SteamID) == 0x000368, "Member 'ABP_UPPlayerState_C::SteamID' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, PlayerName) == 0x000370, "Member 'ABP_UPPlayerState_C::PlayerName' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, PlayerAvatar) == 0x000380, "Member 'ABP_UPPlayerState_C::PlayerAvatar' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, IsDead) == 0x000381, "Member 'ABP_UPPlayerState_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, Inventory) == 0x000388, "Member 'ABP_UPPlayerState_C::Inventory' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, ProfilePicture) == 0x000398, "Member 'ABP_UPPlayerState_C::ProfilePicture' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, OnAvatarChanged) == 0x0003A0, "Member 'ABP_UPPlayerState_C::OnAvatarChanged' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, IsInit) == 0x0003B0, "Member 'ABP_UPPlayerState_C::IsInit' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerState_C, GameInstance) == 0x0003B8, "Member 'ABP_UPPlayerState_C::GameInstance' has a wrong offset!");

}

