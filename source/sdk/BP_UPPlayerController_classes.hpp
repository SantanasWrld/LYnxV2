#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPPlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UPPlayerController.BP_UPPlayerController_C
// 0x0170 (0x09C8 - 0x0858)
class ABP_UPPlayerController_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_NavDataReference_C*                NavDataReference;                                  // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int64                                         SteamID;                                           // 0x0870(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UCameraShakeBase*>          CameraShakes;                                      // 0x0878(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         NextCameraShakeIndex;                              // 0x08C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8CC[0x4];                                      // 0x08CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_HudParent_C*                         HudParent;                                         // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_MainMenu_C*                          MainMenuWidget;                                    // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool IsUsingGamepad)> OnGamepadUsageChanged;                       // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FString, class UTexture2D*>        KeyboardIcons;                                     // 0x08F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class UTexture2D*>        GamepadIcons;                                      // 0x0940(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 SaveSlotName;                                      // 0x0990(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        RenderAspectRatio;                                 // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalRenderRatio;                               // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_VoiceChat_C*                        VoiceChat;                                         // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UW_GamepadFocusHighlight_C*             GamepadFocusHighlight;                             // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EnsurePlayerSpawnTimer;                            // 0x09C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddHudWidget(class UClass* WidgetClass, int32 Priority, class UUserWidget** Widget);
	void AskForCapture(int32 CaptureId);
	void CheckSteamId(bool* IsValid, int64* SteamID_0);
	void CreateCaptureRequest(int32 CaptureId);
	void EnsurePlayerSpawn();
	void ExecuteUbergraph_BP_UPPlayerController(int32 EntryPoint);
	void FetchSteamId__Client_();
	void FindDeadPlayerWithId(int64 SteamID_0, class ABP_UPPlayerCharacter_C** Player_0);
	void FixDeadPlayerReconnecting(class ABP_UPPlayerCharacter_C* DeadPlayer);
	void ForceDisconnect();
	void GetCameraShakeIndex(int32* Index_0);
	void GetHudParent(class UW_HudParent_C** HudParent_0);
	void GetInputKey(class UInputAction* InputAction, class FString* Key, class UTexture2D** Icon);
	void GetSteamID(bool* IsValid, int64* SteamID_0);
	void InitAspectRatio();
	void InitGamepadFocusHighlight();
	void InitMainMenu();
	void InitPushToTalk();
	void InitUI();
	void InpActEvt_A_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Down_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Right_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_IA_MainMenu_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MuteMicrophone_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Left_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Right_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_Up_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Z_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpAxisKeyEvt_Gamepad_Left2D_K2Node_InputVectorAxisEvent_1(const struct FVector& AxisValue);
	void IsPressingGamepad(class UInputAction* InputAction, bool* Result);
	void ItemsRecoveredNotification();
	void PlayerJoinedNotification(const class FString& PlayerName);
	void PlayerLeftNotification(const class FString& PlayerName);
	void PlayerSettingsChanged();
	void ReceiveBeginPlay();
	void ReceivePossess(class APawn* PossessedPawn);
	void SetMainMenuVisibility(bool Visible);
	void SetMappingContextEnabled(const class UInputMappingContext* MappingContext, int32 Priority, bool Enabled);
	void SetSteamId__Server_(int64 SteamID_0);
	void ShouldShowPlayerNotification(bool* Result);
	void ShowLocalNotification(const class FString& Notification);
	void StartCameraShake__Server_(TSubclassOf<class UCameraShakeBase> ShakeClass, float Scale, int32* CameraShakeIndex);
	void StartCameraShake_Client(TSubclassOf<class UCameraShakeBase> ShakeClass, float Scale, int32 CameraShakeIndex);
	void StopCameraShake(int32 CameraShakeIndex);
	void UpdateAspectRatio(const struct FVector2D& Size, double Ratio);
	void UpdateGamepadUsage(bool IsUsingGamepad);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UPPlayerController_C">();
	}
	static class ABP_UPPlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UPPlayerController_C>();
	}
};
static_assert(alignof(ABP_UPPlayerController_C) == 0x000008, "Wrong alignment on ABP_UPPlayerController_C");
static_assert(sizeof(ABP_UPPlayerController_C) == 0x0009C8, "Wrong size on ABP_UPPlayerController_C");
static_assert(offsetof(ABP_UPPlayerController_C, UberGraphFrame) == 0x000858, "Member 'ABP_UPPlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, NavDataReference) == 0x000860, "Member 'ABP_UPPlayerController_C::NavDataReference' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, GameInstance) == 0x000868, "Member 'ABP_UPPlayerController_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, SteamID) == 0x000870, "Member 'ABP_UPPlayerController_C::SteamID' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, CameraShakes) == 0x000878, "Member 'ABP_UPPlayerController_C::CameraShakes' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, NextCameraShakeIndex) == 0x0008C8, "Member 'ABP_UPPlayerController_C::NextCameraShakeIndex' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, HudParent) == 0x0008D0, "Member 'ABP_UPPlayerController_C::HudParent' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, MainMenuWidget) == 0x0008D8, "Member 'ABP_UPPlayerController_C::MainMenuWidget' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, OnGamepadUsageChanged) == 0x0008E0, "Member 'ABP_UPPlayerController_C::OnGamepadUsageChanged' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, KeyboardIcons) == 0x0008F0, "Member 'ABP_UPPlayerController_C::KeyboardIcons' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, GamepadIcons) == 0x000940, "Member 'ABP_UPPlayerController_C::GamepadIcons' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, SaveSlotName) == 0x000990, "Member 'ABP_UPPlayerController_C::SaveSlotName' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, RenderAspectRatio) == 0x0009A0, "Member 'ABP_UPPlayerController_C::RenderAspectRatio' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, VerticalRenderRatio) == 0x0009A8, "Member 'ABP_UPPlayerController_C::VerticalRenderRatio' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, VoiceChat) == 0x0009B0, "Member 'ABP_UPPlayerController_C::VoiceChat' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, GamepadFocusHighlight) == 0x0009B8, "Member 'ABP_UPPlayerController_C::GamepadFocusHighlight' has a wrong offset!");
static_assert(offsetof(ABP_UPPlayerController_C, EnsurePlayerSpawnTimer) == 0x0009C0, "Member 'ABP_UPPlayerController_C::EnsurePlayerSpawnTimer' has a wrong offset!");

}

