#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamIntegrationKit

#include "Basic.hpp"

#include "SteamIntegrationKit_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SteamIntegrationKit.HostMigrationSubsystem.StartHostMigration
// 0x0008 (0x0008 - 0x0000)
struct HostMigrationSubsystem_StartHostMigration final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HostMigrationSubsystem_StartHostMigration) == 0x000008, "Wrong alignment on HostMigrationSubsystem_StartHostMigration");
static_assert(sizeof(HostMigrationSubsystem_StartHostMigration) == 0x000008, "Wrong size on HostMigrationSubsystem_StartHostMigration");
static_assert(offsetof(HostMigrationSubsystem_StartHostMigration, LobbyID) == 0x000000, "Member 'HostMigrationSubsystem_StartHostMigration::LobbyID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoveDependency_AsyncFunction.RemoveDependency
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoveDependency_AsyncFunction_RemoveDependency final
{
public:
	struct FSIK_PublishedFileId                   ParentPublishedFileID;                             // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_PublishedFileId                   ChildPublishedFileID;                              // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_RemoveDependency_AsyncFunction*    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoveDependency_AsyncFunction_RemoveDependency) == 0x000008, "Wrong alignment on SIK_RemoveDependency_AsyncFunction_RemoveDependency");
static_assert(sizeof(SIK_RemoveDependency_AsyncFunction_RemoveDependency) == 0x000018, "Wrong size on SIK_RemoveDependency_AsyncFunction_RemoveDependency");
static_assert(offsetof(SIK_RemoveDependency_AsyncFunction_RemoveDependency, ParentPublishedFileID) == 0x000000, "Member 'SIK_RemoveDependency_AsyncFunction_RemoveDependency::ParentPublishedFileID' has a wrong offset!");
static_assert(offsetof(SIK_RemoveDependency_AsyncFunction_RemoveDependency, ChildPublishedFileID) == 0x000008, "Member 'SIK_RemoveDependency_AsyncFunction_RemoveDependency::ChildPublishedFileID' has a wrong offset!");
static_assert(offsetof(SIK_RemoveDependency_AsyncFunction_RemoveDependency, ReturnValue) == 0x000010, "Member 'SIK_RemoveDependency_AsyncFunction_RemoveDependency::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AddAppDependency_AsyncFunction.AddAppDependency
// 0x0018 (0x0018 - 0x0000)
struct SIK_AddAppDependency_AsyncFunction_AddAppDependency final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             AppID;                                             // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_AddAppDependency_AsyncFunction*    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AddAppDependency_AsyncFunction_AddAppDependency) == 0x000008, "Wrong alignment on SIK_AddAppDependency_AsyncFunction_AddAppDependency");
static_assert(sizeof(SIK_AddAppDependency_AsyncFunction_AddAppDependency) == 0x000018, "Wrong size on SIK_AddAppDependency_AsyncFunction_AddAppDependency");
static_assert(offsetof(SIK_AddAppDependency_AsyncFunction_AddAppDependency, PublishedFileId) == 0x000000, "Member 'SIK_AddAppDependency_AsyncFunction_AddAppDependency::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_AddAppDependency_AsyncFunction_AddAppDependency, AppID) == 0x000008, "Member 'SIK_AddAppDependency_AsyncFunction_AddAppDependency::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AddAppDependency_AsyncFunction_AddAppDependency, ReturnValue) == 0x000010, "Member 'SIK_AddAppDependency_AsyncFunction_AddAppDependency::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AddDependency_AsyncFunction.AddDependency
// 0x0018 (0x0018 - 0x0000)
struct SIK_AddDependency_AsyncFunction_AddDependency final
{
public:
	struct FSIK_PublishedFileId                   ParentPublishedFileID;                             // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_PublishedFileId                   ChildPublishedFileID;                              // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_AddDependency_AsyncFunction*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AddDependency_AsyncFunction_AddDependency) == 0x000008, "Wrong alignment on SIK_AddDependency_AsyncFunction_AddDependency");
static_assert(sizeof(SIK_AddDependency_AsyncFunction_AddDependency) == 0x000018, "Wrong size on SIK_AddDependency_AsyncFunction_AddDependency");
static_assert(offsetof(SIK_AddDependency_AsyncFunction_AddDependency, ParentPublishedFileID) == 0x000000, "Member 'SIK_AddDependency_AsyncFunction_AddDependency::ParentPublishedFileID' has a wrong offset!");
static_assert(offsetof(SIK_AddDependency_AsyncFunction_AddDependency, ChildPublishedFileID) == 0x000008, "Member 'SIK_AddDependency_AsyncFunction_AddDependency::ChildPublishedFileID' has a wrong offset!");
static_assert(offsetof(SIK_AddDependency_AsyncFunction_AddDependency, ReturnValue) == 0x000010, "Member 'SIK_AddDependency_AsyncFunction_AddDependency::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AddItemToFavorites_AsyncFunction.AddItemToFavorites
// 0x0018 (0x0018 - 0x0000)
struct SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_AddItemToFavorites_AsyncFunction*  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites) == 0x000008, "Wrong alignment on SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites");
static_assert(sizeof(SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites) == 0x000018, "Wrong size on SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites");
static_assert(offsetof(SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites, AppID) == 0x000000, "Member 'SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites, PublishedFileId) == 0x000008, "Member 'SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites, ReturnValue) == 0x000010, "Member 'SIK_AddItemToFavorites_AsyncFunction_AddItemToFavorites::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestEncryptedAppTicket_AsyncFunction.RequestEncryptedAppTicket
// 0x0018 (0x0018 - 0x0000)
struct SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket final
{
public:
	TArray<uint8>                                 EncryptedAppTicket;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USIK_RequestEncryptedAppTicket_AsyncFunction* ReturnValue;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket) == 0x000008, "Wrong alignment on SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket");
static_assert(sizeof(SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket) == 0x000018, "Wrong size on SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket");
static_assert(offsetof(SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket, EncryptedAppTicket) == 0x000000, "Member 'SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket::EncryptedAppTicket' has a wrong offset!");
static_assert(offsetof(SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket, ReturnValue) == 0x000010, "Member 'SIK_RequestEncryptedAppTicket_AsyncFunction_RequestEncryptedAppTicket::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetAppBuildID
// 0x0004 (0x0004 - 0x0000)
struct SIK_AppLibrary_GetAppBuildID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetAppBuildID) == 0x000004, "Wrong alignment on SIK_AppLibrary_GetAppBuildID");
static_assert(sizeof(SIK_AppLibrary_GetAppBuildID) == 0x000004, "Wrong size on SIK_AppLibrary_GetAppBuildID");
static_assert(offsetof(SIK_AppLibrary_GetAppBuildID, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_GetAppBuildID::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetAppInstallDir
// 0x0018 (0x0018 - 0x0000)
struct SIK_AppLibrary_GetAppInstallDir final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetAppInstallDir) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetAppInstallDir");
static_assert(sizeof(SIK_AppLibrary_GetAppInstallDir) == 0x000018, "Wrong size on SIK_AppLibrary_GetAppInstallDir");
static_assert(offsetof(SIK_AppLibrary_GetAppInstallDir, AppID) == 0x000000, "Member 'SIK_AppLibrary_GetAppInstallDir::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetAppInstallDir, ReturnValue) == 0x000008, "Member 'SIK_AppLibrary_GetAppInstallDir::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetAppOwner
// 0x0008 (0x0008 - 0x0000)
struct SIK_AppLibrary_GetAppOwner final
{
public:
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetAppOwner) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetAppOwner");
static_assert(sizeof(SIK_AppLibrary_GetAppOwner) == 0x000008, "Wrong size on SIK_AppLibrary_GetAppOwner");
static_assert(offsetof(SIK_AppLibrary_GetAppOwner, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_GetAppOwner::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetAvailableGameLanguages
// 0x0010 (0x0010 - 0x0000)
struct SIK_AppLibrary_GetAvailableGameLanguages final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetAvailableGameLanguages) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetAvailableGameLanguages");
static_assert(sizeof(SIK_AppLibrary_GetAvailableGameLanguages) == 0x000010, "Wrong size on SIK_AppLibrary_GetAvailableGameLanguages");
static_assert(offsetof(SIK_AppLibrary_GetAvailableGameLanguages, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_GetAvailableGameLanguages::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetCurrentBetaName
// 0x0018 (0x0018 - 0x0000)
struct SIK_AppLibrary_GetCurrentBetaName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_GetCurrentBetaName) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetCurrentBetaName");
static_assert(sizeof(SIK_AppLibrary_GetCurrentBetaName) == 0x000018, "Wrong size on SIK_AppLibrary_GetCurrentBetaName");
static_assert(offsetof(SIK_AppLibrary_GetCurrentBetaName, Name_0) == 0x000000, "Member 'SIK_AppLibrary_GetCurrentBetaName::Name_0' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetCurrentBetaName, ReturnValue) == 0x000010, "Member 'SIK_AppLibrary_GetCurrentBetaName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetCurrentGameLanguage
// 0x0010 (0x0010 - 0x0000)
struct SIK_AppLibrary_GetCurrentGameLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetCurrentGameLanguage) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetCurrentGameLanguage");
static_assert(sizeof(SIK_AppLibrary_GetCurrentGameLanguage) == 0x000010, "Wrong size on SIK_AppLibrary_GetCurrentGameLanguage");
static_assert(offsetof(SIK_AppLibrary_GetCurrentGameLanguage, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_GetCurrentGameLanguage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetDLCCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_AppLibrary_GetDLCCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetDLCCount) == 0x000004, "Wrong alignment on SIK_AppLibrary_GetDLCCount");
static_assert(sizeof(SIK_AppLibrary_GetDLCCount) == 0x000004, "Wrong size on SIK_AppLibrary_GetDLCCount");
static_assert(offsetof(SIK_AppLibrary_GetDLCCount, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_GetDLCCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetDLCDataByIndex
// 0x0028 (0x0028 - 0x0000)
struct SIK_AppLibrary_GetDLCDataByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             AppID;                                             // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Available;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_GetDLCDataByIndex) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetDLCDataByIndex");
static_assert(sizeof(SIK_AppLibrary_GetDLCDataByIndex) == 0x000028, "Wrong size on SIK_AppLibrary_GetDLCDataByIndex");
static_assert(offsetof(SIK_AppLibrary_GetDLCDataByIndex, Index_0) == 0x000000, "Member 'SIK_AppLibrary_GetDLCDataByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetDLCDataByIndex, AppID) == 0x000004, "Member 'SIK_AppLibrary_GetDLCDataByIndex::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetDLCDataByIndex, Available) == 0x000008, "Member 'SIK_AppLibrary_GetDLCDataByIndex::Available' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetDLCDataByIndex, Name_0) == 0x000010, "Member 'SIK_AppLibrary_GetDLCDataByIndex::Name_0' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetDLCDataByIndex, ReturnValue) == 0x000020, "Member 'SIK_AppLibrary_GetDLCDataByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetDLCDownloadProgress
// 0x0020 (0x0020 - 0x0000)
struct SIK_AppLibrary_GetDLCDownloadProgress final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BytesDownloaded;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BytesTotal;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_GetDLCDownloadProgress) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetDLCDownloadProgress");
static_assert(sizeof(SIK_AppLibrary_GetDLCDownloadProgress) == 0x000020, "Wrong size on SIK_AppLibrary_GetDLCDownloadProgress");
static_assert(offsetof(SIK_AppLibrary_GetDLCDownloadProgress, AppID) == 0x000000, "Member 'SIK_AppLibrary_GetDLCDownloadProgress::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetDLCDownloadProgress, BytesDownloaded) == 0x000008, "Member 'SIK_AppLibrary_GetDLCDownloadProgress::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetDLCDownloadProgress, BytesTotal) == 0x000010, "Member 'SIK_AppLibrary_GetDLCDownloadProgress::BytesTotal' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetDLCDownloadProgress, ReturnValue) == 0x000018, "Member 'SIK_AppLibrary_GetDLCDownloadProgress::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetEarliestPurchaseUnixTime
// 0x0008 (0x0008 - 0x0000)
struct SIK_AppLibrary_GetEarliestPurchaseUnixTime final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetEarliestPurchaseUnixTime) == 0x000004, "Wrong alignment on SIK_AppLibrary_GetEarliestPurchaseUnixTime");
static_assert(sizeof(SIK_AppLibrary_GetEarliestPurchaseUnixTime) == 0x000008, "Wrong size on SIK_AppLibrary_GetEarliestPurchaseUnixTime");
static_assert(offsetof(SIK_AppLibrary_GetEarliestPurchaseUnixTime, AppID) == 0x000000, "Member 'SIK_AppLibrary_GetEarliestPurchaseUnixTime::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetEarliestPurchaseUnixTime, ReturnValue) == 0x000004, "Member 'SIK_AppLibrary_GetEarliestPurchaseUnixTime::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetInstalledDepots
// 0x0018 (0x0018 - 0x0000)
struct SIK_AppLibrary_GetInstalledDepots final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetInstalledDepots) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetInstalledDepots");
static_assert(sizeof(SIK_AppLibrary_GetInstalledDepots) == 0x000018, "Wrong size on SIK_AppLibrary_GetInstalledDepots");
static_assert(offsetof(SIK_AppLibrary_GetInstalledDepots, AppID) == 0x000000, "Member 'SIK_AppLibrary_GetInstalledDepots::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetInstalledDepots, ReturnValue) == 0x000008, "Member 'SIK_AppLibrary_GetInstalledDepots::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetLaunchCommandLine
// 0x0018 (0x0018 - 0x0000)
struct SIK_AppLibrary_GetLaunchCommandLine final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_GetLaunchCommandLine) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetLaunchCommandLine");
static_assert(sizeof(SIK_AppLibrary_GetLaunchCommandLine) == 0x000018, "Wrong size on SIK_AppLibrary_GetLaunchCommandLine");
static_assert(offsetof(SIK_AppLibrary_GetLaunchCommandLine, CommandLine) == 0x000000, "Member 'SIK_AppLibrary_GetLaunchCommandLine::CommandLine' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetLaunchCommandLine, ReturnValue) == 0x000010, "Member 'SIK_AppLibrary_GetLaunchCommandLine::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.GetLaunchQueryParam
// 0x0020 (0x0020 - 0x0000)
struct SIK_AppLibrary_GetLaunchQueryParam final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_GetLaunchQueryParam) == 0x000008, "Wrong alignment on SIK_AppLibrary_GetLaunchQueryParam");
static_assert(sizeof(SIK_AppLibrary_GetLaunchQueryParam) == 0x000020, "Wrong size on SIK_AppLibrary_GetLaunchQueryParam");
static_assert(offsetof(SIK_AppLibrary_GetLaunchQueryParam, Key) == 0x000000, "Member 'SIK_AppLibrary_GetLaunchQueryParam::Key' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_GetLaunchQueryParam, ReturnValue) == 0x000010, "Member 'SIK_AppLibrary_GetLaunchQueryParam::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.InstallDLC
// 0x0004 (0x0004 - 0x0000)
struct SIK_AppLibrary_InstallDLC final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_InstallDLC) == 0x000004, "Wrong alignment on SIK_AppLibrary_InstallDLC");
static_assert(sizeof(SIK_AppLibrary_InstallDLC) == 0x000004, "Wrong size on SIK_AppLibrary_InstallDLC");
static_assert(offsetof(SIK_AppLibrary_InstallDLC, AppID) == 0x000000, "Member 'SIK_AppLibrary_InstallDLC::AppID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsAppInstalled
// 0x0008 (0x0008 - 0x0000)
struct SIK_AppLibrary_IsAppInstalled final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_IsAppInstalled) == 0x000004, "Wrong alignment on SIK_AppLibrary_IsAppInstalled");
static_assert(sizeof(SIK_AppLibrary_IsAppInstalled) == 0x000008, "Wrong size on SIK_AppLibrary_IsAppInstalled");
static_assert(offsetof(SIK_AppLibrary_IsAppInstalled, AppID) == 0x000000, "Member 'SIK_AppLibrary_IsAppInstalled::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_IsAppInstalled, ReturnValue) == 0x000004, "Member 'SIK_AppLibrary_IsAppInstalled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsCybercafe
// 0x0001 (0x0001 - 0x0000)
struct SIK_AppLibrary_IsCybercafe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_IsCybercafe) == 0x000001, "Wrong alignment on SIK_AppLibrary_IsCybercafe");
static_assert(sizeof(SIK_AppLibrary_IsCybercafe) == 0x000001, "Wrong size on SIK_AppLibrary_IsCybercafe");
static_assert(offsetof(SIK_AppLibrary_IsCybercafe, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_IsCybercafe::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsDLCInstalled
// 0x0008 (0x0008 - 0x0000)
struct SIK_AppLibrary_IsDLCInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_IsDLCInstalled) == 0x000004, "Wrong alignment on SIK_AppLibrary_IsDLCInstalled");
static_assert(sizeof(SIK_AppLibrary_IsDLCInstalled) == 0x000008, "Wrong size on SIK_AppLibrary_IsDLCInstalled");
static_assert(offsetof(SIK_AppLibrary_IsDLCInstalled, AppID) == 0x000000, "Member 'SIK_AppLibrary_IsDLCInstalled::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_IsDLCInstalled, ReturnValue) == 0x000004, "Member 'SIK_AppLibrary_IsDLCInstalled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsLowViolence
// 0x0001 (0x0001 - 0x0000)
struct SIK_AppLibrary_IsLowViolence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_IsLowViolence) == 0x000001, "Wrong alignment on SIK_AppLibrary_IsLowViolence");
static_assert(sizeof(SIK_AppLibrary_IsLowViolence) == 0x000001, "Wrong size on SIK_AppLibrary_IsLowViolence");
static_assert(offsetof(SIK_AppLibrary_IsLowViolence, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_IsLowViolence::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribed
// 0x0001 (0x0001 - 0x0000)
struct SIK_AppLibrary_IsSubscribed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_IsSubscribed) == 0x000001, "Wrong alignment on SIK_AppLibrary_IsSubscribed");
static_assert(sizeof(SIK_AppLibrary_IsSubscribed) == 0x000001, "Wrong size on SIK_AppLibrary_IsSubscribed");
static_assert(offsetof(SIK_AppLibrary_IsSubscribed, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_IsSubscribed::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribedApp
// 0x0008 (0x0008 - 0x0000)
struct SIK_AppLibrary_IsSubscribedApp final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_IsSubscribedApp) == 0x000004, "Wrong alignment on SIK_AppLibrary_IsSubscribedApp");
static_assert(sizeof(SIK_AppLibrary_IsSubscribedApp) == 0x000008, "Wrong size on SIK_AppLibrary_IsSubscribedApp");
static_assert(offsetof(SIK_AppLibrary_IsSubscribedApp, AppID) == 0x000000, "Member 'SIK_AppLibrary_IsSubscribedApp::AppID' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_IsSubscribedApp, ReturnValue) == 0x000004, "Member 'SIK_AppLibrary_IsSubscribedApp::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribedFromFamilySharing
// 0x0001 (0x0001 - 0x0000)
struct SIK_AppLibrary_IsSubscribedFromFamilySharing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_IsSubscribedFromFamilySharing) == 0x000001, "Wrong alignment on SIK_AppLibrary_IsSubscribedFromFamilySharing");
static_assert(sizeof(SIK_AppLibrary_IsSubscribedFromFamilySharing) == 0x000001, "Wrong size on SIK_AppLibrary_IsSubscribedFromFamilySharing");
static_assert(offsetof(SIK_AppLibrary_IsSubscribedFromFamilySharing, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_IsSubscribedFromFamilySharing::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsSubscribedFromFreeWeekend
// 0x0001 (0x0001 - 0x0000)
struct SIK_AppLibrary_IsSubscribedFromFreeWeekend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_IsSubscribedFromFreeWeekend) == 0x000001, "Wrong alignment on SIK_AppLibrary_IsSubscribedFromFreeWeekend");
static_assert(sizeof(SIK_AppLibrary_IsSubscribedFromFreeWeekend) == 0x000001, "Wrong size on SIK_AppLibrary_IsSubscribedFromFreeWeekend");
static_assert(offsetof(SIK_AppLibrary_IsSubscribedFromFreeWeekend, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_IsSubscribedFromFreeWeekend::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsTimedTrial
// 0x000C (0x000C - 0x0000)
struct SIK_AppLibrary_IsTimedTrial final
{
public:
	int32                                         SecondsAllowed;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsPlayed;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_AppLibrary_IsTimedTrial) == 0x000004, "Wrong alignment on SIK_AppLibrary_IsTimedTrial");
static_assert(sizeof(SIK_AppLibrary_IsTimedTrial) == 0x00000C, "Wrong size on SIK_AppLibrary_IsTimedTrial");
static_assert(offsetof(SIK_AppLibrary_IsTimedTrial, SecondsAllowed) == 0x000000, "Member 'SIK_AppLibrary_IsTimedTrial::SecondsAllowed' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_IsTimedTrial, SecondsPlayed) == 0x000004, "Member 'SIK_AppLibrary_IsTimedTrial::SecondsPlayed' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_IsTimedTrial, ReturnValue) == 0x000008, "Member 'SIK_AppLibrary_IsTimedTrial::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.IsVACBanned
// 0x0001 (0x0001 - 0x0000)
struct SIK_AppLibrary_IsVACBanned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_IsVACBanned) == 0x000001, "Wrong alignment on SIK_AppLibrary_IsVACBanned");
static_assert(sizeof(SIK_AppLibrary_IsVACBanned) == 0x000001, "Wrong size on SIK_AppLibrary_IsVACBanned");
static_assert(offsetof(SIK_AppLibrary_IsVACBanned, ReturnValue) == 0x000000, "Member 'SIK_AppLibrary_IsVACBanned::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.MarkContentCorrupt
// 0x0002 (0x0002 - 0x0000)
struct SIK_AppLibrary_MarkContentCorrupt final
{
public:
	bool                                          MissingFilesOnly;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_MarkContentCorrupt) == 0x000001, "Wrong alignment on SIK_AppLibrary_MarkContentCorrupt");
static_assert(sizeof(SIK_AppLibrary_MarkContentCorrupt) == 0x000002, "Wrong size on SIK_AppLibrary_MarkContentCorrupt");
static_assert(offsetof(SIK_AppLibrary_MarkContentCorrupt, MissingFilesOnly) == 0x000000, "Member 'SIK_AppLibrary_MarkContentCorrupt::MissingFilesOnly' has a wrong offset!");
static_assert(offsetof(SIK_AppLibrary_MarkContentCorrupt, ReturnValue) == 0x000001, "Member 'SIK_AppLibrary_MarkContentCorrupt::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AppLibrary.UninstallDLC
// 0x0004 (0x0004 - 0x0000)
struct SIK_AppLibrary_UninstallDLC final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AppLibrary_UninstallDLC) == 0x000004, "Wrong alignment on SIK_AppLibrary_UninstallDLC");
static_assert(sizeof(SIK_AppLibrary_UninstallDLC) == 0x000004, "Wrong size on SIK_AppLibrary_UninstallDLC");
static_assert(offsetof(SIK_AppLibrary_UninstallDLC, AppID) == 0x000000, "Member 'SIK_AppLibrary_UninstallDLC::AppID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_AssociateWithClan_AsyncFunction.AssociateWithClan
// 0x0010 (0x0010 - 0x0000)
struct SIK_AssociateWithClan_AsyncFunction_AssociateWithClan final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_AssociateWithClan_AsyncFunction*   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_AssociateWithClan_AsyncFunction_AssociateWithClan) == 0x000008, "Wrong alignment on SIK_AssociateWithClan_AsyncFunction_AssociateWithClan");
static_assert(sizeof(SIK_AssociateWithClan_AsyncFunction_AssociateWithClan) == 0x000010, "Wrong size on SIK_AssociateWithClan_AsyncFunction_AssociateWithClan");
static_assert(offsetof(SIK_AssociateWithClan_AsyncFunction_AssociateWithClan, SteamIdClan) == 0x000000, "Member 'SIK_AssociateWithClan_AsyncFunction_AssociateWithClan::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_AssociateWithClan_AsyncFunction_AssociateWithClan, ReturnValue) == 0x000008, "Member 'SIK_AssociateWithClan_AsyncFunction_AssociateWithClan::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FindLeaderboard_AsyncFunction.FindLeaderboard
// 0x0018 (0x0018 - 0x0000)
struct SIK_FindLeaderboard_AsyncFunction_FindLeaderboard final
{
public:
	class FString                                 LeaderboardName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_FindLeaderboard_AsyncFunction*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FindLeaderboard_AsyncFunction_FindLeaderboard) == 0x000008, "Wrong alignment on SIK_FindLeaderboard_AsyncFunction_FindLeaderboard");
static_assert(sizeof(SIK_FindLeaderboard_AsyncFunction_FindLeaderboard) == 0x000018, "Wrong size on SIK_FindLeaderboard_AsyncFunction_FindLeaderboard");
static_assert(offsetof(SIK_FindLeaderboard_AsyncFunction_FindLeaderboard, LeaderboardName) == 0x000000, "Member 'SIK_FindLeaderboard_AsyncFunction_FindLeaderboard::LeaderboardName' has a wrong offset!");
static_assert(offsetof(SIK_FindLeaderboard_AsyncFunction_FindLeaderboard, ReturnValue) == 0x000010, "Member 'SIK_FindLeaderboard_AsyncFunction_FindLeaderboard::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ChangeNumOpenSlots_AsyncFunction.ChangeNumOpenSlots
// 0x0018 (0x0018 - 0x0000)
struct SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots final
{
public:
	struct FSIK_PartyBeaconID                     PartyBeaconID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_ChangeNumOpenSlots_AsyncFunction*  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots) == 0x000008, "Wrong alignment on SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots");
static_assert(sizeof(SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots) == 0x000018, "Wrong size on SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots");
static_assert(offsetof(SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots, PartyBeaconID) == 0x000000, "Member 'SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots::PartyBeaconID' has a wrong offset!");
static_assert(offsetof(SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots, OpenSlots) == 0x000008, "Member 'SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots::OpenSlots' has a wrong offset!");
static_assert(offsetof(SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots, ReturnValue) == 0x000010, "Member 'SIK_ChangeNumOpenSlots_AsyncFunction_ChangeNumOpenSlots::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ComputeNewPlayerCompatibility_AsyncFunction.ComputeNewPlayerCompatibility
// 0x0010 (0x0010 - 0x0000)
struct SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility final
{
public:
	struct FSIK_SteamId                           PlayerSteamId;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_ComputeNewPlayerCompatibility_AsyncFunction* ReturnValue;                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility) == 0x000008, "Wrong alignment on SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility");
static_assert(sizeof(SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility) == 0x000010, "Wrong size on SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility");
static_assert(offsetof(SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility, PlayerSteamId) == 0x000000, "Member 'SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility::PlayerSteamId' has a wrong offset!");
static_assert(offsetof(SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility, ReturnValue) == 0x000008, "Member 'SIK_ComputeNewPlayerCompatibility_AsyncFunction_ComputeNewPlayerCompatibility::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_DownloadClanActivityCounts_AsyncFunction.DownloadClanActivityCounts
// 0x0018 (0x0018 - 0x0000)
struct SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts final
{
public:
	TArray<int64>                                 ClanIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USIK_DownloadClanActivityCounts_AsyncFunction* ReturnValue;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts) == 0x000008, "Wrong alignment on SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts");
static_assert(sizeof(SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts) == 0x000018, "Wrong size on SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts");
static_assert(offsetof(SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts, ClanIds) == 0x000000, "Member 'SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts::ClanIds' has a wrong offset!");
static_assert(offsetof(SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts, ReturnValue) == 0x000010, "Member 'SIK_DownloadClanActivityCounts_AsyncFunction_DownloadClanActivityCounts::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_CreateBeacon_AsyncFunction.CreateBeacon
// 0x0040 (0x0040 - 0x0000)
struct SIK_CreateBeacon_AsyncFunction_CreateBeacon final
{
public:
	int32                                         OpenSlots;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamPartyBeaconLocation          Location;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_CreateBeacon_AsyncFunction*        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_CreateBeacon_AsyncFunction_CreateBeacon) == 0x000008, "Wrong alignment on SIK_CreateBeacon_AsyncFunction_CreateBeacon");
static_assert(sizeof(SIK_CreateBeacon_AsyncFunction_CreateBeacon) == 0x000040, "Wrong size on SIK_CreateBeacon_AsyncFunction_CreateBeacon");
static_assert(offsetof(SIK_CreateBeacon_AsyncFunction_CreateBeacon, OpenSlots) == 0x000000, "Member 'SIK_CreateBeacon_AsyncFunction_CreateBeacon::OpenSlots' has a wrong offset!");
static_assert(offsetof(SIK_CreateBeacon_AsyncFunction_CreateBeacon, Location) == 0x000008, "Member 'SIK_CreateBeacon_AsyncFunction_CreateBeacon::Location' has a wrong offset!");
static_assert(offsetof(SIK_CreateBeacon_AsyncFunction_CreateBeacon, ConnectString) == 0x000018, "Member 'SIK_CreateBeacon_AsyncFunction_CreateBeacon::ConnectString' has a wrong offset!");
static_assert(offsetof(SIK_CreateBeacon_AsyncFunction_CreateBeacon, MetaData) == 0x000028, "Member 'SIK_CreateBeacon_AsyncFunction_CreateBeacon::MetaData' has a wrong offset!");
static_assert(offsetof(SIK_CreateBeacon_AsyncFunction_CreateBeacon, ReturnValue) == 0x000038, "Member 'SIK_CreateBeacon_AsyncFunction_CreateBeacon::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_CreateItem_AsyncFunction.CreateItem
// 0x0010 (0x0010 - 0x0000)
struct SIK_CreateItem_AsyncFunction_CreateItem final
{
public:
	struct FSIK_AppId                             ConsumerAppID;                                     // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_WorkshopFileType                         FileType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_CreateItem_AsyncFunction*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_CreateItem_AsyncFunction_CreateItem) == 0x000008, "Wrong alignment on SIK_CreateItem_AsyncFunction_CreateItem");
static_assert(sizeof(SIK_CreateItem_AsyncFunction_CreateItem) == 0x000010, "Wrong size on SIK_CreateItem_AsyncFunction_CreateItem");
static_assert(offsetof(SIK_CreateItem_AsyncFunction_CreateItem, ConsumerAppID) == 0x000000, "Member 'SIK_CreateItem_AsyncFunction_CreateItem::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SIK_CreateItem_AsyncFunction_CreateItem, FileType) == 0x000004, "Member 'SIK_CreateItem_AsyncFunction_CreateItem::FileType' has a wrong offset!");
static_assert(offsetof(SIK_CreateItem_AsyncFunction_CreateItem, ReturnValue) == 0x000008, "Member 'SIK_CreateItem_AsyncFunction_CreateItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_CreateLeaderboard_AsyncFunction.CreateLeaderboard
// 0x0020 (0x0020 - 0x0000)
struct SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard final
{
public:
	class FString                                 LeaderboardName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LeaderboardSortMethod                    SortMethod;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LeaderboardDisplayType                   DisplayType;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_CreateLeaderboard_AsyncFunction*   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard) == 0x000008, "Wrong alignment on SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard");
static_assert(sizeof(SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard) == 0x000020, "Wrong size on SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard");
static_assert(offsetof(SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard, LeaderboardName) == 0x000000, "Member 'SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard::LeaderboardName' has a wrong offset!");
static_assert(offsetof(SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard, SortMethod) == 0x000010, "Member 'SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard::SortMethod' has a wrong offset!");
static_assert(offsetof(SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard, DisplayType) == 0x000011, "Member 'SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard::DisplayType' has a wrong offset!");
static_assert(offsetof(SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard, ReturnValue) == 0x000018, "Member 'SIK_CreateLeaderboard_AsyncFunction_CreateLeaderboard::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_CreateLobby_AsyncFunction.CreateSIKLobby
// 0x0070 (0x0070 - 0x0000)
struct SIK_CreateLobby_AsyncFunction_CreateSIKLobby final
{
public:
	TMap<class FString, struct FSIKAttribute>     SessionSettings;                                   // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FName                                   SessionName;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPublicConnections;                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIKCreateLobbySettings                ExtraSettings;                                     // 0x005C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_CreateLobby_AsyncFunction*         ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_CreateLobby_AsyncFunction_CreateSIKLobby) == 0x000008, "Wrong alignment on SIK_CreateLobby_AsyncFunction_CreateSIKLobby");
static_assert(sizeof(SIK_CreateLobby_AsyncFunction_CreateSIKLobby) == 0x000070, "Wrong size on SIK_CreateLobby_AsyncFunction_CreateSIKLobby");
static_assert(offsetof(SIK_CreateLobby_AsyncFunction_CreateSIKLobby, SessionSettings) == 0x000000, "Member 'SIK_CreateLobby_AsyncFunction_CreateSIKLobby::SessionSettings' has a wrong offset!");
static_assert(offsetof(SIK_CreateLobby_AsyncFunction_CreateSIKLobby, SessionName) == 0x000050, "Member 'SIK_CreateLobby_AsyncFunction_CreateSIKLobby::SessionName' has a wrong offset!");
static_assert(offsetof(SIK_CreateLobby_AsyncFunction_CreateSIKLobby, NumberOfPublicConnections) == 0x000058, "Member 'SIK_CreateLobby_AsyncFunction_CreateSIKLobby::NumberOfPublicConnections' has a wrong offset!");
static_assert(offsetof(SIK_CreateLobby_AsyncFunction_CreateSIKLobby, ExtraSettings) == 0x00005C, "Member 'SIK_CreateLobby_AsyncFunction_CreateSIKLobby::ExtraSettings' has a wrong offset!");
static_assert(offsetof(SIK_CreateLobby_AsyncFunction_CreateSIKLobby, ReturnValue) == 0x000068, "Member 'SIK_CreateLobby_AsyncFunction_CreateSIKLobby::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FileShare_AsyncFunction.FileShareAsync
// 0x0018 (0x0018 - 0x0000)
struct SIK_FileShare_AsyncFunction_FileShareAsync final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_FileShare_AsyncFunction*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FileShare_AsyncFunction_FileShareAsync) == 0x000008, "Wrong alignment on SIK_FileShare_AsyncFunction_FileShareAsync");
static_assert(sizeof(SIK_FileShare_AsyncFunction_FileShareAsync) == 0x000018, "Wrong size on SIK_FileShare_AsyncFunction_FileShareAsync");
static_assert(offsetof(SIK_FileShare_AsyncFunction_FileShareAsync, Filename) == 0x000000, "Member 'SIK_FileShare_AsyncFunction_FileShareAsync::Filename' has a wrong offset!");
static_assert(offsetof(SIK_FileShare_AsyncFunction_FileShareAsync, ReturnValue) == 0x000010, "Member 'SIK_FileShare_AsyncFunction_FileShareAsync::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_CreateSession_AsyncFunction.CreateEIKSession
// 0x0080 (0x0080 - 0x0000)
struct SIK_CreateSession_AsyncFunction_CreateEIKSession final
{
public:
	TMap<class FString, struct FSIKAttribute>     SessionSettings;                                   // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FName                                   SessionName;                                       // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPublicConnections;                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIKDedicatedServerSettings            DedicatedServerSettings;                           // 0x005C(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_CreateSessionExtraSettings        ExtraSettings;                                     // 0x0064(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_CreateSession_AsyncFunction*       ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_CreateSession_AsyncFunction_CreateEIKSession) == 0x000008, "Wrong alignment on SIK_CreateSession_AsyncFunction_CreateEIKSession");
static_assert(sizeof(SIK_CreateSession_AsyncFunction_CreateEIKSession) == 0x000080, "Wrong size on SIK_CreateSession_AsyncFunction_CreateEIKSession");
static_assert(offsetof(SIK_CreateSession_AsyncFunction_CreateEIKSession, SessionSettings) == 0x000000, "Member 'SIK_CreateSession_AsyncFunction_CreateEIKSession::SessionSettings' has a wrong offset!");
static_assert(offsetof(SIK_CreateSession_AsyncFunction_CreateEIKSession, SessionName) == 0x000050, "Member 'SIK_CreateSession_AsyncFunction_CreateEIKSession::SessionName' has a wrong offset!");
static_assert(offsetof(SIK_CreateSession_AsyncFunction_CreateEIKSession, NumberOfPublicConnections) == 0x000058, "Member 'SIK_CreateSession_AsyncFunction_CreateEIKSession::NumberOfPublicConnections' has a wrong offset!");
static_assert(offsetof(SIK_CreateSession_AsyncFunction_CreateEIKSession, DedicatedServerSettings) == 0x00005C, "Member 'SIK_CreateSession_AsyncFunction_CreateEIKSession::DedicatedServerSettings' has a wrong offset!");
static_assert(offsetof(SIK_CreateSession_AsyncFunction_CreateEIKSession, ExtraSettings) == 0x000064, "Member 'SIK_CreateSession_AsyncFunction_CreateEIKSession::ExtraSettings' has a wrong offset!");
static_assert(offsetof(SIK_CreateSession_AsyncFunction_CreateEIKSession, ReturnValue) == 0x000078, "Member 'SIK_CreateSession_AsyncFunction_CreateEIKSession::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_DeleteItem_AsyncFunction.DeleteItem
// 0x0010 (0x0010 - 0x0000)
struct SIK_DeleteItem_AsyncFunction_DeleteItem final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_DeleteItem_AsyncFunction*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_DeleteItem_AsyncFunction_DeleteItem) == 0x000008, "Wrong alignment on SIK_DeleteItem_AsyncFunction_DeleteItem");
static_assert(sizeof(SIK_DeleteItem_AsyncFunction_DeleteItem) == 0x000010, "Wrong size on SIK_DeleteItem_AsyncFunction_DeleteItem");
static_assert(offsetof(SIK_DeleteItem_AsyncFunction_DeleteItem, PublishedFileId) == 0x000000, "Member 'SIK_DeleteItem_AsyncFunction_DeleteItem::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_DeleteItem_AsyncFunction_DeleteItem, ReturnValue) == 0x000008, "Member 'SIK_DeleteItem_AsyncFunction_DeleteItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_DestroySession_AsyncFunction.DestroySIKSessions
// 0x0010 (0x0010 - 0x0000)
struct SIK_DestroySession_AsyncFunction_DestroySIKSessions final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_DestroySession_AsyncFunction*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_DestroySession_AsyncFunction_DestroySIKSessions) == 0x000008, "Wrong alignment on SIK_DestroySession_AsyncFunction_DestroySIKSessions");
static_assert(sizeof(SIK_DestroySession_AsyncFunction_DestroySIKSessions) == 0x000010, "Wrong size on SIK_DestroySession_AsyncFunction_DestroySIKSessions");
static_assert(offsetof(SIK_DestroySession_AsyncFunction_DestroySIKSessions, SessionName) == 0x000000, "Member 'SIK_DestroySession_AsyncFunction_DestroySIKSessions::SessionName' has a wrong offset!");
static_assert(offsetof(SIK_DestroySession_AsyncFunction_DestroySIKSessions, ReturnValue) == 0x000008, "Member 'SIK_DestroySession_AsyncFunction_DestroySIKSessions::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_DownloadLeaderboardEntries_AsyncFunction.DownloadLeaderboardEntries
// 0x0018 (0x0018 - 0x0000)
struct SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries final
{
public:
	int32                                         LeaderboardID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeStart;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeEnd;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LeaderboardDataRequest                   LeaderboardDataRequest;                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_DownloadLeaderboardEntries_AsyncFunction* ReturnValue;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries) == 0x000008, "Wrong alignment on SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries");
static_assert(sizeof(SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries) == 0x000018, "Wrong size on SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries");
static_assert(offsetof(SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries, LeaderboardID) == 0x000000, "Member 'SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries::LeaderboardID' has a wrong offset!");
static_assert(offsetof(SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries, RangeStart) == 0x000004, "Member 'SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries::RangeStart' has a wrong offset!");
static_assert(offsetof(SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries, RangeEnd) == 0x000008, "Member 'SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries::RangeEnd' has a wrong offset!");
static_assert(offsetof(SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries, LeaderboardDataRequest) == 0x00000C, "Member 'SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries::LeaderboardDataRequest' has a wrong offset!");
static_assert(offsetof(SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries, ReturnValue) == 0x000010, "Member 'SIK_DownloadLeaderboardEntries_AsyncFunction_DownloadLeaderboardEntries::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_EnumerateFollowingList_AsyncFunction.EnumerateFollowingList
// 0x0010 (0x0010 - 0x0000)
struct SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_EnumerateFollowingList_AsyncFunction* ReturnValue;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList) == 0x000008, "Wrong alignment on SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList");
static_assert(sizeof(SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList) == 0x000010, "Wrong size on SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList");
static_assert(offsetof(SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList, StartIndex) == 0x000000, "Member 'SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList::StartIndex' has a wrong offset!");
static_assert(offsetof(SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList, ReturnValue) == 0x000008, "Member 'SIK_EnumerateFollowingList_AsyncFunction_EnumerateFollowingList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FileReadAsync_AsyncFunction.FileReadAsync
// 0x0020 (0x0020 - 0x0000)
struct SIK_FileReadAsync_AsyncFunction_FileReadAsync final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nOffset;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nBytesToRead;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_FileReadAsync_AsyncFunction*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FileReadAsync_AsyncFunction_FileReadAsync) == 0x000008, "Wrong alignment on SIK_FileReadAsync_AsyncFunction_FileReadAsync");
static_assert(sizeof(SIK_FileReadAsync_AsyncFunction_FileReadAsync) == 0x000020, "Wrong size on SIK_FileReadAsync_AsyncFunction_FileReadAsync");
static_assert(offsetof(SIK_FileReadAsync_AsyncFunction_FileReadAsync, Filename) == 0x000000, "Member 'SIK_FileReadAsync_AsyncFunction_FileReadAsync::Filename' has a wrong offset!");
static_assert(offsetof(SIK_FileReadAsync_AsyncFunction_FileReadAsync, nOffset) == 0x000010, "Member 'SIK_FileReadAsync_AsyncFunction_FileReadAsync::nOffset' has a wrong offset!");
static_assert(offsetof(SIK_FileReadAsync_AsyncFunction_FileReadAsync, nBytesToRead) == 0x000014, "Member 'SIK_FileReadAsync_AsyncFunction_FileReadAsync::nBytesToRead' has a wrong offset!");
static_assert(offsetof(SIK_FileReadAsync_AsyncFunction_FileReadAsync, ReturnValue) == 0x000018, "Member 'SIK_FileReadAsync_AsyncFunction_FileReadAsync::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FileWriteAsync_AsyncFunction.FileWriteAsync
// 0x0028 (0x0028 - 0x0000)
struct SIK_FileWriteAsync_AsyncFunction_FileWriteAsync final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 FileData;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USIK_FileWriteAsync_AsyncFunction*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FileWriteAsync_AsyncFunction_FileWriteAsync) == 0x000008, "Wrong alignment on SIK_FileWriteAsync_AsyncFunction_FileWriteAsync");
static_assert(sizeof(SIK_FileWriteAsync_AsyncFunction_FileWriteAsync) == 0x000028, "Wrong size on SIK_FileWriteAsync_AsyncFunction_FileWriteAsync");
static_assert(offsetof(SIK_FileWriteAsync_AsyncFunction_FileWriteAsync, Filename) == 0x000000, "Member 'SIK_FileWriteAsync_AsyncFunction_FileWriteAsync::Filename' has a wrong offset!");
static_assert(offsetof(SIK_FileWriteAsync_AsyncFunction_FileWriteAsync, FileData) == 0x000010, "Member 'SIK_FileWriteAsync_AsyncFunction_FileWriteAsync::FileData' has a wrong offset!");
static_assert(offsetof(SIK_FileWriteAsync_AsyncFunction_FileWriteAsync, ReturnValue) == 0x000020, "Member 'SIK_FileWriteAsync_AsyncFunction_FileWriteAsync::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FindSessions_AsyncFunction.FindSIKSessions
// 0x0068 (0x0068 - 0x0000)
struct SIK_FindSessions_AsyncFunction_FindSIKSessions final
{
public:
	TMap<class FName, struct FSIKAttribute>       SessionSettings;                                   // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	ESMatchType                                   MatchType;                                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResults;                                        // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLanSearch;                                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmptyServerOnly;                                  // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecureServerOnly;                                 // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_FindSessions_AsyncFunction*        ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FindSessions_AsyncFunction_FindSIKSessions) == 0x000008, "Wrong alignment on SIK_FindSessions_AsyncFunction_FindSIKSessions");
static_assert(sizeof(SIK_FindSessions_AsyncFunction_FindSIKSessions) == 0x000068, "Wrong size on SIK_FindSessions_AsyncFunction_FindSIKSessions");
static_assert(offsetof(SIK_FindSessions_AsyncFunction_FindSIKSessions, SessionSettings) == 0x000000, "Member 'SIK_FindSessions_AsyncFunction_FindSIKSessions::SessionSettings' has a wrong offset!");
static_assert(offsetof(SIK_FindSessions_AsyncFunction_FindSIKSessions, MatchType) == 0x000050, "Member 'SIK_FindSessions_AsyncFunction_FindSIKSessions::MatchType' has a wrong offset!");
static_assert(offsetof(SIK_FindSessions_AsyncFunction_FindSIKSessions, MaxResults) == 0x000054, "Member 'SIK_FindSessions_AsyncFunction_FindSIKSessions::MaxResults' has a wrong offset!");
static_assert(offsetof(SIK_FindSessions_AsyncFunction_FindSIKSessions, bLanSearch) == 0x000058, "Member 'SIK_FindSessions_AsyncFunction_FindSIKSessions::bLanSearch' has a wrong offset!");
static_assert(offsetof(SIK_FindSessions_AsyncFunction_FindSIKSessions, bEmptyServerOnly) == 0x000059, "Member 'SIK_FindSessions_AsyncFunction_FindSIKSessions::bEmptyServerOnly' has a wrong offset!");
static_assert(offsetof(SIK_FindSessions_AsyncFunction_FindSIKSessions, bSecureServerOnly) == 0x00005A, "Member 'SIK_FindSessions_AsyncFunction_FindSIKSessions::bSecureServerOnly' has a wrong offset!");
static_assert(offsetof(SIK_FindSessions_AsyncFunction_FindSIKSessions, ReturnValue) == 0x000060, "Member 'SIK_FindSessions_AsyncFunction_FindSIKSessions::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlay
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_ActivateGameOverlay final
{
public:
	class FString                                 DialogToOpen;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_ActivateGameOverlay) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_ActivateGameOverlay");
static_assert(sizeof(SIK_FriendsLibrary_ActivateGameOverlay) == 0x000010, "Wrong size on SIK_FriendsLibrary_ActivateGameOverlay");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlay, DialogToOpen) == 0x000000, "Member 'SIK_FriendsLibrary_ActivateGameOverlay::DialogToOpen' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayInviteDialog
// 0x0008 (0x0008 - 0x0000)
struct SIK_FriendsLibrary_ActivateGameOverlayInviteDialog final
{
public:
	int64                                         SteamIdLobby;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_ActivateGameOverlayInviteDialog) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_ActivateGameOverlayInviteDialog");
static_assert(sizeof(SIK_FriendsLibrary_ActivateGameOverlayInviteDialog) == 0x000008, "Wrong size on SIK_FriendsLibrary_ActivateGameOverlayInviteDialog");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlayInviteDialog, SteamIdLobby) == 0x000000, "Member 'SIK_FriendsLibrary_ActivateGameOverlayInviteDialog::SteamIdLobby' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayToStore
// 0x0008 (0x0008 - 0x0000)
struct SIK_FriendsLibrary_ActivateGameOverlayToStore final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAddToCartAndShow;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_ActivateGameOverlayToStore) == 0x000004, "Wrong alignment on SIK_FriendsLibrary_ActivateGameOverlayToStore");
static_assert(sizeof(SIK_FriendsLibrary_ActivateGameOverlayToStore) == 0x000008, "Wrong size on SIK_FriendsLibrary_ActivateGameOverlayToStore");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlayToStore, AppID) == 0x000000, "Member 'SIK_FriendsLibrary_ActivateGameOverlayToStore::AppID' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlayToStore, bAddToCartAndShow) == 0x000004, "Member 'SIK_FriendsLibrary_ActivateGameOverlayToStore::bAddToCartAndShow' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayToUser
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_ActivateGameOverlayToUser final
{
public:
	class FString                                 Dialog;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         steamIDUser;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_ActivateGameOverlayToUser) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_ActivateGameOverlayToUser");
static_assert(sizeof(SIK_FriendsLibrary_ActivateGameOverlayToUser) == 0x000018, "Wrong size on SIK_FriendsLibrary_ActivateGameOverlayToUser");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlayToUser, Dialog) == 0x000000, "Member 'SIK_FriendsLibrary_ActivateGameOverlayToUser::Dialog' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlayToUser, steamIDUser) == 0x000010, "Member 'SIK_FriendsLibrary_ActivateGameOverlayToUser::steamIDUser' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.ActivateGameOverlayToWebPage
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_ActivateGameOverlayToWebPage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseModal;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_ActivateGameOverlayToWebPage) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_ActivateGameOverlayToWebPage");
static_assert(sizeof(SIK_FriendsLibrary_ActivateGameOverlayToWebPage) == 0x000018, "Wrong size on SIK_FriendsLibrary_ActivateGameOverlayToWebPage");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlayToWebPage, URL) == 0x000000, "Member 'SIK_FriendsLibrary_ActivateGameOverlayToWebPage::URL' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_ActivateGameOverlayToWebPage, bUseModal) == 0x000010, "Member 'SIK_FriendsLibrary_ActivateGameOverlayToWebPage::bUseModal' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.BHasEquippedProfileItem
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_BHasEquippedProfileItem final
{
public:
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_ECommunityProfileItemType                ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_BHasEquippedProfileItem) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_BHasEquippedProfileItem");
static_assert(sizeof(SIK_FriendsLibrary_BHasEquippedProfileItem) == 0x000010, "Wrong size on SIK_FriendsLibrary_BHasEquippedProfileItem");
static_assert(offsetof(SIK_FriendsLibrary_BHasEquippedProfileItem, steamIDUser) == 0x000000, "Member 'SIK_FriendsLibrary_BHasEquippedProfileItem::steamIDUser' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_BHasEquippedProfileItem, ItemType) == 0x000008, "Member 'SIK_FriendsLibrary_BHasEquippedProfileItem::ItemType' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_BHasEquippedProfileItem, ReturnValue) == 0x000009, "Member 'SIK_FriendsLibrary_BHasEquippedProfileItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.CloseClanChatWindowInSteam
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_CloseClanChatWindowInSteam final
{
public:
	int64                                         SteamIdClanChat;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_CloseClanChatWindowInSteam) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_CloseClanChatWindowInSteam");
static_assert(sizeof(SIK_FriendsLibrary_CloseClanChatWindowInSteam) == 0x000010, "Wrong size on SIK_FriendsLibrary_CloseClanChatWindowInSteam");
static_assert(offsetof(SIK_FriendsLibrary_CloseClanChatWindowInSteam, SteamIdClanChat) == 0x000000, "Member 'SIK_FriendsLibrary_CloseClanChatWindowInSteam::SteamIdClanChat' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_CloseClanChatWindowInSteam, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_CloseClanChatWindowInSteam::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetChatMemberByIndex
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetChatMemberByIndex final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MemberIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetChatMemberByIndex) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetChatMemberByIndex");
static_assert(sizeof(SIK_FriendsLibrary_GetChatMemberByIndex) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetChatMemberByIndex");
static_assert(offsetof(SIK_FriendsLibrary_GetChatMemberByIndex, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetChatMemberByIndex::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetChatMemberByIndex, MemberIndex) == 0x000008, "Member 'SIK_FriendsLibrary_GetChatMemberByIndex::MemberIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetChatMemberByIndex, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_GetChatMemberByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanActivityCounts
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetClanActivityCounts final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Online;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGame;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chatting;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetClanActivityCounts) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanActivityCounts");
static_assert(sizeof(SIK_FriendsLibrary_GetClanActivityCounts) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetClanActivityCounts");
static_assert(offsetof(SIK_FriendsLibrary_GetClanActivityCounts, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanActivityCounts::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanActivityCounts, Online) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanActivityCounts::Online' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanActivityCounts, InGame) == 0x00000C, "Member 'SIK_FriendsLibrary_GetClanActivityCounts::InGame' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanActivityCounts, Chatting) == 0x000010, "Member 'SIK_FriendsLibrary_GetClanActivityCounts::Chatting' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanActivityCounts, ReturnValue) == 0x000014, "Member 'SIK_FriendsLibrary_GetClanActivityCounts::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanByIndex
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetClanByIndex final
{
public:
	int32                                         ClanIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetClanByIndex) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanByIndex");
static_assert(sizeof(SIK_FriendsLibrary_GetClanByIndex) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetClanByIndex");
static_assert(offsetof(SIK_FriendsLibrary_GetClanByIndex, ClanIndex) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanByIndex::ClanIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanByIndex, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanChatMemberCount
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetClanChatMemberCount final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetClanChatMemberCount) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanChatMemberCount");
static_assert(sizeof(SIK_FriendsLibrary_GetClanChatMemberCount) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetClanChatMemberCount");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMemberCount, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanChatMemberCount::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMemberCount, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanChatMemberCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanChatMessage
// 0x0040 (0x0040 - 0x0000)
struct SIK_FriendsLibrary_GetClanChatMessage final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MessageIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Text;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0020(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChatEntryType;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetClanChatMessage) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanChatMessage");
static_assert(sizeof(SIK_FriendsLibrary_GetClanChatMessage) == 0x000040, "Wrong size on SIK_FriendsLibrary_GetClanChatMessage");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMessage, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanChatMessage::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMessage, MessageIndex) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanChatMessage::MessageIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMessage, Text) == 0x000010, "Member 'SIK_FriendsLibrary_GetClanChatMessage::Text' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMessage, steamIDUser) == 0x000020, "Member 'SIK_FriendsLibrary_GetClanChatMessage::steamIDUser' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMessage, ChatEntryType) == 0x000028, "Member 'SIK_FriendsLibrary_GetClanChatMessage::ChatEntryType' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanChatMessage, ReturnValue) == 0x000038, "Member 'SIK_FriendsLibrary_GetClanChatMessage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_FriendsLibrary_GetClanCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetClanCount) == 0x000004, "Wrong alignment on SIK_FriendsLibrary_GetClanCount");
static_assert(sizeof(SIK_FriendsLibrary_GetClanCount) == 0x000004, "Wrong size on SIK_FriendsLibrary_GetClanCount");
static_assert(offsetof(SIK_FriendsLibrary_GetClanCount, ReturnValue) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanName
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetClanName final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetClanName) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanName");
static_assert(sizeof(SIK_FriendsLibrary_GetClanName) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetClanName");
static_assert(offsetof(SIK_FriendsLibrary_GetClanName, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanName::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanName, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanOfficerByIndex
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetClanOfficerByIndex final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OfficerIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetClanOfficerByIndex) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanOfficerByIndex");
static_assert(sizeof(SIK_FriendsLibrary_GetClanOfficerByIndex) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetClanOfficerByIndex");
static_assert(offsetof(SIK_FriendsLibrary_GetClanOfficerByIndex, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanOfficerByIndex::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanOfficerByIndex, OfficerIndex) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanOfficerByIndex::OfficerIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanOfficerByIndex, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_GetClanOfficerByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanOfficerCount
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetClanOfficerCount final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetClanOfficerCount) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanOfficerCount");
static_assert(sizeof(SIK_FriendsLibrary_GetClanOfficerCount) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetClanOfficerCount");
static_assert(offsetof(SIK_FriendsLibrary_GetClanOfficerCount, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanOfficerCount::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanOfficerCount, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanOfficerCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanOwner
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetClanOwner final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetClanOwner) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanOwner");
static_assert(sizeof(SIK_FriendsLibrary_GetClanOwner) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetClanOwner");
static_assert(offsetof(SIK_FriendsLibrary_GetClanOwner, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanOwner::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanOwner, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanOwner::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetClanTag
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetClanTag final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetClanTag) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetClanTag");
static_assert(sizeof(SIK_FriendsLibrary_GetClanTag) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetClanTag");
static_assert(offsetof(SIK_FriendsLibrary_GetClanTag, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_GetClanTag::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetClanTag, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetClanTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetCoplayFriend
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetCoplayFriend final
{
public:
	int32                                         CoplayFriend;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetCoplayFriend) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetCoplayFriend");
static_assert(sizeof(SIK_FriendsLibrary_GetCoplayFriend) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetCoplayFriend");
static_assert(offsetof(SIK_FriendsLibrary_GetCoplayFriend, CoplayFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetCoplayFriend::CoplayFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetCoplayFriend, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetCoplayFriend::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetCoplayFriendCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_FriendsLibrary_GetCoplayFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetCoplayFriendCount) == 0x000004, "Wrong alignment on SIK_FriendsLibrary_GetCoplayFriendCount");
static_assert(sizeof(SIK_FriendsLibrary_GetCoplayFriendCount) == 0x000004, "Wrong size on SIK_FriendsLibrary_GetCoplayFriendCount");
static_assert(offsetof(SIK_FriendsLibrary_GetCoplayFriendCount, ReturnValue) == 0x000000, "Member 'SIK_FriendsLibrary_GetCoplayFriendCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendByIndex
// 0x0020 (0x0020 - 0x0000)
struct SIK_FriendsLibrary_GetFriendByIndex final
{
public:
	int32                                         FriendIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESIK_FriendFlags>                      FriendFlags;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendByIndex) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendByIndex");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendByIndex) == 0x000020, "Wrong size on SIK_FriendsLibrary_GetFriendByIndex");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendByIndex, FriendIndex) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendByIndex::FriendIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendByIndex, FriendFlags) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendByIndex::FriendFlags' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendByIndex, ReturnValue) == 0x000018, "Member 'SIK_FriendsLibrary_GetFriendByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCoplayGame
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetFriendCoplayGame final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendCoplayGame) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendCoplayGame");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendCoplayGame) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetFriendCoplayGame");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCoplayGame, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendCoplayGame::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCoplayGame, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendCoplayGame::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCoplayTime
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetFriendCoplayTime final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendCoplayTime) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendCoplayTime");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendCoplayTime) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetFriendCoplayTime");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCoplayTime, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendCoplayTime::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCoplayTime, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendCoplayTime::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCount
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetFriendCount final
{
public:
	TArray<ESIK_FriendFlags>                      FriendFlags;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendCount) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendCount");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendCount) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetFriendCount");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCount, FriendFlags) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendCount::FriendFlags' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCount, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_GetFriendCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendCountFromSource
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetFriendCountFromSource final
{
public:
	struct FSIK_SteamId                           SteamIdSource;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendCountFromSource) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendCountFromSource");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendCountFromSource) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetFriendCountFromSource");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCountFromSource, SteamIdSource) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendCountFromSource::SteamIdSource' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendCountFromSource, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendCountFromSource::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendFromSourceByIndex
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetFriendFromSourceByIndex final
{
public:
	struct FSIK_SteamId                           SteamIdSource;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         FriendIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendFromSourceByIndex) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendFromSourceByIndex");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendFromSourceByIndex) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetFriendFromSourceByIndex");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendFromSourceByIndex, SteamIdSource) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendFromSourceByIndex::SteamIdSource' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendFromSourceByIndex, FriendIndex) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendFromSourceByIndex::FriendIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendFromSourceByIndex, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_GetFriendFromSourceByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGamePlayed
// 0x0030 (0x0030 - 0x0000)
struct SIK_FriendsLibrary_GetFriendGamePlayed final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_FriendGameInfo                    GameInfo;                                          // 0x0008(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendGamePlayed) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendGamePlayed");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendGamePlayed) == 0x000030, "Wrong size on SIK_FriendsLibrary_GetFriendGamePlayed");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGamePlayed, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendGamePlayed::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGamePlayed, GameInfo) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendGamePlayed::GameInfo' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGamePlayed, ReturnValue) == 0x000028, "Member 'SIK_FriendsLibrary_GetFriendGamePlayed::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGroupCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_FriendsLibrary_GetFriendGroupCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendGroupCount) == 0x000004, "Wrong alignment on SIK_FriendsLibrary_GetFriendGroupCount");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendGroupCount) == 0x000004, "Wrong size on SIK_FriendsLibrary_GetFriendGroupCount");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGroupCount, ReturnValue) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendGroupCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGroupIDByIndex
// 0x0008 (0x0008 - 0x0000)
struct SIK_FriendsLibrary_GetFriendGroupIDByIndex final
{
public:
	int32                                         GroupIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_FriendsGroupID                    ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendGroupIDByIndex) == 0x000004, "Wrong alignment on SIK_FriendsLibrary_GetFriendGroupIDByIndex");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendGroupIDByIndex) == 0x000008, "Wrong size on SIK_FriendsLibrary_GetFriendGroupIDByIndex");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGroupIDByIndex, GroupIndex) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendGroupIDByIndex::GroupIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGroupIDByIndex, ReturnValue) == 0x000004, "Member 'SIK_FriendsLibrary_GetFriendGroupIDByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendGroupMembersCount
// 0x0008 (0x0008 - 0x0000)
struct SIK_FriendsLibrary_GetFriendGroupMembersCount final
{
public:
	struct FSIK_FriendsGroupID                    FriendsGroupID;                                    // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendGroupMembersCount) == 0x000004, "Wrong alignment on SIK_FriendsLibrary_GetFriendGroupMembersCount");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendGroupMembersCount) == 0x000008, "Wrong size on SIK_FriendsLibrary_GetFriendGroupMembersCount");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGroupMembersCount, FriendsGroupID) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendGroupMembersCount::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendGroupMembersCount, ReturnValue) == 0x000004, "Member 'SIK_FriendsLibrary_GetFriendGroupMembersCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendMessage
// 0x0038 (0x0038 - 0x0000)
struct SIK_FriendsLibrary_GetFriendMessage final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MessageIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Text;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ChatEntryType;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendMessage) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendMessage");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendMessage) == 0x000038, "Wrong size on SIK_FriendsLibrary_GetFriendMessage");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendMessage, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendMessage::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendMessage, MessageIndex) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendMessage::MessageIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendMessage, Text) == 0x000010, "Member 'SIK_FriendsLibrary_GetFriendMessage::Text' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendMessage, ChatEntryType) == 0x000020, "Member 'SIK_FriendsLibrary_GetFriendMessage::ChatEntryType' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendMessage, ReturnValue) == 0x000030, "Member 'SIK_FriendsLibrary_GetFriendMessage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendPersonaName
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetFriendPersonaName final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendPersonaName) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendPersonaName");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendPersonaName) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetFriendPersonaName");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendPersonaName, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendPersonaName::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendPersonaName, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendPersonaName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendPersonaNameHistory
// 0x0020 (0x0020 - 0x0000)
struct SIK_FriendsLibrary_GetFriendPersonaNameHistory final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PersonaNameIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendPersonaNameHistory) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendPersonaNameHistory");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendPersonaNameHistory) == 0x000020, "Wrong size on SIK_FriendsLibrary_GetFriendPersonaNameHistory");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendPersonaNameHistory, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendPersonaNameHistory::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendPersonaNameHistory, PersonaNameIndex) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendPersonaNameHistory::PersonaNameIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendPersonaNameHistory, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_GetFriendPersonaNameHistory::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendPersonaState
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetFriendPersonaState final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_PersonaState                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendPersonaState) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendPersonaState");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendPersonaState) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetFriendPersonaState");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendPersonaState, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendPersonaState::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendPersonaState, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendPersonaState::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRelationship
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetFriendRelationship final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_FriendRelationship                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendRelationship) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendRelationship");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendRelationship) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetFriendRelationship");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRelationship, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendRelationship::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRelationship, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendRelationship::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRichPresence
// 0x0028 (0x0028 - 0x0000)
struct SIK_FriendsLibrary_GetFriendRichPresence final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendRichPresence) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendRichPresence");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendRichPresence) == 0x000028, "Wrong size on SIK_FriendsLibrary_GetFriendRichPresence");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresence, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendRichPresence::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresence, Key) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendRichPresence::Key' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresence, ReturnValue) == 0x000018, "Member 'SIK_FriendsLibrary_GetFriendRichPresence::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRichPresenceKeyByIndex
// 0x0020 (0x0020 - 0x0000)
struct SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         KeyIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex) == 0x000020, "Wrong size on SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex, KeyIndex) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex::KeyIndex' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_GetFriendRichPresenceKeyByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendRichPresenceKeyCount
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetFriendRichPresenceKeyCount final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendRichPresenceKeyCount) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendRichPresenceKeyCount");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendRichPresenceKeyCount) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetFriendRichPresenceKeyCount");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresenceKeyCount, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendRichPresenceKeyCount::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendRichPresenceKeyCount, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendRichPresenceKeyCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendsGroupMembersList
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetFriendsGroupMembersList final
{
public:
	struct FSIK_FriendsGroupID                    FriendsGroupID;                                    // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MembersCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSIK_SteamId>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendsGroupMembersList) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendsGroupMembersList");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendsGroupMembersList) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetFriendsGroupMembersList");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendsGroupMembersList, FriendsGroupID) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendsGroupMembersList::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendsGroupMembersList, MembersCount) == 0x000004, "Member 'SIK_FriendsLibrary_GetFriendsGroupMembersList::MembersCount' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendsGroupMembersList, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendsGroupMembersList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendsGroupName
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetFriendsGroupName final
{
public:
	struct FSIK_FriendsGroupID                    FriendsGroupID;                                    // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendsGroupName) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendsGroupName");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendsGroupName) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetFriendsGroupName");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendsGroupName, FriendsGroupID) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendsGroupName::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendsGroupName, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendsGroupName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetFriendSteamLevel
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetFriendSteamLevel final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetFriendSteamLevel) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetFriendSteamLevel");
static_assert(sizeof(SIK_FriendsLibrary_GetFriendSteamLevel) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetFriendSteamLevel");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendSteamLevel, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetFriendSteamLevel::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetFriendSteamLevel, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetFriendSteamLevel::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetLargeFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetLargeFriendAvatar final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetLargeFriendAvatar) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetLargeFriendAvatar");
static_assert(sizeof(SIK_FriendsLibrary_GetLargeFriendAvatar) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetLargeFriendAvatar");
static_assert(offsetof(SIK_FriendsLibrary_GetLargeFriendAvatar, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetLargeFriendAvatar::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetLargeFriendAvatar, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetLargeFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetMediumFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetMediumFriendAvatar final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetMediumFriendAvatar) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetMediumFriendAvatar");
static_assert(sizeof(SIK_FriendsLibrary_GetMediumFriendAvatar) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetMediumFriendAvatar");
static_assert(offsetof(SIK_FriendsLibrary_GetMediumFriendAvatar, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetMediumFriendAvatar::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetMediumFriendAvatar, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetMediumFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetPersonaName
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetPersonaName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetPersonaName) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetPersonaName");
static_assert(sizeof(SIK_FriendsLibrary_GetPersonaName) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetPersonaName");
static_assert(offsetof(SIK_FriendsLibrary_GetPersonaName, ReturnValue) == 0x000000, "Member 'SIK_FriendsLibrary_GetPersonaName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetPersonaState
// 0x0001 (0x0001 - 0x0000)
struct SIK_FriendsLibrary_GetPersonaState final
{
public:
	ESIK_PersonaState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetPersonaState) == 0x000001, "Wrong alignment on SIK_FriendsLibrary_GetPersonaState");
static_assert(sizeof(SIK_FriendsLibrary_GetPersonaState) == 0x000001, "Wrong size on SIK_FriendsLibrary_GetPersonaState");
static_assert(offsetof(SIK_FriendsLibrary_GetPersonaState, ReturnValue) == 0x000000, "Member 'SIK_FriendsLibrary_GetPersonaState::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetPlayerNickname
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_GetPlayerNickname final
{
public:
	struct FSIK_SteamId                           SteamIdPlayer;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetPlayerNickname) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetPlayerNickname");
static_assert(sizeof(SIK_FriendsLibrary_GetPlayerNickname) == 0x000018, "Wrong size on SIK_FriendsLibrary_GetPlayerNickname");
static_assert(offsetof(SIK_FriendsLibrary_GetPlayerNickname, SteamIdPlayer) == 0x000000, "Member 'SIK_FriendsLibrary_GetPlayerNickname::SteamIdPlayer' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetPlayerNickname, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetPlayerNickname::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetProfileItemPropertyString
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetProfileItemPropertyString final
{
public:
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_ECommunityProfileItemType                ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_ECommunityProfileItemProperty            Property;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetProfileItemPropertyString) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetProfileItemPropertyString");
static_assert(sizeof(SIK_FriendsLibrary_GetProfileItemPropertyString) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetProfileItemPropertyString");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyString, steamIDUser) == 0x000000, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyString::steamIDUser' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyString, ItemType) == 0x000008, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyString::ItemType' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyString, Property) == 0x000009, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyString::Property' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyString, ReturnValue) == 0x00000A, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyString::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetProfileItemPropertyUint
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetProfileItemPropertyUint final
{
public:
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_ECommunityProfileItemType                ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_ECommunityProfileItemProperty            Property;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_GetProfileItemPropertyUint) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetProfileItemPropertyUint");
static_assert(sizeof(SIK_FriendsLibrary_GetProfileItemPropertyUint) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetProfileItemPropertyUint");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyUint, steamIDUser) == 0x000000, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyUint::steamIDUser' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyUint, ItemType) == 0x000008, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyUint::ItemType' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyUint, Property) == 0x000009, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyUint::Property' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetProfileItemPropertyUint, ReturnValue) == 0x00000A, "Member 'SIK_FriendsLibrary_GetProfileItemPropertyUint::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetSmallFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_GetSmallFriendAvatar final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetSmallFriendAvatar) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_GetSmallFriendAvatar");
static_assert(sizeof(SIK_FriendsLibrary_GetSmallFriendAvatar) == 0x000010, "Wrong size on SIK_FriendsLibrary_GetSmallFriendAvatar");
static_assert(offsetof(SIK_FriendsLibrary_GetSmallFriendAvatar, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_GetSmallFriendAvatar::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_GetSmallFriendAvatar, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_GetSmallFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.GetUserRestrictions
// 0x0004 (0x0004 - 0x0000)
struct SIK_FriendsLibrary_GetUserRestrictions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_GetUserRestrictions) == 0x000004, "Wrong alignment on SIK_FriendsLibrary_GetUserRestrictions");
static_assert(sizeof(SIK_FriendsLibrary_GetUserRestrictions) == 0x000004, "Wrong size on SIK_FriendsLibrary_GetUserRestrictions");
static_assert(offsetof(SIK_FriendsLibrary_GetUserRestrictions, ReturnValue) == 0x000000, "Member 'SIK_FriendsLibrary_GetUserRestrictions::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.HasFriend
// 0x0020 (0x0020 - 0x0000)
struct SIK_FriendsLibrary_HasFriend final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<ESIK_FriendFlags>                      FriendFlags;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_HasFriend) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_HasFriend");
static_assert(sizeof(SIK_FriendsLibrary_HasFriend) == 0x000020, "Wrong size on SIK_FriendsLibrary_HasFriend");
static_assert(offsetof(SIK_FriendsLibrary_HasFriend, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_HasFriend::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_HasFriend, FriendFlags) == 0x000008, "Member 'SIK_FriendsLibrary_HasFriend::FriendFlags' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_HasFriend, ReturnValue) == 0x000018, "Member 'SIK_FriendsLibrary_HasFriend::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.InviteUserToGame
// 0x0020 (0x0020 - 0x0000)
struct SIK_FriendsLibrary_InviteUserToGame final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_InviteUserToGame) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_InviteUserToGame");
static_assert(sizeof(SIK_FriendsLibrary_InviteUserToGame) == 0x000020, "Wrong size on SIK_FriendsLibrary_InviteUserToGame");
static_assert(offsetof(SIK_FriendsLibrary_InviteUserToGame, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_InviteUserToGame::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_InviteUserToGame, ConnectString) == 0x000008, "Member 'SIK_FriendsLibrary_InviteUserToGame::ConnectString' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_InviteUserToGame, ReturnValue) == 0x000018, "Member 'SIK_FriendsLibrary_InviteUserToGame::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanChatAdmin
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_IsClanChatAdmin final
{
public:
	struct FSIK_SteamId                           SteamIdClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_IsClanChatAdmin) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_IsClanChatAdmin");
static_assert(sizeof(SIK_FriendsLibrary_IsClanChatAdmin) == 0x000018, "Wrong size on SIK_FriendsLibrary_IsClanChatAdmin");
static_assert(offsetof(SIK_FriendsLibrary_IsClanChatAdmin, SteamIdClanChat) == 0x000000, "Member 'SIK_FriendsLibrary_IsClanChatAdmin::SteamIdClanChat' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsClanChatAdmin, steamIDUser) == 0x000008, "Member 'SIK_FriendsLibrary_IsClanChatAdmin::steamIDUser' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsClanChatAdmin, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_IsClanChatAdmin::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanChatWindowOpenInSteam
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_IsClanChatWindowOpenInSteam final
{
public:
	struct FSIK_SteamId                           SteamIdClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_IsClanChatWindowOpenInSteam) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_IsClanChatWindowOpenInSteam");
static_assert(sizeof(SIK_FriendsLibrary_IsClanChatWindowOpenInSteam) == 0x000010, "Wrong size on SIK_FriendsLibrary_IsClanChatWindowOpenInSteam");
static_assert(offsetof(SIK_FriendsLibrary_IsClanChatWindowOpenInSteam, SteamIdClanChat) == 0x000000, "Member 'SIK_FriendsLibrary_IsClanChatWindowOpenInSteam::SteamIdClanChat' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsClanChatWindowOpenInSteam, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_IsClanChatWindowOpenInSteam::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanOfficialGameGroup
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_IsClanOfficialGameGroup final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_IsClanOfficialGameGroup) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_IsClanOfficialGameGroup");
static_assert(sizeof(SIK_FriendsLibrary_IsClanOfficialGameGroup) == 0x000010, "Wrong size on SIK_FriendsLibrary_IsClanOfficialGameGroup");
static_assert(offsetof(SIK_FriendsLibrary_IsClanOfficialGameGroup, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_IsClanOfficialGameGroup::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsClanOfficialGameGroup, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_IsClanOfficialGameGroup::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.IsClanPublic
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_IsClanPublic final
{
public:
	struct FSIK_SteamId                           SteamIdClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_IsClanPublic) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_IsClanPublic");
static_assert(sizeof(SIK_FriendsLibrary_IsClanPublic) == 0x000010, "Wrong size on SIK_FriendsLibrary_IsClanPublic");
static_assert(offsetof(SIK_FriendsLibrary_IsClanPublic, SteamIdClan) == 0x000000, "Member 'SIK_FriendsLibrary_IsClanPublic::SteamIdClan' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsClanPublic, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_IsClanPublic::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.IsFollowing
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_IsFollowing final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_IsFollowing) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_IsFollowing");
static_assert(sizeof(SIK_FriendsLibrary_IsFollowing) == 0x000010, "Wrong size on SIK_FriendsLibrary_IsFollowing");
static_assert(offsetof(SIK_FriendsLibrary_IsFollowing, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_IsFollowing::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsFollowing, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_IsFollowing::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.IsUserInSource
// 0x0018 (0x0018 - 0x0000)
struct SIK_FriendsLibrary_IsUserInSource final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           SteamIdSource;                                     // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_IsUserInSource) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_IsUserInSource");
static_assert(sizeof(SIK_FriendsLibrary_IsUserInSource) == 0x000018, "Wrong size on SIK_FriendsLibrary_IsUserInSource");
static_assert(offsetof(SIK_FriendsLibrary_IsUserInSource, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_IsUserInSource::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsUserInSource, SteamIdSource) == 0x000008, "Member 'SIK_FriendsLibrary_IsUserInSource::SteamIdSource' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_IsUserInSource, ReturnValue) == 0x000010, "Member 'SIK_FriendsLibrary_IsUserInSource::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.LeaveClanChatRoom
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_LeaveClanChatRoom final
{
public:
	struct FSIK_SteamId                           SteamIdClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_LeaveClanChatRoom) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_LeaveClanChatRoom");
static_assert(sizeof(SIK_FriendsLibrary_LeaveClanChatRoom) == 0x000010, "Wrong size on SIK_FriendsLibrary_LeaveClanChatRoom");
static_assert(offsetof(SIK_FriendsLibrary_LeaveClanChatRoom, SteamIdClanChat) == 0x000000, "Member 'SIK_FriendsLibrary_LeaveClanChatRoom::SteamIdClanChat' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_LeaveClanChatRoom, ReturnValue) == 0x000008, "Member 'SIK_FriendsLibrary_LeaveClanChatRoom::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.ReplyToFriendMessage
// 0x0020 (0x0020 - 0x0000)
struct SIK_FriendsLibrary_ReplyToFriendMessage final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_ReplyToFriendMessage) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_ReplyToFriendMessage");
static_assert(sizeof(SIK_FriendsLibrary_ReplyToFriendMessage) == 0x000020, "Wrong size on SIK_FriendsLibrary_ReplyToFriendMessage");
static_assert(offsetof(SIK_FriendsLibrary_ReplyToFriendMessage, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_ReplyToFriendMessage::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_ReplyToFriendMessage, Text) == 0x000008, "Member 'SIK_FriendsLibrary_ReplyToFriendMessage::Text' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_ReplyToFriendMessage, ReturnValue) == 0x000018, "Member 'SIK_FriendsLibrary_ReplyToFriendMessage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.RequestFriendRichPresence
// 0x0008 (0x0008 - 0x0000)
struct SIK_FriendsLibrary_RequestFriendRichPresence final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_RequestFriendRichPresence) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_RequestFriendRichPresence");
static_assert(sizeof(SIK_FriendsLibrary_RequestFriendRichPresence) == 0x000008, "Wrong size on SIK_FriendsLibrary_RequestFriendRichPresence");
static_assert(offsetof(SIK_FriendsLibrary_RequestFriendRichPresence, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_RequestFriendRichPresence::SteamIdFriend' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.RequestUserInfo
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_RequestUserInfo final
{
public:
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequireNameOnly;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_RequestUserInfo) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_RequestUserInfo");
static_assert(sizeof(SIK_FriendsLibrary_RequestUserInfo) == 0x000010, "Wrong size on SIK_FriendsLibrary_RequestUserInfo");
static_assert(offsetof(SIK_FriendsLibrary_RequestUserInfo, steamIDUser) == 0x000000, "Member 'SIK_FriendsLibrary_RequestUserInfo::steamIDUser' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_RequestUserInfo, bRequireNameOnly) == 0x000008, "Member 'SIK_FriendsLibrary_RequestUserInfo::bRequireNameOnly' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_RequestUserInfo, ReturnValue) == 0x000009, "Member 'SIK_FriendsLibrary_RequestUserInfo::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.SendClanChatMessage
// 0x0020 (0x0020 - 0x0000)
struct SIK_FriendsLibrary_SendClanChatMessage final
{
public:
	struct FSIK_SteamId                           SteamIdClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_SendClanChatMessage) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_SendClanChatMessage");
static_assert(sizeof(SIK_FriendsLibrary_SendClanChatMessage) == 0x000020, "Wrong size on SIK_FriendsLibrary_SendClanChatMessage");
static_assert(offsetof(SIK_FriendsLibrary_SendClanChatMessage, SteamIdClanChat) == 0x000000, "Member 'SIK_FriendsLibrary_SendClanChatMessage::SteamIdClanChat' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_SendClanChatMessage, Text) == 0x000008, "Member 'SIK_FriendsLibrary_SendClanChatMessage::Text' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_SendClanChatMessage, ReturnValue) == 0x000018, "Member 'SIK_FriendsLibrary_SendClanChatMessage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.SetInGameVoiceSpeaking
// 0x0010 (0x0010 - 0x0000)
struct SIK_FriendsLibrary_SetInGameVoiceSpeaking final
{
public:
	struct FSIK_SteamId                           SteamIdFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSpeaking;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_SetInGameVoiceSpeaking) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_SetInGameVoiceSpeaking");
static_assert(sizeof(SIK_FriendsLibrary_SetInGameVoiceSpeaking) == 0x000010, "Wrong size on SIK_FriendsLibrary_SetInGameVoiceSpeaking");
static_assert(offsetof(SIK_FriendsLibrary_SetInGameVoiceSpeaking, SteamIdFriend) == 0x000000, "Member 'SIK_FriendsLibrary_SetInGameVoiceSpeaking::SteamIdFriend' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_SetInGameVoiceSpeaking, bSpeaking) == 0x000008, "Member 'SIK_FriendsLibrary_SetInGameVoiceSpeaking::bSpeaking' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.SetListenForFriendMessage
// 0x0001 (0x0001 - 0x0000)
struct SIK_FriendsLibrary_SetListenForFriendMessage final
{
public:
	bool                                          bInterceptEnabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_SetListenForFriendMessage) == 0x000001, "Wrong alignment on SIK_FriendsLibrary_SetListenForFriendMessage");
static_assert(sizeof(SIK_FriendsLibrary_SetListenForFriendMessage) == 0x000001, "Wrong size on SIK_FriendsLibrary_SetListenForFriendMessage");
static_assert(offsetof(SIK_FriendsLibrary_SetListenForFriendMessage, bInterceptEnabled) == 0x000000, "Member 'SIK_FriendsLibrary_SetListenForFriendMessage::bInterceptEnabled' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.SetPlayedWith
// 0x0008 (0x0008 - 0x0000)
struct SIK_FriendsLibrary_SetPlayedWith final
{
public:
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_FriendsLibrary_SetPlayedWith) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_SetPlayedWith");
static_assert(sizeof(SIK_FriendsLibrary_SetPlayedWith) == 0x000008, "Wrong size on SIK_FriendsLibrary_SetPlayedWith");
static_assert(offsetof(SIK_FriendsLibrary_SetPlayedWith, steamIDUser) == 0x000000, "Member 'SIK_FriendsLibrary_SetPlayedWith::steamIDUser' has a wrong offset!");

// Function SteamIntegrationKit.SIK_FriendsLibrary.SetRichPresence
// 0x0028 (0x0028 - 0x0000)
struct SIK_FriendsLibrary_SetRichPresence final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_FriendsLibrary_SetRichPresence) == 0x000008, "Wrong alignment on SIK_FriendsLibrary_SetRichPresence");
static_assert(sizeof(SIK_FriendsLibrary_SetRichPresence) == 0x000028, "Wrong size on SIK_FriendsLibrary_SetRichPresence");
static_assert(offsetof(SIK_FriendsLibrary_SetRichPresence, Key) == 0x000000, "Member 'SIK_FriendsLibrary_SetRichPresence::Key' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_SetRichPresence, Value) == 0x000010, "Member 'SIK_FriendsLibrary_SetRichPresence::Value' has a wrong offset!");
static_assert(offsetof(SIK_FriendsLibrary_SetRichPresence, ReturnValue) == 0x000020, "Member 'SIK_FriendsLibrary_SetRichPresence::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.BeginAuthSession
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerLibrary_BeginAuthSession final
{
public:
	TArray<uint8>                                 Token;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_BeginAuthSessionResult                   ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerLibrary_BeginAuthSession) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_BeginAuthSession");
static_assert(sizeof(SIK_GameServerLibrary_BeginAuthSession) == 0x000020, "Wrong size on SIK_GameServerLibrary_BeginAuthSession");
static_assert(offsetof(SIK_GameServerLibrary_BeginAuthSession, Token) == 0x000000, "Member 'SIK_GameServerLibrary_BeginAuthSession::Token' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_BeginAuthSession, SteamID) == 0x000010, "Member 'SIK_GameServerLibrary_BeginAuthSession::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_BeginAuthSession, ReturnValue) == 0x000018, "Member 'SIK_GameServerLibrary_BeginAuthSession::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.CancelAuthTicket
// 0x0004 (0x0004 - 0x0000)
struct SIK_GameServerLibrary_CancelAuthTicket final
{
public:
	struct FSIK_AuthTicket                        AuthTicket;                                        // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_CancelAuthTicket) == 0x000004, "Wrong alignment on SIK_GameServerLibrary_CancelAuthTicket");
static_assert(sizeof(SIK_GameServerLibrary_CancelAuthTicket) == 0x000004, "Wrong size on SIK_GameServerLibrary_CancelAuthTicket");
static_assert(offsetof(SIK_GameServerLibrary_CancelAuthTicket, AuthTicket) == 0x000000, "Member 'SIK_GameServerLibrary_CancelAuthTicket::AuthTicket' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.CreateUnauthenticatedUserConnection
// 0x0008 (0x0008 - 0x0000)
struct SIK_GameServerLibrary_CreateUnauthenticatedUserConnection final
{
public:
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_CreateUnauthenticatedUserConnection) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_CreateUnauthenticatedUserConnection");
static_assert(sizeof(SIK_GameServerLibrary_CreateUnauthenticatedUserConnection) == 0x000008, "Wrong size on SIK_GameServerLibrary_CreateUnauthenticatedUserConnection");
static_assert(offsetof(SIK_GameServerLibrary_CreateUnauthenticatedUserConnection, ReturnValue) == 0x000000, "Member 'SIK_GameServerLibrary_CreateUnauthenticatedUserConnection::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.EnableHeartbeats
// 0x0001 (0x0001 - 0x0000)
struct SIK_GameServerLibrary_EnableHeartbeats final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_EnableHeartbeats) == 0x000001, "Wrong alignment on SIK_GameServerLibrary_EnableHeartbeats");
static_assert(sizeof(SIK_GameServerLibrary_EnableHeartbeats) == 0x000001, "Wrong size on SIK_GameServerLibrary_EnableHeartbeats");
static_assert(offsetof(SIK_GameServerLibrary_EnableHeartbeats, bActive) == 0x000000, "Member 'SIK_GameServerLibrary_EnableHeartbeats::bActive' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.EndAuthSession
// 0x0008 (0x0008 - 0x0000)
struct SIK_GameServerLibrary_EndAuthSession final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_EndAuthSession) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_EndAuthSession");
static_assert(sizeof(SIK_GameServerLibrary_EndAuthSession) == 0x000008, "Wrong size on SIK_GameServerLibrary_EndAuthSession");
static_assert(offsetof(SIK_GameServerLibrary_EndAuthSession, SteamID) == 0x000000, "Member 'SIK_GameServerLibrary_EndAuthSession::SteamID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.GetAuthSessionTicket
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_GetAuthSessionTicket final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_GetAuthSessionTicket) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_GetAuthSessionTicket");
static_assert(sizeof(SIK_GameServerLibrary_GetAuthSessionTicket) == 0x000010, "Wrong size on SIK_GameServerLibrary_GetAuthSessionTicket");
static_assert(offsetof(SIK_GameServerLibrary_GetAuthSessionTicket, ReturnValue) == 0x000000, "Member 'SIK_GameServerLibrary_GetAuthSessionTicket::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.GetPublicIP
// 0x000C (0x000C - 0x0000)
struct SIK_GameServerLibrary_GetPublicIP final
{
public:
	struct FSIK_SteamIPAddress                    ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_GetPublicIP) == 0x000004, "Wrong alignment on SIK_GameServerLibrary_GetPublicIP");
static_assert(sizeof(SIK_GameServerLibrary_GetPublicIP) == 0x00000C, "Wrong size on SIK_GameServerLibrary_GetPublicIP");
static_assert(offsetof(SIK_GameServerLibrary_GetPublicIP, ReturnValue) == 0x000000, "Member 'SIK_GameServerLibrary_GetPublicIP::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.GetSteamID
// 0x0008 (0x0008 - 0x0000)
struct SIK_GameServerLibrary_GetSteamID final
{
public:
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_GetSteamID) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_GetSteamID");
static_assert(sizeof(SIK_GameServerLibrary_GetSteamID) == 0x000008, "Wrong size on SIK_GameServerLibrary_GetSteamID");
static_assert(offsetof(SIK_GameServerLibrary_GetSteamID, ReturnValue) == 0x000000, "Member 'SIK_GameServerLibrary_GetSteamID::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.LoggedOn
// 0x0001 (0x0001 - 0x0000)
struct SIK_GameServerLibrary_LoggedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_LoggedOn) == 0x000001, "Wrong alignment on SIK_GameServerLibrary_LoggedOn");
static_assert(sizeof(SIK_GameServerLibrary_LoggedOn) == 0x000001, "Wrong size on SIK_GameServerLibrary_LoggedOn");
static_assert(offsetof(SIK_GameServerLibrary_LoggedOn, ReturnValue) == 0x000000, "Member 'SIK_GameServerLibrary_LoggedOn::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.LogOn
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_LogOn final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_LogOn) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_LogOn");
static_assert(sizeof(SIK_GameServerLibrary_LogOn) == 0x000010, "Wrong size on SIK_GameServerLibrary_LogOn");
static_assert(offsetof(SIK_GameServerLibrary_LogOn, Token) == 0x000000, "Member 'SIK_GameServerLibrary_LogOn::Token' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.RequestUserGroupStatus
// 0x0018 (0x0018 - 0x0000)
struct SIK_GameServerLibrary_RequestUserGroupStatus final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           GroupID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerLibrary_RequestUserGroupStatus) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_RequestUserGroupStatus");
static_assert(sizeof(SIK_GameServerLibrary_RequestUserGroupStatus) == 0x000018, "Wrong size on SIK_GameServerLibrary_RequestUserGroupStatus");
static_assert(offsetof(SIK_GameServerLibrary_RequestUserGroupStatus, SteamID) == 0x000000, "Member 'SIK_GameServerLibrary_RequestUserGroupStatus::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_RequestUserGroupStatus, GroupID) == 0x000008, "Member 'SIK_GameServerLibrary_RequestUserGroupStatus::GroupID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_RequestUserGroupStatus, ReturnValue) == 0x000010, "Member 'SIK_GameServerLibrary_RequestUserGroupStatus::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.Secure
// 0x0001 (0x0001 - 0x0000)
struct SIK_GameServerLibrary_Secure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_Secure) == 0x000001, "Wrong alignment on SIK_GameServerLibrary_Secure");
static_assert(sizeof(SIK_GameServerLibrary_Secure) == 0x000001, "Wrong size on SIK_GameServerLibrary_Secure");
static_assert(offsetof(SIK_GameServerLibrary_Secure, ReturnValue) == 0x000000, "Member 'SIK_GameServerLibrary_Secure::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetBotPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_GameServerLibrary_SetBotPlayerCount final
{
public:
	int32                                         BotPlayerCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetBotPlayerCount) == 0x000004, "Wrong alignment on SIK_GameServerLibrary_SetBotPlayerCount");
static_assert(sizeof(SIK_GameServerLibrary_SetBotPlayerCount) == 0x000004, "Wrong size on SIK_GameServerLibrary_SetBotPlayerCount");
static_assert(offsetof(SIK_GameServerLibrary_SetBotPlayerCount, BotPlayerCount) == 0x000000, "Member 'SIK_GameServerLibrary_SetBotPlayerCount::BotPlayerCount' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct SIK_GameServerLibrary_SetDedicatedServer final
{
public:
	bool                                          bDedicated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetDedicatedServer) == 0x000001, "Wrong alignment on SIK_GameServerLibrary_SetDedicatedServer");
static_assert(sizeof(SIK_GameServerLibrary_SetDedicatedServer) == 0x000001, "Wrong size on SIK_GameServerLibrary_SetDedicatedServer");
static_assert(offsetof(SIK_GameServerLibrary_SetDedicatedServer, bDedicated) == 0x000000, "Member 'SIK_GameServerLibrary_SetDedicatedServer::bDedicated' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetGameData
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetGameData final
{
public:
	class FString                                 GameData;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetGameData) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetGameData");
static_assert(sizeof(SIK_GameServerLibrary_SetGameData) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetGameData");
static_assert(offsetof(SIK_GameServerLibrary_SetGameData, GameData) == 0x000000, "Member 'SIK_GameServerLibrary_SetGameData::GameData' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetGameDescription
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetGameDescription final
{
public:
	class FString                                 GameDescription;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetGameDescription) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetGameDescription");
static_assert(sizeof(SIK_GameServerLibrary_SetGameDescription) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetGameDescription");
static_assert(offsetof(SIK_GameServerLibrary_SetGameDescription, GameDescription) == 0x000000, "Member 'SIK_GameServerLibrary_SetGameDescription::GameDescription' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetGameTags
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetGameTags final
{
public:
	class FString                                 GameTags;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetGameTags) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetGameTags");
static_assert(sizeof(SIK_GameServerLibrary_SetGameTags) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetGameTags");
static_assert(offsetof(SIK_GameServerLibrary_SetGameTags, GameTags) == 0x000000, "Member 'SIK_GameServerLibrary_SetGameTags::GameTags' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetKeyValue
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerLibrary_SetKeyValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetKeyValue) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetKeyValue");
static_assert(sizeof(SIK_GameServerLibrary_SetKeyValue) == 0x000020, "Wrong size on SIK_GameServerLibrary_SetKeyValue");
static_assert(offsetof(SIK_GameServerLibrary_SetKeyValue, Key) == 0x000000, "Member 'SIK_GameServerLibrary_SetKeyValue::Key' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_SetKeyValue, Value) == 0x000010, "Member 'SIK_GameServerLibrary_SetKeyValue::Value' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetMapName
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetMapName final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetMapName) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetMapName");
static_assert(sizeof(SIK_GameServerLibrary_SetMapName) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetMapName");
static_assert(offsetof(SIK_GameServerLibrary_SetMapName, MapName) == 0x000000, "Member 'SIK_GameServerLibrary_SetMapName::MapName' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetMaxPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_GameServerLibrary_SetMaxPlayerCount final
{
public:
	int32                                         MaxPlayerCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetMaxPlayerCount) == 0x000004, "Wrong alignment on SIK_GameServerLibrary_SetMaxPlayerCount");
static_assert(sizeof(SIK_GameServerLibrary_SetMaxPlayerCount) == 0x000004, "Wrong size on SIK_GameServerLibrary_SetMaxPlayerCount");
static_assert(offsetof(SIK_GameServerLibrary_SetMaxPlayerCount, MaxPlayerCount) == 0x000000, "Member 'SIK_GameServerLibrary_SetMaxPlayerCount::MaxPlayerCount' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetModDir
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetModDir final
{
public:
	class FString                                 ModDir;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetModDir) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetModDir");
static_assert(sizeof(SIK_GameServerLibrary_SetModDir) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetModDir");
static_assert(offsetof(SIK_GameServerLibrary_SetModDir, ModDir) == 0x000000, "Member 'SIK_GameServerLibrary_SetModDir::ModDir' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetPasswordProtected
// 0x0001 (0x0001 - 0x0000)
struct SIK_GameServerLibrary_SetPasswordProtected final
{
public:
	bool                                          bPasswordProtected;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetPasswordProtected) == 0x000001, "Wrong alignment on SIK_GameServerLibrary_SetPasswordProtected");
static_assert(sizeof(SIK_GameServerLibrary_SetPasswordProtected) == 0x000001, "Wrong size on SIK_GameServerLibrary_SetPasswordProtected");
static_assert(offsetof(SIK_GameServerLibrary_SetPasswordProtected, bPasswordProtected) == 0x000000, "Member 'SIK_GameServerLibrary_SetPasswordProtected::bPasswordProtected' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetProduct
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetProduct final
{
public:
	class FString                                 Product;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetProduct) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetProduct");
static_assert(sizeof(SIK_GameServerLibrary_SetProduct) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetProduct");
static_assert(offsetof(SIK_GameServerLibrary_SetProduct, Product) == 0x000000, "Member 'SIK_GameServerLibrary_SetProduct::Product' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetRegion
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetRegion final
{
public:
	class FString                                 Region;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetRegion) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetRegion");
static_assert(sizeof(SIK_GameServerLibrary_SetRegion) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetRegion");
static_assert(offsetof(SIK_GameServerLibrary_SetRegion, Region) == 0x000000, "Member 'SIK_GameServerLibrary_SetRegion::Region' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetServerName
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetServerName final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetServerName) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetServerName");
static_assert(sizeof(SIK_GameServerLibrary_SetServerName) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetServerName");
static_assert(offsetof(SIK_GameServerLibrary_SetServerName, ServerName) == 0x000000, "Member 'SIK_GameServerLibrary_SetServerName::ServerName' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetSpectatorPort
// 0x0004 (0x0004 - 0x0000)
struct SIK_GameServerLibrary_SetSpectatorPort final
{
public:
	int32                                         SpectatorPort;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetSpectatorPort) == 0x000004, "Wrong alignment on SIK_GameServerLibrary_SetSpectatorPort");
static_assert(sizeof(SIK_GameServerLibrary_SetSpectatorPort) == 0x000004, "Wrong size on SIK_GameServerLibrary_SetSpectatorPort");
static_assert(offsetof(SIK_GameServerLibrary_SetSpectatorPort, SpectatorPort) == 0x000000, "Member 'SIK_GameServerLibrary_SetSpectatorPort::SpectatorPort' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.SetSpectatorServerName
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_SetSpectatorServerName final
{
public:
	class FString                                 SpectatorServerName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_SetSpectatorServerName) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_SetSpectatorServerName");
static_assert(sizeof(SIK_GameServerLibrary_SetSpectatorServerName) == 0x000010, "Wrong size on SIK_GameServerLibrary_SetSpectatorServerName");
static_assert(offsetof(SIK_GameServerLibrary_SetSpectatorServerName, SpectatorServerName) == 0x000000, "Member 'SIK_GameServerLibrary_SetSpectatorServerName::SpectatorServerName' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.UpdateUserData
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerLibrary_UpdateUserData final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerLibrary_UpdateUserData) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_UpdateUserData");
static_assert(sizeof(SIK_GameServerLibrary_UpdateUserData) == 0x000020, "Wrong size on SIK_GameServerLibrary_UpdateUserData");
static_assert(offsetof(SIK_GameServerLibrary_UpdateUserData, SteamID) == 0x000000, "Member 'SIK_GameServerLibrary_UpdateUserData::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_UpdateUserData, PlayerName) == 0x000008, "Member 'SIK_GameServerLibrary_UpdateUserData::PlayerName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_UpdateUserData, Score) == 0x000018, "Member 'SIK_GameServerLibrary_UpdateUserData::Score' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_UpdateUserData, ReturnValue) == 0x00001C, "Member 'SIK_GameServerLibrary_UpdateUserData::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.UserHasLicenseForApp
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerLibrary_UserHasLicenseForApp final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_UserHasLicenseForAppResult               ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerLibrary_UserHasLicenseForApp) == 0x000008, "Wrong alignment on SIK_GameServerLibrary_UserHasLicenseForApp");
static_assert(sizeof(SIK_GameServerLibrary_UserHasLicenseForApp) == 0x000010, "Wrong size on SIK_GameServerLibrary_UserHasLicenseForApp");
static_assert(offsetof(SIK_GameServerLibrary_UserHasLicenseForApp, SteamID) == 0x000000, "Member 'SIK_GameServerLibrary_UserHasLicenseForApp::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_UserHasLicenseForApp, AppID) == 0x000008, "Member 'SIK_GameServerLibrary_UserHasLicenseForApp::AppID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerLibrary_UserHasLicenseForApp, ReturnValue) == 0x00000C, "Member 'SIK_GameServerLibrary_UserHasLicenseForApp::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerLibrary.WasRestartRequested
// 0x0001 (0x0001 - 0x0000)
struct SIK_GameServerLibrary_WasRestartRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GameServerLibrary_WasRestartRequested) == 0x000001, "Wrong alignment on SIK_GameServerLibrary_WasRestartRequested");
static_assert(sizeof(SIK_GameServerLibrary_WasRestartRequested) == 0x000001, "Wrong size on SIK_GameServerLibrary_WasRestartRequested");
static_assert(offsetof(SIK_GameServerLibrary_WasRestartRequested, ReturnValue) == 0x000000, "Member 'SIK_GameServerLibrary_WasRestartRequested::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.ClearUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerStatsLibrary_ClearUserAchievement final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 AchievementName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_ClearUserAchievement) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_ClearUserAchievement");
static_assert(sizeof(SIK_GameServerStatsLibrary_ClearUserAchievement) == 0x000020, "Wrong size on SIK_GameServerStatsLibrary_ClearUserAchievement");
static_assert(offsetof(SIK_GameServerStatsLibrary_ClearUserAchievement, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_ClearUserAchievement::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_ClearUserAchievement, AchievementName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_ClearUserAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_ClearUserAchievement, ReturnValue) == 0x000018, "Member 'SIK_GameServerStatsLibrary_ClearUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.GetFloatUserStat
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerStatsLibrary_GetFloatUserStat final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_GetFloatUserStat) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_GetFloatUserStat");
static_assert(sizeof(SIK_GameServerStatsLibrary_GetFloatUserStat) == 0x000020, "Wrong size on SIK_GameServerStatsLibrary_GetFloatUserStat");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetFloatUserStat, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_GetFloatUserStat::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetFloatUserStat, StatName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_GetFloatUserStat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetFloatUserStat, Data) == 0x000018, "Member 'SIK_GameServerStatsLibrary_GetFloatUserStat::Data' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetFloatUserStat, ReturnValue) == 0x00001C, "Member 'SIK_GameServerStatsLibrary_GetFloatUserStat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.GetIntUserStat
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerStatsLibrary_GetIntUserStat final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_GetIntUserStat) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_GetIntUserStat");
static_assert(sizeof(SIK_GameServerStatsLibrary_GetIntUserStat) == 0x000020, "Wrong size on SIK_GameServerStatsLibrary_GetIntUserStat");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetIntUserStat, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_GetIntUserStat::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetIntUserStat, StatName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_GetIntUserStat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetIntUserStat, Data) == 0x000018, "Member 'SIK_GameServerStatsLibrary_GetIntUserStat::Data' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetIntUserStat, ReturnValue) == 0x00001C, "Member 'SIK_GameServerStatsLibrary_GetIntUserStat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.GetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerStatsLibrary_GetUserAchievement final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 AchievementName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_GetUserAchievement) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_GetUserAchievement");
static_assert(sizeof(SIK_GameServerStatsLibrary_GetUserAchievement) == 0x000020, "Wrong size on SIK_GameServerStatsLibrary_GetUserAchievement");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetUserAchievement, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_GetUserAchievement::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetUserAchievement, AchievementName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_GetUserAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetUserAchievement, bAchieved) == 0x000018, "Member 'SIK_GameServerStatsLibrary_GetUserAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_GetUserAchievement, ReturnValue) == 0x000019, "Member 'SIK_GameServerStatsLibrary_GetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.RequestUserStats
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerStatsLibrary_RequestUserStats final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_RequestUserStats) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_RequestUserStats");
static_assert(sizeof(SIK_GameServerStatsLibrary_RequestUserStats) == 0x000010, "Wrong size on SIK_GameServerStatsLibrary_RequestUserStats");
static_assert(offsetof(SIK_GameServerStatsLibrary_RequestUserStats, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_RequestUserStats::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_RequestUserStats, ReturnValue) == 0x000008, "Member 'SIK_GameServerStatsLibrary_RequestUserStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.SetFloatUserStat
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerStatsLibrary_SetFloatUserStat final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_SetFloatUserStat) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_SetFloatUserStat");
static_assert(sizeof(SIK_GameServerStatsLibrary_SetFloatUserStat) == 0x000020, "Wrong size on SIK_GameServerStatsLibrary_SetFloatUserStat");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetFloatUserStat, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_SetFloatUserStat::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetFloatUserStat, StatName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_SetFloatUserStat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetFloatUserStat, Data) == 0x000018, "Member 'SIK_GameServerStatsLibrary_SetFloatUserStat::Data' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetFloatUserStat, ReturnValue) == 0x00001C, "Member 'SIK_GameServerStatsLibrary_SetFloatUserStat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.SetIntUserStat
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerStatsLibrary_SetIntUserStat final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_SetIntUserStat) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_SetIntUserStat");
static_assert(sizeof(SIK_GameServerStatsLibrary_SetIntUserStat) == 0x000020, "Wrong size on SIK_GameServerStatsLibrary_SetIntUserStat");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetIntUserStat, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_SetIntUserStat::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetIntUserStat, StatName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_SetIntUserStat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetIntUserStat, Data) == 0x000018, "Member 'SIK_GameServerStatsLibrary_SetIntUserStat::Data' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetIntUserStat, ReturnValue) == 0x00001C, "Member 'SIK_GameServerStatsLibrary_SetIntUserStat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.SetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SIK_GameServerStatsLibrary_SetUserAchievement final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 AchievementName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_SetUserAchievement) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_SetUserAchievement");
static_assert(sizeof(SIK_GameServerStatsLibrary_SetUserAchievement) == 0x000020, "Wrong size on SIK_GameServerStatsLibrary_SetUserAchievement");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetUserAchievement, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_SetUserAchievement::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetUserAchievement, AchievementName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_SetUserAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_SetUserAchievement, ReturnValue) == 0x000018, "Member 'SIK_GameServerStatsLibrary_SetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.StoreUserStats
// 0x0010 (0x0010 - 0x0000)
struct SIK_GameServerStatsLibrary_StoreUserStats final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_StoreUserStats) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_StoreUserStats");
static_assert(sizeof(SIK_GameServerStatsLibrary_StoreUserStats) == 0x000010, "Wrong size on SIK_GameServerStatsLibrary_StoreUserStats");
static_assert(offsetof(SIK_GameServerStatsLibrary_StoreUserStats, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_StoreUserStats::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_StoreUserStats, ReturnValue) == 0x000008, "Member 'SIK_GameServerStatsLibrary_StoreUserStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GameServerStatsLibrary.UpdateUserAvgRateStat
// 0x0028 (0x0028 - 0x0000)
struct SIK_GameServerStatsLibrary_UpdateUserAvgRateStat final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CountThisSession;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SessionLength;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_GameServerStatsLibrary_UpdateUserAvgRateStat) == 0x000008, "Wrong alignment on SIK_GameServerStatsLibrary_UpdateUserAvgRateStat");
static_assert(sizeof(SIK_GameServerStatsLibrary_UpdateUserAvgRateStat) == 0x000028, "Wrong size on SIK_GameServerStatsLibrary_UpdateUserAvgRateStat");
static_assert(offsetof(SIK_GameServerStatsLibrary_UpdateUserAvgRateStat, SteamID) == 0x000000, "Member 'SIK_GameServerStatsLibrary_UpdateUserAvgRateStat::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_UpdateUserAvgRateStat, StatName) == 0x000008, "Member 'SIK_GameServerStatsLibrary_UpdateUserAvgRateStat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_UpdateUserAvgRateStat, CountThisSession) == 0x000018, "Member 'SIK_GameServerStatsLibrary_UpdateUserAvgRateStat::CountThisSession' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_UpdateUserAvgRateStat, SessionLength) == 0x00001C, "Member 'SIK_GameServerStatsLibrary_UpdateUserAvgRateStat::SessionLength' has a wrong offset!");
static_assert(offsetof(SIK_GameServerStatsLibrary_UpdateUserAvgRateStat, ReturnValue) == 0x000020, "Member 'SIK_GameServerStatsLibrary_UpdateUserAvgRateStat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GetAppDependencies_AsyncFunction.GetAppDependencies
// 0x0010 (0x0010 - 0x0000)
struct SIK_GetAppDependencies_AsyncFunction_GetAppDependencies final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_GetAppDependencies_AsyncFunction*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GetAppDependencies_AsyncFunction_GetAppDependencies) == 0x000008, "Wrong alignment on SIK_GetAppDependencies_AsyncFunction_GetAppDependencies");
static_assert(sizeof(SIK_GetAppDependencies_AsyncFunction_GetAppDependencies) == 0x000010, "Wrong size on SIK_GetAppDependencies_AsyncFunction_GetAppDependencies");
static_assert(offsetof(SIK_GetAppDependencies_AsyncFunction_GetAppDependencies, PublishedFileId) == 0x000000, "Member 'SIK_GetAppDependencies_AsyncFunction_GetAppDependencies::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_GetAppDependencies_AsyncFunction_GetAppDependencies, ReturnValue) == 0x000008, "Member 'SIK_GetAppDependencies_AsyncFunction_GetAppDependencies::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GetDurationControl_AsyncFunction.GetDurationControl
// 0x0008 (0x0008 - 0x0000)
struct SIK_GetDurationControl_AsyncFunction_GetDurationControl final
{
public:
	class USIK_GetDurationControl_AsyncFunction*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GetDurationControl_AsyncFunction_GetDurationControl) == 0x000008, "Wrong alignment on SIK_GetDurationControl_AsyncFunction_GetDurationControl");
static_assert(sizeof(SIK_GetDurationControl_AsyncFunction_GetDurationControl) == 0x000008, "Wrong size on SIK_GetDurationControl_AsyncFunction_GetDurationControl");
static_assert(offsetof(SIK_GetDurationControl_AsyncFunction_GetDurationControl, ReturnValue) == 0x000000, "Member 'SIK_GetDurationControl_AsyncFunction_GetDurationControl::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GetFileDetails_AsyncFunction.GetFileDetails
// 0x0018 (0x0018 - 0x0000)
struct SIK_GetFileDetails_AsyncFunction_GetFileDetails final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_GetFileDetails_AsyncFunction*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GetFileDetails_AsyncFunction_GetFileDetails) == 0x000008, "Wrong alignment on SIK_GetFileDetails_AsyncFunction_GetFileDetails");
static_assert(sizeof(SIK_GetFileDetails_AsyncFunction_GetFileDetails) == 0x000018, "Wrong size on SIK_GetFileDetails_AsyncFunction_GetFileDetails");
static_assert(offsetof(SIK_GetFileDetails_AsyncFunction_GetFileDetails, Filename) == 0x000000, "Member 'SIK_GetFileDetails_AsyncFunction_GetFileDetails::Filename' has a wrong offset!");
static_assert(offsetof(SIK_GetFileDetails_AsyncFunction_GetFileDetails, ReturnValue) == 0x000010, "Member 'SIK_GetFileDetails_AsyncFunction_GetFileDetails::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GetFollowerCount_AsyncFunction.GetFollowerCount
// 0x0010 (0x0010 - 0x0000)
struct SIK_GetFollowerCount_AsyncFunction_GetFollowerCount final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_GetFollowerCount_AsyncFunction*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GetFollowerCount_AsyncFunction_GetFollowerCount) == 0x000008, "Wrong alignment on SIK_GetFollowerCount_AsyncFunction_GetFollowerCount");
static_assert(sizeof(SIK_GetFollowerCount_AsyncFunction_GetFollowerCount) == 0x000010, "Wrong size on SIK_GetFollowerCount_AsyncFunction_GetFollowerCount");
static_assert(offsetof(SIK_GetFollowerCount_AsyncFunction_GetFollowerCount, SteamID) == 0x000000, "Member 'SIK_GetFollowerCount_AsyncFunction_GetFollowerCount::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_GetFollowerCount_AsyncFunction_GetFollowerCount, ReturnValue) == 0x000008, "Member 'SIK_GetFollowerCount_AsyncFunction_GetFollowerCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GetNumberOfCurrentPlayers_AsyncFunction.GetNumberOfCurrentPlayers
// 0x0008 (0x0008 - 0x0000)
struct SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers final
{
public:
	class USIK_GetNumberOfCurrentPlayers_AsyncFunction* ReturnValue;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers) == 0x000008, "Wrong alignment on SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers");
static_assert(sizeof(SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers) == 0x000008, "Wrong size on SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers");
static_assert(offsetof(SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers, ReturnValue) == 0x000000, "Member 'SIK_GetNumberOfCurrentPlayers_AsyncFunction_GetNumberOfCurrentPlayers::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_GetUserItemVote_AsyncFunction.GetUserItemVote
// 0x0010 (0x0010 - 0x0000)
struct SIK_GetUserItemVote_AsyncFunction_GetUserItemVote final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_GetUserItemVote_AsyncFunction*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_GetUserItemVote_AsyncFunction_GetUserItemVote) == 0x000008, "Wrong alignment on SIK_GetUserItemVote_AsyncFunction_GetUserItemVote");
static_assert(sizeof(SIK_GetUserItemVote_AsyncFunction_GetUserItemVote) == 0x000010, "Wrong size on SIK_GetUserItemVote_AsyncFunction_GetUserItemVote");
static_assert(offsetof(SIK_GetUserItemVote_AsyncFunction_GetUserItemVote, PublishedFileId) == 0x000000, "Member 'SIK_GetUserItemVote_AsyncFunction_GetUserItemVote::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_GetUserItemVote_AsyncFunction_GetUserItemVote, ReturnValue) == 0x000008, "Member 'SIK_GetUserItemVote_AsyncFunction_GetUserItemVote::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.AddPromoItem
// 0x000C (0x000C - 0x0000)
struct SIK_InventoryLibrary_AddPromoItem final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamItemDef                      ItemDef;                                           // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_AddPromoItem) == 0x000004, "Wrong alignment on SIK_InventoryLibrary_AddPromoItem");
static_assert(sizeof(SIK_InventoryLibrary_AddPromoItem) == 0x00000C, "Wrong size on SIK_InventoryLibrary_AddPromoItem");
static_assert(offsetof(SIK_InventoryLibrary_AddPromoItem, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_AddPromoItem::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_AddPromoItem, ItemDef) == 0x000004, "Member 'SIK_InventoryLibrary_AddPromoItem::ItemDef' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_AddPromoItem, ReturnValue) == 0x000008, "Member 'SIK_InventoryLibrary_AddPromoItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.AddPromoItems
// 0x0020 (0x0020 - 0x0000)
struct SIK_InventoryLibrary_AddPromoItems final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_SteamItemDef>              ItemDefs;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_AddPromoItems) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_AddPromoItems");
static_assert(sizeof(SIK_InventoryLibrary_AddPromoItems) == 0x000020, "Wrong size on SIK_InventoryLibrary_AddPromoItems");
static_assert(offsetof(SIK_InventoryLibrary_AddPromoItems, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_AddPromoItems::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_AddPromoItems, ItemDefs) == 0x000008, "Member 'SIK_InventoryLibrary_AddPromoItems::ItemDefs' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_AddPromoItems, ReturnValue) == 0x000018, "Member 'SIK_InventoryLibrary_AddPromoItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.CheckResultSteamID
// 0x0018 (0x0018 - 0x0000)
struct SIK_InventoryLibrary_CheckResultSteamID final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_CheckResultSteamID) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_CheckResultSteamID");
static_assert(sizeof(SIK_InventoryLibrary_CheckResultSteamID) == 0x000018, "Wrong size on SIK_InventoryLibrary_CheckResultSteamID");
static_assert(offsetof(SIK_InventoryLibrary_CheckResultSteamID, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_CheckResultSteamID::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_CheckResultSteamID, SteamID) == 0x000008, "Member 'SIK_InventoryLibrary_CheckResultSteamID::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_CheckResultSteamID, ReturnValue) == 0x000010, "Member 'SIK_InventoryLibrary_CheckResultSteamID::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.ConsumeItem
// 0x0018 (0x0018 - 0x0000)
struct SIK_InventoryLibrary_ConsumeItem final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamItemInstanceID               ItemInstance;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_ConsumeItem) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_ConsumeItem");
static_assert(sizeof(SIK_InventoryLibrary_ConsumeItem) == 0x000018, "Wrong size on SIK_InventoryLibrary_ConsumeItem");
static_assert(offsetof(SIK_InventoryLibrary_ConsumeItem, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_ConsumeItem::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ConsumeItem, ItemInstance) == 0x000008, "Member 'SIK_InventoryLibrary_ConsumeItem::ItemInstance' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ConsumeItem, Quantity) == 0x000010, "Member 'SIK_InventoryLibrary_ConsumeItem::Quantity' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ConsumeItem, ReturnValue) == 0x000014, "Member 'SIK_InventoryLibrary_ConsumeItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.DeserializeResult
// 0x0020 (0x0020 - 0x0000)
struct SIK_InventoryLibrary_DeserializeResult final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Buffer;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_DeserializeResult) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_DeserializeResult");
static_assert(sizeof(SIK_InventoryLibrary_DeserializeResult) == 0x000020, "Wrong size on SIK_InventoryLibrary_DeserializeResult");
static_assert(offsetof(SIK_InventoryLibrary_DeserializeResult, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_DeserializeResult::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_DeserializeResult, Buffer) == 0x000008, "Member 'SIK_InventoryLibrary_DeserializeResult::Buffer' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_DeserializeResult, ReturnValue) == 0x000018, "Member 'SIK_InventoryLibrary_DeserializeResult::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.DestroyResult
// 0x0004 (0x0004 - 0x0000)
struct SIK_InventoryLibrary_DestroyResult final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_InventoryLibrary_DestroyResult) == 0x000004, "Wrong alignment on SIK_InventoryLibrary_DestroyResult");
static_assert(sizeof(SIK_InventoryLibrary_DestroyResult) == 0x000004, "Wrong size on SIK_InventoryLibrary_DestroyResult");
static_assert(offsetof(SIK_InventoryLibrary_DestroyResult, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_DestroyResult::InventoryResult' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.ExchangeItems
// 0x0050 (0x0050 - 0x0000)
struct SIK_InventoryLibrary_ExchangeItems final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_SteamItemDef>              ItemDefsToCreate;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayGenerateQuantity;                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSIK_SteamItemInstanceID>       ItemDefsToDestroy;                                 // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 DestroyQuantity;                                   // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_ExchangeItems) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_ExchangeItems");
static_assert(sizeof(SIK_InventoryLibrary_ExchangeItems) == 0x000050, "Wrong size on SIK_InventoryLibrary_ExchangeItems");
static_assert(offsetof(SIK_InventoryLibrary_ExchangeItems, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_ExchangeItems::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ExchangeItems, ItemDefsToCreate) == 0x000008, "Member 'SIK_InventoryLibrary_ExchangeItems::ItemDefsToCreate' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ExchangeItems, ArrayGenerateQuantity) == 0x000018, "Member 'SIK_InventoryLibrary_ExchangeItems::ArrayGenerateQuantity' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ExchangeItems, ItemDefsToDestroy) == 0x000028, "Member 'SIK_InventoryLibrary_ExchangeItems::ItemDefsToDestroy' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ExchangeItems, DestroyQuantity) == 0x000038, "Member 'SIK_InventoryLibrary_ExchangeItems::DestroyQuantity' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_ExchangeItems, ReturnValue) == 0x000048, "Member 'SIK_InventoryLibrary_ExchangeItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GenerateItems
// 0x0030 (0x0030 - 0x0000)
struct SIK_InventoryLibrary_GenerateItems final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_SteamItemDef>              ItemDefs;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GenerateItems) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GenerateItems");
static_assert(sizeof(SIK_InventoryLibrary_GenerateItems) == 0x000030, "Wrong size on SIK_InventoryLibrary_GenerateItems");
static_assert(offsetof(SIK_InventoryLibrary_GenerateItems, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GenerateItems::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GenerateItems, ItemDefs) == 0x000008, "Member 'SIK_InventoryLibrary_GenerateItems::ItemDefs' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GenerateItems, Quantity) == 0x000018, "Member 'SIK_InventoryLibrary_GenerateItems::Quantity' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GenerateItems, ReturnValue) == 0x000028, "Member 'SIK_InventoryLibrary_GenerateItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetAllItems
// 0x0008 (0x0008 - 0x0000)
struct SIK_InventoryLibrary_GetAllItems final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetAllItems) == 0x000004, "Wrong alignment on SIK_InventoryLibrary_GetAllItems");
static_assert(sizeof(SIK_InventoryLibrary_GetAllItems) == 0x000008, "Wrong size on SIK_InventoryLibrary_GetAllItems");
static_assert(offsetof(SIK_InventoryLibrary_GetAllItems, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GetAllItems::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetAllItems, ReturnValue) == 0x000004, "Member 'SIK_InventoryLibrary_GetAllItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetEligiblePromoItemDefinitionIDs
// 0x0020 (0x0020 - 0x0000)
struct SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSIK_SteamItemDef>              ItemDefs;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs");
static_assert(sizeof(SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs) == 0x000020, "Wrong size on SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs");
static_assert(offsetof(SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs, SteamID) == 0x000000, "Member 'SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs, ItemDefs) == 0x000008, "Member 'SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs::ItemDefs' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs, ReturnValue) == 0x000018, "Member 'SIK_InventoryLibrary_GetEligiblePromoItemDefinitionIDs::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemDefinitionIDs
// 0x0018 (0x0018 - 0x0000)
struct SIK_InventoryLibrary_GetItemDefinitionIDs final
{
public:
	TArray<struct FSIK_SteamItemDef>              ItemDefs;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetItemDefinitionIDs) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetItemDefinitionIDs");
static_assert(sizeof(SIK_InventoryLibrary_GetItemDefinitionIDs) == 0x000018, "Wrong size on SIK_InventoryLibrary_GetItemDefinitionIDs");
static_assert(offsetof(SIK_InventoryLibrary_GetItemDefinitionIDs, ItemDefs) == 0x000000, "Member 'SIK_InventoryLibrary_GetItemDefinitionIDs::ItemDefs' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemDefinitionIDs, ReturnValue) == 0x000010, "Member 'SIK_InventoryLibrary_GetItemDefinitionIDs::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemDefinitionProperty
// 0x0030 (0x0030 - 0x0000)
struct SIK_InventoryLibrary_GetItemDefinitionProperty final
{
public:
	struct FSIK_SteamItemDef                      ItemDef;                                           // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetItemDefinitionProperty) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetItemDefinitionProperty");
static_assert(sizeof(SIK_InventoryLibrary_GetItemDefinitionProperty) == 0x000030, "Wrong size on SIK_InventoryLibrary_GetItemDefinitionProperty");
static_assert(offsetof(SIK_InventoryLibrary_GetItemDefinitionProperty, ItemDef) == 0x000000, "Member 'SIK_InventoryLibrary_GetItemDefinitionProperty::ItemDef' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemDefinitionProperty, PropertyName) == 0x000008, "Member 'SIK_InventoryLibrary_GetItemDefinitionProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemDefinitionProperty, Value) == 0x000018, "Member 'SIK_InventoryLibrary_GetItemDefinitionProperty::Value' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemDefinitionProperty, ReturnValue) == 0x000028, "Member 'SIK_InventoryLibrary_GetItemDefinitionProperty::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemPrice
// 0x0020 (0x0020 - 0x0000)
struct SIK_InventoryLibrary_GetItemPrice final
{
public:
	struct FSIK_SteamItemDef                      ItemDef;                                           // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CurrentPrice;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BasePrice;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetItemPrice) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetItemPrice");
static_assert(sizeof(SIK_InventoryLibrary_GetItemPrice) == 0x000020, "Wrong size on SIK_InventoryLibrary_GetItemPrice");
static_assert(offsetof(SIK_InventoryLibrary_GetItemPrice, ItemDef) == 0x000000, "Member 'SIK_InventoryLibrary_GetItemPrice::ItemDef' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemPrice, CurrentPrice) == 0x000008, "Member 'SIK_InventoryLibrary_GetItemPrice::CurrentPrice' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemPrice, BasePrice) == 0x000010, "Member 'SIK_InventoryLibrary_GetItemPrice::BasePrice' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemPrice, ReturnValue) == 0x000018, "Member 'SIK_InventoryLibrary_GetItemPrice::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemsByID
// 0x0020 (0x0020 - 0x0000)
struct SIK_InventoryLibrary_GetItemsByID final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_SteamItemInstanceID>       ItemInstances;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetItemsByID) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetItemsByID");
static_assert(sizeof(SIK_InventoryLibrary_GetItemsByID) == 0x000020, "Wrong size on SIK_InventoryLibrary_GetItemsByID");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsByID, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GetItemsByID::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsByID, ItemInstances) == 0x000008, "Member 'SIK_InventoryLibrary_GetItemsByID::ItemInstances' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsByID, ReturnValue) == 0x000018, "Member 'SIK_InventoryLibrary_GetItemsByID::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetItemsWithPrices
// 0x0038 (0x0038 - 0x0000)
struct SIK_InventoryLibrary_GetItemsWithPrices final
{
public:
	TArray<struct FSIK_SteamItemDef>              ItemDefs;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 CurrentPrices;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 BasePrices;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ArraySize;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetItemsWithPrices) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetItemsWithPrices");
static_assert(sizeof(SIK_InventoryLibrary_GetItemsWithPrices) == 0x000038, "Wrong size on SIK_InventoryLibrary_GetItemsWithPrices");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsWithPrices, ItemDefs) == 0x000000, "Member 'SIK_InventoryLibrary_GetItemsWithPrices::ItemDefs' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsWithPrices, CurrentPrices) == 0x000010, "Member 'SIK_InventoryLibrary_GetItemsWithPrices::CurrentPrices' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsWithPrices, BasePrices) == 0x000020, "Member 'SIK_InventoryLibrary_GetItemsWithPrices::BasePrices' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsWithPrices, ArraySize) == 0x000030, "Member 'SIK_InventoryLibrary_GetItemsWithPrices::ArraySize' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetItemsWithPrices, ReturnValue) == 0x000034, "Member 'SIK_InventoryLibrary_GetItemsWithPrices::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetNumItemsWithPrices
// 0x0004 (0x0004 - 0x0000)
struct SIK_InventoryLibrary_GetNumItemsWithPrices final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_InventoryLibrary_GetNumItemsWithPrices) == 0x000004, "Wrong alignment on SIK_InventoryLibrary_GetNumItemsWithPrices");
static_assert(sizeof(SIK_InventoryLibrary_GetNumItemsWithPrices) == 0x000004, "Wrong size on SIK_InventoryLibrary_GetNumItemsWithPrices");
static_assert(offsetof(SIK_InventoryLibrary_GetNumItemsWithPrices, ReturnValue) == 0x000000, "Member 'SIK_InventoryLibrary_GetNumItemsWithPrices::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultItemProperty
// 0x0030 (0x0030 - 0x0000)
struct SIK_InventoryLibrary_GetResultItemProperty final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetResultItemProperty) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetResultItemProperty");
static_assert(sizeof(SIK_InventoryLibrary_GetResultItemProperty) == 0x000030, "Wrong size on SIK_InventoryLibrary_GetResultItemProperty");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItemProperty, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GetResultItemProperty::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItemProperty, ItemIndex) == 0x000004, "Member 'SIK_InventoryLibrary_GetResultItemProperty::ItemIndex' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItemProperty, PropertyName) == 0x000008, "Member 'SIK_InventoryLibrary_GetResultItemProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItemProperty, Value) == 0x000018, "Member 'SIK_InventoryLibrary_GetResultItemProperty::Value' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItemProperty, ReturnValue) == 0x000028, "Member 'SIK_InventoryLibrary_GetResultItemProperty::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultItems
// 0x0020 (0x0020 - 0x0000)
struct SIK_InventoryLibrary_GetResultItems final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_SteamItemDetails>          ItemInstances;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetResultItems) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetResultItems");
static_assert(sizeof(SIK_InventoryLibrary_GetResultItems) == 0x000020, "Wrong size on SIK_InventoryLibrary_GetResultItems");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItems, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GetResultItems::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItems, ItemInstances) == 0x000008, "Member 'SIK_InventoryLibrary_GetResultItems::ItemInstances' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultItems, ReturnValue) == 0x000018, "Member 'SIK_InventoryLibrary_GetResultItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultStatus
// 0x0008 (0x0008 - 0x0000)
struct SIK_InventoryLibrary_GetResultStatus final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_Result                                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GetResultStatus) == 0x000004, "Wrong alignment on SIK_InventoryLibrary_GetResultStatus");
static_assert(sizeof(SIK_InventoryLibrary_GetResultStatus) == 0x000008, "Wrong size on SIK_InventoryLibrary_GetResultStatus");
static_assert(offsetof(SIK_InventoryLibrary_GetResultStatus, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GetResultStatus::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultStatus, ReturnValue) == 0x000004, "Member 'SIK_InventoryLibrary_GetResultStatus::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GetResultTimestamp
// 0x0010 (0x0010 - 0x0000)
struct SIK_InventoryLibrary_GetResultTimestamp final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_InventoryLibrary_GetResultTimestamp) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_GetResultTimestamp");
static_assert(sizeof(SIK_InventoryLibrary_GetResultTimestamp) == 0x000010, "Wrong size on SIK_InventoryLibrary_GetResultTimestamp");
static_assert(offsetof(SIK_InventoryLibrary_GetResultTimestamp, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GetResultTimestamp::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultTimestamp, Timestamp) == 0x000004, "Member 'SIK_InventoryLibrary_GetResultTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GetResultTimestamp, ReturnValue) == 0x000008, "Member 'SIK_InventoryLibrary_GetResultTimestamp::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.GrantPromoItems
// 0x0008 (0x0008 - 0x0000)
struct SIK_InventoryLibrary_GrantPromoItems final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_GrantPromoItems) == 0x000004, "Wrong alignment on SIK_InventoryLibrary_GrantPromoItems");
static_assert(sizeof(SIK_InventoryLibrary_GrantPromoItems) == 0x000008, "Wrong size on SIK_InventoryLibrary_GrantPromoItems");
static_assert(offsetof(SIK_InventoryLibrary_GrantPromoItems, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_GrantPromoItems::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_GrantPromoItems, ReturnValue) == 0x000004, "Member 'SIK_InventoryLibrary_GrantPromoItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.LoadItemDefinitions
// 0x0001 (0x0001 - 0x0000)
struct SIK_InventoryLibrary_LoadItemDefinitions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_InventoryLibrary_LoadItemDefinitions) == 0x000001, "Wrong alignment on SIK_InventoryLibrary_LoadItemDefinitions");
static_assert(sizeof(SIK_InventoryLibrary_LoadItemDefinitions) == 0x000001, "Wrong size on SIK_InventoryLibrary_LoadItemDefinitions");
static_assert(offsetof(SIK_InventoryLibrary_LoadItemDefinitions, ReturnValue) == 0x000000, "Member 'SIK_InventoryLibrary_LoadItemDefinitions::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.RemoveProperty
// 0x0028 (0x0028 - 0x0000)
struct SIK_InventoryLibrary_RemoveProperty final
{
public:
	struct FSIK_SteamInventoryUpdateHandle        UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamItemInstanceID               ItemInstance;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_RemoveProperty) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_RemoveProperty");
static_assert(sizeof(SIK_InventoryLibrary_RemoveProperty) == 0x000028, "Wrong size on SIK_InventoryLibrary_RemoveProperty");
static_assert(offsetof(SIK_InventoryLibrary_RemoveProperty, UpdateHandle) == 0x000000, "Member 'SIK_InventoryLibrary_RemoveProperty::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_RemoveProperty, ItemInstance) == 0x000008, "Member 'SIK_InventoryLibrary_RemoveProperty::ItemInstance' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_RemoveProperty, PropertyName) == 0x000010, "Member 'SIK_InventoryLibrary_RemoveProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_RemoveProperty, ReturnValue) == 0x000020, "Member 'SIK_InventoryLibrary_RemoveProperty::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.SerializeResult
// 0x0020 (0x0020 - 0x0000)
struct SIK_InventoryLibrary_SerializeResult final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Buffer;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_SerializeResult) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_SerializeResult");
static_assert(sizeof(SIK_InventoryLibrary_SerializeResult) == 0x000020, "Wrong size on SIK_InventoryLibrary_SerializeResult");
static_assert(offsetof(SIK_InventoryLibrary_SerializeResult, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_SerializeResult::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SerializeResult, Buffer) == 0x000008, "Member 'SIK_InventoryLibrary_SerializeResult::Buffer' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SerializeResult, ReturnValue) == 0x000018, "Member 'SIK_InventoryLibrary_SerializeResult::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.SetProperty
// 0x0038 (0x0038 - 0x0000)
struct SIK_InventoryLibrary_SetProperty final
{
public:
	struct FSIK_SteamInventoryUpdateHandle        UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamItemInstanceID               ItemInstance;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_SetProperty) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_SetProperty");
static_assert(sizeof(SIK_InventoryLibrary_SetProperty) == 0x000038, "Wrong size on SIK_InventoryLibrary_SetProperty");
static_assert(offsetof(SIK_InventoryLibrary_SetProperty, UpdateHandle) == 0x000000, "Member 'SIK_InventoryLibrary_SetProperty::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SetProperty, ItemInstance) == 0x000008, "Member 'SIK_InventoryLibrary_SetProperty::ItemInstance' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SetProperty, PropertyName) == 0x000010, "Member 'SIK_InventoryLibrary_SetProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SetProperty, Value) == 0x000020, "Member 'SIK_InventoryLibrary_SetProperty::Value' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SetProperty, ReturnValue) == 0x000030, "Member 'SIK_InventoryLibrary_SetProperty::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.StartUpdateProperties
// 0x0008 (0x0008 - 0x0000)
struct SIK_InventoryLibrary_StartUpdateProperties final
{
public:
	struct FSIK_SteamInventoryUpdateHandle        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_InventoryLibrary_StartUpdateProperties) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_StartUpdateProperties");
static_assert(sizeof(SIK_InventoryLibrary_StartUpdateProperties) == 0x000008, "Wrong size on SIK_InventoryLibrary_StartUpdateProperties");
static_assert(offsetof(SIK_InventoryLibrary_StartUpdateProperties, ReturnValue) == 0x000000, "Member 'SIK_InventoryLibrary_StartUpdateProperties::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.SubmitUpdateProperties
// 0x0010 (0x0010 - 0x0000)
struct SIK_InventoryLibrary_SubmitUpdateProperties final
{
public:
	struct FSIK_SteamInventoryUpdateHandle        UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0008(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_SubmitUpdateProperties) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_SubmitUpdateProperties");
static_assert(sizeof(SIK_InventoryLibrary_SubmitUpdateProperties) == 0x000010, "Wrong size on SIK_InventoryLibrary_SubmitUpdateProperties");
static_assert(offsetof(SIK_InventoryLibrary_SubmitUpdateProperties, UpdateHandle) == 0x000000, "Member 'SIK_InventoryLibrary_SubmitUpdateProperties::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SubmitUpdateProperties, InventoryResult) == 0x000008, "Member 'SIK_InventoryLibrary_SubmitUpdateProperties::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_SubmitUpdateProperties, ReturnValue) == 0x00000C, "Member 'SIK_InventoryLibrary_SubmitUpdateProperties::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.TransferItemQuantity
// 0x0028 (0x0028 - 0x0000)
struct SIK_InventoryLibrary_TransferItemQuantity final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamItemInstanceID               ItemInstance;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamItemInstanceID               itemIdDest;                                        // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_TransferItemQuantity) == 0x000008, "Wrong alignment on SIK_InventoryLibrary_TransferItemQuantity");
static_assert(sizeof(SIK_InventoryLibrary_TransferItemQuantity) == 0x000028, "Wrong size on SIK_InventoryLibrary_TransferItemQuantity");
static_assert(offsetof(SIK_InventoryLibrary_TransferItemQuantity, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_TransferItemQuantity::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_TransferItemQuantity, ItemInstance) == 0x000008, "Member 'SIK_InventoryLibrary_TransferItemQuantity::ItemInstance' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_TransferItemQuantity, Quantity) == 0x000010, "Member 'SIK_InventoryLibrary_TransferItemQuantity::Quantity' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_TransferItemQuantity, itemIdDest) == 0x000018, "Member 'SIK_InventoryLibrary_TransferItemQuantity::itemIdDest' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_TransferItemQuantity, ReturnValue) == 0x000020, "Member 'SIK_InventoryLibrary_TransferItemQuantity::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_InventoryLibrary.TriggerItemDrop
// 0x000C (0x000C - 0x0000)
struct SIK_InventoryLibrary_TriggerItemDrop final
{
public:
	struct FSIK_SteamInventoryResult              InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamItemDef                      ItemDef;                                           // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_InventoryLibrary_TriggerItemDrop) == 0x000004, "Wrong alignment on SIK_InventoryLibrary_TriggerItemDrop");
static_assert(sizeof(SIK_InventoryLibrary_TriggerItemDrop) == 0x00000C, "Wrong size on SIK_InventoryLibrary_TriggerItemDrop");
static_assert(offsetof(SIK_InventoryLibrary_TriggerItemDrop, InventoryResult) == 0x000000, "Member 'SIK_InventoryLibrary_TriggerItemDrop::InventoryResult' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_TriggerItemDrop, ItemDef) == 0x000004, "Member 'SIK_InventoryLibrary_TriggerItemDrop::ItemDef' has a wrong offset!");
static_assert(offsetof(SIK_InventoryLibrary_TriggerItemDrop, ReturnValue) == 0x000008, "Member 'SIK_InventoryLibrary_TriggerItemDrop::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_JoinClanChatRoom_AsyncFunction.JoinClanChatRoom
// 0x0010 (0x0010 - 0x0000)
struct SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom final
{
public:
	struct FSIK_SteamId                           ClanId;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_JoinClanChatRoom_AsyncFunction*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom) == 0x000008, "Wrong alignment on SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom");
static_assert(sizeof(SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom) == 0x000010, "Wrong size on SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom");
static_assert(offsetof(SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom, ClanId) == 0x000000, "Member 'SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom::ClanId' has a wrong offset!");
static_assert(offsetof(SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom, ReturnValue) == 0x000008, "Member 'SIK_JoinClanChatRoom_AsyncFunction_JoinClanChatRoom::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_JoinLobby_AsyncFunction.JoinLobby
// 0x0010 (0x0010 - 0x0000)
struct SIK_JoinLobby_AsyncFunction_JoinLobby final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_JoinLobby_AsyncFunction*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_JoinLobby_AsyncFunction_JoinLobby) == 0x000008, "Wrong alignment on SIK_JoinLobby_AsyncFunction_JoinLobby");
static_assert(sizeof(SIK_JoinLobby_AsyncFunction_JoinLobby) == 0x000010, "Wrong size on SIK_JoinLobby_AsyncFunction_JoinLobby");
static_assert(offsetof(SIK_JoinLobby_AsyncFunction_JoinLobby, LobbyID) == 0x000000, "Member 'SIK_JoinLobby_AsyncFunction_JoinLobby::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_JoinLobby_AsyncFunction_JoinLobby, ReturnValue) == 0x000008, "Member 'SIK_JoinLobby_AsyncFunction_JoinLobby::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_JoinParty_AsyncFunction.JoinParty
// 0x0010 (0x0010 - 0x0000)
struct SIK_JoinParty_AsyncFunction_JoinParty final
{
public:
	struct FSIK_PartyBeaconID                     SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_JoinParty_AsyncFunction*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_JoinParty_AsyncFunction_JoinParty) == 0x000008, "Wrong alignment on SIK_JoinParty_AsyncFunction_JoinParty");
static_assert(sizeof(SIK_JoinParty_AsyncFunction_JoinParty) == 0x000010, "Wrong size on SIK_JoinParty_AsyncFunction_JoinParty");
static_assert(offsetof(SIK_JoinParty_AsyncFunction_JoinParty, SteamID) == 0x000000, "Member 'SIK_JoinParty_AsyncFunction_JoinParty::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_JoinParty_AsyncFunction_JoinParty, ReturnValue) == 0x000008, "Member 'SIK_JoinParty_AsyncFunction_JoinParty::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_JoinSession_AsyncFunction.JoinSIKSessions
// 0x01A8 (0x01A8 - 0x0000)
struct SIK_JoinSession_AsyncFunction_JoinSIKSessions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SessionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSessionFindStruct                    SessionToJoin;                                     // 0x0010(0x0190)(Parm, NativeAccessSpecifierPublic)
	class USIK_JoinSession_AsyncFunction*         ReturnValue;                                       // 0x01A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_JoinSession_AsyncFunction_JoinSIKSessions) == 0x000008, "Wrong alignment on SIK_JoinSession_AsyncFunction_JoinSIKSessions");
static_assert(sizeof(SIK_JoinSession_AsyncFunction_JoinSIKSessions) == 0x0001A8, "Wrong size on SIK_JoinSession_AsyncFunction_JoinSIKSessions");
static_assert(offsetof(SIK_JoinSession_AsyncFunction_JoinSIKSessions, WorldContextObject) == 0x000000, "Member 'SIK_JoinSession_AsyncFunction_JoinSIKSessions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SIK_JoinSession_AsyncFunction_JoinSIKSessions, SessionName) == 0x000008, "Member 'SIK_JoinSession_AsyncFunction_JoinSIKSessions::SessionName' has a wrong offset!");
static_assert(offsetof(SIK_JoinSession_AsyncFunction_JoinSIKSessions, SessionToJoin) == 0x000010, "Member 'SIK_JoinSession_AsyncFunction_JoinSIKSessions::SessionToJoin' has a wrong offset!");
static_assert(offsetof(SIK_JoinSession_AsyncFunction_JoinSIKSessions, ReturnValue) == 0x0001A0, "Member 'SIK_JoinSession_AsyncFunction_JoinSIKSessions::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct SIK_MatchmakingLibrary_AddFavoriteGame final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnPort;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Flags_0;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Time32LastPlayedOnServer;                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_AddFavoriteGame) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_AddFavoriteGame");
static_assert(sizeof(SIK_MatchmakingLibrary_AddFavoriteGame) == 0x000038, "Wrong size on SIK_MatchmakingLibrary_AddFavoriteGame");
static_assert(offsetof(SIK_MatchmakingLibrary_AddFavoriteGame, AppID) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddFavoriteGame, IP) == 0x000008, "Member 'SIK_MatchmakingLibrary_AddFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddFavoriteGame, ConnPort) == 0x000018, "Member 'SIK_MatchmakingLibrary_AddFavoriteGame::ConnPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddFavoriteGame, QueryPort) == 0x00001C, "Member 'SIK_MatchmakingLibrary_AddFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddFavoriteGame, Flags_0) == 0x000020, "Member 'SIK_MatchmakingLibrary_AddFavoriteGame::Flags_0' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddFavoriteGame, Time32LastPlayedOnServer) == 0x000030, "Member 'SIK_MatchmakingLibrary_AddFavoriteGame::Time32LastPlayedOnServer' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddFavoriteGame, ReturnValue) == 0x000034, "Member 'SIK_MatchmakingLibrary_AddFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListCompatibleMembersFilter
// 0x0008 (0x0008 - 0x0000)
struct SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter");
static_assert(sizeof(SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter) == 0x000008, "Wrong size on SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter, SteamID) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListCompatibleMembersFilter::SteamID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListDistanceFilter
// 0x0001 (0x0001 - 0x0000)
struct SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter final
{
public:
	ESIK_LobbyDistanceFilter                      LobbyDistanceFilter;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter) == 0x000001, "Wrong alignment on SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter");
static_assert(sizeof(SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter) == 0x000001, "Wrong size on SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter, LobbyDistanceFilter) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListDistanceFilter::LobbyDistanceFilter' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListFilterSlotsAvailable
// 0x0004 (0x0004 - 0x0000)
struct SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable final
{
public:
	int32                                         SlotsAvailable;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable) == 0x000004, "Wrong alignment on SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable");
static_assert(sizeof(SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable) == 0x000004, "Wrong size on SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable, SlotsAvailable) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListFilterSlotsAvailable::SlotsAvailable' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListNearValueFilter
// 0x0018 (0x0018 - 0x0000)
struct SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueToBeCloseTo;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter");
static_assert(sizeof(SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter) == 0x000018, "Wrong size on SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter, KeyToMatch) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter, ValueToBeCloseTo) == 0x000010, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListNearValueFilter::ValueToBeCloseTo' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListNumericalFilter
// 0x0018 (0x0018 - 0x0000)
struct SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueToMatch;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LobbyComparisonType                      ComparisonType;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter");
static_assert(sizeof(SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter) == 0x000018, "Wrong size on SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter, KeyToMatch) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter, ValueToMatch) == 0x000010, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter::ValueToMatch' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter, ComparisonType) == 0x000014, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListNumericalFilter::ComparisonType' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListResultCountFilter
// 0x0004 (0x0004 - 0x0000)
struct SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter final
{
public:
	int32                                         MaxResults;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter) == 0x000004, "Wrong alignment on SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter");
static_assert(sizeof(SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter) == 0x000004, "Wrong size on SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter, MaxResults) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListResultCountFilter::MaxResults' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.AddRequestLobbyListStringFilter
// 0x0028 (0x0028 - 0x0000)
struct SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueToMatch;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LobbyComparisonType                      ComparisonType;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter");
static_assert(sizeof(SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter) == 0x000028, "Wrong size on SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter, KeyToMatch) == 0x000000, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter, ValueToMatch) == 0x000010, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter::ValueToMatch' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter, ComparisonType) == 0x000020, "Member 'SIK_MatchmakingLibrary_AddRequestLobbyListStringFilter::ComparisonType' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.DeleteLobbyData
// 0x0020 (0x0020 - 0x0000)
struct SIK_MatchmakingLibrary_DeleteLobbyData final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_DeleteLobbyData) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_DeleteLobbyData");
static_assert(sizeof(SIK_MatchmakingLibrary_DeleteLobbyData) == 0x000020, "Wrong size on SIK_MatchmakingLibrary_DeleteLobbyData");
static_assert(offsetof(SIK_MatchmakingLibrary_DeleteLobbyData, SteamID) == 0x000000, "Member 'SIK_MatchmakingLibrary_DeleteLobbyData::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_DeleteLobbyData, Key) == 0x000008, "Member 'SIK_MatchmakingLibrary_DeleteLobbyData::Key' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_DeleteLobbyData, ReturnValue) == 0x000018, "Member 'SIK_MatchmakingLibrary_DeleteLobbyData::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct SIK_MatchmakingLibrary_GetFavoriteGame final
{
public:
	int32                                         GameIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             AppID;                                             // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnPort;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Flags_0;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Time32LastPlayedOnServer;                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_GetFavoriteGame) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetFavoriteGame");
static_assert(sizeof(SIK_MatchmakingLibrary_GetFavoriteGame) == 0x000038, "Wrong size on SIK_MatchmakingLibrary_GetFavoriteGame");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, GameIndex) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::GameIndex' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, AppID) == 0x000004, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, IP) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, ConnPort) == 0x000018, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::ConnPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, QueryPort) == 0x00001C, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, Flags_0) == 0x000020, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::Flags_0' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, Time32LastPlayedOnServer) == 0x000030, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::Time32LastPlayedOnServer' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGame, ReturnValue) == 0x000034, "Member 'SIK_MatchmakingLibrary_GetFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetFavoriteGameCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_MatchmakingLibrary_GetFavoriteGameCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_GetFavoriteGameCount) == 0x000004, "Wrong alignment on SIK_MatchmakingLibrary_GetFavoriteGameCount");
static_assert(sizeof(SIK_MatchmakingLibrary_GetFavoriteGameCount) == 0x000004, "Wrong size on SIK_MatchmakingLibrary_GetFavoriteGameCount");
static_assert(offsetof(SIK_MatchmakingLibrary_GetFavoriteGameCount, ReturnValue) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetFavoriteGameCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyByIndex
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyByIndex final
{
public:
	int32                                         LobbyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyByIndex) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyByIndex");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyByIndex) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_GetLobbyByIndex");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyByIndex, LobbyIndex) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyByIndex::LobbyIndex' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyByIndex, ReturnValue) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyChatEntry
// 0x0030 (0x0030 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyChatEntry final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ChatID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           steamIDUser;                                       // 0x0010(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChatEntry;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LobbyChatEntryType                       ChatEntryType;                                     // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyChatEntry) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyChatEntry");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyChatEntry) == 0x000030, "Wrong size on SIK_MatchmakingLibrary_GetLobbyChatEntry");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyChatEntry, SteamID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyChatEntry::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyChatEntry, ChatID) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyChatEntry::ChatID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyChatEntry, steamIDUser) == 0x000010, "Member 'SIK_MatchmakingLibrary_GetLobbyChatEntry::steamIDUser' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyChatEntry, ChatEntry) == 0x000018, "Member 'SIK_MatchmakingLibrary_GetLobbyChatEntry::ChatEntry' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyChatEntry, ChatEntryType) == 0x000028, "Member 'SIK_MatchmakingLibrary_GetLobbyChatEntry::ChatEntryType' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyData
// 0x0028 (0x0028 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyData final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyData) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyData");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyData) == 0x000028, "Wrong size on SIK_MatchmakingLibrary_GetLobbyData");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyData, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyData::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyData, Key) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyData::Key' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyData, ReturnValue) == 0x000018, "Member 'SIK_MatchmakingLibrary_GetLobbyData::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyDataByIndex
// 0x0038 (0x0038 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyDataByIndex final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DataIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyDataByIndex) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyDataByIndex");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyDataByIndex) == 0x000038, "Wrong size on SIK_MatchmakingLibrary_GetLobbyDataByIndex");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyDataByIndex, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyDataByIndex::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyDataByIndex, DataIndex) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyDataByIndex::DataIndex' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyDataByIndex, Key) == 0x000010, "Member 'SIK_MatchmakingLibrary_GetLobbyDataByIndex::Key' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyDataByIndex, Value) == 0x000020, "Member 'SIK_MatchmakingLibrary_GetLobbyDataByIndex::Value' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyDataByIndex, ReturnValue) == 0x000030, "Member 'SIK_MatchmakingLibrary_GetLobbyDataByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyDataCount
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyDataCount final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyDataCount) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyDataCount");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyDataCount) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_GetLobbyDataCount");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyDataCount, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyDataCount::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyDataCount, ReturnValue) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyDataCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyGameServer
// 0x0030 (0x0030 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyGameServer final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ServerIP;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           SteamID;                                           // 0x0020(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyGameServer) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyGameServer");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyGameServer) == 0x000030, "Wrong size on SIK_MatchmakingLibrary_GetLobbyGameServer");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyGameServer, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyGameServer::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyGameServer, ServerIP) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyGameServer::ServerIP' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyGameServer, ServerPort) == 0x000018, "Member 'SIK_MatchmakingLibrary_GetLobbyGameServer::ServerPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyGameServer, SteamID) == 0x000020, "Member 'SIK_MatchmakingLibrary_GetLobbyGameServer::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyGameServer, ReturnValue) == 0x000028, "Member 'SIK_MatchmakingLibrary_GetLobbyGameServer::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyMemberByIndex
// 0x0018 (0x0018 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyMemberByIndex final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MemberIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyMemberByIndex) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyMemberByIndex");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyMemberByIndex) == 0x000018, "Wrong size on SIK_MatchmakingLibrary_GetLobbyMemberByIndex");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberByIndex, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberByIndex::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberByIndex, MemberIndex) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberByIndex::MemberIndex' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberByIndex, ReturnValue) == 0x000010, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyMemberData
// 0x0030 (0x0030 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyMemberData final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           UserId;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyMemberData) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyMemberData");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyMemberData) == 0x000030, "Wrong size on SIK_MatchmakingLibrary_GetLobbyMemberData");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberData, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberData::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberData, UserId) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberData::UserId' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberData, Key) == 0x000010, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberData::Key' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberData, ReturnValue) == 0x000020, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberData::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyMemberLimit
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyMemberLimit final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyMemberLimit) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyMemberLimit");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyMemberLimit) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_GetLobbyMemberLimit");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberLimit, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberLimit::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyMemberLimit, ReturnValue) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyMemberLimit::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetLobbyOwner
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_GetLobbyOwner final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_GetLobbyOwner) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetLobbyOwner");
static_assert(sizeof(SIK_MatchmakingLibrary_GetLobbyOwner) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_GetLobbyOwner");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyOwner, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetLobbyOwner::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetLobbyOwner, ReturnValue) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetLobbyOwner::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.GetNumLobbyMembers
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_GetNumLobbyMembers final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_GetNumLobbyMembers) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_GetNumLobbyMembers");
static_assert(sizeof(SIK_MatchmakingLibrary_GetNumLobbyMembers) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_GetNumLobbyMembers");
static_assert(offsetof(SIK_MatchmakingLibrary_GetNumLobbyMembers, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_GetNumLobbyMembers::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_GetNumLobbyMembers, ReturnValue) == 0x000008, "Member 'SIK_MatchmakingLibrary_GetNumLobbyMembers::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.InviteUserToLobby
// 0x0018 (0x0018 - 0x0000)
struct SIK_MatchmakingLibrary_InviteUserToLobby final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_InviteUserToLobby) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_InviteUserToLobby");
static_assert(sizeof(SIK_MatchmakingLibrary_InviteUserToLobby) == 0x000018, "Wrong size on SIK_MatchmakingLibrary_InviteUserToLobby");
static_assert(offsetof(SIK_MatchmakingLibrary_InviteUserToLobby, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_InviteUserToLobby::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_InviteUserToLobby, SteamID) == 0x000008, "Member 'SIK_MatchmakingLibrary_InviteUserToLobby::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_InviteUserToLobby, ReturnValue) == 0x000010, "Member 'SIK_MatchmakingLibrary_InviteUserToLobby::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.LeaveLobby
// 0x0008 (0x0008 - 0x0000)
struct SIK_MatchmakingLibrary_LeaveLobby final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_LeaveLobby) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_LeaveLobby");
static_assert(sizeof(SIK_MatchmakingLibrary_LeaveLobby) == 0x000008, "Wrong size on SIK_MatchmakingLibrary_LeaveLobby");
static_assert(offsetof(SIK_MatchmakingLibrary_LeaveLobby, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_LeaveLobby::LobbyID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.RemoveFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct SIK_MatchmakingLibrary_RemoveFavoriteGame final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnPort;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Flags_0;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_RemoveFavoriteGame) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_RemoveFavoriteGame");
static_assert(sizeof(SIK_MatchmakingLibrary_RemoveFavoriteGame) == 0x000038, "Wrong size on SIK_MatchmakingLibrary_RemoveFavoriteGame");
static_assert(offsetof(SIK_MatchmakingLibrary_RemoveFavoriteGame, AppID) == 0x000000, "Member 'SIK_MatchmakingLibrary_RemoveFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_RemoveFavoriteGame, IP) == 0x000008, "Member 'SIK_MatchmakingLibrary_RemoveFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_RemoveFavoriteGame, ConnPort) == 0x000018, "Member 'SIK_MatchmakingLibrary_RemoveFavoriteGame::ConnPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_RemoveFavoriteGame, QueryPort) == 0x00001C, "Member 'SIK_MatchmakingLibrary_RemoveFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_RemoveFavoriteGame, Flags_0) == 0x000020, "Member 'SIK_MatchmakingLibrary_RemoveFavoriteGame::Flags_0' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_RemoveFavoriteGame, ReturnValue) == 0x000030, "Member 'SIK_MatchmakingLibrary_RemoveFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.RequestLobbyData
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_RequestLobbyData final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_RequestLobbyData) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_RequestLobbyData");
static_assert(sizeof(SIK_MatchmakingLibrary_RequestLobbyData) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_RequestLobbyData");
static_assert(offsetof(SIK_MatchmakingLibrary_RequestLobbyData, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_RequestLobbyData::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_RequestLobbyData, ReturnValue) == 0x000008, "Member 'SIK_MatchmakingLibrary_RequestLobbyData::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SendLobbyChatMessage
// 0x0020 (0x0020 - 0x0000)
struct SIK_MatchmakingLibrary_SendLobbyChatMessage final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_SendLobbyChatMessage) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SendLobbyChatMessage");
static_assert(sizeof(SIK_MatchmakingLibrary_SendLobbyChatMessage) == 0x000020, "Wrong size on SIK_MatchmakingLibrary_SendLobbyChatMessage");
static_assert(offsetof(SIK_MatchmakingLibrary_SendLobbyChatMessage, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SendLobbyChatMessage::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SendLobbyChatMessage, Message) == 0x000008, "Member 'SIK_MatchmakingLibrary_SendLobbyChatMessage::Message' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SendLobbyChatMessage, ReturnValue) == 0x000018, "Member 'SIK_MatchmakingLibrary_SendLobbyChatMessage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLinkedLobby
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_SetLinkedLobby final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           DependentLobbyID;                                  // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLinkedLobby) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLinkedLobby");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLinkedLobby) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_SetLinkedLobby");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLinkedLobby, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLinkedLobby::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLinkedLobby, DependentLobbyID) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLinkedLobby::DependentLobbyID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyData
// 0x0030 (0x0030 - 0x0000)
struct SIK_MatchmakingLibrary_SetLobbyData final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLobbyData) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLobbyData");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLobbyData) == 0x000030, "Wrong size on SIK_MatchmakingLibrary_SetLobbyData");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyData, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLobbyData::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyData, Key) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLobbyData::Key' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyData, Value) == 0x000018, "Member 'SIK_MatchmakingLibrary_SetLobbyData::Value' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyData, ReturnValue) == 0x000028, "Member 'SIK_MatchmakingLibrary_SetLobbyData::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyGameServer
// 0x0028 (0x0028 - 0x0000)
struct SIK_MatchmakingLibrary_SetLobbyGameServer final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ServerIP;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           SteamID;                                           // 0x0020(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLobbyGameServer) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLobbyGameServer");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLobbyGameServer) == 0x000028, "Wrong size on SIK_MatchmakingLibrary_SetLobbyGameServer");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyGameServer, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLobbyGameServer::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyGameServer, ServerIP) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLobbyGameServer::ServerIP' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyGameServer, ServerPort) == 0x000018, "Member 'SIK_MatchmakingLibrary_SetLobbyGameServer::ServerPort' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyGameServer, SteamID) == 0x000020, "Member 'SIK_MatchmakingLibrary_SetLobbyGameServer::SteamID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyJoinable
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_SetLobbyJoinable final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bJoinable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLobbyJoinable) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLobbyJoinable");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLobbyJoinable) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_SetLobbyJoinable");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyJoinable, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLobbyJoinable::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyJoinable, bJoinable) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLobbyJoinable::bJoinable' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyJoinable, ReturnValue) == 0x000009, "Member 'SIK_MatchmakingLibrary_SetLobbyJoinable::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyMemberData
// 0x0028 (0x0028 - 0x0000)
struct SIK_MatchmakingLibrary_SetLobbyMemberData final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLobbyMemberData) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLobbyMemberData");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLobbyMemberData) == 0x000028, "Wrong size on SIK_MatchmakingLibrary_SetLobbyMemberData");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyMemberData, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLobbyMemberData::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyMemberData, Key) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLobbyMemberData::Key' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyMemberData, Value) == 0x000018, "Member 'SIK_MatchmakingLibrary_SetLobbyMemberData::Value' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyMemberLimit
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_SetLobbyMemberLimit final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MemberLimit;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLobbyMemberLimit) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLobbyMemberLimit");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLobbyMemberLimit) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_SetLobbyMemberLimit");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyMemberLimit, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLobbyMemberLimit::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyMemberLimit, MemberLimit) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLobbyMemberLimit::MemberLimit' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyOwner
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_SetLobbyOwner final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLobbyOwner) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLobbyOwner");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLobbyOwner) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_SetLobbyOwner");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyOwner, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLobbyOwner::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyOwner, SteamID) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLobbyOwner::SteamID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MatchmakingLibrary.SetLobbyType
// 0x0010 (0x0010 - 0x0000)
struct SIK_MatchmakingLibrary_SetLobbyType final
{
public:
	struct FSIK_SteamId                           LobbyID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_LobbyType                                LobbyType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MatchmakingLibrary_SetLobbyType) == 0x000008, "Wrong alignment on SIK_MatchmakingLibrary_SetLobbyType");
static_assert(sizeof(SIK_MatchmakingLibrary_SetLobbyType) == 0x000010, "Wrong size on SIK_MatchmakingLibrary_SetLobbyType");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyType, LobbyID) == 0x000000, "Member 'SIK_MatchmakingLibrary_SetLobbyType::LobbyID' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyType, LobbyType) == 0x000008, "Member 'SIK_MatchmakingLibrary_SetLobbyType::LobbyType' has a wrong offset!");
static_assert(offsetof(SIK_MatchmakingLibrary_SetLobbyType, ReturnValue) == 0x000009, "Member 'SIK_MatchmakingLibrary_SetLobbyType::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicLibrary.GetPlaybackStatus
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicLibrary_GetPlaybackStatus final
{
public:
	ESIK_AudioPlayback_Status                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicLibrary_GetPlaybackStatus) == 0x000001, "Wrong alignment on SIK_MusicLibrary_GetPlaybackStatus");
static_assert(sizeof(SIK_MusicLibrary_GetPlaybackStatus) == 0x000001, "Wrong size on SIK_MusicLibrary_GetPlaybackStatus");
static_assert(offsetof(SIK_MusicLibrary_GetPlaybackStatus, ReturnValue) == 0x000000, "Member 'SIK_MusicLibrary_GetPlaybackStatus::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicLibrary.GetVolume
// 0x0004 (0x0004 - 0x0000)
struct SIK_MusicLibrary_GetVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicLibrary_GetVolume) == 0x000004, "Wrong alignment on SIK_MusicLibrary_GetVolume");
static_assert(sizeof(SIK_MusicLibrary_GetVolume) == 0x000004, "Wrong size on SIK_MusicLibrary_GetVolume");
static_assert(offsetof(SIK_MusicLibrary_GetVolume, ReturnValue) == 0x000000, "Member 'SIK_MusicLibrary_GetVolume::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicLibrary.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicLibrary_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicLibrary_IsEnabled) == 0x000001, "Wrong alignment on SIK_MusicLibrary_IsEnabled");
static_assert(sizeof(SIK_MusicLibrary_IsEnabled) == 0x000001, "Wrong size on SIK_MusicLibrary_IsEnabled");
static_assert(offsetof(SIK_MusicLibrary_IsEnabled, ReturnValue) == 0x000000, "Member 'SIK_MusicLibrary_IsEnabled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicLibrary.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicLibrary_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicLibrary_IsPlaying) == 0x000001, "Wrong alignment on SIK_MusicLibrary_IsPlaying");
static_assert(sizeof(SIK_MusicLibrary_IsPlaying) == 0x000001, "Wrong size on SIK_MusicLibrary_IsPlaying");
static_assert(offsetof(SIK_MusicLibrary_IsPlaying, ReturnValue) == 0x000000, "Member 'SIK_MusicLibrary_IsPlaying::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicLibrary.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct SIK_MusicLibrary_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicLibrary_SetVolume) == 0x000004, "Wrong alignment on SIK_MusicLibrary_SetVolume");
static_assert(sizeof(SIK_MusicLibrary_SetVolume) == 0x000004, "Wrong size on SIK_MusicLibrary_SetVolume");
static_assert(offsetof(SIK_MusicLibrary_SetVolume, Volume) == 0x000000, "Member 'SIK_MusicLibrary_SetVolume::Volume' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.ActivationSuccess
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_ActivationSuccess final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_ActivationSuccess) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_ActivationSuccess");
static_assert(sizeof(SIK_MusicRemoteLibrary_ActivationSuccess) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_ActivationSuccess");
static_assert(offsetof(SIK_MusicRemoteLibrary_ActivationSuccess, bValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_ActivationSuccess::bValue' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_ActivationSuccess, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_ActivationSuccess::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.CurrentEntryDidChange
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_CurrentEntryDidChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_CurrentEntryDidChange) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_CurrentEntryDidChange");
static_assert(sizeof(SIK_MusicRemoteLibrary_CurrentEntryDidChange) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_CurrentEntryDidChange");
static_assert(offsetof(SIK_MusicRemoteLibrary_CurrentEntryDidChange, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_CurrentEntryDidChange::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.CurrentEntryIsAvailable
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_CurrentEntryIsAvailable final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_CurrentEntryIsAvailable) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_CurrentEntryIsAvailable");
static_assert(sizeof(SIK_MusicRemoteLibrary_CurrentEntryIsAvailable) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_CurrentEntryIsAvailable");
static_assert(offsetof(SIK_MusicRemoteLibrary_CurrentEntryIsAvailable, bAvailable) == 0x000000, "Member 'SIK_MusicRemoteLibrary_CurrentEntryIsAvailable::bAvailable' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_CurrentEntryIsAvailable, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_CurrentEntryIsAvailable::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.CurrentEntryWillChange
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_CurrentEntryWillChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_CurrentEntryWillChange) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_CurrentEntryWillChange");
static_assert(sizeof(SIK_MusicRemoteLibrary_CurrentEntryWillChange) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_CurrentEntryWillChange");
static_assert(offsetof(SIK_MusicRemoteLibrary_CurrentEntryWillChange, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_CurrentEntryWillChange::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.DeregisterSteamMusicRemote
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote");
static_assert(sizeof(SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote");
static_assert(offsetof(SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_DeregisterSteamMusicRemote::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnableLooped
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_EnableLooped final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_EnableLooped) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_EnableLooped");
static_assert(sizeof(SIK_MusicRemoteLibrary_EnableLooped) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_EnableLooped");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnableLooped, bEnable) == 0x000000, "Member 'SIK_MusicRemoteLibrary_EnableLooped::bEnable' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnableLooped, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_EnableLooped::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnablePlaylists
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_EnablePlaylists final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_EnablePlaylists) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_EnablePlaylists");
static_assert(sizeof(SIK_MusicRemoteLibrary_EnablePlaylists) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_EnablePlaylists");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnablePlaylists, bEnable) == 0x000000, "Member 'SIK_MusicRemoteLibrary_EnablePlaylists::bEnable' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnablePlaylists, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_EnablePlaylists::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnablePlayNext
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_EnablePlayNext final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_EnablePlayNext) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_EnablePlayNext");
static_assert(sizeof(SIK_MusicRemoteLibrary_EnablePlayNext) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_EnablePlayNext");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnablePlayNext, bEnable) == 0x000000, "Member 'SIK_MusicRemoteLibrary_EnablePlayNext::bEnable' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnablePlayNext, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_EnablePlayNext::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnablePlayPrevious
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_EnablePlayPrevious final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_EnablePlayPrevious) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_EnablePlayPrevious");
static_assert(sizeof(SIK_MusicRemoteLibrary_EnablePlayPrevious) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_EnablePlayPrevious");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnablePlayPrevious, bEnable) == 0x000000, "Member 'SIK_MusicRemoteLibrary_EnablePlayPrevious::bEnable' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnablePlayPrevious, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_EnablePlayPrevious::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnableQueue
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_EnableQueue final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_EnableQueue) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_EnableQueue");
static_assert(sizeof(SIK_MusicRemoteLibrary_EnableQueue) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_EnableQueue");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnableQueue, bEnable) == 0x000000, "Member 'SIK_MusicRemoteLibrary_EnableQueue::bEnable' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnableQueue, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_EnableQueue::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.EnableShuffled
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_EnableShuffled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_EnableShuffled) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_EnableShuffled");
static_assert(sizeof(SIK_MusicRemoteLibrary_EnableShuffled) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_EnableShuffled");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnableShuffled, bEnable) == 0x000000, "Member 'SIK_MusicRemoteLibrary_EnableShuffled::bEnable' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_EnableShuffled, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_EnableShuffled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.IsCurrentMusicRemote
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_IsCurrentMusicRemote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_IsCurrentMusicRemote) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_IsCurrentMusicRemote");
static_assert(sizeof(SIK_MusicRemoteLibrary_IsCurrentMusicRemote) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_IsCurrentMusicRemote");
static_assert(offsetof(SIK_MusicRemoteLibrary_IsCurrentMusicRemote, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_IsCurrentMusicRemote::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.PlaylistDidChange
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_PlaylistDidChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_PlaylistDidChange) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_PlaylistDidChange");
static_assert(sizeof(SIK_MusicRemoteLibrary_PlaylistDidChange) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_PlaylistDidChange");
static_assert(offsetof(SIK_MusicRemoteLibrary_PlaylistDidChange, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_PlaylistDidChange::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.PlaylistWillChange
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_PlaylistWillChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_PlaylistWillChange) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_PlaylistWillChange");
static_assert(sizeof(SIK_MusicRemoteLibrary_PlaylistWillChange) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_PlaylistWillChange");
static_assert(offsetof(SIK_MusicRemoteLibrary_PlaylistWillChange, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_PlaylistWillChange::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.QueueDidChange
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_QueueDidChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_QueueDidChange) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_QueueDidChange");
static_assert(sizeof(SIK_MusicRemoteLibrary_QueueDidChange) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_QueueDidChange");
static_assert(offsetof(SIK_MusicRemoteLibrary_QueueDidChange, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_QueueDidChange::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.QueueWillChange
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_QueueWillChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_QueueWillChange) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_QueueWillChange");
static_assert(sizeof(SIK_MusicRemoteLibrary_QueueWillChange) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_QueueWillChange");
static_assert(offsetof(SIK_MusicRemoteLibrary_QueueWillChange, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_QueueWillChange::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.RegisterSteamMusicRemote
// 0x0018 (0x0018 - 0x0000)
struct SIK_MusicRemoteLibrary_RegisterSteamMusicRemote final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_RegisterSteamMusicRemote) == 0x000008, "Wrong alignment on SIK_MusicRemoteLibrary_RegisterSteamMusicRemote");
static_assert(sizeof(SIK_MusicRemoteLibrary_RegisterSteamMusicRemote) == 0x000018, "Wrong size on SIK_MusicRemoteLibrary_RegisterSteamMusicRemote");
static_assert(offsetof(SIK_MusicRemoteLibrary_RegisterSteamMusicRemote, Name_0) == 0x000000, "Member 'SIK_MusicRemoteLibrary_RegisterSteamMusicRemote::Name_0' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_RegisterSteamMusicRemote, ReturnValue) == 0x000010, "Member 'SIK_MusicRemoteLibrary_RegisterSteamMusicRemote::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.ResetPlaylistEntries
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_ResetPlaylistEntries final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_ResetPlaylistEntries) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_ResetPlaylistEntries");
static_assert(sizeof(SIK_MusicRemoteLibrary_ResetPlaylistEntries) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_ResetPlaylistEntries");
static_assert(offsetof(SIK_MusicRemoteLibrary_ResetPlaylistEntries, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_ResetPlaylistEntries::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.ResetQueueEntries
// 0x0001 (0x0001 - 0x0000)
struct SIK_MusicRemoteLibrary_ResetQueueEntries final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_ResetQueueEntries) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_ResetQueueEntries");
static_assert(sizeof(SIK_MusicRemoteLibrary_ResetQueueEntries) == 0x000001, "Wrong size on SIK_MusicRemoteLibrary_ResetQueueEntries");
static_assert(offsetof(SIK_MusicRemoteLibrary_ResetQueueEntries, ReturnValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_ResetQueueEntries::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetCurrentPlaylistEntry
// 0x0008 (0x0008 - 0x0000)
struct SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry final
{
public:
	int32                                         nID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry) == 0x000004, "Wrong alignment on SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry");
static_assert(sizeof(SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry) == 0x000008, "Wrong size on SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry, nID) == 0x000000, "Member 'SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry::nID' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry, ReturnValue) == 0x000004, "Member 'SIK_MusicRemoteLibrary_SetCurrentPlaylistEntry::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetCurrentQueueEntry
// 0x0008 (0x0008 - 0x0000)
struct SIK_MusicRemoteLibrary_SetCurrentQueueEntry final
{
public:
	int32                                         nID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_SetCurrentQueueEntry) == 0x000004, "Wrong alignment on SIK_MusicRemoteLibrary_SetCurrentQueueEntry");
static_assert(sizeof(SIK_MusicRemoteLibrary_SetCurrentQueueEntry) == 0x000008, "Wrong size on SIK_MusicRemoteLibrary_SetCurrentQueueEntry");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetCurrentQueueEntry, nID) == 0x000000, "Member 'SIK_MusicRemoteLibrary_SetCurrentQueueEntry::nID' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetCurrentQueueEntry, ReturnValue) == 0x000004, "Member 'SIK_MusicRemoteLibrary_SetCurrentQueueEntry::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct SIK_MusicRemoteLibrary_SetDisplayName final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_SetDisplayName) == 0x000008, "Wrong alignment on SIK_MusicRemoteLibrary_SetDisplayName");
static_assert(sizeof(SIK_MusicRemoteLibrary_SetDisplayName) == 0x000018, "Wrong size on SIK_MusicRemoteLibrary_SetDisplayName");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetDisplayName, DisplayName) == 0x000000, "Member 'SIK_MusicRemoteLibrary_SetDisplayName::DisplayName' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetDisplayName, ReturnValue) == 0x000010, "Member 'SIK_MusicRemoteLibrary_SetDisplayName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetPlaylistEntry
// 0x0020 (0x0020 - 0x0000)
struct SIK_MusicRemoteLibrary_SetPlaylistEntry final
{
public:
	int32                                         nID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nPosition;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntryText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_SetPlaylistEntry) == 0x000008, "Wrong alignment on SIK_MusicRemoteLibrary_SetPlaylistEntry");
static_assert(sizeof(SIK_MusicRemoteLibrary_SetPlaylistEntry) == 0x000020, "Wrong size on SIK_MusicRemoteLibrary_SetPlaylistEntry");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetPlaylistEntry, nID) == 0x000000, "Member 'SIK_MusicRemoteLibrary_SetPlaylistEntry::nID' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetPlaylistEntry, nPosition) == 0x000004, "Member 'SIK_MusicRemoteLibrary_SetPlaylistEntry::nPosition' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetPlaylistEntry, EntryText) == 0x000008, "Member 'SIK_MusicRemoteLibrary_SetPlaylistEntry::EntryText' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetPlaylistEntry, ReturnValue) == 0x000018, "Member 'SIK_MusicRemoteLibrary_SetPlaylistEntry::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetPNGIcon_64x64
// 0x0018 (0x0018 - 0x0000)
struct SIK_MusicRemoteLibrary_SetPNGIcon_64x64 final
{
public:
	TArray<uint8>                                 PNGData;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_SetPNGIcon_64x64) == 0x000008, "Wrong alignment on SIK_MusicRemoteLibrary_SetPNGIcon_64x64");
static_assert(sizeof(SIK_MusicRemoteLibrary_SetPNGIcon_64x64) == 0x000018, "Wrong size on SIK_MusicRemoteLibrary_SetPNGIcon_64x64");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetPNGIcon_64x64, PNGData) == 0x000000, "Member 'SIK_MusicRemoteLibrary_SetPNGIcon_64x64::PNGData' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetPNGIcon_64x64, ReturnValue) == 0x000010, "Member 'SIK_MusicRemoteLibrary_SetPNGIcon_64x64::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.SetQueueEntry
// 0x0020 (0x0020 - 0x0000)
struct SIK_MusicRemoteLibrary_SetQueueEntry final
{
public:
	int32                                         nID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nPosition;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntryText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_SetQueueEntry) == 0x000008, "Wrong alignment on SIK_MusicRemoteLibrary_SetQueueEntry");
static_assert(sizeof(SIK_MusicRemoteLibrary_SetQueueEntry) == 0x000020, "Wrong size on SIK_MusicRemoteLibrary_SetQueueEntry");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetQueueEntry, nID) == 0x000000, "Member 'SIK_MusicRemoteLibrary_SetQueueEntry::nID' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetQueueEntry, nPosition) == 0x000004, "Member 'SIK_MusicRemoteLibrary_SetQueueEntry::nPosition' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetQueueEntry, EntryText) == 0x000008, "Member 'SIK_MusicRemoteLibrary_SetQueueEntry::EntryText' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_SetQueueEntry, ReturnValue) == 0x000018, "Member 'SIK_MusicRemoteLibrary_SetQueueEntry::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateCurrentEntryCoverArt
// 0x0018 (0x0018 - 0x0000)
struct SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt final
{
public:
	TArray<uint8>                                 PNGData;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt) == 0x000008, "Wrong alignment on SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt");
static_assert(sizeof(SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt) == 0x000018, "Wrong size on SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt, PNGData) == 0x000000, "Member 'SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt::PNGData' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt, ReturnValue) == 0x000010, "Member 'SIK_MusicRemoteLibrary_UpdateCurrentEntryCoverArt::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateCurrentEntryElapsedSeconds
// 0x0008 (0x0008 - 0x0000)
struct SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds final
{
public:
	int32                                         nValue;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds) == 0x000004, "Wrong alignment on SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds");
static_assert(sizeof(SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds) == 0x000008, "Wrong size on SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds, nValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds::nValue' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds, ReturnValue) == 0x000004, "Member 'SIK_MusicRemoteLibrary_UpdateCurrentEntryElapsedSeconds::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateCurrentEntryText
// 0x0018 (0x0018 - 0x0000)
struct SIK_MusicRemoteLibrary_UpdateCurrentEntryText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_UpdateCurrentEntryText) == 0x000008, "Wrong alignment on SIK_MusicRemoteLibrary_UpdateCurrentEntryText");
static_assert(sizeof(SIK_MusicRemoteLibrary_UpdateCurrentEntryText) == 0x000018, "Wrong size on SIK_MusicRemoteLibrary_UpdateCurrentEntryText");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateCurrentEntryText, Text) == 0x000000, "Member 'SIK_MusicRemoteLibrary_UpdateCurrentEntryText::Text' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateCurrentEntryText, ReturnValue) == 0x000010, "Member 'SIK_MusicRemoteLibrary_UpdateCurrentEntryText::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateLooped
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_UpdateLooped final
{
public:
	bool                                          bLooped;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_UpdateLooped) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_UpdateLooped");
static_assert(sizeof(SIK_MusicRemoteLibrary_UpdateLooped) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_UpdateLooped");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateLooped, bLooped) == 0x000000, "Member 'SIK_MusicRemoteLibrary_UpdateLooped::bLooped' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateLooped, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_UpdateLooped::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdatePlaybackStatus
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_UpdatePlaybackStatus final
{
public:
	ESIK_AudioPlayback_Status                     Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_UpdatePlaybackStatus) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_UpdatePlaybackStatus");
static_assert(sizeof(SIK_MusicRemoteLibrary_UpdatePlaybackStatus) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_UpdatePlaybackStatus");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdatePlaybackStatus, Status) == 0x000000, "Member 'SIK_MusicRemoteLibrary_UpdatePlaybackStatus::Status' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdatePlaybackStatus, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_UpdatePlaybackStatus::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateShuffled
// 0x0002 (0x0002 - 0x0000)
struct SIK_MusicRemoteLibrary_UpdateShuffled final
{
public:
	bool                                          bShuffled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_MusicRemoteLibrary_UpdateShuffled) == 0x000001, "Wrong alignment on SIK_MusicRemoteLibrary_UpdateShuffled");
static_assert(sizeof(SIK_MusicRemoteLibrary_UpdateShuffled) == 0x000002, "Wrong size on SIK_MusicRemoteLibrary_UpdateShuffled");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateShuffled, bShuffled) == 0x000000, "Member 'SIK_MusicRemoteLibrary_UpdateShuffled::bShuffled' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateShuffled, ReturnValue) == 0x000001, "Member 'SIK_MusicRemoteLibrary_UpdateShuffled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_MusicRemoteLibrary.UpdateVolume
// 0x0008 (0x0008 - 0x0000)
struct SIK_MusicRemoteLibrary_UpdateVolume final
{
public:
	float                                         flValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_MusicRemoteLibrary_UpdateVolume) == 0x000004, "Wrong alignment on SIK_MusicRemoteLibrary_UpdateVolume");
static_assert(sizeof(SIK_MusicRemoteLibrary_UpdateVolume) == 0x000008, "Wrong size on SIK_MusicRemoteLibrary_UpdateVolume");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateVolume, flValue) == 0x000000, "Member 'SIK_MusicRemoteLibrary_UpdateVolume::flValue' has a wrong offset!");
static_assert(offsetof(SIK_MusicRemoteLibrary_UpdateVolume, ReturnValue) == 0x000004, "Member 'SIK_MusicRemoteLibrary_UpdateVolume::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.AcceptP2PSessionWithUser
// 0x0010 (0x0010 - 0x0000)
struct SIK_NetworkingLibrary_AcceptP2PSessionWithUser final
{
public:
	struct FSIK_SteamId                           SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingLibrary_AcceptP2PSessionWithUser) == 0x000008, "Wrong alignment on SIK_NetworkingLibrary_AcceptP2PSessionWithUser");
static_assert(sizeof(SIK_NetworkingLibrary_AcceptP2PSessionWithUser) == 0x000010, "Wrong size on SIK_NetworkingLibrary_AcceptP2PSessionWithUser");
static_assert(offsetof(SIK_NetworkingLibrary_AcceptP2PSessionWithUser, SteamIDRemote) == 0x000000, "Member 'SIK_NetworkingLibrary_AcceptP2PSessionWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_AcceptP2PSessionWithUser, ReturnValue) == 0x000008, "Member 'SIK_NetworkingLibrary_AcceptP2PSessionWithUser::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.AllowP2PPacketRelay
// 0x0002 (0x0002 - 0x0000)
struct SIK_NetworkingLibrary_AllowP2PPacketRelay final
{
public:
	bool                                          Allow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_NetworkingLibrary_AllowP2PPacketRelay) == 0x000001, "Wrong alignment on SIK_NetworkingLibrary_AllowP2PPacketRelay");
static_assert(sizeof(SIK_NetworkingLibrary_AllowP2PPacketRelay) == 0x000002, "Wrong size on SIK_NetworkingLibrary_AllowP2PPacketRelay");
static_assert(offsetof(SIK_NetworkingLibrary_AllowP2PPacketRelay, Allow) == 0x000000, "Member 'SIK_NetworkingLibrary_AllowP2PPacketRelay::Allow' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_AllowP2PPacketRelay, ReturnValue) == 0x000001, "Member 'SIK_NetworkingLibrary_AllowP2PPacketRelay::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.CloseP2PChannelWithUser
// 0x0010 (0x0010 - 0x0000)
struct SIK_NetworkingLibrary_CloseP2PChannelWithUser final
{
public:
	struct FSIK_SteamId                           SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingLibrary_CloseP2PChannelWithUser) == 0x000008, "Wrong alignment on SIK_NetworkingLibrary_CloseP2PChannelWithUser");
static_assert(sizeof(SIK_NetworkingLibrary_CloseP2PChannelWithUser) == 0x000010, "Wrong size on SIK_NetworkingLibrary_CloseP2PChannelWithUser");
static_assert(offsetof(SIK_NetworkingLibrary_CloseP2PChannelWithUser, SteamIDRemote) == 0x000000, "Member 'SIK_NetworkingLibrary_CloseP2PChannelWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_CloseP2PChannelWithUser, Channel) == 0x000008, "Member 'SIK_NetworkingLibrary_CloseP2PChannelWithUser::Channel' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_CloseP2PChannelWithUser, ReturnValue) == 0x00000C, "Member 'SIK_NetworkingLibrary_CloseP2PChannelWithUser::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.CloseP2PSessionWithUser
// 0x0010 (0x0010 - 0x0000)
struct SIK_NetworkingLibrary_CloseP2PSessionWithUser final
{
public:
	struct FSIK_SteamId                           SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingLibrary_CloseP2PSessionWithUser) == 0x000008, "Wrong alignment on SIK_NetworkingLibrary_CloseP2PSessionWithUser");
static_assert(sizeof(SIK_NetworkingLibrary_CloseP2PSessionWithUser) == 0x000010, "Wrong size on SIK_NetworkingLibrary_CloseP2PSessionWithUser");
static_assert(offsetof(SIK_NetworkingLibrary_CloseP2PSessionWithUser, SteamIDRemote) == 0x000000, "Member 'SIK_NetworkingLibrary_CloseP2PSessionWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_CloseP2PSessionWithUser, ReturnValue) == 0x000008, "Member 'SIK_NetworkingLibrary_CloseP2PSessionWithUser::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.GetP2PSessionState
// 0x0038 (0x0038 - 0x0000)
struct SIK_NetworkingLibrary_GetP2PSessionState final
{
public:
	struct FSIK_SteamId                           SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_P2PSessionState                   OutP2PSessionState;                                // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingLibrary_GetP2PSessionState) == 0x000008, "Wrong alignment on SIK_NetworkingLibrary_GetP2PSessionState");
static_assert(sizeof(SIK_NetworkingLibrary_GetP2PSessionState) == 0x000038, "Wrong size on SIK_NetworkingLibrary_GetP2PSessionState");
static_assert(offsetof(SIK_NetworkingLibrary_GetP2PSessionState, SteamIDRemote) == 0x000000, "Member 'SIK_NetworkingLibrary_GetP2PSessionState::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_GetP2PSessionState, OutP2PSessionState) == 0x000008, "Member 'SIK_NetworkingLibrary_GetP2PSessionState::OutP2PSessionState' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_GetP2PSessionState, ReturnValue) == 0x000030, "Member 'SIK_NetworkingLibrary_GetP2PSessionState::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.IsP2PPacketAvailable
// 0x000C (0x000C - 0x0000)
struct SIK_NetworkingLibrary_IsP2PPacketAvailable final
{
public:
	int32                                         MsgSize;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingLibrary_IsP2PPacketAvailable) == 0x000004, "Wrong alignment on SIK_NetworkingLibrary_IsP2PPacketAvailable");
static_assert(sizeof(SIK_NetworkingLibrary_IsP2PPacketAvailable) == 0x00000C, "Wrong size on SIK_NetworkingLibrary_IsP2PPacketAvailable");
static_assert(offsetof(SIK_NetworkingLibrary_IsP2PPacketAvailable, MsgSize) == 0x000000, "Member 'SIK_NetworkingLibrary_IsP2PPacketAvailable::MsgSize' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_IsP2PPacketAvailable, Channel) == 0x000004, "Member 'SIK_NetworkingLibrary_IsP2PPacketAvailable::Channel' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_IsP2PPacketAvailable, ReturnValue) == 0x000008, "Member 'SIK_NetworkingLibrary_IsP2PPacketAvailable::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.ReadP2PPacket
// 0x0028 (0x0028 - 0x0000)
struct SIK_NetworkingLibrary_ReadP2PPacket final
{
public:
	TArray<uint8>                                 OutMsg;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MsgSize;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           OutSteamIDRemote;                                  // 0x0018(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingLibrary_ReadP2PPacket) == 0x000008, "Wrong alignment on SIK_NetworkingLibrary_ReadP2PPacket");
static_assert(sizeof(SIK_NetworkingLibrary_ReadP2PPacket) == 0x000028, "Wrong size on SIK_NetworkingLibrary_ReadP2PPacket");
static_assert(offsetof(SIK_NetworkingLibrary_ReadP2PPacket, OutMsg) == 0x000000, "Member 'SIK_NetworkingLibrary_ReadP2PPacket::OutMsg' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_ReadP2PPacket, MsgSize) == 0x000010, "Member 'SIK_NetworkingLibrary_ReadP2PPacket::MsgSize' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_ReadP2PPacket, OutSteamIDRemote) == 0x000018, "Member 'SIK_NetworkingLibrary_ReadP2PPacket::OutSteamIDRemote' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_ReadP2PPacket, Channel) == 0x000020, "Member 'SIK_NetworkingLibrary_ReadP2PPacket::Channel' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_ReadP2PPacket, ReturnValue) == 0x000024, "Member 'SIK_NetworkingLibrary_ReadP2PPacket::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingLibrary.SendP2PPacket
// 0x0020 (0x0020 - 0x0000)
struct SIK_NetworkingLibrary_SendP2PPacket final
{
public:
	struct FSIK_SteamId                           SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Msg;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_P2PSend                                  SendType;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingLibrary_SendP2PPacket) == 0x000008, "Wrong alignment on SIK_NetworkingLibrary_SendP2PPacket");
static_assert(sizeof(SIK_NetworkingLibrary_SendP2PPacket) == 0x000020, "Wrong size on SIK_NetworkingLibrary_SendP2PPacket");
static_assert(offsetof(SIK_NetworkingLibrary_SendP2PPacket, SteamIDRemote) == 0x000000, "Member 'SIK_NetworkingLibrary_SendP2PPacket::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_SendP2PPacket, Msg) == 0x000008, "Member 'SIK_NetworkingLibrary_SendP2PPacket::Msg' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_SendP2PPacket, Channel) == 0x000018, "Member 'SIK_NetworkingLibrary_SendP2PPacket::Channel' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_SendP2PPacket, SendType) == 0x00001C, "Member 'SIK_NetworkingLibrary_SendP2PPacket::SendType' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingLibrary_SendP2PPacket, ReturnValue) == 0x00001D, "Member 'SIK_NetworkingLibrary_SendP2PPacket::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.CheckPingDataUpToDate
// 0x0008 (0x0008 - 0x0000)
struct SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate final
{
public:
	float                                         MaxAgeSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate) == 0x000004, "Wrong alignment on SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate) == 0x000008, "Wrong size on SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate, MaxAgeSeconds) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate::MaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate, ReturnValue) == 0x000004, "Member 'SIK_NetworkingUtilsLibrary_CheckPingDataUpToDate::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.ConvertPingLocationToString
// 0x0020 (0x0020 - 0x0000)
struct SIK_NetworkingUtilsLibrary_ConvertPingLocationToString final
{
public:
	struct FSIK_SteamNetworkPingLocation          Location;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_ConvertPingLocationToString) == 0x000008, "Wrong alignment on SIK_NetworkingUtilsLibrary_ConvertPingLocationToString");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_ConvertPingLocationToString) == 0x000020, "Wrong size on SIK_NetworkingUtilsLibrary_ConvertPingLocationToString");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_ConvertPingLocationToString, Location) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_ConvertPingLocationToString::Location' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_ConvertPingLocationToString, ReturnValue) == 0x000010, "Member 'SIK_NetworkingUtilsLibrary_ConvertPingLocationToString::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.EstimatePingTimeBetweenTwoLocations
// 0x0028 (0x0028 - 0x0000)
struct SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations final
{
public:
	struct FSIK_SteamNetworkPingLocation          Location1;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSIK_SteamNetworkPingLocation          Location2;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations) == 0x000008, "Wrong alignment on SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations) == 0x000028, "Wrong size on SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations, Location1) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations::Location1' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations, Location2) == 0x000010, "Member 'SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations::Location2' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations, ReturnValue) == 0x000020, "Member 'SIK_NetworkingUtilsLibrary_EstimatePingTimeBetweenTwoLocations::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.EstimatePingTimeFromLocalHost
// 0x0018 (0x0018 - 0x0000)
struct SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost final
{
public:
	struct FSIK_SteamNetworkPingLocation          Location;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost) == 0x000008, "Wrong alignment on SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost) == 0x000018, "Wrong size on SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost, Location) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost::Location' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost, ReturnValue) == 0x000010, "Member 'SIK_NetworkingUtilsLibrary_EstimatePingTimeFromLocalHost::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetDirectPingToPOP
// 0x0008 (0x0008 - 0x0000)
struct SIK_NetworkingUtilsLibrary_GetDirectPingToPOP final
{
public:
	struct FSIK_SteamNetworkingPOPID              PopID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_GetDirectPingToPOP) == 0x000004, "Wrong alignment on SIK_NetworkingUtilsLibrary_GetDirectPingToPOP");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_GetDirectPingToPOP) == 0x000008, "Wrong size on SIK_NetworkingUtilsLibrary_GetDirectPingToPOP");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetDirectPingToPOP, PopID) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_GetDirectPingToPOP::PopID' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetDirectPingToPOP, ReturnValue) == 0x000004, "Member 'SIK_NetworkingUtilsLibrary_GetDirectPingToPOP::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetLocalPingLocation
// 0x0018 (0x0018 - 0x0000)
struct SIK_NetworkingUtilsLibrary_GetLocalPingLocation final
{
public:
	struct FSIK_SteamNetworkPingLocation          OutPingLocation;                                   // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_GetLocalPingLocation) == 0x000008, "Wrong alignment on SIK_NetworkingUtilsLibrary_GetLocalPingLocation");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_GetLocalPingLocation) == 0x000018, "Wrong size on SIK_NetworkingUtilsLibrary_GetLocalPingLocation");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetLocalPingLocation, OutPingLocation) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_GetLocalPingLocation::OutPingLocation' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetLocalPingLocation, ReturnValue) == 0x000010, "Member 'SIK_NetworkingUtilsLibrary_GetLocalPingLocation::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetPingToDataCenter
// 0x000C (0x000C - 0x0000)
struct SIK_NetworkingUtilsLibrary_GetPingToDataCenter final
{
public:
	struct FSIK_SteamNetworkingPOPID              PopID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamNetworkingPOPID              ViaRelayPoP;                                       // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_GetPingToDataCenter) == 0x000004, "Wrong alignment on SIK_NetworkingUtilsLibrary_GetPingToDataCenter");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_GetPingToDataCenter) == 0x00000C, "Wrong size on SIK_NetworkingUtilsLibrary_GetPingToDataCenter");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetPingToDataCenter, PopID) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_GetPingToDataCenter::PopID' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetPingToDataCenter, ViaRelayPoP) == 0x000004, "Member 'SIK_NetworkingUtilsLibrary_GetPingToDataCenter::ViaRelayPoP' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetPingToDataCenter, ReturnValue) == 0x000008, "Member 'SIK_NetworkingUtilsLibrary_GetPingToDataCenter::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetPOPCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_NetworkingUtilsLibrary_GetPOPCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_GetPOPCount) == 0x000004, "Wrong alignment on SIK_NetworkingUtilsLibrary_GetPOPCount");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_GetPOPCount) == 0x000004, "Wrong size on SIK_NetworkingUtilsLibrary_GetPOPCount");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetPOPCount, ReturnValue) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_GetPOPCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetPOPList
// 0x0020 (0x0020 - 0x0000)
struct SIK_NetworkingUtilsLibrary_GetPOPList final
{
public:
	int32                                         ListSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_SteamNetworkingPOPID>      OutPOPIDList;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_GetPOPList) == 0x000008, "Wrong alignment on SIK_NetworkingUtilsLibrary_GetPOPList");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_GetPOPList) == 0x000020, "Wrong size on SIK_NetworkingUtilsLibrary_GetPOPList");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetPOPList, ListSize) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_GetPOPList::ListSize' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetPOPList, OutPOPIDList) == 0x000008, "Member 'SIK_NetworkingUtilsLibrary_GetPOPList::OutPOPIDList' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetPOPList, ReturnValue) == 0x000018, "Member 'SIK_NetworkingUtilsLibrary_GetPOPList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.GetRelayNetworkStatus
// 0x0001 (0x0001 - 0x0000)
struct SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus final
{
public:
	ESIK_SteamNetworkingAvailability              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus) == 0x000001, "Wrong alignment on SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus) == 0x000001, "Wrong size on SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus, ReturnValue) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_GetRelayNetworkStatus::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.IsPingMeasurementInProgress
// 0x0001 (0x0001 - 0x0000)
struct SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress) == 0x000001, "Wrong alignment on SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress) == 0x000001, "Wrong size on SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress, ReturnValue) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_IsPingMeasurementInProgress::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_NetworkingUtilsLibrary.ParsePingLocationString
// 0x0028 (0x0028 - 0x0000)
struct SIK_NetworkingUtilsLibrary_ParsePingLocationString final
{
public:
	class FString                                 PingLocationString;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_SteamNetworkPingLocation          OutPingLocation;                                   // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_NetworkingUtilsLibrary_ParsePingLocationString) == 0x000008, "Wrong alignment on SIK_NetworkingUtilsLibrary_ParsePingLocationString");
static_assert(sizeof(SIK_NetworkingUtilsLibrary_ParsePingLocationString) == 0x000028, "Wrong size on SIK_NetworkingUtilsLibrary_ParsePingLocationString");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_ParsePingLocationString, PingLocationString) == 0x000000, "Member 'SIK_NetworkingUtilsLibrary_ParsePingLocationString::PingLocationString' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_ParsePingLocationString, OutPingLocation) == 0x000010, "Member 'SIK_NetworkingUtilsLibrary_ParsePingLocationString::OutPingLocation' has a wrong offset!");
static_assert(offsetof(SIK_NetworkingUtilsLibrary_ParsePingLocationString, ReturnValue) == 0x000020, "Member 'SIK_NetworkingUtilsLibrary_ParsePingLocationString::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.DestroyBeacon
// 0x0010 (0x0010 - 0x0000)
struct SIK_PartiesLibrary_DestroyBeacon final
{
public:
	struct FSIK_PartyBeaconID                     BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_PartiesLibrary_DestroyBeacon) == 0x000008, "Wrong alignment on SIK_PartiesLibrary_DestroyBeacon");
static_assert(sizeof(SIK_PartiesLibrary_DestroyBeacon) == 0x000010, "Wrong size on SIK_PartiesLibrary_DestroyBeacon");
static_assert(offsetof(SIK_PartiesLibrary_DestroyBeacon, BeaconID) == 0x000000, "Member 'SIK_PartiesLibrary_DestroyBeacon::BeaconID' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_DestroyBeacon, ReturnValue) == 0x000008, "Member 'SIK_PartiesLibrary_DestroyBeacon::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.GetAvailableBeaconLocations
// 0x0020 (0x0020 - 0x0000)
struct SIK_PartiesLibrary_GetAvailableBeaconLocations final
{
public:
	int32                                         MaxNumberOfLocations;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_SteamPartyBeaconLocation>  Locations;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_PartiesLibrary_GetAvailableBeaconLocations) == 0x000008, "Wrong alignment on SIK_PartiesLibrary_GetAvailableBeaconLocations");
static_assert(sizeof(SIK_PartiesLibrary_GetAvailableBeaconLocations) == 0x000020, "Wrong size on SIK_PartiesLibrary_GetAvailableBeaconLocations");
static_assert(offsetof(SIK_PartiesLibrary_GetAvailableBeaconLocations, MaxNumberOfLocations) == 0x000000, "Member 'SIK_PartiesLibrary_GetAvailableBeaconLocations::MaxNumberOfLocations' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetAvailableBeaconLocations, Locations) == 0x000008, "Member 'SIK_PartiesLibrary_GetAvailableBeaconLocations::Locations' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetAvailableBeaconLocations, ReturnValue) == 0x000018, "Member 'SIK_PartiesLibrary_GetAvailableBeaconLocations::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.GetBeaconByIndex
// 0x0010 (0x0010 - 0x0000)
struct SIK_PartiesLibrary_GetBeaconByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_PartyBeaconID                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_PartiesLibrary_GetBeaconByIndex) == 0x000008, "Wrong alignment on SIK_PartiesLibrary_GetBeaconByIndex");
static_assert(sizeof(SIK_PartiesLibrary_GetBeaconByIndex) == 0x000010, "Wrong size on SIK_PartiesLibrary_GetBeaconByIndex");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconByIndex, Index_0) == 0x000000, "Member 'SIK_PartiesLibrary_GetBeaconByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconByIndex, ReturnValue) == 0x000008, "Member 'SIK_PartiesLibrary_GetBeaconByIndex::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.GetBeaconDetails
// 0x0038 (0x0038 - 0x0000)
struct SIK_PartiesLibrary_GetBeaconDetails final
{
public:
	struct FSIK_PartyBeaconID                     BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           CreatorId;                                         // 0x0008(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamPartyBeaconLocation          Location;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_PartiesLibrary_GetBeaconDetails) == 0x000008, "Wrong alignment on SIK_PartiesLibrary_GetBeaconDetails");
static_assert(sizeof(SIK_PartiesLibrary_GetBeaconDetails) == 0x000038, "Wrong size on SIK_PartiesLibrary_GetBeaconDetails");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconDetails, BeaconID) == 0x000000, "Member 'SIK_PartiesLibrary_GetBeaconDetails::BeaconID' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconDetails, CreatorId) == 0x000008, "Member 'SIK_PartiesLibrary_GetBeaconDetails::CreatorId' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconDetails, Location) == 0x000010, "Member 'SIK_PartiesLibrary_GetBeaconDetails::Location' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconDetails, MetaData) == 0x000020, "Member 'SIK_PartiesLibrary_GetBeaconDetails::MetaData' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconDetails, ReturnValue) == 0x000030, "Member 'SIK_PartiesLibrary_GetBeaconDetails::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.GetBeaconLocationData
// 0x0030 (0x0030 - 0x0000)
struct SIK_PartiesLibrary_GetBeaconLocationData final
{
public:
	struct FSIK_SteamPartyBeaconLocation          BeaconLocation;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_SteamPartyBeaconLocationType             LocationType;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocationString;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_PartiesLibrary_GetBeaconLocationData) == 0x000008, "Wrong alignment on SIK_PartiesLibrary_GetBeaconLocationData");
static_assert(sizeof(SIK_PartiesLibrary_GetBeaconLocationData) == 0x000030, "Wrong size on SIK_PartiesLibrary_GetBeaconLocationData");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconLocationData, BeaconLocation) == 0x000000, "Member 'SIK_PartiesLibrary_GetBeaconLocationData::BeaconLocation' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconLocationData, LocationType) == 0x000010, "Member 'SIK_PartiesLibrary_GetBeaconLocationData::LocationType' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconLocationData, LocationString) == 0x000018, "Member 'SIK_PartiesLibrary_GetBeaconLocationData::LocationString' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetBeaconLocationData, ReturnValue) == 0x000028, "Member 'SIK_PartiesLibrary_GetBeaconLocationData::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.GetNumActiveBeacons
// 0x0004 (0x0004 - 0x0000)
struct SIK_PartiesLibrary_GetNumActiveBeacons final
{
public:
	int32                                         NumActiveBeacons;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_PartiesLibrary_GetNumActiveBeacons) == 0x000004, "Wrong alignment on SIK_PartiesLibrary_GetNumActiveBeacons");
static_assert(sizeof(SIK_PartiesLibrary_GetNumActiveBeacons) == 0x000004, "Wrong size on SIK_PartiesLibrary_GetNumActiveBeacons");
static_assert(offsetof(SIK_PartiesLibrary_GetNumActiveBeacons, NumActiveBeacons) == 0x000000, "Member 'SIK_PartiesLibrary_GetNumActiveBeacons::NumActiveBeacons' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.GetNumAvailableBeaconLocations
// 0x0008 (0x0008 - 0x0000)
struct SIK_PartiesLibrary_GetNumAvailableBeaconLocations final
{
public:
	int32                                         NumLocations;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_PartiesLibrary_GetNumAvailableBeaconLocations) == 0x000004, "Wrong alignment on SIK_PartiesLibrary_GetNumAvailableBeaconLocations");
static_assert(sizeof(SIK_PartiesLibrary_GetNumAvailableBeaconLocations) == 0x000008, "Wrong size on SIK_PartiesLibrary_GetNumAvailableBeaconLocations");
static_assert(offsetof(SIK_PartiesLibrary_GetNumAvailableBeaconLocations, NumLocations) == 0x000000, "Member 'SIK_PartiesLibrary_GetNumAvailableBeaconLocations::NumLocations' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_GetNumAvailableBeaconLocations, ReturnValue) == 0x000004, "Member 'SIK_PartiesLibrary_GetNumAvailableBeaconLocations::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PartiesLibrary.OnReservationCompleted
// 0x0010 (0x0010 - 0x0000)
struct SIK_PartiesLibrary_OnReservationCompleted final
{
public:
	struct FSIK_PartyBeaconID                     BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           UserSteamId;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_PartiesLibrary_OnReservationCompleted) == 0x000008, "Wrong alignment on SIK_PartiesLibrary_OnReservationCompleted");
static_assert(sizeof(SIK_PartiesLibrary_OnReservationCompleted) == 0x000010, "Wrong size on SIK_PartiesLibrary_OnReservationCompleted");
static_assert(offsetof(SIK_PartiesLibrary_OnReservationCompleted, BeaconID) == 0x000000, "Member 'SIK_PartiesLibrary_OnReservationCompleted::BeaconID' has a wrong offset!");
static_assert(offsetof(SIK_PartiesLibrary_OnReservationCompleted, UserSteamId) == 0x000008, "Member 'SIK_PartiesLibrary_OnReservationCompleted::UserSteamId' has a wrong offset!");

// Function SteamIntegrationKit.SIK_PlayerDetails_AsyncFunction.RequestPlayerDetails
// 0x0020 (0x0020 - 0x0000)
struct SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails final
{
public:
	class FString                                 ServerIP;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_PlayerDetails_AsyncFunction*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails) == 0x000008, "Wrong alignment on SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails");
static_assert(sizeof(SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails) == 0x000020, "Wrong size on SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails");
static_assert(offsetof(SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails, ServerIP) == 0x000000, "Member 'SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails::ServerIP' has a wrong offset!");
static_assert(offsetof(SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails, ServerPort) == 0x000010, "Member 'SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails::ServerPort' has a wrong offset!");
static_assert(offsetof(SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails, ReturnValue) == 0x000018, "Member 'SIK_PlayerDetails_AsyncFunction_RequestPlayerDetails::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.BeginFileWriteBatch
// 0x0001 (0x0001 - 0x0000)
struct SIK_RemoteStorageLibrary_BeginFileWriteBatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_BeginFileWriteBatch) == 0x000001, "Wrong alignment on SIK_RemoteStorageLibrary_BeginFileWriteBatch");
static_assert(sizeof(SIK_RemoteStorageLibrary_BeginFileWriteBatch) == 0x000001, "Wrong size on SIK_RemoteStorageLibrary_BeginFileWriteBatch");
static_assert(offsetof(SIK_RemoteStorageLibrary_BeginFileWriteBatch, ReturnValue) == 0x000000, "Member 'SIK_RemoteStorageLibrary_BeginFileWriteBatch::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.EndFileWriteBatch
// 0x0001 (0x0001 - 0x0000)
struct SIK_RemoteStorageLibrary_EndFileWriteBatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_EndFileWriteBatch) == 0x000001, "Wrong alignment on SIK_RemoteStorageLibrary_EndFileWriteBatch");
static_assert(sizeof(SIK_RemoteStorageLibrary_EndFileWriteBatch) == 0x000001, "Wrong size on SIK_RemoteStorageLibrary_EndFileWriteBatch");
static_assert(offsetof(SIK_RemoteStorageLibrary_EndFileWriteBatch, ReturnValue) == 0x000000, "Member 'SIK_RemoteStorageLibrary_EndFileWriteBatch::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileDelete
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_FileDelete final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileDelete) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileDelete");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileDelete) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_FileDelete");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileDelete, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileDelete::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileDelete, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_FileDelete::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileExists
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_FileExists final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileExists) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileExists");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileExists) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_FileExists");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileExists, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileExists::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileExists, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_FileExists::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileForget
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_FileForget final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileForget) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileForget");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileForget) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_FileForget");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileForget, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileForget::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileForget, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_FileForget::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FilePersisted
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_FilePersisted final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FilePersisted) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FilePersisted");
static_assert(sizeof(SIK_RemoteStorageLibrary_FilePersisted) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_FilePersisted");
static_assert(offsetof(SIK_RemoteStorageLibrary_FilePersisted, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FilePersisted::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FilePersisted, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_FilePersisted::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileRead
// 0x0028 (0x0028 - 0x0000)
struct SIK_RemoteStorageLibrary_FileRead final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileRead) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileRead");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileRead) == 0x000028, "Wrong size on SIK_RemoteStorageLibrary_FileRead");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileRead, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileRead::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileRead, Data) == 0x000010, "Member 'SIK_RemoteStorageLibrary_FileRead::Data' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileRead, ReturnValue) == 0x000020, "Member 'SIK_RemoteStorageLibrary_FileRead::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWrite
// 0x0028 (0x0028 - 0x0000)
struct SIK_RemoteStorageLibrary_FileWrite final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileWrite) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileWrite");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileWrite) == 0x000028, "Wrong size on SIK_RemoteStorageLibrary_FileWrite");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWrite, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileWrite::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWrite, Data) == 0x000010, "Member 'SIK_RemoteStorageLibrary_FileWrite::Data' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWrite, ReturnValue) == 0x000020, "Member 'SIK_RemoteStorageLibrary_FileWrite::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamCancel
// 0x0010 (0x0010 - 0x0000)
struct SIK_RemoteStorageLibrary_FileWriteStreamCancel final
{
public:
	struct FSIK_UGCFileWriteStreamHandle          WriteStreamHandle;                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileWriteStreamCancel) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileWriteStreamCancel");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileWriteStreamCancel) == 0x000010, "Wrong size on SIK_RemoteStorageLibrary_FileWriteStreamCancel");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamCancel, WriteStreamHandle) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamCancel::WriteStreamHandle' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamCancel, ReturnValue) == 0x000008, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamCancel::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamClose
// 0x0010 (0x0010 - 0x0000)
struct SIK_RemoteStorageLibrary_FileWriteStreamClose final
{
public:
	struct FSIK_UGCFileWriteStreamHandle          WriteStreamHandle;                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileWriteStreamClose) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileWriteStreamClose");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileWriteStreamClose) == 0x000010, "Wrong size on SIK_RemoteStorageLibrary_FileWriteStreamClose");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamClose, WriteStreamHandle) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamClose::WriteStreamHandle' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamClose, ReturnValue) == 0x000008, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamClose::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamOpen
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_FileWriteStreamOpen final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_UGCFileWriteStreamHandle          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileWriteStreamOpen) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileWriteStreamOpen");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileWriteStreamOpen) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_FileWriteStreamOpen");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamOpen, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamOpen::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamOpen, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamOpen::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.FileWriteStreamWriteChunk
// 0x0020 (0x0020 - 0x0000)
struct SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk final
{
public:
	struct FSIK_UGCFileWriteStreamHandle          WriteStreamHandle;                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk");
static_assert(sizeof(SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk) == 0x000020, "Wrong size on SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk, WriteStreamHandle) == 0x000000, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk::WriteStreamHandle' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk, Data) == 0x000008, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk::Data' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk, ReturnValue) == 0x000018, "Member 'SIK_RemoteStorageLibrary_FileWriteStreamWriteChunk::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetCachedUGCCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_RemoteStorageLibrary_GetCachedUGCCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetCachedUGCCount) == 0x000004, "Wrong alignment on SIK_RemoteStorageLibrary_GetCachedUGCCount");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetCachedUGCCount) == 0x000004, "Wrong size on SIK_RemoteStorageLibrary_GetCachedUGCCount");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetCachedUGCCount, ReturnValue) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetCachedUGCCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetCachedUGCHandle
// 0x0010 (0x0010 - 0x0000)
struct SIK_RemoteStorageLibrary_GetCachedUGCHandle final
{
public:
	int32                                         CachedContent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_UGCHandle                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetCachedUGCHandle) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetCachedUGCHandle");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetCachedUGCHandle) == 0x000010, "Wrong size on SIK_RemoteStorageLibrary_GetCachedUGCHandle");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetCachedUGCHandle, CachedContent) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetCachedUGCHandle::CachedContent' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetCachedUGCHandle, ReturnValue) == 0x000008, "Member 'SIK_RemoteStorageLibrary_GetCachedUGCHandle::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_RemoteStorageLibrary_GetFileCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetFileCount) == 0x000004, "Wrong alignment on SIK_RemoteStorageLibrary_GetFileCount");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetFileCount) == 0x000004, "Wrong size on SIK_RemoteStorageLibrary_GetFileCount");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileCount, ReturnValue) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetFileCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileNameAndSize
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_GetFileNameAndSize final
{
public:
	int32                                         File;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetFileNameAndSize) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetFileNameAndSize");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetFileNameAndSize) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_GetFileNameAndSize");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileNameAndSize, File) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetFileNameAndSize::File' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileNameAndSize, FileSize) == 0x000004, "Member 'SIK_RemoteStorageLibrary_GetFileNameAndSize::FileSize' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileNameAndSize, ReturnValue) == 0x000008, "Member 'SIK_RemoteStorageLibrary_GetFileNameAndSize::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileSize
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_GetFileSize final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetFileSize) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetFileSize");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetFileSize) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_GetFileSize");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileSize, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetFileSize::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileSize, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_GetFileSize::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetFileTimestamp
// 0x0020 (0x0020 - 0x0000)
struct SIK_RemoteStorageLibrary_GetFileTimestamp final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Timestamp;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetFileTimestamp) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetFileTimestamp");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetFileTimestamp) == 0x000020, "Wrong size on SIK_RemoteStorageLibrary_GetFileTimestamp");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileTimestamp, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetFileTimestamp::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileTimestamp, Timestamp) == 0x000010, "Member 'SIK_RemoteStorageLibrary_GetFileTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetFileTimestamp, ReturnValue) == 0x000018, "Member 'SIK_RemoteStorageLibrary_GetFileTimestamp::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetLocalFileChange
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_GetLocalFileChange final
{
public:
	int32                                         File;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_RemoteStorageLocalFileChange             ChangeType;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_RemoteStorageFilePathType                PathType;                                          // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetLocalFileChange) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetLocalFileChange");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetLocalFileChange) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_GetLocalFileChange");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetLocalFileChange, File) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetLocalFileChange::File' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetLocalFileChange, ChangeType) == 0x000004, "Member 'SIK_RemoteStorageLibrary_GetLocalFileChange::ChangeType' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetLocalFileChange, PathType) == 0x000005, "Member 'SIK_RemoteStorageLibrary_GetLocalFileChange::PathType' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetLocalFileChange, ReturnValue) == 0x000008, "Member 'SIK_RemoteStorageLibrary_GetLocalFileChange::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetLocalFileChangeCount
// 0x0004 (0x0004 - 0x0000)
struct SIK_RemoteStorageLibrary_GetLocalFileChangeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetLocalFileChangeCount) == 0x000004, "Wrong alignment on SIK_RemoteStorageLibrary_GetLocalFileChangeCount");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetLocalFileChangeCount) == 0x000004, "Wrong size on SIK_RemoteStorageLibrary_GetLocalFileChangeCount");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetLocalFileChangeCount, ReturnValue) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetLocalFileChangeCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetQuota
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_GetQuota final
{
public:
	int64                                         TotalBytes;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AvailableBytes;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetQuota) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetQuota");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetQuota) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_GetQuota");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetQuota, TotalBytes) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetQuota::TotalBytes' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetQuota, AvailableBytes) == 0x000008, "Member 'SIK_RemoteStorageLibrary_GetQuota::AvailableBytes' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetQuota, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_GetQuota::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetSyncPlatforms
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_GetSyncPlatforms final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_RemoteStoragePlatform                    ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetSyncPlatforms) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetSyncPlatforms");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetSyncPlatforms) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_GetSyncPlatforms");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetSyncPlatforms, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetSyncPlatforms::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetSyncPlatforms, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_GetSyncPlatforms::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetUGCDetails
// 0x0030 (0x0030 - 0x0000)
struct SIK_RemoteStorageLibrary_GetUGCDetails final
{
public:
	struct FSIK_UGCHandle                         UGCHandle;                                         // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           OwnerID;                                           // 0x0020(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetUGCDetails) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetUGCDetails");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetUGCDetails) == 0x000030, "Wrong size on SIK_RemoteStorageLibrary_GetUGCDetails");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDetails, UGCHandle) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetUGCDetails::UGCHandle' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDetails, Filename) == 0x000008, "Member 'SIK_RemoteStorageLibrary_GetUGCDetails::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDetails, FileSize) == 0x000018, "Member 'SIK_RemoteStorageLibrary_GetUGCDetails::FileSize' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDetails, OwnerID) == 0x000020, "Member 'SIK_RemoteStorageLibrary_GetUGCDetails::OwnerID' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDetails, ReturnValue) == 0x000028, "Member 'SIK_RemoteStorageLibrary_GetUGCDetails::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.GetUGCDownloadProgress
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_GetUGCDownloadProgress final
{
public:
	struct FSIK_UGCHandle                         UGCHandle;                                         // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BytesDownloaded;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesExpected;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_GetUGCDownloadProgress) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_GetUGCDownloadProgress");
static_assert(sizeof(SIK_RemoteStorageLibrary_GetUGCDownloadProgress) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_GetUGCDownloadProgress");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDownloadProgress, UGCHandle) == 0x000000, "Member 'SIK_RemoteStorageLibrary_GetUGCDownloadProgress::UGCHandle' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDownloadProgress, BytesDownloaded) == 0x000008, "Member 'SIK_RemoteStorageLibrary_GetUGCDownloadProgress::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDownloadProgress, BytesExpected) == 0x00000C, "Member 'SIK_RemoteStorageLibrary_GetUGCDownloadProgress::BytesExpected' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_GetUGCDownloadProgress, ReturnValue) == 0x000010, "Member 'SIK_RemoteStorageLibrary_GetUGCDownloadProgress::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.IsCloudEnabledForAccount
// 0x0001 (0x0001 - 0x0000)
struct SIK_RemoteStorageLibrary_IsCloudEnabledForAccount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_IsCloudEnabledForAccount) == 0x000001, "Wrong alignment on SIK_RemoteStorageLibrary_IsCloudEnabledForAccount");
static_assert(sizeof(SIK_RemoteStorageLibrary_IsCloudEnabledForAccount) == 0x000001, "Wrong size on SIK_RemoteStorageLibrary_IsCloudEnabledForAccount");
static_assert(offsetof(SIK_RemoteStorageLibrary_IsCloudEnabledForAccount, ReturnValue) == 0x000000, "Member 'SIK_RemoteStorageLibrary_IsCloudEnabledForAccount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.IsCloudEnabledForApp
// 0x0001 (0x0001 - 0x0000)
struct SIK_RemoteStorageLibrary_IsCloudEnabledForApp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_IsCloudEnabledForApp) == 0x000001, "Wrong alignment on SIK_RemoteStorageLibrary_IsCloudEnabledForApp");
static_assert(sizeof(SIK_RemoteStorageLibrary_IsCloudEnabledForApp) == 0x000001, "Wrong size on SIK_RemoteStorageLibrary_IsCloudEnabledForApp");
static_assert(offsetof(SIK_RemoteStorageLibrary_IsCloudEnabledForApp, ReturnValue) == 0x000000, "Member 'SIK_RemoteStorageLibrary_IsCloudEnabledForApp::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.SetCloudEnabledForApp
// 0x0001 (0x0001 - 0x0000)
struct SIK_RemoteStorageLibrary_SetCloudEnabledForApp final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_SetCloudEnabledForApp) == 0x000001, "Wrong alignment on SIK_RemoteStorageLibrary_SetCloudEnabledForApp");
static_assert(sizeof(SIK_RemoteStorageLibrary_SetCloudEnabledForApp) == 0x000001, "Wrong size on SIK_RemoteStorageLibrary_SetCloudEnabledForApp");
static_assert(offsetof(SIK_RemoteStorageLibrary_SetCloudEnabledForApp, bEnabled) == 0x000000, "Member 'SIK_RemoteStorageLibrary_SetCloudEnabledForApp::bEnabled' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.SetSyncPlatforms
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoteStorageLibrary_SetSyncPlatforms final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_RemoteStoragePlatform                    RemoteStoragePlatform;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_RemoteStorageLibrary_SetSyncPlatforms) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_SetSyncPlatforms");
static_assert(sizeof(SIK_RemoteStorageLibrary_SetSyncPlatforms) == 0x000018, "Wrong size on SIK_RemoteStorageLibrary_SetSyncPlatforms");
static_assert(offsetof(SIK_RemoteStorageLibrary_SetSyncPlatforms, Filename) == 0x000000, "Member 'SIK_RemoteStorageLibrary_SetSyncPlatforms::Filename' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_SetSyncPlatforms, RemoteStoragePlatform) == 0x000010, "Member 'SIK_RemoteStorageLibrary_SetSyncPlatforms::RemoteStoragePlatform' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_SetSyncPlatforms, ReturnValue) == 0x000011, "Member 'SIK_RemoteStorageLibrary_SetSyncPlatforms::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoteStorageLibrary.UGCRead
// 0x0028 (0x0028 - 0x0000)
struct SIK_RemoteStorageLibrary_UGCRead final
{
public:
	struct FSIK_UGCHandle                         UGCHandle;                                         // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DataToRead;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_UGCReadAction                            Action;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoteStorageLibrary_UGCRead) == 0x000008, "Wrong alignment on SIK_RemoteStorageLibrary_UGCRead");
static_assert(sizeof(SIK_RemoteStorageLibrary_UGCRead) == 0x000028, "Wrong size on SIK_RemoteStorageLibrary_UGCRead");
static_assert(offsetof(SIK_RemoteStorageLibrary_UGCRead, UGCHandle) == 0x000000, "Member 'SIK_RemoteStorageLibrary_UGCRead::UGCHandle' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_UGCRead, Data) == 0x000008, "Member 'SIK_RemoteStorageLibrary_UGCRead::Data' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_UGCRead, DataToRead) == 0x000018, "Member 'SIK_RemoteStorageLibrary_UGCRead::DataToRead' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_UGCRead, Offset) == 0x00001C, "Member 'SIK_RemoteStorageLibrary_UGCRead::Offset' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_UGCRead, Action) == 0x000020, "Member 'SIK_RemoteStorageLibrary_UGCRead::Action' has a wrong offset!");
static_assert(offsetof(SIK_RemoteStorageLibrary_UGCRead, ReturnValue) == 0x000024, "Member 'SIK_RemoteStorageLibrary_UGCRead::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoveAppDependency_AsyncFunction.RemoveAppDependency
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             AppID;                                             // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_RemoveAppDependency_AsyncFunction* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency) == 0x000008, "Wrong alignment on SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency");
static_assert(sizeof(SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency) == 0x000018, "Wrong size on SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency");
static_assert(offsetof(SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency, PublishedFileId) == 0x000000, "Member 'SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency, AppID) == 0x000008, "Member 'SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency, ReturnValue) == 0x000010, "Member 'SIK_RemoveAppDependency_AsyncFunction_RemoveAppDependency::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RemoveItemFromFavorites_AsyncFunction.RemoveItemFromFavorites
// 0x0018 (0x0018 - 0x0000)
struct SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_RemoveItemFromFavorites_AsyncFunction* ReturnValue;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites) == 0x000008, "Wrong alignment on SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites");
static_assert(sizeof(SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites) == 0x000018, "Wrong size on SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites");
static_assert(offsetof(SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites, AppID) == 0x000000, "Member 'SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites, PublishedFileId) == 0x000008, "Member 'SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites, ReturnValue) == 0x000010, "Member 'SIK_RemoveItemFromFavorites_AsyncFunction_RemoveItemFromFavorites::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestClanOfficerList_AsyncFunction.RequestClanOfficerList
// 0x0010 (0x0010 - 0x0000)
struct SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList final
{
public:
	struct FSIK_SteamId                           ClanId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_RequestClanOfficerList_AsyncFunction* ReturnValue;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList) == 0x000008, "Wrong alignment on SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList");
static_assert(sizeof(SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList) == 0x000010, "Wrong size on SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList");
static_assert(offsetof(SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList, ClanId) == 0x000000, "Member 'SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList::ClanId' has a wrong offset!");
static_assert(offsetof(SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList, ReturnValue) == 0x000008, "Member 'SIK_RequestClanOfficerList_AsyncFunction_RequestClanOfficerList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction.RequestEligiblePromoItemDefinitionsIDs
// 0x0010 (0x0010 - 0x0000)
struct SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction* ReturnValue;                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs) == 0x000008, "Wrong alignment on SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs");
static_assert(sizeof(SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs) == 0x000010, "Wrong size on SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs");
static_assert(offsetof(SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs, SteamID) == 0x000000, "Member 'SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs, ReturnValue) == 0x000008, "Member 'SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction_RequestEligiblePromoItemDefinitionsIDs::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestFavoritesServerList_AsyncFunction.RequestFavoritesServerList
// 0x0068 (0x0068 - 0x0000)
struct SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Filters;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_RequestFavoritesServerList_AsyncFunction* ReturnValue;                                // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList) == 0x000008, "Wrong alignment on SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList");
static_assert(sizeof(SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList) == 0x000068, "Wrong size on SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList");
static_assert(offsetof(SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList, AppID) == 0x000000, "Member 'SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList, Filters) == 0x000008, "Member 'SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList::Filters' has a wrong offset!");
static_assert(offsetof(SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList, Timeout) == 0x000058, "Member 'SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList, ReturnValue) == 0x000060, "Member 'SIK_RequestFavoritesServerList_AsyncFunction_RequestFavoritesServerList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestFriendsServerList_AsyncFunction.RequestFriendsServerList
// 0x0068 (0x0068 - 0x0000)
struct SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Filters;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_RequestFriendsServerList_AsyncFunction* ReturnValue;                                  // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList) == 0x000008, "Wrong alignment on SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList");
static_assert(sizeof(SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList) == 0x000068, "Wrong size on SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList");
static_assert(offsetof(SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList, AppID) == 0x000000, "Member 'SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList, Filters) == 0x000008, "Member 'SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList::Filters' has a wrong offset!");
static_assert(offsetof(SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList, Timeout) == 0x000058, "Member 'SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList, ReturnValue) == 0x000060, "Member 'SIK_RequestFriendsServerList_AsyncFunction_RequestFriendsServerList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestGlobalStats_AsyncFunction.RequestGlobalStats
// 0x0010 (0x0010 - 0x0000)
struct SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats final
{
public:
	int32                                         HistoryDays;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_RequestGlobalStats_AsyncFunction*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats) == 0x000008, "Wrong alignment on SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats");
static_assert(sizeof(SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats) == 0x000010, "Wrong size on SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats");
static_assert(offsetof(SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats, HistoryDays) == 0x000000, "Member 'SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats::HistoryDays' has a wrong offset!");
static_assert(offsetof(SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats, ReturnValue) == 0x000008, "Member 'SIK_RequestGlobalStats_AsyncFunction_RequestGlobalStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestHistoryServerList_AsyncFunction.RequestHistoryServerList
// 0x0068 (0x0068 - 0x0000)
struct SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Filters;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_RequestHistoryServerList_AsyncFunction* ReturnValue;                                  // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList) == 0x000008, "Wrong alignment on SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList");
static_assert(sizeof(SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList) == 0x000068, "Wrong size on SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList");
static_assert(offsetof(SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList, AppID) == 0x000000, "Member 'SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList, Filters) == 0x000008, "Member 'SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList::Filters' has a wrong offset!");
static_assert(offsetof(SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList, Timeout) == 0x000058, "Member 'SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList, ReturnValue) == 0x000060, "Member 'SIK_RequestHistoryServerList_AsyncFunction_RequestHistoryServerList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestInternetServerList_AsyncFunction.RequestInternetServerList
// 0x0068 (0x0068 - 0x0000)
struct SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Filters;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_RequestInternetServerList_AsyncFunction* ReturnValue;                                 // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList) == 0x000008, "Wrong alignment on SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList");
static_assert(sizeof(SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList) == 0x000068, "Wrong size on SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList");
static_assert(offsetof(SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList, AppID) == 0x000000, "Member 'SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList, Filters) == 0x000008, "Member 'SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList::Filters' has a wrong offset!");
static_assert(offsetof(SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList, Timeout) == 0x000058, "Member 'SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList, ReturnValue) == 0x000060, "Member 'SIK_RequestInternetServerList_AsyncFunction_RequestInternetServerList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestLANServerList_AsyncFunction.RequestLANServerList
// 0x0010 (0x0010 - 0x0000)
struct SIK_RequestLANServerList_AsyncFunction_RequestLANServerList final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_RequestLANServerList_AsyncFunction* ReturnValue;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestLANServerList_AsyncFunction_RequestLANServerList) == 0x000008, "Wrong alignment on SIK_RequestLANServerList_AsyncFunction_RequestLANServerList");
static_assert(sizeof(SIK_RequestLANServerList_AsyncFunction_RequestLANServerList) == 0x000010, "Wrong size on SIK_RequestLANServerList_AsyncFunction_RequestLANServerList");
static_assert(offsetof(SIK_RequestLANServerList_AsyncFunction_RequestLANServerList, AppID) == 0x000000, "Member 'SIK_RequestLANServerList_AsyncFunction_RequestLANServerList::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RequestLANServerList_AsyncFunction_RequestLANServerList, Timeout) == 0x000004, "Member 'SIK_RequestLANServerList_AsyncFunction_RequestLANServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SIK_RequestLANServerList_AsyncFunction_RequestLANServerList, ReturnValue) == 0x000008, "Member 'SIK_RequestLANServerList_AsyncFunction_RequestLANServerList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestLobbyList_AsyncFunction.RequestLobbyList
// 0x0008 (0x0008 - 0x0000)
struct SIK_RequestLobbyList_AsyncFunction_RequestLobbyList final
{
public:
	class USIK_RequestLobbyList_AsyncFunction*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestLobbyList_AsyncFunction_RequestLobbyList) == 0x000008, "Wrong alignment on SIK_RequestLobbyList_AsyncFunction_RequestLobbyList");
static_assert(sizeof(SIK_RequestLobbyList_AsyncFunction_RequestLobbyList) == 0x000008, "Wrong size on SIK_RequestLobbyList_AsyncFunction_RequestLobbyList");
static_assert(offsetof(SIK_RequestLobbyList_AsyncFunction_RequestLobbyList, ReturnValue) == 0x000000, "Member 'SIK_RequestLobbyList_AsyncFunction_RequestLobbyList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestPrices_AsyncFunction.RequestPrices
// 0x0008 (0x0008 - 0x0000)
struct SIK_RequestPrices_AsyncFunction_RequestPrices final
{
public:
	class USIK_RequestPrices_AsyncFunction*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestPrices_AsyncFunction_RequestPrices) == 0x000008, "Wrong alignment on SIK_RequestPrices_AsyncFunction_RequestPrices");
static_assert(sizeof(SIK_RequestPrices_AsyncFunction_RequestPrices) == 0x000008, "Wrong size on SIK_RequestPrices_AsyncFunction_RequestPrices");
static_assert(offsetof(SIK_RequestPrices_AsyncFunction_RequestPrices, ReturnValue) == 0x000000, "Member 'SIK_RequestPrices_AsyncFunction_RequestPrices::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestSpectatorServerList_AsyncFunction.RequestSpectatorServerList
// 0x0068 (0x0068 - 0x0000)
struct SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Filters;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_RequestSpectatorServerList_AsyncFunction* ReturnValue;                                // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList) == 0x000008, "Wrong alignment on SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList");
static_assert(sizeof(SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList) == 0x000068, "Wrong size on SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList");
static_assert(offsetof(SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList, AppID) == 0x000000, "Member 'SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList::AppID' has a wrong offset!");
static_assert(offsetof(SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList, Filters) == 0x000008, "Member 'SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList::Filters' has a wrong offset!");
static_assert(offsetof(SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList, Timeout) == 0x000058, "Member 'SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList, ReturnValue) == 0x000060, "Member 'SIK_RequestSpectatorServerList_AsyncFunction_RequestSpectatorServerList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestStoreAuthURL_AsyncFunction.RequestStoreAuthURL
// 0x0018 (0x0018 - 0x0000)
struct SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_RequestStoreAuthURL_AsyncFunction* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL) == 0x000008, "Wrong alignment on SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL");
static_assert(sizeof(SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL) == 0x000018, "Wrong size on SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL");
static_assert(offsetof(SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL, URL) == 0x000000, "Member 'SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL::URL' has a wrong offset!");
static_assert(offsetof(SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL, ReturnValue) == 0x000010, "Member 'SIK_RequestStoreAuthURL_AsyncFunction_RequestStoreAuthURL::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_RequestUserStats_AsyncFunction.RequestUserStats
// 0x0010 (0x0010 - 0x0000)
struct SIK_RequestUserStats_AsyncFunction_RequestUserStats final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_RequestUserStats_AsyncFunction*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_RequestUserStats_AsyncFunction_RequestUserStats) == 0x000008, "Wrong alignment on SIK_RequestUserStats_AsyncFunction_RequestUserStats");
static_assert(sizeof(SIK_RequestUserStats_AsyncFunction_RequestUserStats) == 0x000010, "Wrong size on SIK_RequestUserStats_AsyncFunction_RequestUserStats");
static_assert(offsetof(SIK_RequestUserStats_AsyncFunction_RequestUserStats, SteamID) == 0x000000, "Member 'SIK_RequestUserStats_AsyncFunction_RequestUserStats::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_RequestUserStats_AsyncFunction_RequestUserStats, ReturnValue) == 0x000008, "Member 'SIK_RequestUserStats_AsyncFunction_RequestUserStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.AddScreenshotToLibrary
// 0x0030 (0x0030 - 0x0000)
struct SIK_ScreenshotsLibrary_AddScreenshotToLibrary final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailFileName;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_ScreenshotHandle                  ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_ScreenshotsLibrary_AddScreenshotToLibrary) == 0x000008, "Wrong alignment on SIK_ScreenshotsLibrary_AddScreenshotToLibrary");
static_assert(sizeof(SIK_ScreenshotsLibrary_AddScreenshotToLibrary) == 0x000030, "Wrong size on SIK_ScreenshotsLibrary_AddScreenshotToLibrary");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddScreenshotToLibrary, Filename) == 0x000000, "Member 'SIK_ScreenshotsLibrary_AddScreenshotToLibrary::Filename' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddScreenshotToLibrary, ThumbnailFileName) == 0x000010, "Member 'SIK_ScreenshotsLibrary_AddScreenshotToLibrary::ThumbnailFileName' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddScreenshotToLibrary, Width) == 0x000020, "Member 'SIK_ScreenshotsLibrary_AddScreenshotToLibrary::Width' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddScreenshotToLibrary, Height) == 0x000024, "Member 'SIK_ScreenshotsLibrary_AddScreenshotToLibrary::Height' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddScreenshotToLibrary, ReturnValue) == 0x000028, "Member 'SIK_ScreenshotsLibrary_AddScreenshotToLibrary::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.AddVRScreenshotToLibrary
// 0x0030 (0x0030 - 0x0000)
struct SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary final
{
public:
	ESIK_VRScreenshotType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VR_Filename;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_ScreenshotHandle                  ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary) == 0x000008, "Wrong alignment on SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary");
static_assert(sizeof(SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary) == 0x000030, "Wrong size on SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary, Type) == 0x000000, "Member 'SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary::Type' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary, Filename) == 0x000008, "Member 'SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary::Filename' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary, VR_Filename) == 0x000018, "Member 'SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary::VR_Filename' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary, ReturnValue) == 0x000028, "Member 'SIK_ScreenshotsLibrary_AddVRScreenshotToLibrary::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.HookScreenshots
// 0x0001 (0x0001 - 0x0000)
struct SIK_ScreenshotsLibrary_HookScreenshots final
{
public:
	bool                                          bHook;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_ScreenshotsLibrary_HookScreenshots) == 0x000001, "Wrong alignment on SIK_ScreenshotsLibrary_HookScreenshots");
static_assert(sizeof(SIK_ScreenshotsLibrary_HookScreenshots) == 0x000001, "Wrong size on SIK_ScreenshotsLibrary_HookScreenshots");
static_assert(offsetof(SIK_ScreenshotsLibrary_HookScreenshots, bHook) == 0x000000, "Member 'SIK_ScreenshotsLibrary_HookScreenshots::bHook' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.IsScreenshotsHooked
// 0x0001 (0x0001 - 0x0000)
struct SIK_ScreenshotsLibrary_IsScreenshotsHooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_ScreenshotsLibrary_IsScreenshotsHooked) == 0x000001, "Wrong alignment on SIK_ScreenshotsLibrary_IsScreenshotsHooked");
static_assert(sizeof(SIK_ScreenshotsLibrary_IsScreenshotsHooked) == 0x000001, "Wrong size on SIK_ScreenshotsLibrary_IsScreenshotsHooked");
static_assert(offsetof(SIK_ScreenshotsLibrary_IsScreenshotsHooked, ReturnValue) == 0x000000, "Member 'SIK_ScreenshotsLibrary_IsScreenshotsHooked::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.SetLocation
// 0x0020 (0x0020 - 0x0000)
struct SIK_ScreenshotsLibrary_SetLocation final
{
public:
	struct FSIK_ScreenshotHandle                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Location;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_ScreenshotsLibrary_SetLocation) == 0x000008, "Wrong alignment on SIK_ScreenshotsLibrary_SetLocation");
static_assert(sizeof(SIK_ScreenshotsLibrary_SetLocation) == 0x000020, "Wrong size on SIK_ScreenshotsLibrary_SetLocation");
static_assert(offsetof(SIK_ScreenshotsLibrary_SetLocation, Handle) == 0x000000, "Member 'SIK_ScreenshotsLibrary_SetLocation::Handle' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_SetLocation, Location) == 0x000008, "Member 'SIK_ScreenshotsLibrary_SetLocation::Location' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_SetLocation, ReturnValue) == 0x000018, "Member 'SIK_ScreenshotsLibrary_SetLocation::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.TagPublishedFile
// 0x0018 (0x0018 - 0x0000)
struct SIK_ScreenshotsLibrary_TagPublishedFile final
{
public:
	struct FSIK_ScreenshotHandle                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_ScreenshotsLibrary_TagPublishedFile) == 0x000008, "Wrong alignment on SIK_ScreenshotsLibrary_TagPublishedFile");
static_assert(sizeof(SIK_ScreenshotsLibrary_TagPublishedFile) == 0x000018, "Wrong size on SIK_ScreenshotsLibrary_TagPublishedFile");
static_assert(offsetof(SIK_ScreenshotsLibrary_TagPublishedFile, Handle) == 0x000000, "Member 'SIK_ScreenshotsLibrary_TagPublishedFile::Handle' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_TagPublishedFile, PublishedFileId) == 0x000008, "Member 'SIK_ScreenshotsLibrary_TagPublishedFile::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_TagPublishedFile, ReturnValue) == 0x000010, "Member 'SIK_ScreenshotsLibrary_TagPublishedFile::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.TagUser
// 0x0018 (0x0018 - 0x0000)
struct SIK_ScreenshotsLibrary_TagUser final
{
public:
	struct FSIK_ScreenshotHandle                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamId                           SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_ScreenshotsLibrary_TagUser) == 0x000008, "Wrong alignment on SIK_ScreenshotsLibrary_TagUser");
static_assert(sizeof(SIK_ScreenshotsLibrary_TagUser) == 0x000018, "Wrong size on SIK_ScreenshotsLibrary_TagUser");
static_assert(offsetof(SIK_ScreenshotsLibrary_TagUser, Handle) == 0x000000, "Member 'SIK_ScreenshotsLibrary_TagUser::Handle' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_TagUser, SteamID) == 0x000008, "Member 'SIK_ScreenshotsLibrary_TagUser::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_TagUser, ReturnValue) == 0x000010, "Member 'SIK_ScreenshotsLibrary_TagUser::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_ScreenshotsLibrary.WriteScreenshot
// 0x0020 (0x0020 - 0x0000)
struct SIK_ScreenshotsLibrary_WriteScreenshot final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_ScreenshotHandle                  ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_ScreenshotsLibrary_WriteScreenshot) == 0x000008, "Wrong alignment on SIK_ScreenshotsLibrary_WriteScreenshot");
static_assert(sizeof(SIK_ScreenshotsLibrary_WriteScreenshot) == 0x000020, "Wrong size on SIK_ScreenshotsLibrary_WriteScreenshot");
static_assert(offsetof(SIK_ScreenshotsLibrary_WriteScreenshot, Data) == 0x000000, "Member 'SIK_ScreenshotsLibrary_WriteScreenshot::Data' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_WriteScreenshot, Width) == 0x000010, "Member 'SIK_ScreenshotsLibrary_WriteScreenshot::Width' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_WriteScreenshot, Height) == 0x000014, "Member 'SIK_ScreenshotsLibrary_WriteScreenshot::Height' has a wrong offset!");
static_assert(offsetof(SIK_ScreenshotsLibrary_WriteScreenshot, ReturnValue) == 0x000018, "Member 'SIK_ScreenshotsLibrary_WriteScreenshot::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SendQueryUGCRequest_AsyncFunction.SendQueryUGCRequest
// 0x0010 (0x0010 - 0x0000)
struct SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_SendQueryUGCRequest_AsyncFunction* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest) == 0x000008, "Wrong alignment on SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest");
static_assert(sizeof(SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest) == 0x000010, "Wrong size on SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest");
static_assert(offsetof(SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest, QueryHandle) == 0x000000, "Member 'SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest, ReturnValue) == 0x000008, "Member 'SIK_SendQueryUGCRequest_AsyncFunction_SendQueryUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SessionsSubsystem.GetAllJoinedSessionsAndLobbies
// 0x0018 (0x0018 - 0x0000)
struct SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSIK_CurrentSessionInfo>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies) == 0x000008, "Wrong alignment on SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies");
static_assert(sizeof(SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies) == 0x000018, "Wrong size on SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies");
static_assert(offsetof(SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies, Context) == 0x000000, "Member 'SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies::Context' has a wrong offset!");
static_assert(offsetof(SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies, ReturnValue) == 0x000008, "Member 'SIK_SessionsSubsystem_GetAllJoinedSessionsAndLobbies::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SessionsSubsystem.IsSIKActive
// 0x0010 (0x0010 - 0x0000)
struct SIK_SessionsSubsystem_IsSIKActive final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_SessionsSubsystem_IsSIKActive) == 0x000008, "Wrong alignment on SIK_SessionsSubsystem_IsSIKActive");
static_assert(sizeof(SIK_SessionsSubsystem_IsSIKActive) == 0x000010, "Wrong size on SIK_SessionsSubsystem_IsSIKActive");
static_assert(offsetof(SIK_SessionsSubsystem_IsSIKActive, Context) == 0x000000, "Member 'SIK_SessionsSubsystem_IsSIKActive::Context' has a wrong offset!");
static_assert(offsetof(SIK_SessionsSubsystem_IsSIKActive, ReturnValue) == 0x000008, "Member 'SIK_SessionsSubsystem_IsSIKActive::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SetPersonaName_AsyncFunction.SetPersonaName
// 0x0018 (0x0018 - 0x0000)
struct SIK_SetPersonaName_AsyncFunction_SetPersonaName final
{
public:
	class FString                                 PersonaName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_SetPersonaName_AsyncFunction*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SetPersonaName_AsyncFunction_SetPersonaName) == 0x000008, "Wrong alignment on SIK_SetPersonaName_AsyncFunction_SetPersonaName");
static_assert(sizeof(SIK_SetPersonaName_AsyncFunction_SetPersonaName) == 0x000018, "Wrong size on SIK_SetPersonaName_AsyncFunction_SetPersonaName");
static_assert(offsetof(SIK_SetPersonaName_AsyncFunction_SetPersonaName, PersonaName) == 0x000000, "Member 'SIK_SetPersonaName_AsyncFunction_SetPersonaName::PersonaName' has a wrong offset!");
static_assert(offsetof(SIK_SetPersonaName_AsyncFunction_SetPersonaName, ReturnValue) == 0x000010, "Member 'SIK_SetPersonaName_AsyncFunction_SetPersonaName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SetUserItemVote_AsyncFunction.SetUserItemVote
// 0x0018 (0x0018 - 0x0000)
struct SIK_SetUserItemVote_AsyncFunction_SetUserItemVote final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVoteUp;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_SetUserItemVote_AsyncFunction*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SetUserItemVote_AsyncFunction_SetUserItemVote) == 0x000008, "Wrong alignment on SIK_SetUserItemVote_AsyncFunction_SetUserItemVote");
static_assert(sizeof(SIK_SetUserItemVote_AsyncFunction_SetUserItemVote) == 0x000018, "Wrong size on SIK_SetUserItemVote_AsyncFunction_SetUserItemVote");
static_assert(offsetof(SIK_SetUserItemVote_AsyncFunction_SetUserItemVote, PublishedFileId) == 0x000000, "Member 'SIK_SetUserItemVote_AsyncFunction_SetUserItemVote::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_SetUserItemVote_AsyncFunction_SetUserItemVote, bVoteUp) == 0x000008, "Member 'SIK_SetUserItemVote_AsyncFunction_SetUserItemVote::bVoteUp' has a wrong offset!");
static_assert(offsetof(SIK_SetUserItemVote_AsyncFunction_SetUserItemVote, ReturnValue) == 0x000010, "Member 'SIK_SetUserItemVote_AsyncFunction_SetUserItemVote::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.ConvertFileToUint8Array
// 0x0028 (0x0028 - 0x0000)
struct SIK_SharedFile_ConvertFileToUint8Array final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SharedFile_ConvertFileToUint8Array) == 0x000008, "Wrong alignment on SIK_SharedFile_ConvertFileToUint8Array");
static_assert(sizeof(SIK_SharedFile_ConvertFileToUint8Array) == 0x000028, "Wrong size on SIK_SharedFile_ConvertFileToUint8Array");
static_assert(offsetof(SIK_SharedFile_ConvertFileToUint8Array, FilePath) == 0x000000, "Member 'SIK_SharedFile_ConvertFileToUint8Array::FilePath' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_ConvertFileToUint8Array, bSuccess) == 0x000010, "Member 'SIK_SharedFile_ConvertFileToUint8Array::bSuccess' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_ConvertFileToUint8Array, ReturnValue) == 0x000018, "Member 'SIK_SharedFile_ConvertFileToUint8Array::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.ConvertInt64ToSteamId
// 0x0010 (0x0010 - 0x0000)
struct SIK_SharedFile_ConvertInt64ToSteamId final
{
public:
	int64                                         Int64;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SharedFile_ConvertInt64ToSteamId) == 0x000008, "Wrong alignment on SIK_SharedFile_ConvertInt64ToSteamId");
static_assert(sizeof(SIK_SharedFile_ConvertInt64ToSteamId) == 0x000010, "Wrong size on SIK_SharedFile_ConvertInt64ToSteamId");
static_assert(offsetof(SIK_SharedFile_ConvertInt64ToSteamId, Int64) == 0x000000, "Member 'SIK_SharedFile_ConvertInt64ToSteamId::Int64' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_ConvertInt64ToSteamId, ReturnValue) == 0x000008, "Member 'SIK_SharedFile_ConvertInt64ToSteamId::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.ConvertSteamIdToInt64
// 0x0010 (0x0010 - 0x0000)
struct SIK_SharedFile_ConvertSteamIdToInt64 final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SharedFile_ConvertSteamIdToInt64) == 0x000008, "Wrong alignment on SIK_SharedFile_ConvertSteamIdToInt64");
static_assert(sizeof(SIK_SharedFile_ConvertSteamIdToInt64) == 0x000010, "Wrong size on SIK_SharedFile_ConvertSteamIdToInt64");
static_assert(offsetof(SIK_SharedFile_ConvertSteamIdToInt64, SteamID) == 0x000000, "Member 'SIK_SharedFile_ConvertSteamIdToInt64::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_ConvertSteamIdToInt64, ReturnValue) == 0x000008, "Member 'SIK_SharedFile_ConvertSteamIdToInt64::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.ConvertStringToUint8Array
// 0x0020 (0x0020 - 0x0000)
struct SIK_SharedFile_ConvertStringToUint8Array final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SharedFile_ConvertStringToUint8Array) == 0x000008, "Wrong alignment on SIK_SharedFile_ConvertStringToUint8Array");
static_assert(sizeof(SIK_SharedFile_ConvertStringToUint8Array) == 0x000020, "Wrong size on SIK_SharedFile_ConvertStringToUint8Array");
static_assert(offsetof(SIK_SharedFile_ConvertStringToUint8Array, String) == 0x000000, "Member 'SIK_SharedFile_ConvertStringToUint8Array::String' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_ConvertStringToUint8Array, ReturnValue) == 0x000010, "Member 'SIK_SharedFile_ConvertStringToUint8Array::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.ConvertUint8ArrayToString
// 0x0020 (0x0020 - 0x0000)
struct SIK_SharedFile_ConvertUint8ArrayToString final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SharedFile_ConvertUint8ArrayToString) == 0x000008, "Wrong alignment on SIK_SharedFile_ConvertUint8ArrayToString");
static_assert(sizeof(SIK_SharedFile_ConvertUint8ArrayToString) == 0x000020, "Wrong size on SIK_SharedFile_ConvertUint8ArrayToString");
static_assert(offsetof(SIK_SharedFile_ConvertUint8ArrayToString, Array) == 0x000000, "Member 'SIK_SharedFile_ConvertUint8ArrayToString::Array' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_ConvertUint8ArrayToString, ReturnValue) == 0x000010, "Member 'SIK_SharedFile_ConvertUint8ArrayToString::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.GetAccountID
// 0x0010 (0x0010 - 0x0000)
struct SIK_SharedFile_GetAccountID final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AccountID                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_SharedFile_GetAccountID) == 0x000008, "Wrong alignment on SIK_SharedFile_GetAccountID");
static_assert(sizeof(SIK_SharedFile_GetAccountID) == 0x000010, "Wrong size on SIK_SharedFile_GetAccountID");
static_assert(offsetof(SIK_SharedFile_GetAccountID, SteamID) == 0x000000, "Member 'SIK_SharedFile_GetAccountID::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_GetAccountID, ReturnValue) == 0x000008, "Member 'SIK_SharedFile_GetAccountID::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.GetUniverse
// 0x0010 (0x0010 - 0x0000)
struct SIK_SharedFile_GetUniverse final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_Universe                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_SharedFile_GetUniverse) == 0x000008, "Wrong alignment on SIK_SharedFile_GetUniverse");
static_assert(sizeof(SIK_SharedFile_GetUniverse) == 0x000010, "Wrong size on SIK_SharedFile_GetUniverse");
static_assert(offsetof(SIK_SharedFile_GetUniverse, SteamID) == 0x000000, "Member 'SIK_SharedFile_GetUniverse::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_GetUniverse, ReturnValue) == 0x000008, "Member 'SIK_SharedFile_GetUniverse::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.IsEqualGameId
// 0x0018 (0x0018 - 0x0000)
struct SIK_SharedFile_IsEqualGameId final
{
public:
	struct FSIK_GameID                            GameId1;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_GameID                            GameId2;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_SharedFile_IsEqualGameId) == 0x000008, "Wrong alignment on SIK_SharedFile_IsEqualGameId");
static_assert(sizeof(SIK_SharedFile_IsEqualGameId) == 0x000018, "Wrong size on SIK_SharedFile_IsEqualGameId");
static_assert(offsetof(SIK_SharedFile_IsEqualGameId, GameId1) == 0x000000, "Member 'SIK_SharedFile_IsEqualGameId::GameId1' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_IsEqualGameId, GameId2) == 0x000008, "Member 'SIK_SharedFile_IsEqualGameId::GameId2' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_IsEqualGameId, ReturnValue) == 0x000010, "Member 'SIK_SharedFile_IsEqualGameId::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.IsEqualSteamId
// 0x0018 (0x0018 - 0x0000)
struct SIK_SharedFile_IsEqualSteamId final
{
public:
	struct FSIK_SteamId                           SteamId1;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           SteamId2;                                          // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_SharedFile_IsEqualSteamId) == 0x000008, "Wrong alignment on SIK_SharedFile_IsEqualSteamId");
static_assert(sizeof(SIK_SharedFile_IsEqualSteamId) == 0x000018, "Wrong size on SIK_SharedFile_IsEqualSteamId");
static_assert(offsetof(SIK_SharedFile_IsEqualSteamId, SteamId1) == 0x000000, "Member 'SIK_SharedFile_IsEqualSteamId::SteamId1' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_IsEqualSteamId, SteamId2) == 0x000008, "Member 'SIK_SharedFile_IsEqualSteamId::SteamId2' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_IsEqualSteamId, ReturnValue) == 0x000010, "Member 'SIK_SharedFile_IsEqualSteamId::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.IsValidGameId
// 0x0010 (0x0010 - 0x0000)
struct SIK_SharedFile_IsValidGameId final
{
public:
	struct FSIK_GameID                            GameID;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_SharedFile_IsValidGameId) == 0x000008, "Wrong alignment on SIK_SharedFile_IsValidGameId");
static_assert(sizeof(SIK_SharedFile_IsValidGameId) == 0x000010, "Wrong size on SIK_SharedFile_IsValidGameId");
static_assert(offsetof(SIK_SharedFile_IsValidGameId, GameID) == 0x000000, "Member 'SIK_SharedFile_IsValidGameId::GameID' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_IsValidGameId, ReturnValue) == 0x000008, "Member 'SIK_SharedFile_IsValidGameId::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SharedFile.IsValidSteamId
// 0x0010 (0x0010 - 0x0000)
struct SIK_SharedFile_IsValidSteamId final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_SharedFile_IsValidSteamId) == 0x000008, "Wrong alignment on SIK_SharedFile_IsValidSteamId");
static_assert(sizeof(SIK_SharedFile_IsValidSteamId) == 0x000010, "Wrong size on SIK_SharedFile_IsValidSteamId");
static_assert(offsetof(SIK_SharedFile_IsValidSteamId, SteamID) == 0x000000, "Member 'SIK_SharedFile_IsValidSteamId::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_SharedFile_IsValidSteamId, ReturnValue) == 0x000008, "Member 'SIK_SharedFile_IsValidSteamId::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_StartPlaytimeTracking_AsyncFunction.StartPlaytimeTracking
// 0x0020 (0x0020 - 0x0000)
struct SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking final
{
public:
	TArray<struct FSIK_PublishedFileId>           PublishedFileId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumPublishedFileIDs;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_StartPlaytimeTracking_AsyncFunction* ReturnValue;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking) == 0x000008, "Wrong alignment on SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking");
static_assert(sizeof(SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking) == 0x000020, "Wrong size on SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking");
static_assert(offsetof(SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking, PublishedFileId) == 0x000000, "Member 'SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking, NumPublishedFileIDs) == 0x000010, "Member 'SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking::NumPublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking, ReturnValue) == 0x000018, "Member 'SIK_StartPlaytimeTracking_AsyncFunction_StartPlaytimeTracking::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_StartPurchase_AsyncFunction.StartPurchase
// 0x0028 (0x0028 - 0x0000)
struct SIK_StartPurchase_AsyncFunction_StartPurchase final
{
public:
	TArray<struct FSIK_SteamItemDef>              Items;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USIK_StartPurchase_AsyncFunction*       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_StartPurchase_AsyncFunction_StartPurchase) == 0x000008, "Wrong alignment on SIK_StartPurchase_AsyncFunction_StartPurchase");
static_assert(sizeof(SIK_StartPurchase_AsyncFunction_StartPurchase) == 0x000028, "Wrong size on SIK_StartPurchase_AsyncFunction_StartPurchase");
static_assert(offsetof(SIK_StartPurchase_AsyncFunction_StartPurchase, Items) == 0x000000, "Member 'SIK_StartPurchase_AsyncFunction_StartPurchase::Items' has a wrong offset!");
static_assert(offsetof(SIK_StartPurchase_AsyncFunction_StartPurchase, Quantity) == 0x000010, "Member 'SIK_StartPurchase_AsyncFunction_StartPurchase::Quantity' has a wrong offset!");
static_assert(offsetof(SIK_StartPurchase_AsyncFunction_StartPurchase, ReturnValue) == 0x000020, "Member 'SIK_StartPurchase_AsyncFunction_StartPurchase::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SteamCreateLobby_AsyncFunction.CreateLobby
// 0x0010 (0x0010 - 0x0000)
struct SIK_SteamCreateLobby_AsyncFunction_CreateLobby final
{
public:
	int32                                         MaxMembers;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LobbyType                                LobbyType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_SteamCreateLobby_AsyncFunction*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SteamCreateLobby_AsyncFunction_CreateLobby) == 0x000008, "Wrong alignment on SIK_SteamCreateLobby_AsyncFunction_CreateLobby");
static_assert(sizeof(SIK_SteamCreateLobby_AsyncFunction_CreateLobby) == 0x000010, "Wrong size on SIK_SteamCreateLobby_AsyncFunction_CreateLobby");
static_assert(offsetof(SIK_SteamCreateLobby_AsyncFunction_CreateLobby, MaxMembers) == 0x000000, "Member 'SIK_SteamCreateLobby_AsyncFunction_CreateLobby::MaxMembers' has a wrong offset!");
static_assert(offsetof(SIK_SteamCreateLobby_AsyncFunction_CreateLobby, LobbyType) == 0x000004, "Member 'SIK_SteamCreateLobby_AsyncFunction_CreateLobby::LobbyType' has a wrong offset!");
static_assert(offsetof(SIK_SteamCreateLobby_AsyncFunction_CreateLobby, ReturnValue) == 0x000008, "Member 'SIK_SteamCreateLobby_AsyncFunction_CreateLobby::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_StopPlaytimeTrackingForAllItems_AsyncFunction.StopPlaytimeTrackingForAllItems
// 0x0008 (0x0008 - 0x0000)
struct SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems final
{
public:
	class USIK_StopPlaytimeTrackingForAllItems_AsyncFunction* ReturnValue;                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems) == 0x000008, "Wrong alignment on SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems");
static_assert(sizeof(SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems) == 0x000008, "Wrong size on SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems");
static_assert(offsetof(SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems, ReturnValue) == 0x000000, "Member 'SIK_StopPlaytimeTrackingForAllItems_AsyncFunction_StopPlaytimeTrackingForAllItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_StopPlaytimeTracking_AsyncFunction.StopPlaytimeTracking
// 0x0020 (0x0020 - 0x0000)
struct SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking final
{
public:
	TArray<struct FSIK_PublishedFileId>           PublishedFileId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumPublishedFileIDs;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_StopPlaytimeTracking_AsyncFunction* ReturnValue;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking) == 0x000008, "Wrong alignment on SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking");
static_assert(sizeof(SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking) == 0x000020, "Wrong size on SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking");
static_assert(offsetof(SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking, PublishedFileId) == 0x000000, "Member 'SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking, NumPublishedFileIDs) == 0x000010, "Member 'SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking::NumPublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking, ReturnValue) == 0x000018, "Member 'SIK_StopPlaytimeTracking_AsyncFunction_StopPlaytimeTracking::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SubmitItemUpdate_AsyncFunction.SubmitItemUpdate
// 0x0020 (0x0020 - 0x0000)
struct SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate final
{
public:
	struct FSIK_UGCUpdateHandle                   UgcUpdateHandle;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChangeNote;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_SubmitItemUpdate_AsyncFunction*    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate) == 0x000008, "Wrong alignment on SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate");
static_assert(sizeof(SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate) == 0x000020, "Wrong size on SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate");
static_assert(offsetof(SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate, UgcUpdateHandle) == 0x000000, "Member 'SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate::UgcUpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate, ChangeNote) == 0x000008, "Member 'SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate::ChangeNote' has a wrong offset!");
static_assert(offsetof(SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate, ReturnValue) == 0x000018, "Member 'SIK_SubmitItemUpdate_AsyncFunction_SubmitItemUpdate::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_SubscribeItem_AsyncFunction.SubscribeItem
// 0x0010 (0x0010 - 0x0000)
struct SIK_SubscribeItem_AsyncFunction_SubscribeItem final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_SubscribeItem_AsyncFunction*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_SubscribeItem_AsyncFunction_SubscribeItem) == 0x000008, "Wrong alignment on SIK_SubscribeItem_AsyncFunction_SubscribeItem");
static_assert(sizeof(SIK_SubscribeItem_AsyncFunction_SubscribeItem) == 0x000010, "Wrong size on SIK_SubscribeItem_AsyncFunction_SubscribeItem");
static_assert(offsetof(SIK_SubscribeItem_AsyncFunction_SubscribeItem, PublishedFileId) == 0x000000, "Member 'SIK_SubscribeItem_AsyncFunction_SubscribeItem::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_SubscribeItem_AsyncFunction_SubscribeItem, ReturnValue) == 0x000008, "Member 'SIK_SubscribeItem_AsyncFunction_SubscribeItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_TimelineLibrary.ClearTimelineStateDescription
// 0x0004 (0x0004 - 0x0000)
struct SIK_TimelineLibrary_ClearTimelineStateDescription final
{
public:
	float                                         flTimeDelta;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_TimelineLibrary_ClearTimelineStateDescription) == 0x000004, "Wrong alignment on SIK_TimelineLibrary_ClearTimelineStateDescription");
static_assert(sizeof(SIK_TimelineLibrary_ClearTimelineStateDescription) == 0x000004, "Wrong size on SIK_TimelineLibrary_ClearTimelineStateDescription");
static_assert(offsetof(SIK_TimelineLibrary_ClearTimelineStateDescription, flTimeDelta) == 0x000000, "Member 'SIK_TimelineLibrary_ClearTimelineStateDescription::flTimeDelta' has a wrong offset!");

// Function SteamIntegrationKit.SIK_TimelineLibrary.SetTimelineStateDescription
// 0x0018 (0x0018 - 0x0000)
struct SIK_TimelineLibrary_SetTimelineStateDescription final
{
public:
	class FString                                 pchDescription;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         flTimeDelta;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_TimelineLibrary_SetTimelineStateDescription) == 0x000008, "Wrong alignment on SIK_TimelineLibrary_SetTimelineStateDescription");
static_assert(sizeof(SIK_TimelineLibrary_SetTimelineStateDescription) == 0x000018, "Wrong size on SIK_TimelineLibrary_SetTimelineStateDescription");
static_assert(offsetof(SIK_TimelineLibrary_SetTimelineStateDescription, pchDescription) == 0x000000, "Member 'SIK_TimelineLibrary_SetTimelineStateDescription::pchDescription' has a wrong offset!");
static_assert(offsetof(SIK_TimelineLibrary_SetTimelineStateDescription, flTimeDelta) == 0x000010, "Member 'SIK_TimelineLibrary_SetTimelineStateDescription::flTimeDelta' has a wrong offset!");

// Function SteamIntegrationKit.SIK_TimelineLibrary.AddTimelineEvent
// 0x0040 (0x0040 - 0x0000)
struct SIK_TimelineLibrary_AddTimelineEvent final
{
public:
	class FString                                 pchIcon;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 pchTitle;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 pchDescription;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unPriority;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         flStartOffsetSeconds;                              // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         flDurationSecondsm;                                // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_TimelineEventClipPriority                ePossibleClip;                                     // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_TimelineLibrary_AddTimelineEvent) == 0x000008, "Wrong alignment on SIK_TimelineLibrary_AddTimelineEvent");
static_assert(sizeof(SIK_TimelineLibrary_AddTimelineEvent) == 0x000040, "Wrong size on SIK_TimelineLibrary_AddTimelineEvent");
static_assert(offsetof(SIK_TimelineLibrary_AddTimelineEvent, pchIcon) == 0x000000, "Member 'SIK_TimelineLibrary_AddTimelineEvent::pchIcon' has a wrong offset!");
static_assert(offsetof(SIK_TimelineLibrary_AddTimelineEvent, pchTitle) == 0x000010, "Member 'SIK_TimelineLibrary_AddTimelineEvent::pchTitle' has a wrong offset!");
static_assert(offsetof(SIK_TimelineLibrary_AddTimelineEvent, pchDescription) == 0x000020, "Member 'SIK_TimelineLibrary_AddTimelineEvent::pchDescription' has a wrong offset!");
static_assert(offsetof(SIK_TimelineLibrary_AddTimelineEvent, unPriority) == 0x000030, "Member 'SIK_TimelineLibrary_AddTimelineEvent::unPriority' has a wrong offset!");
static_assert(offsetof(SIK_TimelineLibrary_AddTimelineEvent, flStartOffsetSeconds) == 0x000034, "Member 'SIK_TimelineLibrary_AddTimelineEvent::flStartOffsetSeconds' has a wrong offset!");
static_assert(offsetof(SIK_TimelineLibrary_AddTimelineEvent, flDurationSecondsm) == 0x000038, "Member 'SIK_TimelineLibrary_AddTimelineEvent::flDurationSecondsm' has a wrong offset!");
static_assert(offsetof(SIK_TimelineLibrary_AddTimelineEvent, ePossibleClip) == 0x00003C, "Member 'SIK_TimelineLibrary_AddTimelineEvent::ePossibleClip' has a wrong offset!");

// Function SteamIntegrationKit.SIK_TimelineLibrary.SetTimelineGameMode
// 0x0001 (0x0001 - 0x0000)
struct SIK_TimelineLibrary_SetTimelineGameMode final
{
public:
	ESIK_TimelineGameMode                         eMode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_TimelineLibrary_SetTimelineGameMode) == 0x000001, "Wrong alignment on SIK_TimelineLibrary_SetTimelineGameMode");
static_assert(sizeof(SIK_TimelineLibrary_SetTimelineGameMode) == 0x000001, "Wrong size on SIK_TimelineLibrary_SetTimelineGameMode");
static_assert(offsetof(SIK_TimelineLibrary_SetTimelineGameMode, eMode) == 0x000000, "Member 'SIK_TimelineLibrary_SetTimelineGameMode::eMode' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddContentDescriptor
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_AddContentDescriptor final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_UGCContentDescriptorID                   ContentDescriptor;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddContentDescriptor) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddContentDescriptor");
static_assert(sizeof(SIK_UGCLibrary_AddContentDescriptor) == 0x000010, "Wrong size on SIK_UGCLibrary_AddContentDescriptor");
static_assert(offsetof(SIK_UGCLibrary_AddContentDescriptor, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddContentDescriptor::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddContentDescriptor, ContentDescriptor) == 0x000008, "Member 'SIK_UGCLibrary_AddContentDescriptor::ContentDescriptor' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddContentDescriptor, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_AddContentDescriptor::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddExcludedTag
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_AddExcludedTag final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddExcludedTag) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddExcludedTag");
static_assert(sizeof(SIK_UGCLibrary_AddExcludedTag) == 0x000020, "Wrong size on SIK_UGCLibrary_AddExcludedTag");
static_assert(offsetof(SIK_UGCLibrary_AddExcludedTag, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddExcludedTag::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddExcludedTag, TagName) == 0x000008, "Member 'SIK_UGCLibrary_AddExcludedTag::TagName' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddExcludedTag, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_AddExcludedTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddItemKeyValueTag
// 0x0030 (0x0030 - 0x0000)
struct SIK_UGCLibrary_AddItemKeyValueTag final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddItemKeyValueTag) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddItemKeyValueTag");
static_assert(sizeof(SIK_UGCLibrary_AddItemKeyValueTag) == 0x000030, "Wrong size on SIK_UGCLibrary_AddItemKeyValueTag");
static_assert(offsetof(SIK_UGCLibrary_AddItemKeyValueTag, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddItemKeyValueTag::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemKeyValueTag, Key) == 0x000008, "Member 'SIK_UGCLibrary_AddItemKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemKeyValueTag, Value) == 0x000018, "Member 'SIK_UGCLibrary_AddItemKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemKeyValueTag, ReturnValue) == 0x000028, "Member 'SIK_UGCLibrary_AddItemKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddItemPreviewFile
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_AddItemPreviewFile final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PreviewFile;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_ItemPreviewType                          FileType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddItemPreviewFile) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddItemPreviewFile");
static_assert(sizeof(SIK_UGCLibrary_AddItemPreviewFile) == 0x000020, "Wrong size on SIK_UGCLibrary_AddItemPreviewFile");
static_assert(offsetof(SIK_UGCLibrary_AddItemPreviewFile, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddItemPreviewFile::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemPreviewFile, PreviewFile) == 0x000008, "Member 'SIK_UGCLibrary_AddItemPreviewFile::PreviewFile' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemPreviewFile, FileType) == 0x000018, "Member 'SIK_UGCLibrary_AddItemPreviewFile::FileType' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemPreviewFile, ReturnValue) == 0x000019, "Member 'SIK_UGCLibrary_AddItemPreviewFile::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddItemPreviewVideo
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_AddItemPreviewVideo final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 VideoID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddItemPreviewVideo) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddItemPreviewVideo");
static_assert(sizeof(SIK_UGCLibrary_AddItemPreviewVideo) == 0x000020, "Wrong size on SIK_UGCLibrary_AddItemPreviewVideo");
static_assert(offsetof(SIK_UGCLibrary_AddItemPreviewVideo, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddItemPreviewVideo::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemPreviewVideo, VideoID) == 0x000008, "Member 'SIK_UGCLibrary_AddItemPreviewVideo::VideoID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddItemPreviewVideo, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_AddItemPreviewVideo::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddRequiredKeyValueTag
// 0x0030 (0x0030 - 0x0000)
struct SIK_UGCLibrary_AddRequiredKeyValueTag final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddRequiredKeyValueTag) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddRequiredKeyValueTag");
static_assert(sizeof(SIK_UGCLibrary_AddRequiredKeyValueTag) == 0x000030, "Wrong size on SIK_UGCLibrary_AddRequiredKeyValueTag");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredKeyValueTag, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddRequiredKeyValueTag::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredKeyValueTag, Key) == 0x000008, "Member 'SIK_UGCLibrary_AddRequiredKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredKeyValueTag, Value) == 0x000018, "Member 'SIK_UGCLibrary_AddRequiredKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredKeyValueTag, ReturnValue) == 0x000028, "Member 'SIK_UGCLibrary_AddRequiredKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddRequiredTag
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_AddRequiredTag final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddRequiredTag) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddRequiredTag");
static_assert(sizeof(SIK_UGCLibrary_AddRequiredTag) == 0x000020, "Wrong size on SIK_UGCLibrary_AddRequiredTag");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredTag, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddRequiredTag::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredTag, TagName) == 0x000008, "Member 'SIK_UGCLibrary_AddRequiredTag::TagName' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredTag, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_AddRequiredTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.AddRequiredTagGroup
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_AddRequiredTagGroup final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         TagNames;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_AddRequiredTagGroup) == 0x000008, "Wrong alignment on SIK_UGCLibrary_AddRequiredTagGroup");
static_assert(sizeof(SIK_UGCLibrary_AddRequiredTagGroup) == 0x000020, "Wrong size on SIK_UGCLibrary_AddRequiredTagGroup");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredTagGroup, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_AddRequiredTagGroup::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredTagGroup, TagNames) == 0x000008, "Member 'SIK_UGCLibrary_AddRequiredTagGroup::TagNames' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_AddRequiredTagGroup, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_AddRequiredTagGroup::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.BInitWorkshopForGameServer
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_BInitWorkshopForGameServer final
{
public:
	struct FSIK_DepotId                           DepotID;                                           // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Folder;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_BInitWorkshopForGameServer) == 0x000008, "Wrong alignment on SIK_UGCLibrary_BInitWorkshopForGameServer");
static_assert(sizeof(SIK_UGCLibrary_BInitWorkshopForGameServer) == 0x000020, "Wrong size on SIK_UGCLibrary_BInitWorkshopForGameServer");
static_assert(offsetof(SIK_UGCLibrary_BInitWorkshopForGameServer, DepotID) == 0x000000, "Member 'SIK_UGCLibrary_BInitWorkshopForGameServer::DepotID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_BInitWorkshopForGameServer, Folder) == 0x000008, "Member 'SIK_UGCLibrary_BInitWorkshopForGameServer::Folder' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_BInitWorkshopForGameServer, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_BInitWorkshopForGameServer::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.CreateQueryAllUGCRequest
// 0x0018 (0x0018 - 0x0000)
struct SIK_UGCLibrary_CreateQueryAllUGCRequest final
{
public:
	ESIK_UGCQuery                                 QueryType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_UGCMatchingUGCType                       MatchingType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_AppId                             CreatorAppID;                                      // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             ConsumerAppID;                                     // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSIK_UGCQueryHandle                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_CreateQueryAllUGCRequest) == 0x000008, "Wrong alignment on SIK_UGCLibrary_CreateQueryAllUGCRequest");
static_assert(sizeof(SIK_UGCLibrary_CreateQueryAllUGCRequest) == 0x000018, "Wrong size on SIK_UGCLibrary_CreateQueryAllUGCRequest");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryAllUGCRequest, QueryType) == 0x000000, "Member 'SIK_UGCLibrary_CreateQueryAllUGCRequest::QueryType' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryAllUGCRequest, MatchingType) == 0x000001, "Member 'SIK_UGCLibrary_CreateQueryAllUGCRequest::MatchingType' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryAllUGCRequest, CreatorAppID) == 0x000004, "Member 'SIK_UGCLibrary_CreateQueryAllUGCRequest::CreatorAppID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryAllUGCRequest, ConsumerAppID) == 0x000008, "Member 'SIK_UGCLibrary_CreateQueryAllUGCRequest::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryAllUGCRequest, Page) == 0x00000C, "Member 'SIK_UGCLibrary_CreateQueryAllUGCRequest::Page' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryAllUGCRequest, ReturnValue) == 0x000010, "Member 'SIK_UGCLibrary_CreateQueryAllUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.CreateQueryUGCDetailsRequest
// 0x0018 (0x0018 - 0x0000)
struct SIK_UGCLibrary_CreateQueryUGCDetailsRequest final
{
public:
	TArray<struct FSIK_PublishedFileId>           PublishedFileIDs;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSIK_UGCQueryHandle                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_CreateQueryUGCDetailsRequest) == 0x000008, "Wrong alignment on SIK_UGCLibrary_CreateQueryUGCDetailsRequest");
static_assert(sizeof(SIK_UGCLibrary_CreateQueryUGCDetailsRequest) == 0x000018, "Wrong size on SIK_UGCLibrary_CreateQueryUGCDetailsRequest");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUGCDetailsRequest, PublishedFileIDs) == 0x000000, "Member 'SIK_UGCLibrary_CreateQueryUGCDetailsRequest::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUGCDetailsRequest, ReturnValue) == 0x000010, "Member 'SIK_UGCLibrary_CreateQueryUGCDetailsRequest::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.CreateQueryUserUGCRequest
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_CreateQueryUserUGCRequest final
{
public:
	struct FSIK_AccountID                         AccountId;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_UserUGCList                              ListType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_UGCMatchingUGCType                       MatchingType;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_UserUGCListSortOrder                     SortOrder;                                         // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_AppId                             CreatorAppID;                                      // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_AppId                             ConsumerAppID;                                     // 0x000C(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_UGCQueryHandle                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_CreateQueryUserUGCRequest) == 0x000008, "Wrong alignment on SIK_UGCLibrary_CreateQueryUserUGCRequest");
static_assert(sizeof(SIK_UGCLibrary_CreateQueryUserUGCRequest) == 0x000020, "Wrong size on SIK_UGCLibrary_CreateQueryUserUGCRequest");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, AccountId) == 0x000000, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::AccountId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, ListType) == 0x000004, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::ListType' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, MatchingType) == 0x000005, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::MatchingType' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, SortOrder) == 0x000006, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::SortOrder' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, CreatorAppID) == 0x000008, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::CreatorAppID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, ConsumerAppID) == 0x00000C, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, Page) == 0x000010, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::Page' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_CreateQueryUserUGCRequest, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_CreateQueryUserUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.DownloadItem
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_DownloadItem final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHighPriority;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_DownloadItem) == 0x000008, "Wrong alignment on SIK_UGCLibrary_DownloadItem");
static_assert(sizeof(SIK_UGCLibrary_DownloadItem) == 0x000010, "Wrong size on SIK_UGCLibrary_DownloadItem");
static_assert(offsetof(SIK_UGCLibrary_DownloadItem, PublishedFileId) == 0x000000, "Member 'SIK_UGCLibrary_DownloadItem::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_DownloadItem, bHighPriority) == 0x000008, "Member 'SIK_UGCLibrary_DownloadItem::bHighPriority' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_DownloadItem, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_DownloadItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetAppDependencies
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_GetAppDependencies final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetAppDependencies) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetAppDependencies");
static_assert(sizeof(SIK_UGCLibrary_GetAppDependencies) == 0x000010, "Wrong size on SIK_UGCLibrary_GetAppDependencies");
static_assert(offsetof(SIK_UGCLibrary_GetAppDependencies, PublishedFileId) == 0x000000, "Member 'SIK_UGCLibrary_GetAppDependencies::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetAppDependencies, ReturnValue) == 0x000008, "Member 'SIK_UGCLibrary_GetAppDependencies::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemDownloadInfo
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_GetItemDownloadInfo final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         BytesDownloaded;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BytesTotal;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetItemDownloadInfo) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetItemDownloadInfo");
static_assert(sizeof(SIK_UGCLibrary_GetItemDownloadInfo) == 0x000020, "Wrong size on SIK_UGCLibrary_GetItemDownloadInfo");
static_assert(offsetof(SIK_UGCLibrary_GetItemDownloadInfo, PublishedFileId) == 0x000000, "Member 'SIK_UGCLibrary_GetItemDownloadInfo::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemDownloadInfo, BytesDownloaded) == 0x000008, "Member 'SIK_UGCLibrary_GetItemDownloadInfo::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemDownloadInfo, BytesTotal) == 0x000010, "Member 'SIK_UGCLibrary_GetItemDownloadInfo::BytesTotal' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemDownloadInfo, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_GetItemDownloadInfo::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemInstallInfo
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_GetItemInstallInfo final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         SizeOnDisk;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Folder;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetItemInstallInfo) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetItemInstallInfo");
static_assert(sizeof(SIK_UGCLibrary_GetItemInstallInfo) == 0x000028, "Wrong size on SIK_UGCLibrary_GetItemInstallInfo");
static_assert(offsetof(SIK_UGCLibrary_GetItemInstallInfo, PublishedFileId) == 0x000000, "Member 'SIK_UGCLibrary_GetItemInstallInfo::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemInstallInfo, SizeOnDisk) == 0x000008, "Member 'SIK_UGCLibrary_GetItemInstallInfo::SizeOnDisk' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemInstallInfo, Folder) == 0x000010, "Member 'SIK_UGCLibrary_GetItemInstallInfo::Folder' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemInstallInfo, Timestamp) == 0x000020, "Member 'SIK_UGCLibrary_GetItemInstallInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemInstallInfo, ReturnValue) == 0x000024, "Member 'SIK_UGCLibrary_GetItemInstallInfo::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemState
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_GetItemState final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetItemState) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetItemState");
static_assert(sizeof(SIK_UGCLibrary_GetItemState) == 0x000010, "Wrong size on SIK_UGCLibrary_GetItemState");
static_assert(offsetof(SIK_UGCLibrary_GetItemState, PublishedFileId) == 0x000000, "Member 'SIK_UGCLibrary_GetItemState::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemState, ReturnValue) == 0x000008, "Member 'SIK_UGCLibrary_GetItemState::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetItemUpdateProgress
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_GetItemUpdateProgress final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         BytesProcessed;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BytesTotal;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_ItemUpdateStatus                         ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetItemUpdateProgress) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetItemUpdateProgress");
static_assert(sizeof(SIK_UGCLibrary_GetItemUpdateProgress) == 0x000020, "Wrong size on SIK_UGCLibrary_GetItemUpdateProgress");
static_assert(offsetof(SIK_UGCLibrary_GetItemUpdateProgress, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetItemUpdateProgress::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemUpdateProgress, BytesProcessed) == 0x000008, "Member 'SIK_UGCLibrary_GetItemUpdateProgress::BytesProcessed' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemUpdateProgress, BytesTotal) == 0x000010, "Member 'SIK_UGCLibrary_GetItemUpdateProgress::BytesTotal' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetItemUpdateProgress, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_GetItemUpdateProgress::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetNumSubscribedItems
// 0x0004 (0x0004 - 0x0000)
struct SIK_UGCLibrary_GetNumSubscribedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_GetNumSubscribedItems) == 0x000004, "Wrong alignment on SIK_UGCLibrary_GetNumSubscribedItems");
static_assert(sizeof(SIK_UGCLibrary_GetNumSubscribedItems) == 0x000004, "Wrong size on SIK_UGCLibrary_GetNumSubscribedItems");
static_assert(offsetof(SIK_UGCLibrary_GetNumSubscribedItems, ReturnValue) == 0x000000, "Member 'SIK_UGCLibrary_GetNumSubscribedItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCAdditionalPreview
// 0x0038 (0x0038 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCAdditionalPreview final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewURL;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalFileName;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_ItemPreviewType                          FileType;                                          // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCAdditionalPreview");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview) == 0x000038, "Wrong size on SIK_UGCLibrary_GetQueryUGCAdditionalPreview");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCAdditionalPreview::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCAdditionalPreview::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview, PreviewIndex) == 0x00000C, "Member 'SIK_UGCLibrary_GetQueryUGCAdditionalPreview::PreviewIndex' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview, PreviewURL) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCAdditionalPreview::PreviewURL' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview, OriginalFileName) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCAdditionalPreview::OriginalFileName' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview, FileType) == 0x000030, "Member 'SIK_UGCLibrary_GetQueryUGCAdditionalPreview::FileType' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCAdditionalPreview, ReturnValue) == 0x000031, "Member 'SIK_UGCLibrary_GetQueryUGCAdditionalPreview::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCChildren
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCChildren final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSIK_PublishedFileId>           PublishedFileIDs;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCChildren) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCChildren");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCChildren) == 0x000028, "Wrong size on SIK_UGCLibrary_GetQueryUGCChildren");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCChildren, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCChildren::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCChildren, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCChildren::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCChildren, PublishedFileIDs) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCChildren::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCChildren, MaxEntries) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCChildren::MaxEntries' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCChildren, ReturnValue) == 0x000024, "Member 'SIK_UGCLibrary_GetQueryUGCChildren::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCContentDescriptors
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCContentDescriptors final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESIK_UGCContentDescriptorID>           ContentDescriptors;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCContentDescriptors) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCContentDescriptors");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCContentDescriptors) == 0x000028, "Wrong size on SIK_UGCLibrary_GetQueryUGCContentDescriptors");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCContentDescriptors, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCContentDescriptors::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCContentDescriptors, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCContentDescriptors::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCContentDescriptors, ContentDescriptors) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCContentDescriptors::ContentDescriptors' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCContentDescriptors, MaxEntries) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCContentDescriptors::MaxEntries' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCContentDescriptors, ReturnValue) == 0x000024, "Member 'SIK_UGCLibrary_GetQueryUGCContentDescriptors::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCKeyValueTag
// 0x0038 (0x0038 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCKeyValueTag final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCKeyValueTag) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCKeyValueTag");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCKeyValueTag) == 0x000038, "Wrong size on SIK_UGCLibrary_GetQueryUGCKeyValueTag");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCKeyValueTag, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCKeyValueTag::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCKeyValueTag, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCKeyValueTag::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCKeyValueTag, Key) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCKeyValueTag, Value) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCKeyValueTag, ReturnValue) == 0x000030, "Member 'SIK_UGCLibrary_GetQueryUGCKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCMetadata
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCMetadata final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MetaData;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCMetadata) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCMetadata");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCMetadata) == 0x000028, "Wrong size on SIK_UGCLibrary_GetQueryUGCMetadata");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCMetadata, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCMetadata::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCMetadata, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCMetadata::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCMetadata, MetaData) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCMetadata, ReturnValue) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCMetadata::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCNumAdditionalPreviews
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews) == 0x000010, "Wrong size on SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews, ReturnValue) == 0x00000C, "Member 'SIK_UGCLibrary_GetQueryUGCNumAdditionalPreviews::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCNumKeyValueTags
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCNumKeyValueTags final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCNumKeyValueTags) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCNumKeyValueTags");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCNumKeyValueTags) == 0x000010, "Wrong size on SIK_UGCLibrary_GetQueryUGCNumKeyValueTags");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumKeyValueTags, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCNumKeyValueTags::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumKeyValueTags, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCNumKeyValueTags::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumKeyValueTags, ReturnValue) == 0x00000C, "Member 'SIK_UGCLibrary_GetQueryUGCNumKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCNumTags
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCNumTags final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCNumTags) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCNumTags");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCNumTags) == 0x000010, "Wrong size on SIK_UGCLibrary_GetQueryUGCNumTags");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumTags, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCNumTags::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumTags, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCNumTags::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCNumTags, ReturnValue) == 0x00000C, "Member 'SIK_UGCLibrary_GetQueryUGCNumTags::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCPreviewURL
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCPreviewURL final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCPreviewURL) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCPreviewURL");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCPreviewURL) == 0x000028, "Wrong size on SIK_UGCLibrary_GetQueryUGCPreviewURL");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCPreviewURL, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCPreviewURL::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCPreviewURL, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCPreviewURL::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCPreviewURL, URL) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCPreviewURL::URL' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCPreviewURL, ReturnValue) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCPreviewURL::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCResult
// 0x00C0 (0x00C0 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCResult final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_SteamUGCDetails                   Details;                                           // 0x0010(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCResult) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCResult");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCResult) == 0x0000C0, "Wrong size on SIK_UGCLibrary_GetQueryUGCResult");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCResult, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCResult::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCResult, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCResult::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCResult, Details) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCResult::Details' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCResult, ReturnValue) == 0x0000B8, "Member 'SIK_UGCLibrary_GetQueryUGCResult::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCStatistic
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCStatistic final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_ItemStatistic                            StatType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Value;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCStatistic) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCStatistic");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCStatistic) == 0x000020, "Wrong size on SIK_UGCLibrary_GetQueryUGCStatistic");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCStatistic, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCStatistic::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCStatistic, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCStatistic::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCStatistic, StatType) == 0x00000C, "Member 'SIK_UGCLibrary_GetQueryUGCStatistic::StatType' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCStatistic, Value) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCStatistic::Value' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCStatistic, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_GetQueryUGCStatistic::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCTag
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCTag final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagIndex;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCTag) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCTag");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCTag) == 0x000028, "Wrong size on SIK_UGCLibrary_GetQueryUGCTag");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTag, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCTag::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTag, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCTag::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTag, TagIndex) == 0x00000C, "Member 'SIK_UGCLibrary_GetQueryUGCTag::TagIndex' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTag, TagName) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCTag::TagName' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTag, ReturnValue) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetQueryUGCTagDisplayName
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_GetQueryUGCTagDisplayName final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagIndex;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_GetQueryUGCTagDisplayName) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetQueryUGCTagDisplayName");
static_assert(sizeof(SIK_UGCLibrary_GetQueryUGCTagDisplayName) == 0x000028, "Wrong size on SIK_UGCLibrary_GetQueryUGCTagDisplayName");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTagDisplayName, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_GetQueryUGCTagDisplayName::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTagDisplayName, Index_0) == 0x000008, "Member 'SIK_UGCLibrary_GetQueryUGCTagDisplayName::Index_0' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTagDisplayName, TagIndex) == 0x00000C, "Member 'SIK_UGCLibrary_GetQueryUGCTagDisplayName::TagIndex' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTagDisplayName, TagName) == 0x000010, "Member 'SIK_UGCLibrary_GetQueryUGCTagDisplayName::TagName' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetQueryUGCTagDisplayName, ReturnValue) == 0x000020, "Member 'SIK_UGCLibrary_GetQueryUGCTagDisplayName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.GetSubscribedItems
// 0x0018 (0x0018 - 0x0000)
struct SIK_UGCLibrary_GetSubscribedItems final
{
public:
	TArray<struct FSIK_PublishedFileId>           PublishedFileIDs;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_GetSubscribedItems) == 0x000008, "Wrong alignment on SIK_UGCLibrary_GetSubscribedItems");
static_assert(sizeof(SIK_UGCLibrary_GetSubscribedItems) == 0x000018, "Wrong size on SIK_UGCLibrary_GetSubscribedItems");
static_assert(offsetof(SIK_UGCLibrary_GetSubscribedItems, PublishedFileIDs) == 0x000000, "Member 'SIK_UGCLibrary_GetSubscribedItems::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetSubscribedItems, MaxEntries) == 0x000010, "Member 'SIK_UGCLibrary_GetSubscribedItems::MaxEntries' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_GetSubscribedItems, ReturnValue) == 0x000014, "Member 'SIK_UGCLibrary_GetSubscribedItems::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.ReleaseQueryUGCRequest
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_ReleaseQueryUGCRequest final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_ReleaseQueryUGCRequest) == 0x000008, "Wrong alignment on SIK_UGCLibrary_ReleaseQueryUGCRequest");
static_assert(sizeof(SIK_UGCLibrary_ReleaseQueryUGCRequest) == 0x000010, "Wrong size on SIK_UGCLibrary_ReleaseQueryUGCRequest");
static_assert(offsetof(SIK_UGCLibrary_ReleaseQueryUGCRequest, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_ReleaseQueryUGCRequest::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_ReleaseQueryUGCRequest, ReturnValue) == 0x000008, "Member 'SIK_UGCLibrary_ReleaseQueryUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.RemoveContentDescriptor
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_RemoveContentDescriptor final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_UGCContentDescriptorID                   ContentDescriptor;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_RemoveContentDescriptor) == 0x000008, "Wrong alignment on SIK_UGCLibrary_RemoveContentDescriptor");
static_assert(sizeof(SIK_UGCLibrary_RemoveContentDescriptor) == 0x000010, "Wrong size on SIK_UGCLibrary_RemoveContentDescriptor");
static_assert(offsetof(SIK_UGCLibrary_RemoveContentDescriptor, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_RemoveContentDescriptor::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_RemoveContentDescriptor, ContentDescriptor) == 0x000008, "Member 'SIK_UGCLibrary_RemoveContentDescriptor::ContentDescriptor' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_RemoveContentDescriptor, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_RemoveContentDescriptor::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.RemoveItemKeyValueTags
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_RemoveItemKeyValueTags final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_RemoveItemKeyValueTags) == 0x000008, "Wrong alignment on SIK_UGCLibrary_RemoveItemKeyValueTags");
static_assert(sizeof(SIK_UGCLibrary_RemoveItemKeyValueTags) == 0x000020, "Wrong size on SIK_UGCLibrary_RemoveItemKeyValueTags");
static_assert(offsetof(SIK_UGCLibrary_RemoveItemKeyValueTags, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_RemoveItemKeyValueTags::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_RemoveItemKeyValueTags, Key) == 0x000008, "Member 'SIK_UGCLibrary_RemoveItemKeyValueTags::Key' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_RemoveItemKeyValueTags, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_RemoveItemKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.RemoveItemPreview
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_RemoveItemPreview final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PreviewIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_RemoveItemPreview) == 0x000008, "Wrong alignment on SIK_UGCLibrary_RemoveItemPreview");
static_assert(sizeof(SIK_UGCLibrary_RemoveItemPreview) == 0x000010, "Wrong size on SIK_UGCLibrary_RemoveItemPreview");
static_assert(offsetof(SIK_UGCLibrary_RemoveItemPreview, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_RemoveItemPreview::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_RemoveItemPreview, PreviewIndex) == 0x000008, "Member 'SIK_UGCLibrary_RemoveItemPreview::PreviewIndex' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_RemoveItemPreview, ReturnValue) == 0x00000C, "Member 'SIK_UGCLibrary_RemoveItemPreview::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetAllowCachedResponse
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetAllowCachedResponse final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxAgeSeconds;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetAllowCachedResponse) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetAllowCachedResponse");
static_assert(sizeof(SIK_UGCLibrary_SetAllowCachedResponse) == 0x000010, "Wrong size on SIK_UGCLibrary_SetAllowCachedResponse");
static_assert(offsetof(SIK_UGCLibrary_SetAllowCachedResponse, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetAllowCachedResponse::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetAllowCachedResponse, MaxAgeSeconds) == 0x000008, "Member 'SIK_UGCLibrary_SetAllowCachedResponse::MaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetAllowCachedResponse, ReturnValue) == 0x00000C, "Member 'SIK_UGCLibrary_SetAllowCachedResponse::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetCloudFileNameFilter
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetCloudFileNameFilter final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudFileName;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetCloudFileNameFilter) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetCloudFileNameFilter");
static_assert(sizeof(SIK_UGCLibrary_SetCloudFileNameFilter) == 0x000020, "Wrong size on SIK_UGCLibrary_SetCloudFileNameFilter");
static_assert(offsetof(SIK_UGCLibrary_SetCloudFileNameFilter, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetCloudFileNameFilter::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetCloudFileNameFilter, MatchCloudFileName) == 0x000008, "Member 'SIK_UGCLibrary_SetCloudFileNameFilter::MatchCloudFileName' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetCloudFileNameFilter, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetCloudFileNameFilter::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemContent
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetItemContent final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemContent) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemContent");
static_assert(sizeof(SIK_UGCLibrary_SetItemContent) == 0x000020, "Wrong size on SIK_UGCLibrary_SetItemContent");
static_assert(offsetof(SIK_UGCLibrary_SetItemContent, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemContent::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemContent, Content) == 0x000008, "Member 'SIK_UGCLibrary_SetItemContent::Content' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemContent, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetItemContent::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemDescription
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetItemDescription final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemDescription) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemDescription");
static_assert(sizeof(SIK_UGCLibrary_SetItemDescription) == 0x000020, "Wrong size on SIK_UGCLibrary_SetItemDescription");
static_assert(offsetof(SIK_UGCLibrary_SetItemDescription, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemDescription::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemDescription, Description) == 0x000008, "Member 'SIK_UGCLibrary_SetItemDescription::Description' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemDescription, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetItemDescription::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemMetadata
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetItemMetadata final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemMetadata) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemMetadata");
static_assert(sizeof(SIK_UGCLibrary_SetItemMetadata) == 0x000020, "Wrong size on SIK_UGCLibrary_SetItemMetadata");
static_assert(offsetof(SIK_UGCLibrary_SetItemMetadata, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemMetadata::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemMetadata, MetaData) == 0x000008, "Member 'SIK_UGCLibrary_SetItemMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemMetadata, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetItemMetadata::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemPreview
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetItemPreview final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PreviewFile;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemPreview) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemPreview");
static_assert(sizeof(SIK_UGCLibrary_SetItemPreview) == 0x000020, "Wrong size on SIK_UGCLibrary_SetItemPreview");
static_assert(offsetof(SIK_UGCLibrary_SetItemPreview, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemPreview::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemPreview, PreviewFile) == 0x000008, "Member 'SIK_UGCLibrary_SetItemPreview::PreviewFile' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemPreview, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetItemPreview::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemTags
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetItemTags final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemTags) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemTags");
static_assert(sizeof(SIK_UGCLibrary_SetItemTags) == 0x000020, "Wrong size on SIK_UGCLibrary_SetItemTags");
static_assert(offsetof(SIK_UGCLibrary_SetItemTags, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemTags::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemTags, Tags) == 0x000008, "Member 'SIK_UGCLibrary_SetItemTags::Tags' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemTags, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetItemTags::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemTitle
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetItemTitle final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemTitle) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemTitle");
static_assert(sizeof(SIK_UGCLibrary_SetItemTitle) == 0x000020, "Wrong size on SIK_UGCLibrary_SetItemTitle");
static_assert(offsetof(SIK_UGCLibrary_SetItemTitle, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemTitle::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemTitle, Title) == 0x000008, "Member 'SIK_UGCLibrary_SetItemTitle::Title' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemTitle, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetItemTitle::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemUpdateLanguage
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetItemUpdateLanguage final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemUpdateLanguage) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemUpdateLanguage");
static_assert(sizeof(SIK_UGCLibrary_SetItemUpdateLanguage) == 0x000020, "Wrong size on SIK_UGCLibrary_SetItemUpdateLanguage");
static_assert(offsetof(SIK_UGCLibrary_SetItemUpdateLanguage, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemUpdateLanguage::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemUpdateLanguage, Language) == 0x000008, "Member 'SIK_UGCLibrary_SetItemUpdateLanguage::Language' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemUpdateLanguage, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetItemUpdateLanguage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetItemVisibility
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetItemVisibility final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_RemoteStoragePublishedFileVisibility     Visibility;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetItemVisibility) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetItemVisibility");
static_assert(sizeof(SIK_UGCLibrary_SetItemVisibility) == 0x000010, "Wrong size on SIK_UGCLibrary_SetItemVisibility");
static_assert(offsetof(SIK_UGCLibrary_SetItemVisibility, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetItemVisibility::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemVisibility, Visibility) == 0x000008, "Member 'SIK_UGCLibrary_SetItemVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetItemVisibility, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetItemVisibility::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetLanguage
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetLanguage final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetLanguage) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetLanguage");
static_assert(sizeof(SIK_UGCLibrary_SetLanguage) == 0x000020, "Wrong size on SIK_UGCLibrary_SetLanguage");
static_assert(offsetof(SIK_UGCLibrary_SetLanguage, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetLanguage::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetLanguage, Language) == 0x000008, "Member 'SIK_UGCLibrary_SetLanguage::Language' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetLanguage, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetLanguage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetMatchAnyTag
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetMatchAnyTag final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMatchAnyTag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetMatchAnyTag) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetMatchAnyTag");
static_assert(sizeof(SIK_UGCLibrary_SetMatchAnyTag) == 0x000010, "Wrong size on SIK_UGCLibrary_SetMatchAnyTag");
static_assert(offsetof(SIK_UGCLibrary_SetMatchAnyTag, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetMatchAnyTag::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetMatchAnyTag, bMatchAnyTag) == 0x000008, "Member 'SIK_UGCLibrary_SetMatchAnyTag::bMatchAnyTag' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetMatchAnyTag, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetMatchAnyTag::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetRankedByTrendDays
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetRankedByTrendDays final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetRankedByTrendDays) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetRankedByTrendDays");
static_assert(sizeof(SIK_UGCLibrary_SetRankedByTrendDays) == 0x000010, "Wrong size on SIK_UGCLibrary_SetRankedByTrendDays");
static_assert(offsetof(SIK_UGCLibrary_SetRankedByTrendDays, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetRankedByTrendDays::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetRankedByTrendDays, Days) == 0x000008, "Member 'SIK_UGCLibrary_SetRankedByTrendDays::Days' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetRankedByTrendDays, ReturnValue) == 0x00000C, "Member 'SIK_UGCLibrary_SetRankedByTrendDays::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnAdditionalPreviews
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnAdditionalPreviews final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnAdditionalPreviews;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnAdditionalPreviews) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnAdditionalPreviews");
static_assert(sizeof(SIK_UGCLibrary_SetReturnAdditionalPreviews) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnAdditionalPreviews");
static_assert(offsetof(SIK_UGCLibrary_SetReturnAdditionalPreviews, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnAdditionalPreviews::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnAdditionalPreviews, bReturnAdditionalPreviews) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnAdditionalPreviews::bReturnAdditionalPreviews' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnAdditionalPreviews, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetReturnAdditionalPreviews::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnChildren
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnChildren final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnChildren;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnChildren) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnChildren");
static_assert(sizeof(SIK_UGCLibrary_SetReturnChildren) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnChildren");
static_assert(offsetof(SIK_UGCLibrary_SetReturnChildren, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnChildren::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnChildren, bReturnChildren) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnChildren::bReturnChildren' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnChildren, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetReturnChildren::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnKeyValueTags
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnKeyValueTags final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnKeyValueTags;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnKeyValueTags) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnKeyValueTags");
static_assert(sizeof(SIK_UGCLibrary_SetReturnKeyValueTags) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnKeyValueTags");
static_assert(offsetof(SIK_UGCLibrary_SetReturnKeyValueTags, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnKeyValueTags::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnKeyValueTags, bReturnKeyValueTags) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnKeyValueTags::bReturnKeyValueTags' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnKeyValueTags, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetReturnKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnLongDescription
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnLongDescription final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnLongDescription;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnLongDescription) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnLongDescription");
static_assert(sizeof(SIK_UGCLibrary_SetReturnLongDescription) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnLongDescription");
static_assert(offsetof(SIK_UGCLibrary_SetReturnLongDescription, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnLongDescription::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnLongDescription, bReturnLongDescription) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnLongDescription::bReturnLongDescription' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnLongDescription, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetReturnLongDescription::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnMetadata
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnMetadata final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnMetadata;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnMetadata) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnMetadata");
static_assert(sizeof(SIK_UGCLibrary_SetReturnMetadata) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnMetadata");
static_assert(offsetof(SIK_UGCLibrary_SetReturnMetadata, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnMetadata::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnMetadata, bReturnMetadata) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnMetadata::bReturnMetadata' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnMetadata, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetReturnMetadata::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnOnlyIDs
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnOnlyIDs final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnOnlyIDs;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnOnlyIDs) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnOnlyIDs");
static_assert(sizeof(SIK_UGCLibrary_SetReturnOnlyIDs) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnOnlyIDs");
static_assert(offsetof(SIK_UGCLibrary_SetReturnOnlyIDs, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnOnlyIDs::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnOnlyIDs, bReturnOnlyIDs) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnOnlyIDs::bReturnOnlyIDs' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnOnlyIDs, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetReturnOnlyIDs::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnPlaytimeStats
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnPlaytimeStats final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnPlaytimeStats) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnPlaytimeStats");
static_assert(sizeof(SIK_UGCLibrary_SetReturnPlaytimeStats) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnPlaytimeStats");
static_assert(offsetof(SIK_UGCLibrary_SetReturnPlaytimeStats, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnPlaytimeStats::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnPlaytimeStats, Days) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnPlaytimeStats::Days' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnPlaytimeStats, ReturnValue) == 0x00000C, "Member 'SIK_UGCLibrary_SetReturnPlaytimeStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetReturnTotalOnly
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetReturnTotalOnly final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnTotalOnly;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetReturnTotalOnly) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetReturnTotalOnly");
static_assert(sizeof(SIK_UGCLibrary_SetReturnTotalOnly) == 0x000010, "Wrong size on SIK_UGCLibrary_SetReturnTotalOnly");
static_assert(offsetof(SIK_UGCLibrary_SetReturnTotalOnly, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetReturnTotalOnly::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnTotalOnly, bReturnTotalOnly) == 0x000008, "Member 'SIK_UGCLibrary_SetReturnTotalOnly::bReturnTotalOnly' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetReturnTotalOnly, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetReturnTotalOnly::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetSearchText
// 0x0020 (0x0020 - 0x0000)
struct SIK_UGCLibrary_SetSearchText final
{
public:
	struct FSIK_UGCQueryHandle                    QueryHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 SearchText;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetSearchText) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetSearchText");
static_assert(sizeof(SIK_UGCLibrary_SetSearchText) == 0x000020, "Wrong size on SIK_UGCLibrary_SetSearchText");
static_assert(offsetof(SIK_UGCLibrary_SetSearchText, QueryHandle) == 0x000000, "Member 'SIK_UGCLibrary_SetSearchText::QueryHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetSearchText, SearchText) == 0x000008, "Member 'SIK_UGCLibrary_SetSearchText::SearchText' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetSearchText, ReturnValue) == 0x000018, "Member 'SIK_UGCLibrary_SetSearchText::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SetUserItemVote
// 0x0010 (0x0010 - 0x0000)
struct SIK_UGCLibrary_SetUserItemVote final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVoteUp;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_SetUserItemVote) == 0x000008, "Wrong alignment on SIK_UGCLibrary_SetUserItemVote");
static_assert(sizeof(SIK_UGCLibrary_SetUserItemVote) == 0x000010, "Wrong size on SIK_UGCLibrary_SetUserItemVote");
static_assert(offsetof(SIK_UGCLibrary_SetUserItemVote, PublishedFileId) == 0x000000, "Member 'SIK_UGCLibrary_SetUserItemVote::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetUserItemVote, bVoteUp) == 0x000008, "Member 'SIK_UGCLibrary_SetUserItemVote::bVoteUp' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_SetUserItemVote, ReturnValue) == 0x000009, "Member 'SIK_UGCLibrary_SetUserItemVote::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.ShowWorkshopEULA
// 0x0001 (0x0001 - 0x0000)
struct SIK_UGCLibrary_ShowWorkshopEULA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_ShowWorkshopEULA) == 0x000001, "Wrong alignment on SIK_UGCLibrary_ShowWorkshopEULA");
static_assert(sizeof(SIK_UGCLibrary_ShowWorkshopEULA) == 0x000001, "Wrong size on SIK_UGCLibrary_ShowWorkshopEULA");
static_assert(offsetof(SIK_UGCLibrary_ShowWorkshopEULA, ReturnValue) == 0x000000, "Member 'SIK_UGCLibrary_ShowWorkshopEULA::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.StartItemUpdate
// 0x0018 (0x0018 - 0x0000)
struct SIK_UGCLibrary_StartItemUpdate final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSIK_UGCUpdateHandle                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_StartItemUpdate) == 0x000008, "Wrong alignment on SIK_UGCLibrary_StartItemUpdate");
static_assert(sizeof(SIK_UGCLibrary_StartItemUpdate) == 0x000018, "Wrong size on SIK_UGCLibrary_StartItemUpdate");
static_assert(offsetof(SIK_UGCLibrary_StartItemUpdate, AppID) == 0x000000, "Member 'SIK_UGCLibrary_StartItemUpdate::AppID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_StartItemUpdate, PublishedFileId) == 0x000008, "Member 'SIK_UGCLibrary_StartItemUpdate::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_StartItemUpdate, ReturnValue) == 0x000010, "Member 'SIK_UGCLibrary_StartItemUpdate::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.SuspendDownloads
// 0x0001 (0x0001 - 0x0000)
struct SIK_UGCLibrary_SuspendDownloads final
{
public:
	bool                                          bSuspend;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UGCLibrary_SuspendDownloads) == 0x000001, "Wrong alignment on SIK_UGCLibrary_SuspendDownloads");
static_assert(sizeof(SIK_UGCLibrary_SuspendDownloads) == 0x000001, "Wrong size on SIK_UGCLibrary_SuspendDownloads");
static_assert(offsetof(SIK_UGCLibrary_SuspendDownloads, bSuspend) == 0x000000, "Member 'SIK_UGCLibrary_SuspendDownloads::bSuspend' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.UpdateItemPreviewFile
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_UpdateItemPreviewFile final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PreviewIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewFile;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_UpdateItemPreviewFile) == 0x000008, "Wrong alignment on SIK_UGCLibrary_UpdateItemPreviewFile");
static_assert(sizeof(SIK_UGCLibrary_UpdateItemPreviewFile) == 0x000028, "Wrong size on SIK_UGCLibrary_UpdateItemPreviewFile");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewFile, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_UpdateItemPreviewFile::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewFile, PreviewIndex) == 0x000008, "Member 'SIK_UGCLibrary_UpdateItemPreviewFile::PreviewIndex' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewFile, PreviewFile) == 0x000010, "Member 'SIK_UGCLibrary_UpdateItemPreviewFile::PreviewFile' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewFile, ReturnValue) == 0x000020, "Member 'SIK_UGCLibrary_UpdateItemPreviewFile::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UGCLibrary.UpdateItemPreviewVideo
// 0x0028 (0x0028 - 0x0000)
struct SIK_UGCLibrary_UpdateItemPreviewVideo final
{
public:
	struct FSIK_UGCUpdateHandle                   UpdateHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PreviewIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UGCLibrary_UpdateItemPreviewVideo) == 0x000008, "Wrong alignment on SIK_UGCLibrary_UpdateItemPreviewVideo");
static_assert(sizeof(SIK_UGCLibrary_UpdateItemPreviewVideo) == 0x000028, "Wrong size on SIK_UGCLibrary_UpdateItemPreviewVideo");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewVideo, UpdateHandle) == 0x000000, "Member 'SIK_UGCLibrary_UpdateItemPreviewVideo::UpdateHandle' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewVideo, PreviewIndex) == 0x000008, "Member 'SIK_UGCLibrary_UpdateItemPreviewVideo::PreviewIndex' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewVideo, VideoID) == 0x000010, "Member 'SIK_UGCLibrary_UpdateItemPreviewVideo::VideoID' has a wrong offset!");
static_assert(offsetof(SIK_UGCLibrary_UpdateItemPreviewVideo, ReturnValue) == 0x000020, "Member 'SIK_UGCLibrary_UpdateItemPreviewVideo::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UnsubscribeItem_AsyncFunction.UnsubscribeItem
// 0x0010 (0x0010 - 0x0000)
struct SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem final
{
public:
	struct FSIK_PublishedFileId                   PublishedFileId;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USIK_UnsubscribeItem_AsyncFunction*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem) == 0x000008, "Wrong alignment on SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem");
static_assert(sizeof(SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem) == 0x000010, "Wrong size on SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem");
static_assert(offsetof(SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem, PublishedFileId) == 0x000000, "Member 'SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem::PublishedFileId' has a wrong offset!");
static_assert(offsetof(SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem, ReturnValue) == 0x000008, "Member 'SIK_UnsubscribeItem_AsyncFunction_UnsubscribeItem::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UploadLeaderboardScore_AsyncFunction.UploadLeaderboardScore
// 0x0018 (0x0018 - 0x0000)
struct SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore final
{
public:
	int32                                         LeaderboardID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LeaderboardUploadScoreMethod             UploadScoreMethod;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USIK_UploadLeaderboardScore_AsyncFunction* ReturnValue;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore) == 0x000008, "Wrong alignment on SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore");
static_assert(sizeof(SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore) == 0x000018, "Wrong size on SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore");
static_assert(offsetof(SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore, LeaderboardID) == 0x000000, "Member 'SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore::LeaderboardID' has a wrong offset!");
static_assert(offsetof(SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore, UploadScoreMethod) == 0x000004, "Member 'SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore::UploadScoreMethod' has a wrong offset!");
static_assert(offsetof(SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore, Score) == 0x000008, "Member 'SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore::Score' has a wrong offset!");
static_assert(offsetof(SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore, ReturnValue) == 0x000010, "Member 'SIK_UploadLeaderboardScore_AsyncFunction_UploadLeaderboardScore::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.AdvertiseGame
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserLibrary_AdvertiseGame final
{
public:
	struct FSIK_SteamId                           GameServerId;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 GameServerIP;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameServerPort;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_AdvertiseGame) == 0x000008, "Wrong alignment on SIK_UserLibrary_AdvertiseGame");
static_assert(sizeof(SIK_UserLibrary_AdvertiseGame) == 0x000020, "Wrong size on SIK_UserLibrary_AdvertiseGame");
static_assert(offsetof(SIK_UserLibrary_AdvertiseGame, GameServerId) == 0x000000, "Member 'SIK_UserLibrary_AdvertiseGame::GameServerId' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_AdvertiseGame, GameServerIP) == 0x000008, "Member 'SIK_UserLibrary_AdvertiseGame::GameServerIP' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_AdvertiseGame, GameServerPort) == 0x000018, "Member 'SIK_UserLibrary_AdvertiseGame::GameServerPort' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.BeginAuthSession
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserLibrary_BeginAuthSession final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamId                           EntitySteamId;                                     // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESIK_BeginAuthSessionResult                   ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_BeginAuthSession) == 0x000008, "Wrong alignment on SIK_UserLibrary_BeginAuthSession");
static_assert(sizeof(SIK_UserLibrary_BeginAuthSession) == 0x000020, "Wrong size on SIK_UserLibrary_BeginAuthSession");
static_assert(offsetof(SIK_UserLibrary_BeginAuthSession, Ticket) == 0x000000, "Member 'SIK_UserLibrary_BeginAuthSession::Ticket' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_BeginAuthSession, EntitySteamId) == 0x000010, "Member 'SIK_UserLibrary_BeginAuthSession::EntitySteamId' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_BeginAuthSession, ReturnValue) == 0x000018, "Member 'SIK_UserLibrary_BeginAuthSession::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.CancelAuthTicket
// 0x0004 (0x0004 - 0x0000)
struct SIK_UserLibrary_CancelAuthTicket final
{
public:
	int32                                         AuthTicket;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_CancelAuthTicket) == 0x000004, "Wrong alignment on SIK_UserLibrary_CancelAuthTicket");
static_assert(sizeof(SIK_UserLibrary_CancelAuthTicket) == 0x000004, "Wrong size on SIK_UserLibrary_CancelAuthTicket");
static_assert(offsetof(SIK_UserLibrary_CancelAuthTicket, AuthTicket) == 0x000000, "Member 'SIK_UserLibrary_CancelAuthTicket::AuthTicket' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.DecompressVoice
// 0x0030 (0x0030 - 0x0000)
struct SIK_UserLibrary_DecompressVoice final
{
public:
	TArray<uint8>                                 Compressed;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DesiredSampleRate;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Uncompressed;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BytesWritten;                                      // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_VoiceResult                              ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_DecompressVoice) == 0x000008, "Wrong alignment on SIK_UserLibrary_DecompressVoice");
static_assert(sizeof(SIK_UserLibrary_DecompressVoice) == 0x000030, "Wrong size on SIK_UserLibrary_DecompressVoice");
static_assert(offsetof(SIK_UserLibrary_DecompressVoice, Compressed) == 0x000000, "Member 'SIK_UserLibrary_DecompressVoice::Compressed' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_DecompressVoice, DesiredSampleRate) == 0x000010, "Member 'SIK_UserLibrary_DecompressVoice::DesiredSampleRate' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_DecompressVoice, Uncompressed) == 0x000018, "Member 'SIK_UserLibrary_DecompressVoice::Uncompressed' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_DecompressVoice, BytesWritten) == 0x000028, "Member 'SIK_UserLibrary_DecompressVoice::BytesWritten' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_DecompressVoice, ReturnValue) == 0x00002C, "Member 'SIK_UserLibrary_DecompressVoice::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.EndAuthSession
// 0x0008 (0x0008 - 0x0000)
struct SIK_UserLibrary_EndAuthSession final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_EndAuthSession) == 0x000008, "Wrong alignment on SIK_UserLibrary_EndAuthSession");
static_assert(sizeof(SIK_UserLibrary_EndAuthSession) == 0x000008, "Wrong size on SIK_UserLibrary_EndAuthSession");
static_assert(offsetof(SIK_UserLibrary_EndAuthSession, SteamID) == 0x000000, "Member 'SIK_UserLibrary_EndAuthSession::SteamID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetAuthSessionTicket
// 0x0078 (0x0078 - 0x0000)
struct SIK_UserLibrary_GetAuthSessionTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSIK_SteamNetworkingIdentity           Identity;                                          // 0x0010(0x0060)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_GetAuthSessionTicket) == 0x000008, "Wrong alignment on SIK_UserLibrary_GetAuthSessionTicket");
static_assert(sizeof(SIK_UserLibrary_GetAuthSessionTicket) == 0x000078, "Wrong size on SIK_UserLibrary_GetAuthSessionTicket");
static_assert(offsetof(SIK_UserLibrary_GetAuthSessionTicket, Ticket) == 0x000000, "Member 'SIK_UserLibrary_GetAuthSessionTicket::Ticket' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetAuthSessionTicket, Identity) == 0x000010, "Member 'SIK_UserLibrary_GetAuthSessionTicket::Identity' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetAuthSessionTicket, ReturnValue) == 0x000070, "Member 'SIK_UserLibrary_GetAuthSessionTicket::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetAuthTicketForWebApi
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserLibrary_GetAuthTicketForWebApi final
{
public:
	class FString                                 Identity;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_GetAuthTicketForWebApi) == 0x000008, "Wrong alignment on SIK_UserLibrary_GetAuthTicketForWebApi");
static_assert(sizeof(SIK_UserLibrary_GetAuthTicketForWebApi) == 0x000018, "Wrong size on SIK_UserLibrary_GetAuthTicketForWebApi");
static_assert(offsetof(SIK_UserLibrary_GetAuthTicketForWebApi, Identity) == 0x000000, "Member 'SIK_UserLibrary_GetAuthTicketForWebApi::Identity' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetAuthTicketForWebApi, ReturnValue) == 0x000010, "Member 'SIK_UserLibrary_GetAuthTicketForWebApi::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetAvailableVoice
// 0x0010 (0x0010 - 0x0000)
struct SIK_UserLibrary_GetAvailableVoice final
{
public:
	int32                                         Compressed;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Uncompressed;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredSampleRate;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_VoiceResult                              ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_GetAvailableVoice) == 0x000004, "Wrong alignment on SIK_UserLibrary_GetAvailableVoice");
static_assert(sizeof(SIK_UserLibrary_GetAvailableVoice) == 0x000010, "Wrong size on SIK_UserLibrary_GetAvailableVoice");
static_assert(offsetof(SIK_UserLibrary_GetAvailableVoice, Compressed) == 0x000000, "Member 'SIK_UserLibrary_GetAvailableVoice::Compressed' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetAvailableVoice, Uncompressed) == 0x000004, "Member 'SIK_UserLibrary_GetAvailableVoice::Uncompressed' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetAvailableVoice, DesiredSampleRate) == 0x000008, "Member 'SIK_UserLibrary_GetAvailableVoice::DesiredSampleRate' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetAvailableVoice, ReturnValue) == 0x00000C, "Member 'SIK_UserLibrary_GetAvailableVoice::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetEncryptedAppTicket
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserLibrary_GetEncryptedAppTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_GetEncryptedAppTicket) == 0x000008, "Wrong alignment on SIK_UserLibrary_GetEncryptedAppTicket");
static_assert(sizeof(SIK_UserLibrary_GetEncryptedAppTicket) == 0x000018, "Wrong size on SIK_UserLibrary_GetEncryptedAppTicket");
static_assert(offsetof(SIK_UserLibrary_GetEncryptedAppTicket, Ticket) == 0x000000, "Member 'SIK_UserLibrary_GetEncryptedAppTicket::Ticket' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetEncryptedAppTicket, ReturnValue) == 0x000010, "Member 'SIK_UserLibrary_GetEncryptedAppTicket::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetGameBadgeLevel
// 0x000C (0x000C - 0x0000)
struct SIK_UserLibrary_GetGameBadgeLevel final
{
public:
	int32                                         Series;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Foil;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_GetGameBadgeLevel) == 0x000004, "Wrong alignment on SIK_UserLibrary_GetGameBadgeLevel");
static_assert(sizeof(SIK_UserLibrary_GetGameBadgeLevel) == 0x00000C, "Wrong size on SIK_UserLibrary_GetGameBadgeLevel");
static_assert(offsetof(SIK_UserLibrary_GetGameBadgeLevel, Series) == 0x000000, "Member 'SIK_UserLibrary_GetGameBadgeLevel::Series' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetGameBadgeLevel, Foil) == 0x000004, "Member 'SIK_UserLibrary_GetGameBadgeLevel::Foil' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetGameBadgeLevel, ReturnValue) == 0x000008, "Member 'SIK_UserLibrary_GetGameBadgeLevel::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetPlayerSteamLevel
// 0x0004 (0x0004 - 0x0000)
struct SIK_UserLibrary_GetPlayerSteamLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_GetPlayerSteamLevel) == 0x000004, "Wrong alignment on SIK_UserLibrary_GetPlayerSteamLevel");
static_assert(sizeof(SIK_UserLibrary_GetPlayerSteamLevel) == 0x000004, "Wrong size on SIK_UserLibrary_GetPlayerSteamLevel");
static_assert(offsetof(SIK_UserLibrary_GetPlayerSteamLevel, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_GetPlayerSteamLevel::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetSteamID
// 0x0008 (0x0008 - 0x0000)
struct SIK_UserLibrary_GetSteamID final
{
public:
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_GetSteamID) == 0x000008, "Wrong alignment on SIK_UserLibrary_GetSteamID");
static_assert(sizeof(SIK_UserLibrary_GetSteamID) == 0x000008, "Wrong size on SIK_UserLibrary_GetSteamID");
static_assert(offsetof(SIK_UserLibrary_GetSteamID, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_GetSteamID::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetSteamIdPure
// 0x0008 (0x0008 - 0x0000)
struct SIK_UserLibrary_GetSteamIdPure final
{
public:
	struct FSIK_SteamId                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_GetSteamIdPure) == 0x000008, "Wrong alignment on SIK_UserLibrary_GetSteamIdPure");
static_assert(sizeof(SIK_UserLibrary_GetSteamIdPure) == 0x000008, "Wrong size on SIK_UserLibrary_GetSteamIdPure");
static_assert(offsetof(SIK_UserLibrary_GetSteamIdPure, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_GetSteamIdPure::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetVoice
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserLibrary_GetVoice final
{
public:
	bool                                          bWantCompressed;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 DestBuffer;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BytesWritten;                                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_VoiceResult                              ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_GetVoice) == 0x000008, "Wrong alignment on SIK_UserLibrary_GetVoice");
static_assert(sizeof(SIK_UserLibrary_GetVoice) == 0x000020, "Wrong size on SIK_UserLibrary_GetVoice");
static_assert(offsetof(SIK_UserLibrary_GetVoice, bWantCompressed) == 0x000000, "Member 'SIK_UserLibrary_GetVoice::bWantCompressed' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetVoice, DestBuffer) == 0x000008, "Member 'SIK_UserLibrary_GetVoice::DestBuffer' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetVoice, BytesWritten) == 0x000018, "Member 'SIK_UserLibrary_GetVoice::BytesWritten' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_GetVoice, ReturnValue) == 0x00001C, "Member 'SIK_UserLibrary_GetVoice::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.GetVoiceOptimalSampleRate
// 0x0004 (0x0004 - 0x0000)
struct SIK_UserLibrary_GetVoiceOptimalSampleRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_GetVoiceOptimalSampleRate) == 0x000004, "Wrong alignment on SIK_UserLibrary_GetVoiceOptimalSampleRate");
static_assert(sizeof(SIK_UserLibrary_GetVoiceOptimalSampleRate) == 0x000004, "Wrong size on SIK_UserLibrary_GetVoiceOptimalSampleRate");
static_assert(offsetof(SIK_UserLibrary_GetVoiceOptimalSampleRate, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_GetVoiceOptimalSampleRate::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.IsBehindNAT
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserLibrary_IsBehindNAT final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_IsBehindNAT) == 0x000001, "Wrong alignment on SIK_UserLibrary_IsBehindNAT");
static_assert(sizeof(SIK_UserLibrary_IsBehindNAT) == 0x000001, "Wrong size on SIK_UserLibrary_IsBehindNAT");
static_assert(offsetof(SIK_UserLibrary_IsBehindNAT, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_IsBehindNAT::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.IsPhoneIdentifying
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserLibrary_IsPhoneIdentifying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_IsPhoneIdentifying) == 0x000001, "Wrong alignment on SIK_UserLibrary_IsPhoneIdentifying");
static_assert(sizeof(SIK_UserLibrary_IsPhoneIdentifying) == 0x000001, "Wrong size on SIK_UserLibrary_IsPhoneIdentifying");
static_assert(offsetof(SIK_UserLibrary_IsPhoneIdentifying, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_IsPhoneIdentifying::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.IsPhoneRequiringVerification
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserLibrary_IsPhoneRequiringVerification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_IsPhoneRequiringVerification) == 0x000001, "Wrong alignment on SIK_UserLibrary_IsPhoneRequiringVerification");
static_assert(sizeof(SIK_UserLibrary_IsPhoneRequiringVerification) == 0x000001, "Wrong size on SIK_UserLibrary_IsPhoneRequiringVerification");
static_assert(offsetof(SIK_UserLibrary_IsPhoneRequiringVerification, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_IsPhoneRequiringVerification::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.IsPhoneVerified
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserLibrary_IsPhoneVerified final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_IsPhoneVerified) == 0x000001, "Wrong alignment on SIK_UserLibrary_IsPhoneVerified");
static_assert(sizeof(SIK_UserLibrary_IsPhoneVerified) == 0x000001, "Wrong size on SIK_UserLibrary_IsPhoneVerified");
static_assert(offsetof(SIK_UserLibrary_IsPhoneVerified, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_IsPhoneVerified::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.IsTwoFactorEnabled
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserLibrary_IsTwoFactorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_IsTwoFactorEnabled) == 0x000001, "Wrong alignment on SIK_UserLibrary_IsTwoFactorEnabled");
static_assert(sizeof(SIK_UserLibrary_IsTwoFactorEnabled) == 0x000001, "Wrong size on SIK_UserLibrary_IsTwoFactorEnabled");
static_assert(offsetof(SIK_UserLibrary_IsTwoFactorEnabled, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_IsTwoFactorEnabled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.LoggedOn
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserLibrary_LoggedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_LoggedOn) == 0x000001, "Wrong alignment on SIK_UserLibrary_LoggedOn");
static_assert(sizeof(SIK_UserLibrary_LoggedOn) == 0x000001, "Wrong size on SIK_UserLibrary_LoggedOn");
static_assert(offsetof(SIK_UserLibrary_LoggedOn, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_LoggedOn::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.LoggedOnPure
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserLibrary_LoggedOnPure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserLibrary_LoggedOnPure) == 0x000001, "Wrong alignment on SIK_UserLibrary_LoggedOnPure");
static_assert(sizeof(SIK_UserLibrary_LoggedOnPure) == 0x000001, "Wrong size on SIK_UserLibrary_LoggedOnPure");
static_assert(offsetof(SIK_UserLibrary_LoggedOnPure, ReturnValue) == 0x000000, "Member 'SIK_UserLibrary_LoggedOnPure::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserLibrary.UserHasLicenseForApp
// 0x0010 (0x0010 - 0x0000)
struct SIK_UserLibrary_UserHasLicenseForApp final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserLibrary_UserHasLicenseForApp) == 0x000008, "Wrong alignment on SIK_UserLibrary_UserHasLicenseForApp");
static_assert(sizeof(SIK_UserLibrary_UserHasLicenseForApp) == 0x000010, "Wrong size on SIK_UserLibrary_UserHasLicenseForApp");
static_assert(offsetof(SIK_UserLibrary_UserHasLicenseForApp, SteamID) == 0x000000, "Member 'SIK_UserLibrary_UserHasLicenseForApp::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_UserHasLicenseForApp, AppID) == 0x000008, "Member 'SIK_UserLibrary_UserHasLicenseForApp::AppID' has a wrong offset!");
static_assert(offsetof(SIK_UserLibrary_UserHasLicenseForApp, ReturnValue) == 0x00000C, "Member 'SIK_UserLibrary_UserHasLicenseForApp::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.CacheCurrentStats
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserStatsLibrary_CacheCurrentStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_CacheCurrentStats) == 0x000001, "Wrong alignment on SIK_UserStatsLibrary_CacheCurrentStats");
static_assert(sizeof(SIK_UserStatsLibrary_CacheCurrentStats) == 0x000001, "Wrong size on SIK_UserStatsLibrary_CacheCurrentStats");
static_assert(offsetof(SIK_UserStatsLibrary_CacheCurrentStats, ReturnValue) == 0x000000, "Member 'SIK_UserStatsLibrary_CacheCurrentStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.ClearAchievement
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_ClearAchievement final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_ClearAchievement) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_ClearAchievement");
static_assert(sizeof(SIK_UserStatsLibrary_ClearAchievement) == 0x000018, "Wrong size on SIK_UserStatsLibrary_ClearAchievement");
static_assert(offsetof(SIK_UserStatsLibrary_ClearAchievement, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_ClearAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_ClearAchievement, ReturnValue) == 0x000010, "Member 'SIK_UserStatsLibrary_ClearAchievement::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievement
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetAchievement final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetAchievement) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetAchievement");
static_assert(sizeof(SIK_UserStatsLibrary_GetAchievement) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetAchievement");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievement, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievement, ReturnValue) == 0x000010, "Member 'SIK_UserStatsLibrary_GetAchievement::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementAchievedPercent
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetAchievementAchievedPercent final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetAchievementAchievedPercent) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetAchievementAchievedPercent");
static_assert(sizeof(SIK_UserStatsLibrary_GetAchievementAchievedPercent) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetAchievementAchievedPercent");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementAchievedPercent, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetAchievementAchievedPercent::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementAchievedPercent, Percent) == 0x000010, "Member 'SIK_UserStatsLibrary_GetAchievementAchievedPercent::Percent' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementAchievedPercent, ReturnValue) == 0x000014, "Member 'SIK_UserStatsLibrary_GetAchievementAchievedPercent::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementAndUnlockTime
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserStatsLibrary_GetAchievementAndUnlockTime final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UnlockTime;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_GetAchievementAndUnlockTime) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetAchievementAndUnlockTime");
static_assert(sizeof(SIK_UserStatsLibrary_GetAchievementAndUnlockTime) == 0x000020, "Wrong size on SIK_UserStatsLibrary_GetAchievementAndUnlockTime");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementAndUnlockTime, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetAchievementAndUnlockTime::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementAndUnlockTime, bAchieved) == 0x000010, "Member 'SIK_UserStatsLibrary_GetAchievementAndUnlockTime::bAchieved' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementAndUnlockTime, UnlockTime) == 0x000018, "Member 'SIK_UserStatsLibrary_GetAchievementAndUnlockTime::UnlockTime' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementDisplayAttribute
// 0x0030 (0x0030 - 0x0000)
struct SIK_UserStatsLibrary_GetAchievementDisplayAttribute final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_GetAchievementDisplayAttribute) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetAchievementDisplayAttribute");
static_assert(sizeof(SIK_UserStatsLibrary_GetAchievementDisplayAttribute) == 0x000030, "Wrong size on SIK_UserStatsLibrary_GetAchievementDisplayAttribute");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementDisplayAttribute, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetAchievementDisplayAttribute::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementDisplayAttribute, Key) == 0x000010, "Member 'SIK_UserStatsLibrary_GetAchievementDisplayAttribute::Key' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementDisplayAttribute, ReturnValue) == 0x000020, "Member 'SIK_UserStatsLibrary_GetAchievementDisplayAttribute::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementIcon
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetAchievementIcon final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_GetAchievementIcon) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetAchievementIcon");
static_assert(sizeof(SIK_UserStatsLibrary_GetAchievementIcon) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetAchievementIcon");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementIcon, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetAchievementIcon::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementIcon, Icon) == 0x000010, "Member 'SIK_UserStatsLibrary_GetAchievementIcon::Icon' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetAchievementName
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetAchievementName final
{
public:
	int32                                         AchievementIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_GetAchievementName) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetAchievementName");
static_assert(sizeof(SIK_UserStatsLibrary_GetAchievementName) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetAchievementName");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementName, AchievementIndex) == 0x000000, "Member 'SIK_UserStatsLibrary_GetAchievementName::AchievementIndex' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetAchievementName, ReturnValue) == 0x000008, "Member 'SIK_UserStatsLibrary_GetAchievementName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatFloat
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetGlobalStatFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetGlobalStatFloat) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetGlobalStatFloat");
static_assert(sizeof(SIK_UserStatsLibrary_GetGlobalStatFloat) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetGlobalStatFloat");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatFloat, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetGlobalStatFloat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatFloat, Data) == 0x000010, "Member 'SIK_UserStatsLibrary_GetGlobalStatFloat::Data' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatFloat, ReturnValue) == 0x000014, "Member 'SIK_UserStatsLibrary_GetGlobalStatFloat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatHistoryFloat
// 0x0028 (0x0028 - 0x0000)
struct SIK_UserStatsLibrary_GetGlobalStatHistoryFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Data;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetGlobalStatHistoryFloat) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetGlobalStatHistoryFloat");
static_assert(sizeof(SIK_UserStatsLibrary_GetGlobalStatHistoryFloat) == 0x000028, "Wrong size on SIK_UserStatsLibrary_GetGlobalStatHistoryFloat");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatHistoryFloat, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetGlobalStatHistoryFloat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatHistoryFloat, Data) == 0x000010, "Member 'SIK_UserStatsLibrary_GetGlobalStatHistoryFloat::Data' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatHistoryFloat, ReturnValue) == 0x000020, "Member 'SIK_UserStatsLibrary_GetGlobalStatHistoryFloat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatHistoryInt
// 0x0028 (0x0028 - 0x0000)
struct SIK_UserStatsLibrary_GetGlobalStatHistoryInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Data;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetGlobalStatHistoryInt) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetGlobalStatHistoryInt");
static_assert(sizeof(SIK_UserStatsLibrary_GetGlobalStatHistoryInt) == 0x000028, "Wrong size on SIK_UserStatsLibrary_GetGlobalStatHistoryInt");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatHistoryInt, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetGlobalStatHistoryInt::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatHistoryInt, Data) == 0x000010, "Member 'SIK_UserStatsLibrary_GetGlobalStatHistoryInt::Data' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatHistoryInt, ReturnValue) == 0x000020, "Member 'SIK_UserStatsLibrary_GetGlobalStatHistoryInt::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetGlobalStatInt
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserStatsLibrary_GetGlobalStatInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Data;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetGlobalStatInt) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetGlobalStatInt");
static_assert(sizeof(SIK_UserStatsLibrary_GetGlobalStatInt) == 0x000020, "Wrong size on SIK_UserStatsLibrary_GetGlobalStatInt");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatInt, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetGlobalStatInt::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatInt, Data) == 0x000010, "Member 'SIK_UserStatsLibrary_GetGlobalStatInt::Data' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetGlobalStatInt, ReturnValue) == 0x000018, "Member 'SIK_UserStatsLibrary_GetGlobalStatInt::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardDisplayType
// 0x0008 (0x0008 - 0x0000)
struct SIK_UserStatsLibrary_GetLeaderboardDisplayType final
{
public:
	int32                                         LeaderboardID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LeaderboardDisplayType                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetLeaderboardDisplayType) == 0x000004, "Wrong alignment on SIK_UserStatsLibrary_GetLeaderboardDisplayType");
static_assert(sizeof(SIK_UserStatsLibrary_GetLeaderboardDisplayType) == 0x000008, "Wrong size on SIK_UserStatsLibrary_GetLeaderboardDisplayType");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardDisplayType, LeaderboardID) == 0x000000, "Member 'SIK_UserStatsLibrary_GetLeaderboardDisplayType::LeaderboardID' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardDisplayType, ReturnValue) == 0x000004, "Member 'SIK_UserStatsLibrary_GetLeaderboardDisplayType::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardEntryCount
// 0x0008 (0x0008 - 0x0000)
struct SIK_UserStatsLibrary_GetLeaderboardEntryCount final
{
public:
	int32                                         LeaderboardID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_GetLeaderboardEntryCount) == 0x000004, "Wrong alignment on SIK_UserStatsLibrary_GetLeaderboardEntryCount");
static_assert(sizeof(SIK_UserStatsLibrary_GetLeaderboardEntryCount) == 0x000008, "Wrong size on SIK_UserStatsLibrary_GetLeaderboardEntryCount");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardEntryCount, LeaderboardID) == 0x000000, "Member 'SIK_UserStatsLibrary_GetLeaderboardEntryCount::LeaderboardID' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardEntryCount, ReturnValue) == 0x000004, "Member 'SIK_UserStatsLibrary_GetLeaderboardEntryCount::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardName
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetLeaderboardName final
{
public:
	int32                                         LeaderboardID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_GetLeaderboardName) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetLeaderboardName");
static_assert(sizeof(SIK_UserStatsLibrary_GetLeaderboardName) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetLeaderboardName");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardName, LeaderboardID) == 0x000000, "Member 'SIK_UserStatsLibrary_GetLeaderboardName::LeaderboardID' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardName, ReturnValue) == 0x000008, "Member 'SIK_UserStatsLibrary_GetLeaderboardName::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetLeaderboardSortMethod
// 0x0008 (0x0008 - 0x0000)
struct SIK_UserStatsLibrary_GetLeaderboardSortMethod final
{
public:
	int32                                         LeaderboardID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_LeaderboardSortMethod                    ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetLeaderboardSortMethod) == 0x000004, "Wrong alignment on SIK_UserStatsLibrary_GetLeaderboardSortMethod");
static_assert(sizeof(SIK_UserStatsLibrary_GetLeaderboardSortMethod) == 0x000008, "Wrong size on SIK_UserStatsLibrary_GetLeaderboardSortMethod");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardSortMethod, LeaderboardID) == 0x000000, "Member 'SIK_UserStatsLibrary_GetLeaderboardSortMethod::LeaderboardID' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetLeaderboardSortMethod, ReturnValue) == 0x000004, "Member 'SIK_UserStatsLibrary_GetLeaderboardSortMethod::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetMostAchievedAchievementInfo
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserStatsLibrary_GetMostAchievedAchievementInfo final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAchieved;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetMostAchievedAchievementInfo) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetMostAchievedAchievementInfo");
static_assert(sizeof(SIK_UserStatsLibrary_GetMostAchievedAchievementInfo) == 0x000020, "Wrong size on SIK_UserStatsLibrary_GetMostAchievedAchievementInfo");
static_assert(offsetof(SIK_UserStatsLibrary_GetMostAchievedAchievementInfo, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetMostAchievedAchievementInfo::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetMostAchievedAchievementInfo, Percent) == 0x000010, "Member 'SIK_UserStatsLibrary_GetMostAchievedAchievementInfo::Percent' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetMostAchievedAchievementInfo, bIsAchieved) == 0x000014, "Member 'SIK_UserStatsLibrary_GetMostAchievedAchievementInfo::bIsAchieved' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetMostAchievedAchievementInfo, ReturnValue) == 0x000018, "Member 'SIK_UserStatsLibrary_GetMostAchievedAchievementInfo::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetNextMostAchievedAchievementInfo
// 0x0028 (0x0028 - 0x0000)
struct SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo final
{
public:
	int32                                         IteratorPrevious;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AchievementName;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAchieved;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo");
static_assert(sizeof(SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo) == 0x000028, "Wrong size on SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo");
static_assert(offsetof(SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo, IteratorPrevious) == 0x000000, "Member 'SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo::IteratorPrevious' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo, AchievementName) == 0x000008, "Member 'SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo, Percent) == 0x000018, "Member 'SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo::Percent' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo, bIsAchieved) == 0x00001C, "Member 'SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo::bIsAchieved' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo, ReturnValue) == 0x000020, "Member 'SIK_UserStatsLibrary_GetNextMostAchievedAchievementInfo::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetNumOfAchievements
// 0x0004 (0x0004 - 0x0000)
struct SIK_UserStatsLibrary_GetNumOfAchievements final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_GetNumOfAchievements) == 0x000004, "Wrong alignment on SIK_UserStatsLibrary_GetNumOfAchievements");
static_assert(sizeof(SIK_UserStatsLibrary_GetNumOfAchievements) == 0x000004, "Wrong size on SIK_UserStatsLibrary_GetNumOfAchievements");
static_assert(offsetof(SIK_UserStatsLibrary_GetNumOfAchievements, ReturnValue) == 0x000000, "Member 'SIK_UserStatsLibrary_GetNumOfAchievements::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetStatFloat
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetStatFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetStatFloat) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetStatFloat");
static_assert(sizeof(SIK_UserStatsLibrary_GetStatFloat) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetStatFloat");
static_assert(offsetof(SIK_UserStatsLibrary_GetStatFloat, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetStatFloat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetStatFloat, Value) == 0x000010, "Member 'SIK_UserStatsLibrary_GetStatFloat::Value' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetStatFloat, ReturnValue) == 0x000014, "Member 'SIK_UserStatsLibrary_GetStatFloat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetStatInt
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_GetStatInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetStatInt) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetStatInt");
static_assert(sizeof(SIK_UserStatsLibrary_GetStatInt) == 0x000018, "Wrong size on SIK_UserStatsLibrary_GetStatInt");
static_assert(offsetof(SIK_UserStatsLibrary_GetStatInt, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_GetStatInt::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetStatInt, Value) == 0x000010, "Member 'SIK_UserStatsLibrary_GetStatInt::Value' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetStatInt, ReturnValue) == 0x000014, "Member 'SIK_UserStatsLibrary_GetStatInt::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserStatsLibrary_GetUserAchievement final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 AchievementName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetUserAchievement) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetUserAchievement");
static_assert(sizeof(SIK_UserStatsLibrary_GetUserAchievement) == 0x000020, "Wrong size on SIK_UserStatsLibrary_GetUserAchievement");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievement, SteamID) == 0x000000, "Member 'SIK_UserStatsLibrary_GetUserAchievement::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievement, AchievementName) == 0x000008, "Member 'SIK_UserStatsLibrary_GetUserAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievement, bAchieved) == 0x000018, "Member 'SIK_UserStatsLibrary_GetUserAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievement, ReturnValue) == 0x000019, "Member 'SIK_UserStatsLibrary_GetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.GetUserAchievementAndUnlockTime
// 0x0030 (0x0030 - 0x0000)
struct SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime final
{
public:
	struct FSIK_SteamId                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 AchievementName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UnlockTime;                                        // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime");
static_assert(sizeof(SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime) == 0x000030, "Wrong size on SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime, SteamID) == 0x000000, "Member 'SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime, AchievementName) == 0x000008, "Member 'SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime, bAchieved) == 0x000018, "Member 'SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime::bAchieved' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime, UnlockTime) == 0x000020, "Member 'SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime::UnlockTime' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime, ReturnValue) == 0x000028, "Member 'SIK_UserStatsLibrary_GetUserAchievementAndUnlockTime::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.IndicateAchievementProgress
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserStatsLibrary_IndicateAchievementProgress final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurProgress;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_IndicateAchievementProgress) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_IndicateAchievementProgress");
static_assert(sizeof(SIK_UserStatsLibrary_IndicateAchievementProgress) == 0x000020, "Wrong size on SIK_UserStatsLibrary_IndicateAchievementProgress");
static_assert(offsetof(SIK_UserStatsLibrary_IndicateAchievementProgress, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_IndicateAchievementProgress::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_IndicateAchievementProgress, CurProgress) == 0x000010, "Member 'SIK_UserStatsLibrary_IndicateAchievementProgress::CurProgress' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_IndicateAchievementProgress, MaxProgress) == 0x000014, "Member 'SIK_UserStatsLibrary_IndicateAchievementProgress::MaxProgress' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_IndicateAchievementProgress, ReturnValue) == 0x000018, "Member 'SIK_UserStatsLibrary_IndicateAchievementProgress::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.RequestCurrentStats
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserStatsLibrary_RequestCurrentStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_RequestCurrentStats) == 0x000001, "Wrong alignment on SIK_UserStatsLibrary_RequestCurrentStats");
static_assert(sizeof(SIK_UserStatsLibrary_RequestCurrentStats) == 0x000001, "Wrong size on SIK_UserStatsLibrary_RequestCurrentStats");
static_assert(offsetof(SIK_UserStatsLibrary_RequestCurrentStats, ReturnValue) == 0x000000, "Member 'SIK_UserStatsLibrary_RequestCurrentStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.ResetAllStats
// 0x0002 (0x0002 - 0x0000)
struct SIK_UserStatsLibrary_ResetAllStats final
{
public:
	bool                                          AchievementsToo;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_ResetAllStats) == 0x000001, "Wrong alignment on SIK_UserStatsLibrary_ResetAllStats");
static_assert(sizeof(SIK_UserStatsLibrary_ResetAllStats) == 0x000002, "Wrong size on SIK_UserStatsLibrary_ResetAllStats");
static_assert(offsetof(SIK_UserStatsLibrary_ResetAllStats, AchievementsToo) == 0x000000, "Member 'SIK_UserStatsLibrary_ResetAllStats::AchievementsToo' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_ResetAllStats, ReturnValue) == 0x000001, "Member 'SIK_UserStatsLibrary_ResetAllStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.SetAchievement
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_SetAchievement final
{
public:
	class FString                                 AchievementName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_SetAchievement) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_SetAchievement");
static_assert(sizeof(SIK_UserStatsLibrary_SetAchievement) == 0x000018, "Wrong size on SIK_UserStatsLibrary_SetAchievement");
static_assert(offsetof(SIK_UserStatsLibrary_SetAchievement, AchievementName) == 0x000000, "Member 'SIK_UserStatsLibrary_SetAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_SetAchievement, ReturnValue) == 0x000010, "Member 'SIK_UserStatsLibrary_SetAchievement::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.SetStatFloat
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_SetStatFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_SetStatFloat) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_SetStatFloat");
static_assert(sizeof(SIK_UserStatsLibrary_SetStatFloat) == 0x000018, "Wrong size on SIK_UserStatsLibrary_SetStatFloat");
static_assert(offsetof(SIK_UserStatsLibrary_SetStatFloat, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_SetStatFloat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_SetStatFloat, Value) == 0x000010, "Member 'SIK_UserStatsLibrary_SetStatFloat::Value' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_SetStatFloat, ReturnValue) == 0x000014, "Member 'SIK_UserStatsLibrary_SetStatFloat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.SetStatInt
// 0x0018 (0x0018 - 0x0000)
struct SIK_UserStatsLibrary_SetStatInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_SetStatInt) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_SetStatInt");
static_assert(sizeof(SIK_UserStatsLibrary_SetStatInt) == 0x000018, "Wrong size on SIK_UserStatsLibrary_SetStatInt");
static_assert(offsetof(SIK_UserStatsLibrary_SetStatInt, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_SetStatInt::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_SetStatInt, Value) == 0x000010, "Member 'SIK_UserStatsLibrary_SetStatInt::Value' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_SetStatInt, ReturnValue) == 0x000014, "Member 'SIK_UserStatsLibrary_SetStatInt::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.StoreStats
// 0x0001 (0x0001 - 0x0000)
struct SIK_UserStatsLibrary_StoreStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UserStatsLibrary_StoreStats) == 0x000001, "Wrong alignment on SIK_UserStatsLibrary_StoreStats");
static_assert(sizeof(SIK_UserStatsLibrary_StoreStats) == 0x000001, "Wrong size on SIK_UserStatsLibrary_StoreStats");
static_assert(offsetof(SIK_UserStatsLibrary_StoreStats, ReturnValue) == 0x000000, "Member 'SIK_UserStatsLibrary_StoreStats::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UserStatsLibrary.UpdateAvgRateStat
// 0x0020 (0x0020 - 0x0000)
struct SIK_UserStatsLibrary_UpdateAvgRateStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UserStatsLibrary_UpdateAvgRateStat) == 0x000008, "Wrong alignment on SIK_UserStatsLibrary_UpdateAvgRateStat");
static_assert(sizeof(SIK_UserStatsLibrary_UpdateAvgRateStat) == 0x000020, "Wrong size on SIK_UserStatsLibrary_UpdateAvgRateStat");
static_assert(offsetof(SIK_UserStatsLibrary_UpdateAvgRateStat, StatName) == 0x000000, "Member 'SIK_UserStatsLibrary_UpdateAvgRateStat::StatName' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_UpdateAvgRateStat, Value) == 0x000010, "Member 'SIK_UserStatsLibrary_UpdateAvgRateStat::Value' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_UpdateAvgRateStat, Rate) == 0x000014, "Member 'SIK_UserStatsLibrary_UpdateAvgRateStat::Rate' has a wrong offset!");
static_assert(offsetof(SIK_UserStatsLibrary_UpdateAvgRateStat, ReturnValue) == 0x000018, "Member 'SIK_UserStatsLibrary_UpdateAvgRateStat::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetAppID
// 0x0004 (0x0004 - 0x0000)
struct SIK_UtilsLibrary_GetAppID final
{
public:
	struct FSIK_AppId                             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetAppID) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_GetAppID");
static_assert(sizeof(SIK_UtilsLibrary_GetAppID) == 0x000004, "Wrong size on SIK_UtilsLibrary_GetAppID");
static_assert(offsetof(SIK_UtilsLibrary_GetAppID, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetAppID::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetCurrentBatteryPower
// 0x0004 (0x0004 - 0x0000)
struct SIK_UtilsLibrary_GetCurrentBatteryPower final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetCurrentBatteryPower) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_GetCurrentBatteryPower");
static_assert(sizeof(SIK_UtilsLibrary_GetCurrentBatteryPower) == 0x000004, "Wrong size on SIK_UtilsLibrary_GetCurrentBatteryPower");
static_assert(offsetof(SIK_UtilsLibrary_GetCurrentBatteryPower, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetCurrentBatteryPower::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetEnteredGamepadTextInput
// 0x0010 (0x0010 - 0x0000)
struct SIK_UtilsLibrary_GetEnteredGamepadTextInput final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetEnteredGamepadTextInput) == 0x000008, "Wrong alignment on SIK_UtilsLibrary_GetEnteredGamepadTextInput");
static_assert(sizeof(SIK_UtilsLibrary_GetEnteredGamepadTextInput) == 0x000010, "Wrong size on SIK_UtilsLibrary_GetEnteredGamepadTextInput");
static_assert(offsetof(SIK_UtilsLibrary_GetEnteredGamepadTextInput, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetEnteredGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetEnteredGamepadTextLength
// 0x0004 (0x0004 - 0x0000)
struct SIK_UtilsLibrary_GetEnteredGamepadTextLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetEnteredGamepadTextLength) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_GetEnteredGamepadTextLength");
static_assert(sizeof(SIK_UtilsLibrary_GetEnteredGamepadTextLength) == 0x000004, "Wrong size on SIK_UtilsLibrary_GetEnteredGamepadTextLength");
static_assert(offsetof(SIK_UtilsLibrary_GetEnteredGamepadTextLength, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetEnteredGamepadTextLength::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetImageRGBA
// 0x0028 (0x0028 - 0x0000)
struct SIK_UtilsLibrary_GetImageRGBA final
{
public:
	int32                                         Image;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutWidth;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHeight;                                         // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UtilsLibrary_GetImageRGBA) == 0x000008, "Wrong alignment on SIK_UtilsLibrary_GetImageRGBA");
static_assert(sizeof(SIK_UtilsLibrary_GetImageRGBA) == 0x000028, "Wrong size on SIK_UtilsLibrary_GetImageRGBA");
static_assert(offsetof(SIK_UtilsLibrary_GetImageRGBA, Image) == 0x000000, "Member 'SIK_UtilsLibrary_GetImageRGBA::Image' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_GetImageRGBA, OutData) == 0x000008, "Member 'SIK_UtilsLibrary_GetImageRGBA::OutData' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_GetImageRGBA, OutWidth) == 0x000018, "Member 'SIK_UtilsLibrary_GetImageRGBA::OutWidth' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_GetImageRGBA, OutHeight) == 0x00001C, "Member 'SIK_UtilsLibrary_GetImageRGBA::OutHeight' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_GetImageRGBA, ReturnValue) == 0x000020, "Member 'SIK_UtilsLibrary_GetImageRGBA::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetIPCountry
// 0x0010 (0x0010 - 0x0000)
struct SIK_UtilsLibrary_GetIPCountry final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetIPCountry) == 0x000008, "Wrong alignment on SIK_UtilsLibrary_GetIPCountry");
static_assert(sizeof(SIK_UtilsLibrary_GetIPCountry) == 0x000010, "Wrong size on SIK_UtilsLibrary_GetIPCountry");
static_assert(offsetof(SIK_UtilsLibrary_GetIPCountry, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetIPCountry::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetSecondsSinceAppActive
// 0x0004 (0x0004 - 0x0000)
struct SIK_UtilsLibrary_GetSecondsSinceAppActive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetSecondsSinceAppActive) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_GetSecondsSinceAppActive");
static_assert(sizeof(SIK_UtilsLibrary_GetSecondsSinceAppActive) == 0x000004, "Wrong size on SIK_UtilsLibrary_GetSecondsSinceAppActive");
static_assert(offsetof(SIK_UtilsLibrary_GetSecondsSinceAppActive, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetSecondsSinceAppActive::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetSecondsSinceComputerActive
// 0x0004 (0x0004 - 0x0000)
struct SIK_UtilsLibrary_GetSecondsSinceComputerActive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetSecondsSinceComputerActive) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_GetSecondsSinceComputerActive");
static_assert(sizeof(SIK_UtilsLibrary_GetSecondsSinceComputerActive) == 0x000004, "Wrong size on SIK_UtilsLibrary_GetSecondsSinceComputerActive");
static_assert(offsetof(SIK_UtilsLibrary_GetSecondsSinceComputerActive, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetSecondsSinceComputerActive::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetServerRealTime
// 0x0004 (0x0004 - 0x0000)
struct SIK_UtilsLibrary_GetServerRealTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetServerRealTime) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_GetServerRealTime");
static_assert(sizeof(SIK_UtilsLibrary_GetServerRealTime) == 0x000004, "Wrong size on SIK_UtilsLibrary_GetServerRealTime");
static_assert(offsetof(SIK_UtilsLibrary_GetServerRealTime, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetServerRealTime::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.GetSteamUILanguage
// 0x0010 (0x0010 - 0x0000)
struct SIK_UtilsLibrary_GetSteamUILanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_GetSteamUILanguage) == 0x000008, "Wrong alignment on SIK_UtilsLibrary_GetSteamUILanguage");
static_assert(sizeof(SIK_UtilsLibrary_GetSteamUILanguage) == 0x000010, "Wrong size on SIK_UtilsLibrary_GetSteamUILanguage");
static_assert(offsetof(SIK_UtilsLibrary_GetSteamUILanguage, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_GetSteamUILanguage::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.InitFilterText
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_InitFilterText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_InitFilterText) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_InitFilterText");
static_assert(sizeof(SIK_UtilsLibrary_InitFilterText) == 0x000001, "Wrong size on SIK_UtilsLibrary_InitFilterText");
static_assert(offsetof(SIK_UtilsLibrary_InitFilterText, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_InitFilterText::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.IsOverlayEnabled
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_IsOverlayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_IsOverlayEnabled) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_IsOverlayEnabled");
static_assert(sizeof(SIK_UtilsLibrary_IsOverlayEnabled) == 0x000001, "Wrong size on SIK_UtilsLibrary_IsOverlayEnabled");
static_assert(offsetof(SIK_UtilsLibrary_IsOverlayEnabled, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_IsOverlayEnabled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamChinaLauncher
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_IsSteamChinaLauncher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_IsSteamChinaLauncher) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_IsSteamChinaLauncher");
static_assert(sizeof(SIK_UtilsLibrary_IsSteamChinaLauncher) == 0x000001, "Wrong size on SIK_UtilsLibrary_IsSteamChinaLauncher");
static_assert(offsetof(SIK_UtilsLibrary_IsSteamChinaLauncher, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_IsSteamChinaLauncher::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamInBigPictureMode
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_IsSteamInBigPictureMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_IsSteamInBigPictureMode) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_IsSteamInBigPictureMode");
static_assert(sizeof(SIK_UtilsLibrary_IsSteamInBigPictureMode) == 0x000001, "Wrong size on SIK_UtilsLibrary_IsSteamInBigPictureMode");
static_assert(offsetof(SIK_UtilsLibrary_IsSteamInBigPictureMode, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_IsSteamInBigPictureMode::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamRunningInVR
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_IsSteamRunningInVR final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_IsSteamRunningInVR) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_IsSteamRunningInVR");
static_assert(sizeof(SIK_UtilsLibrary_IsSteamRunningInVR) == 0x000001, "Wrong size on SIK_UtilsLibrary_IsSteamRunningInVR");
static_assert(offsetof(SIK_UtilsLibrary_IsSteamRunningInVR, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_IsSteamRunningInVR::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.IsSteamRunningOnSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_IsSteamRunningOnSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_IsSteamRunningOnSteamDeck) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_IsSteamRunningOnSteamDeck");
static_assert(sizeof(SIK_UtilsLibrary_IsSteamRunningOnSteamDeck) == 0x000001, "Wrong size on SIK_UtilsLibrary_IsSteamRunningOnSteamDeck");
static_assert(offsetof(SIK_UtilsLibrary_IsSteamRunningOnSteamDeck, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_IsSteamRunningOnSteamDeck::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.IsVRHeadsetStreamingEnabled
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled");
static_assert(sizeof(SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled) == 0x000001, "Wrong size on SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled");
static_assert(offsetof(SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_IsVRHeadsetStreamingEnabled::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.OverlayNeedsPresent
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_OverlayNeedsPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_OverlayNeedsPresent) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_OverlayNeedsPresent");
static_assert(sizeof(SIK_UtilsLibrary_OverlayNeedsPresent) == 0x000001, "Wrong size on SIK_UtilsLibrary_OverlayNeedsPresent");
static_assert(offsetof(SIK_UtilsLibrary_OverlayNeedsPresent, ReturnValue) == 0x000000, "Member 'SIK_UtilsLibrary_OverlayNeedsPresent::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.SetGameLauncherMode
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_SetGameLauncherMode final
{
public:
	bool                                          bLauncherMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_SetGameLauncherMode) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_SetGameLauncherMode");
static_assert(sizeof(SIK_UtilsLibrary_SetGameLauncherMode) == 0x000001, "Wrong size on SIK_UtilsLibrary_SetGameLauncherMode");
static_assert(offsetof(SIK_UtilsLibrary_SetGameLauncherMode, bLauncherMode) == 0x000000, "Member 'SIK_UtilsLibrary_SetGameLauncherMode::bLauncherMode' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.SetOverlayNotificationInset
// 0x0008 (0x0008 - 0x0000)
struct SIK_UtilsLibrary_SetOverlayNotificationInset final
{
public:
	int32                                         HorizontalInset;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerticalInset;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_SetOverlayNotificationInset) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_SetOverlayNotificationInset");
static_assert(sizeof(SIK_UtilsLibrary_SetOverlayNotificationInset) == 0x000008, "Wrong size on SIK_UtilsLibrary_SetOverlayNotificationInset");
static_assert(offsetof(SIK_UtilsLibrary_SetOverlayNotificationInset, HorizontalInset) == 0x000000, "Member 'SIK_UtilsLibrary_SetOverlayNotificationInset::HorizontalInset' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_SetOverlayNotificationInset, VerticalInset) == 0x000004, "Member 'SIK_UtilsLibrary_SetOverlayNotificationInset::VerticalInset' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.SetOverlayNotificationPosition
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_SetOverlayNotificationPosition final
{
public:
	ESIK_NotificationPosition                     NotificationPosition;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_SetOverlayNotificationPosition) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_SetOverlayNotificationPosition");
static_assert(sizeof(SIK_UtilsLibrary_SetOverlayNotificationPosition) == 0x000001, "Wrong size on SIK_UtilsLibrary_SetOverlayNotificationPosition");
static_assert(offsetof(SIK_UtilsLibrary_SetOverlayNotificationPosition, NotificationPosition) == 0x000000, "Member 'SIK_UtilsLibrary_SetOverlayNotificationPosition::NotificationPosition' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.SetVRHeadsetStreamingEnabled
// 0x0001 (0x0001 - 0x0000)
struct SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled) == 0x000001, "Wrong alignment on SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled");
static_assert(sizeof(SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled) == 0x000001, "Wrong size on SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled");
static_assert(offsetof(SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled, bEnabled) == 0x000000, "Member 'SIK_UtilsLibrary_SetVRHeadsetStreamingEnabled::bEnabled' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.ShowFloatingGamepadTextInput
// 0x0018 (0x0018 - 0x0000)
struct SIK_UtilsLibrary_ShowFloatingGamepadTextInput final
{
public:
	ESIK_EFloatingGamepadTextInputMode            KeyboardMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextFieldXPosition;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextFieldYPosition;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextFieldWidth;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextFieldHeight;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput) == 0x000004, "Wrong alignment on SIK_UtilsLibrary_ShowFloatingGamepadTextInput");
static_assert(sizeof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput) == 0x000018, "Wrong size on SIK_UtilsLibrary_ShowFloatingGamepadTextInput");
static_assert(offsetof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput, KeyboardMode) == 0x000000, "Member 'SIK_UtilsLibrary_ShowFloatingGamepadTextInput::KeyboardMode' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput, TextFieldXPosition) == 0x000004, "Member 'SIK_UtilsLibrary_ShowFloatingGamepadTextInput::TextFieldXPosition' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput, TextFieldYPosition) == 0x000008, "Member 'SIK_UtilsLibrary_ShowFloatingGamepadTextInput::TextFieldYPosition' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput, TextFieldWidth) == 0x00000C, "Member 'SIK_UtilsLibrary_ShowFloatingGamepadTextInput::TextFieldWidth' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput, TextFieldHeight) == 0x000010, "Member 'SIK_UtilsLibrary_ShowFloatingGamepadTextInput::TextFieldHeight' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowFloatingGamepadTextInput, ReturnValue) == 0x000014, "Member 'SIK_UtilsLibrary_ShowFloatingGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_UtilsLibrary.ShowGamepadTextInput
// 0x0038 (0x0038 - 0x0000)
struct SIK_UtilsLibrary_ShowGamepadTextInput final
{
public:
	ESIK_EGamepadTextInputMode                    InputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_EGamepadTextInputLineMode                LineInputMode;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharMax;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExistingText;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_UtilsLibrary_ShowGamepadTextInput) == 0x000008, "Wrong alignment on SIK_UtilsLibrary_ShowGamepadTextInput");
static_assert(sizeof(SIK_UtilsLibrary_ShowGamepadTextInput) == 0x000038, "Wrong size on SIK_UtilsLibrary_ShowGamepadTextInput");
static_assert(offsetof(SIK_UtilsLibrary_ShowGamepadTextInput, InputMode) == 0x000000, "Member 'SIK_UtilsLibrary_ShowGamepadTextInput::InputMode' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowGamepadTextInput, LineInputMode) == 0x000001, "Member 'SIK_UtilsLibrary_ShowGamepadTextInput::LineInputMode' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowGamepadTextInput, Description) == 0x000008, "Member 'SIK_UtilsLibrary_ShowGamepadTextInput::Description' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowGamepadTextInput, CharMax) == 0x000018, "Member 'SIK_UtilsLibrary_ShowGamepadTextInput::CharMax' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowGamepadTextInput, ExistingText) == 0x000020, "Member 'SIK_UtilsLibrary_ShowGamepadTextInput::ExistingText' has a wrong offset!");
static_assert(offsetof(SIK_UtilsLibrary_ShowGamepadTextInput, ReturnValue) == 0x000030, "Member 'SIK_UtilsLibrary_ShowGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_VideoLibrary.GetOPFSettings
// 0x0004 (0x0004 - 0x0000)
struct SIK_VideoLibrary_GetOPFSettings final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_VideoLibrary_GetOPFSettings) == 0x000004, "Wrong alignment on SIK_VideoLibrary_GetOPFSettings");
static_assert(sizeof(SIK_VideoLibrary_GetOPFSettings) == 0x000004, "Wrong size on SIK_VideoLibrary_GetOPFSettings");
static_assert(offsetof(SIK_VideoLibrary_GetOPFSettings, AppID) == 0x000000, "Member 'SIK_VideoLibrary_GetOPFSettings::AppID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_VideoLibrary.GetOPFStringForApp
// 0x0020 (0x0020 - 0x0000)
struct SIK_VideoLibrary_GetOPFStringForApp final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutString;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_VideoLibrary_GetOPFStringForApp) == 0x000008, "Wrong alignment on SIK_VideoLibrary_GetOPFStringForApp");
static_assert(sizeof(SIK_VideoLibrary_GetOPFStringForApp) == 0x000020, "Wrong size on SIK_VideoLibrary_GetOPFStringForApp");
static_assert(offsetof(SIK_VideoLibrary_GetOPFStringForApp, AppID) == 0x000000, "Member 'SIK_VideoLibrary_GetOPFStringForApp::AppID' has a wrong offset!");
static_assert(offsetof(SIK_VideoLibrary_GetOPFStringForApp, OutString) == 0x000008, "Member 'SIK_VideoLibrary_GetOPFStringForApp::OutString' has a wrong offset!");
static_assert(offsetof(SIK_VideoLibrary_GetOPFStringForApp, ReturnValue) == 0x000018, "Member 'SIK_VideoLibrary_GetOPFStringForApp::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_VideoLibrary.GetVideoURL
// 0x0004 (0x0004 - 0x0000)
struct SIK_VideoLibrary_GetVideoURL final
{
public:
	struct FSIK_AppId                             AppID;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_VideoLibrary_GetVideoURL) == 0x000004, "Wrong alignment on SIK_VideoLibrary_GetVideoURL");
static_assert(sizeof(SIK_VideoLibrary_GetVideoURL) == 0x000004, "Wrong size on SIK_VideoLibrary_GetVideoURL");
static_assert(offsetof(SIK_VideoLibrary_GetVideoURL, AppID) == 0x000000, "Member 'SIK_VideoLibrary_GetVideoURL::AppID' has a wrong offset!");

// Function SteamIntegrationKit.SIK_VideoLibrary.IsBroadcasting
// 0x0008 (0x0008 - 0x0000)
struct SIK_VideoLibrary_IsBroadcasting final
{
public:
	int32                                         OutNumViewers;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SIK_VideoLibrary_IsBroadcasting) == 0x000004, "Wrong alignment on SIK_VideoLibrary_IsBroadcasting");
static_assert(sizeof(SIK_VideoLibrary_IsBroadcasting) == 0x000008, "Wrong size on SIK_VideoLibrary_IsBroadcasting");
static_assert(offsetof(SIK_VideoLibrary_IsBroadcasting, OutNumViewers) == 0x000000, "Member 'SIK_VideoLibrary_IsBroadcasting::OutNumViewers' has a wrong offset!");
static_assert(offsetof(SIK_VideoLibrary_IsBroadcasting, ReturnValue) == 0x000004, "Member 'SIK_VideoLibrary_IsBroadcasting::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_WebApi_AuthenticateUser.AuthenticateUser
// 0x0038 (0x0038 - 0x0000)
struct SIK_WebApi_AuthenticateUser_AuthenticateUser final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionKey;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedLoginKey;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_WebApi_AuthenticateUser*           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_WebApi_AuthenticateUser_AuthenticateUser) == 0x000008, "Wrong alignment on SIK_WebApi_AuthenticateUser_AuthenticateUser");
static_assert(sizeof(SIK_WebApi_AuthenticateUser_AuthenticateUser) == 0x000038, "Wrong size on SIK_WebApi_AuthenticateUser_AuthenticateUser");
static_assert(offsetof(SIK_WebApi_AuthenticateUser_AuthenticateUser, SteamID) == 0x000000, "Member 'SIK_WebApi_AuthenticateUser_AuthenticateUser::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_WebApi_AuthenticateUser_AuthenticateUser, SessionKey) == 0x000010, "Member 'SIK_WebApi_AuthenticateUser_AuthenticateUser::SessionKey' has a wrong offset!");
static_assert(offsetof(SIK_WebApi_AuthenticateUser_AuthenticateUser, EncryptedLoginKey) == 0x000020, "Member 'SIK_WebApi_AuthenticateUser_AuthenticateUser::EncryptedLoginKey' has a wrong offset!");
static_assert(offsetof(SIK_WebApi_AuthenticateUser_AuthenticateUser, ReturnValue) == 0x000030, "Member 'SIK_WebApi_AuthenticateUser_AuthenticateUser::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SIK_WebApi_GetFriendList.GetFriendList
// 0x0038 (0x0038 - 0x0000)
struct SIK_WebApi_GetFriendList_GetFriendList final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Relationship;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USIK_WebApi_GetFriendList*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SIK_WebApi_GetFriendList_GetFriendList) == 0x000008, "Wrong alignment on SIK_WebApi_GetFriendList_GetFriendList");
static_assert(sizeof(SIK_WebApi_GetFriendList_GetFriendList) == 0x000038, "Wrong size on SIK_WebApi_GetFriendList_GetFriendList");
static_assert(offsetof(SIK_WebApi_GetFriendList_GetFriendList, Key) == 0x000000, "Member 'SIK_WebApi_GetFriendList_GetFriendList::Key' has a wrong offset!");
static_assert(offsetof(SIK_WebApi_GetFriendList_GetFriendList, SteamID) == 0x000010, "Member 'SIK_WebApi_GetFriendList_GetFriendList::SteamID' has a wrong offset!");
static_assert(offsetof(SIK_WebApi_GetFriendList_GetFriendList, Relationship) == 0x000020, "Member 'SIK_WebApi_GetFriendList_GetFriendList::Relationship' has a wrong offset!");
static_assert(offsetof(SIK_WebApi_GetFriendList_GetFriendList, ReturnValue) == 0x000030, "Member 'SIK_WebApi_GetFriendList_GetFriendList::ReturnValue' has a wrong offset!");

// Function SteamIntegrationKit.SteamWebApi.AuthenticateUser
// 0x0040 (0x0040 - 0x0000)
struct SteamWebApi_AuthenticateUser final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SessionKey;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 EncryptedLoginKey;                                 // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, const class FString& Response)> OnComplete;                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamWebApi_AuthenticateUser) == 0x000008, "Wrong alignment on SteamWebApi_AuthenticateUser");
static_assert(sizeof(SteamWebApi_AuthenticateUser) == 0x000040, "Wrong size on SteamWebApi_AuthenticateUser");
static_assert(offsetof(SteamWebApi_AuthenticateUser, SteamID) == 0x000000, "Member 'SteamWebApi_AuthenticateUser::SteamID' has a wrong offset!");
static_assert(offsetof(SteamWebApi_AuthenticateUser, SessionKey) == 0x000010, "Member 'SteamWebApi_AuthenticateUser::SessionKey' has a wrong offset!");
static_assert(offsetof(SteamWebApi_AuthenticateUser, EncryptedLoginKey) == 0x000020, "Member 'SteamWebApi_AuthenticateUser::EncryptedLoginKey' has a wrong offset!");
static_assert(offsetof(SteamWebApi_AuthenticateUser, OnComplete) == 0x000030, "Member 'SteamWebApi_AuthenticateUser::OnComplete' has a wrong offset!");

// Function SteamIntegrationKit.SteamWebApi.AuthenticateUserTicket
// 0x0050 (0x0050 - 0x0000)
struct SteamWebApi_AuthenticateUserTicket final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppID;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ticket;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Identity;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, const class FString& Response)> OnComplete;                        // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamWebApi_AuthenticateUserTicket) == 0x000008, "Wrong alignment on SteamWebApi_AuthenticateUserTicket");
static_assert(sizeof(SteamWebApi_AuthenticateUserTicket) == 0x000050, "Wrong size on SteamWebApi_AuthenticateUserTicket");
static_assert(offsetof(SteamWebApi_AuthenticateUserTicket, Key) == 0x000000, "Member 'SteamWebApi_AuthenticateUserTicket::Key' has a wrong offset!");
static_assert(offsetof(SteamWebApi_AuthenticateUserTicket, AppID) == 0x000010, "Member 'SteamWebApi_AuthenticateUserTicket::AppID' has a wrong offset!");
static_assert(offsetof(SteamWebApi_AuthenticateUserTicket, Ticket) == 0x000020, "Member 'SteamWebApi_AuthenticateUserTicket::Ticket' has a wrong offset!");
static_assert(offsetof(SteamWebApi_AuthenticateUserTicket, Identity) == 0x000030, "Member 'SteamWebApi_AuthenticateUserTicket::Identity' has a wrong offset!");
static_assert(offsetof(SteamWebApi_AuthenticateUserTicket, OnComplete) == 0x000040, "Member 'SteamWebApi_AuthenticateUserTicket::OnComplete' has a wrong offset!");

}

