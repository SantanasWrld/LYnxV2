#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPPlayerController

#include "Basic.hpp"

#include "BP_UPPlayerController_classes.hpp"
#include "BP_UPPlayerController_parameters.hpp"


namespace SDK
{

// Function BP_UPPlayerController.BP_UPPlayerController_C.AddHudWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WidgetClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget**                     Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::AddHudWidget(class UClass* WidgetClass, int32 Priority, class UUserWidget** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "AddHudWidget");

	Params::BP_UPPlayerController_C_AddHudWidget Parms{};

	Parms.WidgetClass = WidgetClass;
	Parms.Priority = Priority;

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.AskForCapture
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::AskForCapture(int32 CaptureId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "AskForCapture");

	Params::BP_UPPlayerController_C_AskForCapture Parms{};

	Parms.CaptureId = CaptureId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.CheckSteamId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64*                                  SteamID_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::CheckSteamId(bool* IsValid, int64* SteamID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "CheckSteamId");

	Params::BP_UPPlayerController_C_CheckSteamId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (SteamID_0 != nullptr)
		*SteamID_0 = Parms.SteamID_0;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.CreateCaptureRequest
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CaptureId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::CreateCaptureRequest(int32 CaptureId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "CreateCaptureRequest");

	Params::BP_UPPlayerController_C_CreateCaptureRequest Parms{};

	Parms.CaptureId = CaptureId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.EnsurePlayerSpawn
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::EnsurePlayerSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "EnsurePlayerSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.ExecuteUbergraph_BP_UPPlayerController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::ExecuteUbergraph_BP_UPPlayerController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "ExecuteUbergraph_BP_UPPlayerController");

	Params::BP_UPPlayerController_C_ExecuteUbergraph_BP_UPPlayerController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.FetchSteamId (Client)
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::FetchSteamId__Client_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "FetchSteamId (Client)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.FindDeadPlayerWithId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_UPPlayerCharacter_C**         Player_0                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::FindDeadPlayerWithId(int64 SteamID_0, class ABP_UPPlayerCharacter_C** Player_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "FindDeadPlayerWithId");

	Params::BP_UPPlayerController_C_FindDeadPlayerWithId Parms{};

	Parms.SteamID_0 = SteamID_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Player_0 != nullptr)
		*Player_0 = Parms.Player_0;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.FixDeadPlayerReconnecting
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UPPlayerCharacter_C*          DeadPlayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::FixDeadPlayerReconnecting(class ABP_UPPlayerCharacter_C* DeadPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "FixDeadPlayerReconnecting");

	Params::BP_UPPlayerController_C_FixDeadPlayerReconnecting Parms{};

	Parms.DeadPlayer = DeadPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.ForceDisconnect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::ForceDisconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "ForceDisconnect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.GetCameraShakeIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::GetCameraShakeIndex(int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "GetCameraShakeIndex");

	Params::BP_UPPlayerController_C_GetCameraShakeIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.GetHudParent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_HudParent_C**                  HudParent_0                                            (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::GetHudParent(class UW_HudParent_C** HudParent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "GetHudParent");

	Params::BP_UPPlayerController_C_GetHudParent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HudParent_0 != nullptr)
		*HudParent_0 = Parms.HudParent_0;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.GetInputKey
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInputAction*                     InputAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString*                          Key                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class UTexture2D**                      Icon                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::GetInputKey(class UInputAction* InputAction, class FString* Key, class UTexture2D** Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "GetInputKey");

	Params::BP_UPPlayerController_C_GetInputKey Parms{};

	Parms.InputAction = InputAction;

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = std::move(Parms.Key);

	if (Icon != nullptr)
		*Icon = Parms.Icon;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.GetSteamID
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64*                                  SteamID_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::GetSteamID(bool* IsValid, int64* SteamID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "GetSteamID");

	Params::BP_UPPlayerController_C_GetSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (SteamID_0 != nullptr)
		*SteamID_0 = Parms.SteamID_0;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InitAspectRatio
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::InitAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InitAspectRatio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InitGamepadFocusHighlight
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::InitGamepadFocusHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InitGamepadFocusHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InitMainMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::InitMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InitMainMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InitPushToTalk
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::InitPushToTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InitPushToTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InitUI
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::InitUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InitUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_A_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_A_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_A_K2Node_InputKeyEvent_4");

	Params::BP_UPPlayerController_C_InpActEvt_A_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_D_K2Node_InputKeyEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_D_K2Node_InputKeyEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_D_K2Node_InputKeyEvent_6");

	Params::BP_UPPlayerController_C_InpActEvt_D_K2Node_InputKeyEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Down_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Down_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Down_K2Node_InputKeyEvent_1");

	Params::BP_UPPlayerController_C_InpActEvt_Down_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_15
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_15");

	Params::BP_UPPlayerController_C_InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_13
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_13");

	Params::BP_UPPlayerController_C_InpActEvt_Gamepad_DPad_Left_K2Node_InputKeyEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Gamepad_DPad_Right_K2Node_InputKeyEvent_12
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Gamepad_DPad_Right_K2Node_InputKeyEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Gamepad_DPad_Right_K2Node_InputKeyEvent_12");

	Params::BP_UPPlayerController_C_InpActEvt_Gamepad_DPad_Right_K2Node_InputKeyEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_14
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_14");

	Params::BP_UPPlayerController_C_InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_IA_MainMenu_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_IA_MainMenu_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_IA_MainMenu_K2Node_EnhancedInputActionEvent_0");

	Params::BP_UPPlayerController_C_InpActEvt_IA_MainMenu_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_IA_MuteMicrophone_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_IA_MuteMicrophone_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_IA_MuteMicrophone_K2Node_EnhancedInputActionEvent_1");

	Params::BP_UPPlayerController_C_InpActEvt_IA_MuteMicrophone_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_2");

	Params::BP_UPPlayerController_C_InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_2 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_3");

	Params::BP_UPPlayerController_C_InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_3 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_4");

	Params::BP_UPPlayerController_C_InpActEvt_IA_PushToTalk_K2Node_EnhancedInputActionEvent_4 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Left_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Left_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Left_K2Node_InputKeyEvent_2");

	Params::BP_UPPlayerController_C_InpActEvt_Left_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_11
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_11");

	Params::BP_UPPlayerController_C_InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Q_K2Node_InputKeyEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Q_K2Node_InputKeyEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Q_K2Node_InputKeyEvent_8");

	Params::BP_UPPlayerController_C_InpActEvt_Q_K2Node_InputKeyEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Right_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Right_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Right_K2Node_InputKeyEvent_0");

	Params::BP_UPPlayerController_C_InpActEvt_Right_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_RightMouseButton_K2Node_InputKeyEvent_10
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_RightMouseButton_K2Node_InputKeyEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_RightMouseButton_K2Node_InputKeyEvent_10");

	Params::BP_UPPlayerController_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_S_K2Node_InputKeyEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_S_K2Node_InputKeyEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_S_K2Node_InputKeyEvent_7");

	Params::BP_UPPlayerController_C_InpActEvt_S_K2Node_InputKeyEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Up_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Up_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Up_K2Node_InputKeyEvent_3");

	Params::BP_UPPlayerController_C_InpActEvt_Up_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_W_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_W_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_W_K2Node_InputKeyEvent_5");

	Params::BP_UPPlayerController_C_InpActEvt_W_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpActEvt_Z_K2Node_InputKeyEvent_9
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpActEvt_Z_K2Node_InputKeyEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpActEvt_Z_K2Node_InputKeyEvent_9");

	Params::BP_UPPlayerController_C_InpActEvt_Z_K2Node_InputKeyEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.InpAxisKeyEvt_Gamepad_Left2D_K2Node_InputVectorAxisEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FVector&                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::InpAxisKeyEvt_Gamepad_Left2D_K2Node_InputVectorAxisEvent_1(const struct FVector& AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "InpAxisKeyEvt_Gamepad_Left2D_K2Node_InputVectorAxisEvent_1");

	Params::BP_UPPlayerController_C_InpAxisKeyEvt_Gamepad_Left2D_K2Node_InputVectorAxisEvent_1 Parms{};

	Parms.AxisValue = std::move(AxisValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.IsPressingGamepad
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInputAction*                     InputAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::IsPressingGamepad(class UInputAction* InputAction, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "IsPressingGamepad");

	Params::BP_UPPlayerController_C_IsPressingGamepad Parms{};

	Parms.InputAction = InputAction;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.ItemsRecoveredNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::ItemsRecoveredNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "ItemsRecoveredNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.PlayerJoinedNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::PlayerJoinedNotification(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "PlayerJoinedNotification");

	Params::BP_UPPlayerController_C_PlayerJoinedNotification Parms{};

	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.PlayerLeftNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::PlayerLeftNotification(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "PlayerLeftNotification");

	Params::BP_UPPlayerController_C_PlayerLeftNotification Parms{};

	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.PlayerSettingsChanged
// (BlueprintCallable, BlueprintEvent)

void ABP_UPPlayerController_C::PlayerSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "PlayerSettingsChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_UPPlayerController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.ReceivePossess
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            PossessedPawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::ReceivePossess(class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "ReceivePossess");

	Params::BP_UPPlayerController_C_ReceivePossess Parms{};

	Parms.PossessedPawn = PossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.SetMainMenuVisibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::SetMainMenuVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "SetMainMenuVisibility");

	Params::BP_UPPlayerController_C_SetMainMenuVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.SetMappingContextEnabled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UInputMappingContext*       MappingContext                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::SetMappingContextEnabled(const class UInputMappingContext* MappingContext, int32 Priority, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "SetMappingContextEnabled");

	Params::BP_UPPlayerController_C_SetMappingContextEnabled Parms{};

	Parms.MappingContext = MappingContext;
	Parms.Priority = Priority;
	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.SetSteamId (Server)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   SteamID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::SetSteamId__Server_(int64 SteamID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "SetSteamId (Server)");

	Params::BP_UPPlayerController_C_SetSteamId__Server_ Parms{};

	Parms.SteamID_0 = SteamID_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.ShouldShowPlayerNotification
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::ShouldShowPlayerNotification(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "ShouldShowPlayerNotification");

	Params::BP_UPPlayerController_C_ShouldShowPlayerNotification Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.ShowLocalNotification
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Notification                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::ShowLocalNotification(const class FString& Notification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "ShowLocalNotification");

	Params::BP_UPPlayerController_C_ShowLocalNotification Parms{};

	Parms.Notification = std::move(Notification);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.StartCameraShake (Server)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UCameraShakeBase>     ShakeClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  CameraShakeIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::StartCameraShake__Server_(TSubclassOf<class UCameraShakeBase> ShakeClass, float Scale, int32* CameraShakeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "StartCameraShake (Server)");

	Params::BP_UPPlayerController_C_StartCameraShake__Server_ Parms{};

	Parms.ShakeClass = ShakeClass;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraShakeIndex != nullptr)
		*CameraShakeIndex = Parms.CameraShakeIndex;
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.StartCameraShake_Client
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UCameraShakeBase>     ShakeClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CameraShakeIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::StartCameraShake_Client(TSubclassOf<class UCameraShakeBase> ShakeClass, float Scale, int32 CameraShakeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "StartCameraShake_Client");

	Params::BP_UPPlayerController_C_StartCameraShake_Client Parms{};

	Parms.ShakeClass = ShakeClass;
	Parms.Scale = Scale;
	Parms.CameraShakeIndex = CameraShakeIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.StopCameraShake
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CameraShakeIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::StopCameraShake(int32 CameraShakeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "StopCameraShake");

	Params::BP_UPPlayerController_C_StopCameraShake Parms{};

	Parms.CameraShakeIndex = CameraShakeIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.UpdateAspectRatio
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Ratio                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::UpdateAspectRatio(const struct FVector2D& Size, double Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "UpdateAspectRatio");

	Params::BP_UPPlayerController_C_UpdateAspectRatio Parms{};

	Parms.Size = std::move(Size);
	Parms.Ratio = Ratio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UPPlayerController.BP_UPPlayerController_C.UpdateGamepadUsage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUsingGamepad                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UPPlayerController_C::UpdateGamepadUsage(bool IsUsingGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UPPlayerController_C", "UpdateGamepadUsage");

	Params::BP_UPPlayerController_C_UpdateGamepadUsage Parms{};

	Parms.IsUsingGamepad = IsUsingGamepad;

	UObject::ProcessEvent(Func, &Parms);
}

}

