#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerAvatar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_PlayerAvatar_structs.hpp"
#include "S_PlayerAvatar_structs.hpp"
#include "S_AvatarHelmet_structs.hpp"
#include "S_AvatarBag_structs.hpp"
#include "S_AvatarBoots_structs.hpp"
#include "SkeletalMerging_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_PlayerAvatar.BPC_PlayerAvatar_C
// 0x01D0 (0x0270 - 0x00A0)
class UBPC_PlayerAvatar_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<E_PlayerAvatar, struct FS_PlayerAvatar>  Avatars;                                           // 0x00A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_PlayerAvatar                                CurrentAvatar;                                     // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UPPlayerCharacter_C*                Player;                                            // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UW_PlayerAvatarSelection_C*             AvatarSelectionWidget;                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSkeletalMeshMergeParams               MeshMergeParams;                                   // 0x0110(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPhysicsAsset*                          PhysicalAsset;                                     // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HeadSkeletalMesh;                                  // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyesUpMorphTarget;                                 // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyesDownMorphTarget;                               // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyesRightMorphTarget;                              // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EyesLeftMorphTarget;                               // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_AvatarHelmet                        Helmet;                                            // 0x0180(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_AvatarBag                           Bag;                                               // 0x01D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_AvatarBoots                         Boots;                                             // 0x0220(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void GetAvatarDefinition(bool* IsValid, struct FS_PlayerAvatar* Avatar);
	void GetAvatar(struct FS_PlayerAvatar* Avatar);
	void GetEyesMorphTargetValues(const struct FRotator& EyesRotation, double* Up, double* Down, double* Right, double* Left);
	void AvatarChanged(E_PlayerAvatar Avatar);
	void ReceiveBeginPlay();
	void OpenAvatarSelectionWidget();
	void InitPlayer();
	void CreateAvatarSelectionWidget();
	void ReceiveTick(float DeltaSeconds);
	void SetHelmet(const struct FS_AvatarHelmet& Helmet_0);
	void LoadAvatar();
	void SetBag(const struct FS_AvatarBag& Bag_0);
	void SetBoots(const struct FS_AvatarBoots& Boots_0);
	void ExecuteUbergraph_BPC_PlayerAvatar(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_PlayerAvatar_C">();
	}
	static class UBPC_PlayerAvatar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_PlayerAvatar_C>();
	}
};
static_assert(alignof(UBPC_PlayerAvatar_C) == 0x000008, "Wrong alignment on UBPC_PlayerAvatar_C");
static_assert(sizeof(UBPC_PlayerAvatar_C) == 0x000270, "Wrong size on UBPC_PlayerAvatar_C");
static_assert(offsetof(UBPC_PlayerAvatar_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_PlayerAvatar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, Avatars) == 0x0000A8, "Member 'UBPC_PlayerAvatar_C::Avatars' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, CurrentAvatar) == 0x0000F8, "Member 'UBPC_PlayerAvatar_C::CurrentAvatar' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, Player) == 0x000100, "Member 'UBPC_PlayerAvatar_C::Player' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, AvatarSelectionWidget) == 0x000108, "Member 'UBPC_PlayerAvatar_C::AvatarSelectionWidget' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, MeshMergeParams) == 0x000110, "Member 'UBPC_PlayerAvatar_C::MeshMergeParams' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, PhysicalAsset) == 0x000150, "Member 'UBPC_PlayerAvatar_C::PhysicalAsset' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, HeadSkeletalMesh) == 0x000158, "Member 'UBPC_PlayerAvatar_C::HeadSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, EyesUpMorphTarget) == 0x000160, "Member 'UBPC_PlayerAvatar_C::EyesUpMorphTarget' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, EyesDownMorphTarget) == 0x000168, "Member 'UBPC_PlayerAvatar_C::EyesDownMorphTarget' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, EyesRightMorphTarget) == 0x000170, "Member 'UBPC_PlayerAvatar_C::EyesRightMorphTarget' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, EyesLeftMorphTarget) == 0x000178, "Member 'UBPC_PlayerAvatar_C::EyesLeftMorphTarget' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, Helmet) == 0x000180, "Member 'UBPC_PlayerAvatar_C::Helmet' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, Bag) == 0x0001D0, "Member 'UBPC_PlayerAvatar_C::Bag' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerAvatar_C, Boots) == 0x000220, "Member 'UBPC_PlayerAvatar_C::Boots' has a wrong offset!");

}

