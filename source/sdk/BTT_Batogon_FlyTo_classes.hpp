#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_Batogon_FlyTo

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_Batogon_FlyTo.BTT_Batogon_FlyTo_C
// 0x0040 (0x00E8 - 0x00A8)
class UBTT_Batogon_FlyTo_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x00B0(0x0028)(Edit, BlueprintVisible)
	EAIOptionFlag                                 ProjectGoalOnNavigation;                           // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptanceRadius;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIOptionFlag                                 StopOnOverlap;                                     // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAIOptionFlag                                 AcceptPartialPath;                                 // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_Batogon_FlyTo(int32 EntryPoint);
	void OnMoveFinished_F776E1B041248B221EFD71907C363714(EPathFollowingResult Result, class AAIController* AIController);
	void OnRequestFailed_F776E1B041248B221EFD71907C363714();
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_Batogon_FlyTo_C">();
	}
	static class UBTT_Batogon_FlyTo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_Batogon_FlyTo_C>();
	}
};
static_assert(alignof(UBTT_Batogon_FlyTo_C) == 0x000008, "Wrong alignment on UBTT_Batogon_FlyTo_C");
static_assert(sizeof(UBTT_Batogon_FlyTo_C) == 0x0000E8, "Wrong size on UBTT_Batogon_FlyTo_C");
static_assert(offsetof(UBTT_Batogon_FlyTo_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_Batogon_FlyTo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_Batogon_FlyTo_C, DestinationKey) == 0x0000B0, "Member 'UBTT_Batogon_FlyTo_C::DestinationKey' has a wrong offset!");
static_assert(offsetof(UBTT_Batogon_FlyTo_C, ProjectGoalOnNavigation) == 0x0000D8, "Member 'UBTT_Batogon_FlyTo_C::ProjectGoalOnNavigation' has a wrong offset!");
static_assert(offsetof(UBTT_Batogon_FlyTo_C, AcceptanceRadius) == 0x0000DC, "Member 'UBTT_Batogon_FlyTo_C::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(UBTT_Batogon_FlyTo_C, StopOnOverlap) == 0x0000E0, "Member 'UBTT_Batogon_FlyTo_C::StopOnOverlap' has a wrong offset!");
static_assert(offsetof(UBTT_Batogon_FlyTo_C, AcceptPartialPath) == 0x0000E1, "Member 'UBTT_Batogon_FlyTo_C::AcceptPartialPath' has a wrong offset!");

}

