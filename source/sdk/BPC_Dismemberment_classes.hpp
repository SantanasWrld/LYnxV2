#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_Dismemberment

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GeometryScriptingCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_Dismemberment.BPC_Dismemberment_C
// 0x00F0 (0x0190 - 0x00A0)
class UBPC_Dismemberment_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        ImpulseStrength;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AngularImpulseStrength;                            // 0x00B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ImmuneBones;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible)
	class FName                                   RootBoneName;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FName>                LinkedBones;                                       // 0x00D0(0x0050)(Edit, BlueprintVisible)
	double                                        LimbLifeSpan;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeOutTime;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class FName>                           AlreadyHitBoneName;                                // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ModularCharacter;                                  // 0x0148(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         BloodParticles;                                    // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             BloodDecals;                                       // 0x0158(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FVector                                BloodDecalSize;                                    // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABP_Limb_C*>                     PendingLimbs;                                      // 0x0180(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void GetBloodDecalIgnoredActors(TArray<class AActor*>* IgnoredActors);
	void DismemberBone(class FName bone, const struct FVector& InitialImpulseDirection, class ABP_Limb_C** Limb);
	void GetDismemberBone(class FName bone, class FName* BoneName);
	void Get_Skeletal_Mesh(class USkeletalMeshComponent** SkeletalMesh_0);
	void AddBloodEffects(class ABP_Limb_C* Limb);
	void BuildMesh(TArray<class USkeletalMeshComponent*>& SkeletalMeshes, class USkeletalMesh** SkeletalMesh_0);
	void SetPoseableComponentBoneScale(class UPoseableMeshComponent* PoseMeshComponent, class FName BoneName);
	void SetPoseableComponentPose(class UPoseableMeshComponent* PoseMeshComponent);
	void SetPoseableTransform(class UPoseableMeshComponent* PoseableMesh);
	void SetDynamicMeshImpulse(class UDynamicMeshComponent* DynamicMeshComponent, const struct FVector& ImpulseDirection);
	void SetDynamicMeshCollisions(class UDynamicMesh* DynamicMeshObject, class UDynamicMeshComponent* DynamicMeshComponent);
	void Set_Dynamic_Mesh_Materials(class UDynamicMeshComponent* DynamicMesh);
	void Setup_Dynamic_Mesh(class UDynamicMeshComponent* DynamicMesh, class FName BoneName);
	struct FVector GetDynamicMeshLocation(class FName BoneName);
	void CreateLimb(class FName HitBoneName, const struct FVector& InitialImpulseDirection, class ABP_Limb_C** Limb);
	void SetupLimbMesh(class ABP_Limb_C* Limb);
	void SetupLimb(class ABP_Limb_C* Limb);
	void RegisterLimb(class ABP_Limb_C* LimbActor);
	void ReceiveTick(float DeltaSeconds);
	void Init(class USkeletalMeshComponent* SkeletalMesh_0);
	void UpdateRootBoneName();
	void ExecuteUbergraph_BPC_Dismemberment(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_Dismemberment_C">();
	}
	static class UBPC_Dismemberment_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_Dismemberment_C>();
	}
};
static_assert(alignof(UBPC_Dismemberment_C) == 0x000008, "Wrong alignment on UBPC_Dismemberment_C");
static_assert(sizeof(UBPC_Dismemberment_C) == 0x000190, "Wrong size on UBPC_Dismemberment_C");
static_assert(offsetof(UBPC_Dismemberment_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_Dismemberment_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, ImpulseStrength) == 0x0000A8, "Member 'UBPC_Dismemberment_C::ImpulseStrength' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, AngularImpulseStrength) == 0x0000B0, "Member 'UBPC_Dismemberment_C::AngularImpulseStrength' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, ImmuneBones) == 0x0000B8, "Member 'UBPC_Dismemberment_C::ImmuneBones' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, RootBoneName) == 0x0000C8, "Member 'UBPC_Dismemberment_C::RootBoneName' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, LinkedBones) == 0x0000D0, "Member 'UBPC_Dismemberment_C::LinkedBones' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, LimbLifeSpan) == 0x000120, "Member 'UBPC_Dismemberment_C::LimbLifeSpan' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, FadeOutTime) == 0x000128, "Member 'UBPC_Dismemberment_C::FadeOutTime' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, AlreadyHitBoneName) == 0x000130, "Member 'UBPC_Dismemberment_C::AlreadyHitBoneName' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, SkeletalMesh) == 0x000140, "Member 'UBPC_Dismemberment_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, ModularCharacter) == 0x000148, "Member 'UBPC_Dismemberment_C::ModularCharacter' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, BloodParticles) == 0x000150, "Member 'UBPC_Dismemberment_C::BloodParticles' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, BloodDecals) == 0x000158, "Member 'UBPC_Dismemberment_C::BloodDecals' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, BloodDecalSize) == 0x000168, "Member 'UBPC_Dismemberment_C::BloodDecalSize' has a wrong offset!");
static_assert(offsetof(UBPC_Dismemberment_C, PendingLimbs) == 0x000180, "Member 'UBPC_Dismemberment_C::PendingLimbs' has a wrong offset!");

}

