#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KillableCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_DeathType_structs.hpp"
#include "E_ScoringActorState_structs.hpp"
#include "S_FrozenRagdoll_structs.hpp"
#include "E_Dismemberment_structs.hpp"
#include "Headliners_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KillableCharacter.BP_KillableCharacter_C
// 0x0290 (0x0910 - 0x0680)
class ABP_KillableCharacter_C : public AHCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_BodyFearSource_C*                  BodyFearSource;                                    // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_Dismemberment_C*                   BPC_Dismemberment;                                 // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                ScoringComponent;                                  // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer)> OnKilled__Server_; // 0x06A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer)> OnKilled__All_; // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Dead;                                              // 0x06C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInRagdoll;                                       // 0x06C1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollReplication;                                // 0x06C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C3[0x5];                                      // 0x06C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HarmRagdollDuration;                               // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 RagdollBoneIndices;                                // 0x06D0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FTimerHandle                           RagdollUpdateTimer;                                // 0x06E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RagdollNetDelay;                                   // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_FrozenRagdoll                       LastSyncRagdoll;                                   // 0x06F0(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           DismembermentBones;                                // 0x0730(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           LightDismembermentBones;                           // 0x0740(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInterface*                     DismembermentLocalDecal;                           // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadBoneName;                                      // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadBodyName;                                      // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachBoneName;                                    // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnRagdollFrozen;                                   // 0x0770(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsStateOverwritten;                                // 0x0780(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_781[0x3];                                      // 0x0781(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachBodyName;                                    // 0x0784(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LegBoneName;                                       // 0x078C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FootBodyName;                                      // 0x0794(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79C[0x4];                                      // 0x079C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      ElectrocuteAnim;                                   // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ElectrocuteSound;                                  // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ElectrocuteMaterial;                               // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BurningSound;                                      // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      BurningAnim;                                       // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       BurningParticles;                                  // 0x07C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInterface*                     BurnedMaterial;                                    // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DeadlyCollisionImpulse;                            // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeadlyCollisionVelocity;                           // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeadlyLandingVelocity;                             // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RagdollCollisionVolume;                            // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RagdollCollisionSound;                             // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Invincible;                                        // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_809[0x3];                                      // 0x0809(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHealth;                                         // 0x080C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentHealth;                                     // 0x0810(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_814[0x4];                                      // 0x0814(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        BurningSoundComponent;                             // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 Damage, bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Attacker)> OnHarmed__All_; // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ABP_Parent_Enemy_C*>             ChasingEnemies;                                    // 0x0830(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          IsChased;                                          // 0x0840(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_841[0x3];                                      // 0x0841(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultMeshCollisionProfile;                       // 0x0844(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DefaultMeshTransform;                              // 0x0850(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool IsInRagdoll)> OnRagdollChanged;                               // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        RagdollVelocityForKO;                              // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NextRagdollCollisionEffect;                        // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrabbableBody;                                     // 0x08D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D1[0x7];                                      // 0x08D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StateOverwriteTimerHandle;                         // 0x08D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              BloodSound;                                        // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              GrabBodySound;                                     // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              GrabLimbSound;                                     // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ThrowBodySound;                                    // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ThrowLimbSound;                                    // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FrozenMaterial;                                    // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void GetEyesLocation(struct FVector* EyesLocation);
	void GetDefaultScoringState(E_ScoringActorState* State);
	void UserConstructionScript();
	void FreezeMovement();
	void UnfreezeMovement();
	void EnableRagdoll(const struct FVector& SourceLocation, double Force);
	void DisableRagdoll();
	void KnockOut(double Duration);
	void GetInteractNoise(bool* NoiseOnInteract, double* NoiseRange);
	void GetInteractText(class FText* Text);
	void GetInteractDistance(double* Distance);
	void GetInteractDuration(double* Duration);
	void IsDead(bool* Dead_0);
	void ResetRagdollVelocities();
	void ShouldSyncRagdoll(const struct FS_FrozenRagdoll& Ragdoll, bool* Result);
	void GetLightDismembermentBone(bool* Found, class FName* BoneName);
	void GetEyesHeight(double* EyesHeight);
	void CheckIfChased(bool* IsChased_0);
	void PlaySkeletalAnim(class UAnimationAsset* Anim, bool bLooping);
	void SetOverlayMaterial(class UMaterialInterface* Material);
	void SpawnBloodParticlesOnMesh(class FName BoneName, double Size, class USkinnedMeshComponent* Mesh_0);
	void SetCollisionsInternal(class FName CapsulePreset, class FName MeshPreset);
	void GetRagdollBoneIndex(int32 BodyIndex, int32* BoneIndex);
	void GetRecoverLocation(struct FVector* RecoverLocation);
	void GetRagdollLocation(struct FVector* RagdollLocation);
	void SetRagdoll(const struct FS_FrozenRagdoll& Ragdoll);
	void SaveAsRagdoll(struct FS_FrozenRagdoll* FrozenRagdoll);
	void PrepareRagdoll();
	void InteractionStarted();
	void InteractionStopped();
	void SetScoringState(E_ScoringActorState State, double Duration);
	void ScoringTick(double DeltaTime);
	void EndScoringStateOverwrite();
	void SetCollisionProfiles(class FName CapsulePreset, class FName MeshPreset);
	void StartDismemberment(E_Dismemberment Dismemberment, const struct FVector& SourceLocation);
	void Killed__All_(bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Killer);
	void RagdollReplicated(const struct FS_FrozenRagdoll& Ragdoll);
	void ReplicateRagdoll();
	void Kill(bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Killer);
	void BrokenBone(class FName BoneName, double BloodSize);
	void BreakBone(class FName BoneName, const struct FVector& SourceLocation);
	void Electrocute();
	void Burn__Server_();
	void StartBurningFX();
	void EndBurningFX();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLanded(const struct FHitResult& Hit);
	void DeadlyLandingSFX();
	void RagdollCollisionEffects(double Impulse, const struct FVector& Location);
	void Harm(int32 Damage, bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Attacker);
	void Harmed__All_(int32 Damage, bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Attacker);
	void OnRep_IsInRagdoll();
	void Infected();
	void MoveActorToRagdoll();
	void LightDismemberment(const struct FVector& SourceLocation);
	void BndEvt__BP_KillableCharacter_Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_KillableCharacter_Mesh_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void RagdollCollisionEffects__Multicast_(double Impulse, const struct FVector& Location);
	void DisableRagdollDelayed(float Delay);
	void FrozenDeath();
	void UpdateChased();
	void Interact(class ABP_UPPlayerCharacter_C* Player);
	void StartedBeingChased(class ABP_Parent_Enemy_C* Enemy);
	void EnemyTargetChanegd(class ABP_Parent_Enemy_C* Enemy);
	void ExecuteUbergraph_BP_KillableCharacter(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KillableCharacter_C">();
	}
	static class ABP_KillableCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KillableCharacter_C>();
	}
};
static_assert(alignof(ABP_KillableCharacter_C) == 0x000010, "Wrong alignment on ABP_KillableCharacter_C");
static_assert(sizeof(ABP_KillableCharacter_C) == 0x000910, "Wrong size on ABP_KillableCharacter_C");
static_assert(offsetof(ABP_KillableCharacter_C, UberGraphFrame) == 0x000680, "Member 'ABP_KillableCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BodyFearSource) == 0x000688, "Member 'ABP_KillableCharacter_C::BodyFearSource' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BPC_Dismemberment) == 0x000690, "Member 'ABP_KillableCharacter_C::BPC_Dismemberment' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, ScoringComponent) == 0x000698, "Member 'ABP_KillableCharacter_C::ScoringComponent' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, OnKilled__Server_) == 0x0006A0, "Member 'ABP_KillableCharacter_C::OnKilled__Server_' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, OnKilled__All_) == 0x0006B0, "Member 'ABP_KillableCharacter_C::OnKilled__All_' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, Dead) == 0x0006C0, "Member 'ABP_KillableCharacter_C::Dead' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, IsInRagdoll) == 0x0006C1, "Member 'ABP_KillableCharacter_C::IsInRagdoll' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, RagdollReplication) == 0x0006C2, "Member 'ABP_KillableCharacter_C::RagdollReplication' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, HarmRagdollDuration) == 0x0006C8, "Member 'ABP_KillableCharacter_C::HarmRagdollDuration' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, RagdollBoneIndices) == 0x0006D0, "Member 'ABP_KillableCharacter_C::RagdollBoneIndices' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, RagdollUpdateTimer) == 0x0006E0, "Member 'ABP_KillableCharacter_C::RagdollUpdateTimer' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, RagdollNetDelay) == 0x0006E8, "Member 'ABP_KillableCharacter_C::RagdollNetDelay' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, LastSyncRagdoll) == 0x0006F0, "Member 'ABP_KillableCharacter_C::LastSyncRagdoll' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, DismembermentBones) == 0x000730, "Member 'ABP_KillableCharacter_C::DismembermentBones' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, LightDismembermentBones) == 0x000740, "Member 'ABP_KillableCharacter_C::LightDismembermentBones' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, DismembermentLocalDecal) == 0x000750, "Member 'ABP_KillableCharacter_C::DismembermentLocalDecal' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, HeadBoneName) == 0x000758, "Member 'ABP_KillableCharacter_C::HeadBoneName' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, HeadBodyName) == 0x000760, "Member 'ABP_KillableCharacter_C::HeadBodyName' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, AttachBoneName) == 0x000768, "Member 'ABP_KillableCharacter_C::AttachBoneName' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, OnRagdollFrozen) == 0x000770, "Member 'ABP_KillableCharacter_C::OnRagdollFrozen' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, IsStateOverwritten) == 0x000780, "Member 'ABP_KillableCharacter_C::IsStateOverwritten' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, AttachBodyName) == 0x000784, "Member 'ABP_KillableCharacter_C::AttachBodyName' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, LegBoneName) == 0x00078C, "Member 'ABP_KillableCharacter_C::LegBoneName' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, FootBodyName) == 0x000794, "Member 'ABP_KillableCharacter_C::FootBodyName' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, ElectrocuteAnim) == 0x0007A0, "Member 'ABP_KillableCharacter_C::ElectrocuteAnim' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, ElectrocuteSound) == 0x0007A8, "Member 'ABP_KillableCharacter_C::ElectrocuteSound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, ElectrocuteMaterial) == 0x0007B0, "Member 'ABP_KillableCharacter_C::ElectrocuteMaterial' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BurningSound) == 0x0007B8, "Member 'ABP_KillableCharacter_C::BurningSound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BurningAnim) == 0x0007C0, "Member 'ABP_KillableCharacter_C::BurningAnim' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BurningParticles) == 0x0007C8, "Member 'ABP_KillableCharacter_C::BurningParticles' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BurnedMaterial) == 0x0007D8, "Member 'ABP_KillableCharacter_C::BurnedMaterial' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, DeadlyCollisionImpulse) == 0x0007E0, "Member 'ABP_KillableCharacter_C::DeadlyCollisionImpulse' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, DeadlyCollisionVelocity) == 0x0007E8, "Member 'ABP_KillableCharacter_C::DeadlyCollisionVelocity' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, DeadlyLandingVelocity) == 0x0007F0, "Member 'ABP_KillableCharacter_C::DeadlyLandingVelocity' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, RagdollCollisionVolume) == 0x0007F8, "Member 'ABP_KillableCharacter_C::RagdollCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, RagdollCollisionSound) == 0x000800, "Member 'ABP_KillableCharacter_C::RagdollCollisionSound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, Invincible) == 0x000808, "Member 'ABP_KillableCharacter_C::Invincible' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, MaxHealth) == 0x00080C, "Member 'ABP_KillableCharacter_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, CurrentHealth) == 0x000810, "Member 'ABP_KillableCharacter_C::CurrentHealth' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BurningSoundComponent) == 0x000818, "Member 'ABP_KillableCharacter_C::BurningSoundComponent' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, OnHarmed__All_) == 0x000820, "Member 'ABP_KillableCharacter_C::OnHarmed__All_' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, ChasingEnemies) == 0x000830, "Member 'ABP_KillableCharacter_C::ChasingEnemies' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, IsChased) == 0x000840, "Member 'ABP_KillableCharacter_C::IsChased' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, DefaultMeshCollisionProfile) == 0x000844, "Member 'ABP_KillableCharacter_C::DefaultMeshCollisionProfile' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, DefaultMeshTransform) == 0x000850, "Member 'ABP_KillableCharacter_C::DefaultMeshTransform' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, OnRagdollChanged) == 0x0008B0, "Member 'ABP_KillableCharacter_C::OnRagdollChanged' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, RagdollVelocityForKO) == 0x0008C0, "Member 'ABP_KillableCharacter_C::RagdollVelocityForKO' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, NextRagdollCollisionEffect) == 0x0008C8, "Member 'ABP_KillableCharacter_C::NextRagdollCollisionEffect' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, GrabbableBody) == 0x0008D0, "Member 'ABP_KillableCharacter_C::GrabbableBody' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, StateOverwriteTimerHandle) == 0x0008D8, "Member 'ABP_KillableCharacter_C::StateOverwriteTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, BloodSound) == 0x0008E0, "Member 'ABP_KillableCharacter_C::BloodSound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, GrabBodySound) == 0x0008E8, "Member 'ABP_KillableCharacter_C::GrabBodySound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, GrabLimbSound) == 0x0008F0, "Member 'ABP_KillableCharacter_C::GrabLimbSound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, ThrowBodySound) == 0x0008F8, "Member 'ABP_KillableCharacter_C::ThrowBodySound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, ThrowLimbSound) == 0x000900, "Member 'ABP_KillableCharacter_C::ThrowLimbSound' has a wrong offset!");
static_assert(offsetof(ABP_KillableCharacter_C, FrozenMaterial) == 0x000908, "Member 'ABP_KillableCharacter_C::FrozenMaterial' has a wrong offset!");

}

