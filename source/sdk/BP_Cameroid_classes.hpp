#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Cameroid

#include "Basic.hpp"

#include "BP_InventoryItem_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_CameroidCapture_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Cameroid.BP_Cameroid_C
// 0x01F0 (0x0560 - 0x0370)
class ABP_Cameroid_C : public ABP_InventoryItem_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Cameroid_C;                      // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SpotLight;                                         // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lens;                                              // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   PhotoLeftText;                                     // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  CapturePostProcess;                                // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_CameroidFilm_C*                    CameroidFilm;                                      // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_MinExposure_A94087084A743A1F3392259CBD011371; // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Fov_A94087084A743A1F3392259CBD011371;   // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_A94087084A743A1F3392259CBD011371; // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Progress_3EE2E01E4B3B934C8C1559A85F9E7F25; // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_3EE2E01E4B3B934C8C1559A85F9E7F25; // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_Cameroid_C* Cameroid)> OnRenderCaptureStarted;           // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ABP_Cameroid_C* Cameroid)> OnRenderCaptureEnded;             // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_DataIO_C*                           DataIO;                                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInCooldown;                                      // 0x03F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FS_CameroidCapture& Capture)> OnCaptureTaken;         // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsFocusAnimPlaying;                                // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Scoring_C*                          Scoring;                                           // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ScoreMultiplier;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureWidth;                                      // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CaptureHeight;                                     // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CaptureFov;                                        // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SelfieFov;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinCaptureFov;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxCaptureFov;                                     // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZoomSpeed;                                         // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MotionForRotAngleCurve;                            // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastCameraRotation;                                // 0x0460(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        MotionValue;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MotionReductionSpeed;                              // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPostProcessInit;                                 // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Bloom;                                             // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     BlurMaterial;                                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BlurMaterialInstance;                              // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MinBlurRadius;                                     // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxBlurRadius;                                     // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FocusWalkSpeed;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CaptureRatio;                                      // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FirstPersonFocusLocation;                          // 0x04D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FirstPersonUnfocusLocation;                        // 0x04E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              FocusSound;                                        // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              UnfocusSound;                                      // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CaptureSound;                                      // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInSelfieMode;                                    // 0x0518(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DefaultMeshRotation;                               // 0x0520(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               SelfieMeshRotation;                                // 0x0538(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMulticastInlineDelegate<void(class ABP_Cameroid_C* Cameroid)> OnSelfieModeChanged;              // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void GetCurrentCameraView(struct FMinimalViewInfo* View);
	void GetCaptureRatio(double* Ratio);
	void SetPostProcessBloom(double BloomIntensity);
	void SetPostProcessBlur(double BlurRadius);
	void SetPostProcessMaterials(TArray<struct FWeightedBlendable>& Materials);
	void InitPostProcessMaterials();
	void ComputeMotionValue(double TargetValue, double DeltaSeconds);
	void GetCameraAngularSpeed(double DeltaSeconds, double* AngularSpeed);
	void SetFocusDistance(float DepthOfFieldFocalDistance);
	void CreateSaveObject(class USaveGame** Save);
	void GetDataIO(class ABP_DataIO_C** DataIO_0);
	void GetScoring(class ABP_Scoring_C** Scoring_0);
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void Timeline__FocusEnded__EventFunc();
	void Timeline__FocusStarted__EventFunc();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void InpActEvt_IA_CameroidZoomIn_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CameroidZoomOut_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CameroidCapture_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CameroidSelfie_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InitAchievements();
	void CheckCaptureAchievements(const struct FS_CameroidCapture& Capture);
	void CheckPointsAchievements(const struct FS_CameroidCapture& Capture);
	void CheckCloseEncountersAchievement(const struct FS_CameroidCapture& Capture);
	void CheckWorthyTragedyAchievement(const struct FS_CameroidCapture& Capture);
	void CheckWarCorrespondentAchievement(const struct FS_CameroidCapture& Capture);
	void CheckDavidVsGoliathAchievement(const struct FS_CameroidCapture& Capture);
	void CaptureTaken(const struct FS_CameroidCapture& Capture);
	void ReceiveBeginPlay();
	void PlayFocusAnimation();
	void UpdateLight();
	void ReceiveTick(float DeltaSeconds);
	void OnRep_IsInFocus();
	void LoadSaveData(class USaveGame* Save);
	void UpdateCamera();
	void UpdatePostProcess(double DeltaSeconds);
	void InitPostProcess();
	void UpdateInputMapping(bool ForceDisable);
	void OnRep_Player();
	void OnRep_IsEquipped();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void UpdateZoomFov(double FOV);
	void StartCaptureVFX(class ABP_Cameroid_C* Cameroid);
	void ToggleSelfieMode();
	void UpdateSelfieMode();
	void OnRep_IsInSelfieMode();
	void OverridePlayerFov(double FOV);
	void UpdateSelfieCameraRotationLimits(bool LimitsEnabled);
	void CameroidCapture__Server_();
	void CameroidCapture__Client_(int32 CaptureId);
	void RegisterCapture__Server_(const struct FS_CameroidCapture& Capture, int32 DataLength);
	void ExecuteUbergraph_BP_Cameroid(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Cameroid_C">();
	}
	static class ABP_Cameroid_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Cameroid_C>();
	}
};
static_assert(alignof(ABP_Cameroid_C) == 0x000008, "Wrong alignment on ABP_Cameroid_C");
static_assert(sizeof(ABP_Cameroid_C) == 0x000560, "Wrong size on ABP_Cameroid_C");
static_assert(offsetof(ABP_Cameroid_C, UberGraphFrame_BP_Cameroid_C) == 0x000370, "Member 'ABP_Cameroid_C::UberGraphFrame_BP_Cameroid_C' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, SpotLight) == 0x000378, "Member 'ABP_Cameroid_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Lens) == 0x000380, "Member 'ABP_Cameroid_C::Lens' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, PhotoLeftText) == 0x000388, "Member 'ABP_Cameroid_C::PhotoLeftText' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, CapturePostProcess) == 0x000390, "Member 'ABP_Cameroid_C::CapturePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, CameroidFilm) == 0x000398, "Member 'ABP_Cameroid_C::CameroidFilm' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Timeline_0_MinExposure_A94087084A743A1F3392259CBD011371) == 0x0003A0, "Member 'ABP_Cameroid_C::Timeline_0_MinExposure_A94087084A743A1F3392259CBD011371' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Timeline_0_Fov_A94087084A743A1F3392259CBD011371) == 0x0003A4, "Member 'ABP_Cameroid_C::Timeline_0_Fov_A94087084A743A1F3392259CBD011371' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Timeline_0__Direction_A94087084A743A1F3392259CBD011371) == 0x0003A8, "Member 'ABP_Cameroid_C::Timeline_0__Direction_A94087084A743A1F3392259CBD011371' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Timeline_0) == 0x0003B0, "Member 'ABP_Cameroid_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Timeline_Progress_3EE2E01E4B3B934C8C1559A85F9E7F25) == 0x0003B8, "Member 'ABP_Cameroid_C::Timeline_Progress_3EE2E01E4B3B934C8C1559A85F9E7F25' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Timeline__Direction_3EE2E01E4B3B934C8C1559A85F9E7F25) == 0x0003BC, "Member 'ABP_Cameroid_C::Timeline__Direction_3EE2E01E4B3B934C8C1559A85F9E7F25' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Timeline) == 0x0003C0, "Member 'ABP_Cameroid_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, GameInstance) == 0x0003C8, "Member 'ABP_Cameroid_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, OnRenderCaptureStarted) == 0x0003D0, "Member 'ABP_Cameroid_C::OnRenderCaptureStarted' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, OnRenderCaptureEnded) == 0x0003E0, "Member 'ABP_Cameroid_C::OnRenderCaptureEnded' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, DataIO) == 0x0003F0, "Member 'ABP_Cameroid_C::DataIO' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, IsInCooldown) == 0x0003F8, "Member 'ABP_Cameroid_C::IsInCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, OnCaptureTaken) == 0x000400, "Member 'ABP_Cameroid_C::OnCaptureTaken' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, IsFocusAnimPlaying) == 0x000410, "Member 'ABP_Cameroid_C::IsFocusAnimPlaying' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Scoring) == 0x000418, "Member 'ABP_Cameroid_C::Scoring' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, ScoreMultiplier) == 0x000420, "Member 'ABP_Cameroid_C::ScoreMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, CaptureWidth) == 0x000428, "Member 'ABP_Cameroid_C::CaptureWidth' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, CaptureHeight) == 0x00042C, "Member 'ABP_Cameroid_C::CaptureHeight' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, CaptureFov) == 0x000430, "Member 'ABP_Cameroid_C::CaptureFov' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, SelfieFov) == 0x000438, "Member 'ABP_Cameroid_C::SelfieFov' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, MinCaptureFov) == 0x000440, "Member 'ABP_Cameroid_C::MinCaptureFov' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, MaxCaptureFov) == 0x000448, "Member 'ABP_Cameroid_C::MaxCaptureFov' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, ZoomSpeed) == 0x000450, "Member 'ABP_Cameroid_C::ZoomSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, MotionForRotAngleCurve) == 0x000458, "Member 'ABP_Cameroid_C::MotionForRotAngleCurve' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, LastCameraRotation) == 0x000460, "Member 'ABP_Cameroid_C::LastCameraRotation' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, MotionValue) == 0x000478, "Member 'ABP_Cameroid_C::MotionValue' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, MotionReductionSpeed) == 0x000480, "Member 'ABP_Cameroid_C::MotionReductionSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, IsPostProcessInit) == 0x000488, "Member 'ABP_Cameroid_C::IsPostProcessInit' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, Bloom) == 0x000490, "Member 'ABP_Cameroid_C::Bloom' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, BlurMaterial) == 0x0004A0, "Member 'ABP_Cameroid_C::BlurMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, BlurMaterialInstance) == 0x0004A8, "Member 'ABP_Cameroid_C::BlurMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, MinBlurRadius) == 0x0004B0, "Member 'ABP_Cameroid_C::MinBlurRadius' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, MaxBlurRadius) == 0x0004B8, "Member 'ABP_Cameroid_C::MaxBlurRadius' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, FocusWalkSpeed) == 0x0004C0, "Member 'ABP_Cameroid_C::FocusWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, CaptureRatio) == 0x0004C8, "Member 'ABP_Cameroid_C::CaptureRatio' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, FirstPersonFocusLocation) == 0x0004D0, "Member 'ABP_Cameroid_C::FirstPersonFocusLocation' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, FirstPersonUnfocusLocation) == 0x0004E8, "Member 'ABP_Cameroid_C::FirstPersonUnfocusLocation' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, FocusSound) == 0x000500, "Member 'ABP_Cameroid_C::FocusSound' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, UnfocusSound) == 0x000508, "Member 'ABP_Cameroid_C::UnfocusSound' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, CaptureSound) == 0x000510, "Member 'ABP_Cameroid_C::CaptureSound' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, IsInSelfieMode) == 0x000518, "Member 'ABP_Cameroid_C::IsInSelfieMode' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, DefaultMeshRotation) == 0x000520, "Member 'ABP_Cameroid_C::DefaultMeshRotation' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, SelfieMeshRotation) == 0x000538, "Member 'ABP_Cameroid_C::SelfieMeshRotation' has a wrong offset!");
static_assert(offsetof(ABP_Cameroid_C, OnSelfieModeChanged) == 0x000550, "Member 'ABP_Cameroid_C::OnSelfieModeChanged' has a wrong offset!");

}

