#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Batogon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Parent_Enemy_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Batogon.BP_Batogon_C
// 0x0080 (0x0B10 - 0x0A90)
class ABP_Batogon_C : public ABP_Parent_Enemy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Batogon_C;                       // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    ExplosionLocation;                                 // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxWingL;                                          // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxWingR;                                          // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxFootR;                                          // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxFootL;                                          // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlying;                                          // 0x0AB8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB9[0x7];                                      // 0x0AB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlyHeight;                                         // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              LandingSound;                                      // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_BatogonFlightTarget_C*              FlightTarget;                                      // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              GlideSound;                                        // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              FlyUpSound;                                        // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              FlyDownSound;                                      // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              GroundedSound;                                     // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              WingbeatSound;                                     // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CurrentFlySound;                                   // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FlyAudio;                                          // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void GetFlySound(bool* IsValid, class USoundCue** FlySound);
	void ReceiveBeginPlay();
	void OnRep_IsFlying();
	void OnRep_IsGrawling();
	void GetNavigationPoints();
	void UpdateFlyAudio();
	void ReceiveTick(float DeltaSeconds);
	void PlayWingbeatSound();
	void ExecuteUbergraph_BP_Batogon(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Batogon_C">();
	}
	static class ABP_Batogon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Batogon_C>();
	}
};
static_assert(alignof(ABP_Batogon_C) == 0x000010, "Wrong alignment on ABP_Batogon_C");
static_assert(sizeof(ABP_Batogon_C) == 0x000B10, "Wrong size on ABP_Batogon_C");
static_assert(offsetof(ABP_Batogon_C, UberGraphFrame_BP_Batogon_C) == 0x000A88, "Member 'ABP_Batogon_C::UberGraphFrame_BP_Batogon_C' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, ExplosionLocation) == 0x000A90, "Member 'ABP_Batogon_C::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, BoxWingL) == 0x000A98, "Member 'ABP_Batogon_C::BoxWingL' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, BoxWingR) == 0x000AA0, "Member 'ABP_Batogon_C::BoxWingR' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, BoxFootR) == 0x000AA8, "Member 'ABP_Batogon_C::BoxFootR' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, BoxFootL) == 0x000AB0, "Member 'ABP_Batogon_C::BoxFootL' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, IsFlying) == 0x000AB8, "Member 'ABP_Batogon_C::IsFlying' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, FlyHeight) == 0x000AC0, "Member 'ABP_Batogon_C::FlyHeight' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, LandingSound) == 0x000AC8, "Member 'ABP_Batogon_C::LandingSound' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, FlightTarget) == 0x000AD0, "Member 'ABP_Batogon_C::FlightTarget' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, GlideSound) == 0x000AD8, "Member 'ABP_Batogon_C::GlideSound' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, FlyUpSound) == 0x000AE0, "Member 'ABP_Batogon_C::FlyUpSound' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, FlyDownSound) == 0x000AE8, "Member 'ABP_Batogon_C::FlyDownSound' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, GroundedSound) == 0x000AF0, "Member 'ABP_Batogon_C::GroundedSound' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, WingbeatSound) == 0x000AF8, "Member 'ABP_Batogon_C::WingbeatSound' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, CurrentFlySound) == 0x000B00, "Member 'ABP_Batogon_C::CurrentFlySound' has a wrong offset!");
static_assert(offsetof(ABP_Batogon_C, FlyAudio) == 0x000B08, "Member 'ABP_Batogon_C::FlyAudio' has a wrong offset!");

}

