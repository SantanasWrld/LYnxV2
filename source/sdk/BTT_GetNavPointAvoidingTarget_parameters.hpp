#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_GetNavPointAvoidingTarget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_GetNavPointAvoidingTarget.BTT_GetNavPointAvoidingTarget_C.IsNavPointAvailable
// 0x0120 (0x0120 - 0x0000)
struct BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Parent_Enemy_C*                     Pawn;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NavigationPoint_C*                  NavPoint;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Available;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _TargetLocation;                                   // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _AILocation;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _Point;                                            // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARecastNavMesh*                         CallFunc_GetControllerNavData_NavData;             // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation; // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue; // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidPath_IsValid;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable) == 0x000008, "Wrong alignment on BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable");
static_assert(sizeof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable) == 0x000120, "Wrong size on BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, Controller) == 0x000000, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::Controller' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, Pawn) == 0x000008, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::Pawn' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, NavPoint) == 0x000010, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::NavPoint' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, Available) == 0x000018, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::Available' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, Location) == 0x000020, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::Location' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, _TargetLocation) == 0x000038, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::_TargetLocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, _AILocation) == 0x000050, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::_AILocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, _Point) == 0x000068, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::_Point' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000098, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_GetControllerNavData_NavData) == 0x0000B0, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_GetControllerNavData_NavData' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation) == 0x0000B8, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue) == 0x0000D0, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x0000D8, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_IsValidPath_IsValid) == 0x0000E0, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_IsValidPath_IsValid' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_Vector_Distance_ReturnValue) == 0x0000E8, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x0000F8, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000100, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable, CallFunc_IsValid_ReturnValue) == 0x000118, "Member 'BTT_GetNavPointAvoidingTarget_C_IsNavPointAvailable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTT_GetNavPointAvoidingTarget.BTT_GetNavPointAvoidingTarget_C.IsValidPath
// 0x00D0 (0x00D0 - 0x0000)
struct BTT_GetNavPointAvoidingTarget_C_IsValidPath final
{
public:
	class UNavigationPath*                        Path;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AILocation;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        _SquaredDistanceToTarget;                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPartial_ReturnValue;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue_1;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_GetNavPointAvoidingTarget_C_IsValidPath) == 0x000008, "Wrong alignment on BTT_GetNavPointAvoidingTarget_C_IsValidPath");
static_assert(sizeof(BTT_GetNavPointAvoidingTarget_C_IsValidPath) == 0x0000D0, "Wrong size on BTT_GetNavPointAvoidingTarget_C_IsValidPath");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, Path) == 0x000000, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::Path' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, AILocation) == 0x000008, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::AILocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, TargetLocation) == 0x000020, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::TargetLocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, IsValid) == 0x000038, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::IsValid' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, _SquaredDistanceToTarget) == 0x000040, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::_SquaredDistanceToTarget' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000050, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_IsPartial_ReturnValue) == 0x00005C, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_IsPartial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_IsValid_ReturnValue) == 0x00005D, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Array_Get_Item) == 0x000068, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_BreakVector_X) == 0x0000A0, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_BreakVector_Y) == 0x0000A8, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Vector_DistanceSquared_ReturnValue_1) == 0x0000B8, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Vector_DistanceSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Abs_ReturnValue) == 0x0000C0, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000C9, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_GetNavPointAvoidingTarget_C_IsValidPath, CallFunc_BooleanAND_ReturnValue) == 0x0000CA, "Member 'BTT_GetNavPointAvoidingTarget_C_IsValidPath::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

