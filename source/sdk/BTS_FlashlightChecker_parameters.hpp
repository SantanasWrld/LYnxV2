#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_FlashlightChecker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTS_FlashlightChecker.BTS_FlashlightChecker_C.ExecuteUbergraph_BTS_FlashlightChecker
// 0x0030 (0x0030 - 0x0000)
struct BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Shiny_C*                            K2Node_DynamicCast_AsBP_Shiny;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLightedByPlayers_Result;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker) == 0x000008, "Wrong alignment on BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker");
static_assert(sizeof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker) == 0x000030, "Wrong size on BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, EntryPoint) == 0x000000, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, K2Node_Event_OwnerController) == 0x000008, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, K2Node_DynamicCast_AsBP_Shiny) == 0x000020, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::K2Node_DynamicCast_AsBP_Shiny' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker, CallFunc_IsLightedByPlayers_Result) == 0x00002A, "Member 'BTS_FlashlightChecker_C_ExecuteUbergraph_BTS_FlashlightChecker::CallFunc_IsLightedByPlayers_Result' has a wrong offset!");

// Function BTS_FlashlightChecker.BTS_FlashlightChecker_C.HasPlayerLightEnabled
// 0x0030 (0x0030 - 0x0000)
struct BTS_FlashlightChecker_C_HasPlayerLightEnabled final
{
public:
	class ABP_UPPlayerCharacter_C*                Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Flashlight_C*                       K2Node_DynamicCast_AsBP_Flashlight;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Cameroid_C*                         K2Node_DynamicCast_AsBP_Cameroid;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_FlashlightChecker_C_HasPlayerLightEnabled) == 0x000008, "Wrong alignment on BTS_FlashlightChecker_C_HasPlayerLightEnabled");
static_assert(sizeof(BTS_FlashlightChecker_C_HasPlayerLightEnabled) == 0x000030, "Wrong size on BTS_FlashlightChecker_C_HasPlayerLightEnabled");
static_assert(offsetof(BTS_FlashlightChecker_C_HasPlayerLightEnabled, Player) == 0x000000, "Member 'BTS_FlashlightChecker_C_HasPlayerLightEnabled::Player' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_HasPlayerLightEnabled, Result) == 0x000008, "Member 'BTS_FlashlightChecker_C_HasPlayerLightEnabled::Result' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_HasPlayerLightEnabled, K2Node_DynamicCast_AsBP_Flashlight) == 0x000010, "Member 'BTS_FlashlightChecker_C_HasPlayerLightEnabled::K2Node_DynamicCast_AsBP_Flashlight' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_HasPlayerLightEnabled, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_FlashlightChecker_C_HasPlayerLightEnabled::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_HasPlayerLightEnabled, K2Node_DynamicCast_AsBP_Cameroid) == 0x000020, "Member 'BTS_FlashlightChecker_C_HasPlayerLightEnabled::K2Node_DynamicCast_AsBP_Cameroid' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_HasPlayerLightEnabled, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BTS_FlashlightChecker_C_HasPlayerLightEnabled::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BTS_FlashlightChecker.BTS_FlashlightChecker_C.IsLightedByPlayer
// 0x0160 (0x0160 - 0x0000)
struct BTS_FlashlightChecker_C_IsLightedByPlayer final
{
public:
	class ABP_UPPlayerCharacter_C*                Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Shiny_C*                            Shiny;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEyesLocation_EyesLocation;             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0070(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInFrustrum_Result;                      // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasPlayerLightEnabled_Result;             // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_FlashlightChecker_C_IsLightedByPlayer) == 0x000008, "Wrong alignment on BTS_FlashlightChecker_C_IsLightedByPlayer");
static_assert(sizeof(BTS_FlashlightChecker_C_IsLightedByPlayer) == 0x000160, "Wrong size on BTS_FlashlightChecker_C_IsLightedByPlayer");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, Player) == 0x000000, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::Player' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, Shiny) == 0x000008, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::Shiny' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, Result) == 0x000010, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::Result' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, K2Node_MakeArray_Array) == 0x000018, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, CallFunc_GetEyesLocation_EyesLocation) == 0x000040, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::CallFunc_GetEyesLocation_EyesLocation' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, CallFunc_GetControlRotation_ReturnValue) == 0x000058, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, CallFunc_LineTraceSingle_OutHit) == 0x000070, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, CallFunc_LineTraceSingle_ReturnValue) == 0x000158, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, CallFunc_IsInFrustrum_Result) == 0x000159, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::CallFunc_IsInFrustrum_Result' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayer, CallFunc_HasPlayerLightEnabled_Result) == 0x00015A, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayer::CallFunc_HasPlayerLightEnabled_Result' has a wrong offset!");

// Function BTS_FlashlightChecker.BTS_FlashlightChecker_C.IsLightedByPlayers
// 0x0048 (0x0048 - 0x0000)
struct BTS_FlashlightChecker_C_IsLightedByPlayers final
{
public:
	class ABP_Shiny_C*                            Shiny;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0010(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UPPlayerCharacter_C*                K2Node_DynamicCast_AsBP_UPPlayer_Character;        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLightedByPlayer_Result;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_FlashlightChecker_C_IsLightedByPlayers) == 0x000008, "Wrong alignment on BTS_FlashlightChecker_C_IsLightedByPlayers");
static_assert(sizeof(BTS_FlashlightChecker_C_IsLightedByPlayers) == 0x000048, "Wrong size on BTS_FlashlightChecker_C_IsLightedByPlayers");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, Shiny) == 0x000000, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::Shiny' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, Result) == 0x000008, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::Result' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000010, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, CallFunc_Array_Get_Item) == 0x000020, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, K2Node_DynamicCast_AsBP_UPPlayer_Character) == 0x000030, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::K2Node_DynamicCast_AsBP_UPPlayer_Character' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, CallFunc_IsLightedByPlayer_Result) == 0x000040, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::CallFunc_IsLightedByPlayer_Result' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_IsLightedByPlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BTS_FlashlightChecker_C_IsLightedByPlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BTS_FlashlightChecker.BTS_FlashlightChecker_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_FlashlightChecker_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_FlashlightChecker_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_FlashlightChecker_C_ReceiveTickAI");
static_assert(sizeof(BTS_FlashlightChecker_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_FlashlightChecker_C_ReceiveTickAI");
static_assert(offsetof(BTS_FlashlightChecker_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_FlashlightChecker_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_FlashlightChecker_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_FlashlightChecker_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_FlashlightChecker_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

}

