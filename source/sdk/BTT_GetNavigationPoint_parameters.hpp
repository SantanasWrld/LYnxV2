#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_GetNavigationPoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.IsNavPointAvailable
// 0x00F0 (0x00F0 - 0x0000)
struct BTT_GetNavigationPoint_C_IsNavPointAvailable final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Parent_Enemy_C*                     Pawn;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NavigationPoint_C*                  NavPoint;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Available;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _AgentLocation;                                    // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _NavPointLocation;                                 // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetNavAgentLocation_ReturnValue;          // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARecastNavMesh*                         CallFunc_GetControllerNavData_NavData;             // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation; // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue; // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPartial_ReturnValue;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetRandomReachablePointInRadius_Radius_ImplicitCast; // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_GetNavigationPoint_C_IsNavPointAvailable) == 0x000008, "Wrong alignment on BTT_GetNavigationPoint_C_IsNavPointAvailable");
static_assert(sizeof(BTT_GetNavigationPoint_C_IsNavPointAvailable) == 0x0000F0, "Wrong size on BTT_GetNavigationPoint_C_IsNavPointAvailable");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, Controller) == 0x000000, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::Controller' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, Pawn) == 0x000008, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::Pawn' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, NavPoint) == 0x000010, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::NavPoint' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, Available) == 0x000018, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::Available' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, Location) == 0x000020, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::Location' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, _AgentLocation) == 0x000038, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::_AgentLocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, _NavPointLocation) == 0x000050, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::_NavPointLocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000080, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_GetNavAgentLocation_ReturnValue) == 0x000088, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_GetNavAgentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_GetControllerNavData_NavData) == 0x0000A0, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_GetControllerNavData_NavData' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation) == 0x0000A8, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue) == 0x0000C0, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_Vector_Distance_ReturnValue) == 0x0000C8, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x0000D0, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_IsPartial_ReturnValue) == 0x0000D8, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_IsPartial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_IsValid_ReturnValue) == 0x0000D9, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_Not_PreBool_ReturnValue) == 0x0000DA, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_BooleanAND_ReturnValue) == 0x0000DB, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000DC, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0000E0, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_IsNavPointAvailable, CallFunc_K2_GetRandomReachablePointInRadius_Radius_ImplicitCast) == 0x0000E8, "Member 'BTT_GetNavigationPoint_C_IsNavPointAvailable::CallFunc_K2_GetRandomReachablePointInRadius_Radius_ImplicitCast' has a wrong offset!");

// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.GetNavPoint
// 0x0080 (0x0080 - 0x0000)
struct BTT_GetNavigationPoint_C_GetNavPoint final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Parent_Enemy_C*                     Pawn;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          PointFound;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NavigationPoint_C*>          _NavigationPoints;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NavigationPoint_C*                  CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNavPointAvailable_Available;            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_IsNavPointAvailable_Location;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_GetNavigationPoint_C_GetNavPoint) == 0x000008, "Wrong alignment on BTT_GetNavigationPoint_C_GetNavPoint");
static_assert(sizeof(BTT_GetNavigationPoint_C_GetNavPoint) == 0x000080, "Wrong size on BTT_GetNavigationPoint_C_GetNavPoint");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, Controller) == 0x000000, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::Controller' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, Pawn) == 0x000008, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::Pawn' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, PointFound) == 0x000010, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::PointFound' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, Location) == 0x000018, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::Location' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, _NavigationPoints) == 0x000030, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::_NavigationPoints' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, CallFunc_Array_Get_Item) == 0x000050, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, CallFunc_IsNavPointAvailable_Available) == 0x00005C, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::CallFunc_IsNavPointAvailable_Available' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, CallFunc_IsNavPointAvailable_Location) == 0x000060, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::CallFunc_IsNavPointAvailable_Location' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_GetNavPoint, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'BTT_GetNavigationPoint_C_GetNavPoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_GetNavigationPoint_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_GetNavigationPoint_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_GetNavigationPoint_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_GetNavigationPoint_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_GetNavigationPoint_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_GetNavigationPoint_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_GetNavigationPoint_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_GetNavigationPoint_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTT_GetNavigationPoint.BTT_GetNavigationPoint_C.ExecuteUbergraph_BTT_GetNavigationPoint
// 0x0040 (0x0040 - 0x0000)
struct BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Parent_Enemy_C*                     K2Node_DynamicCast_AsBP_Parent_Enemy;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetNavPoint_PointFound;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetNavPoint_Location;                     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint) == 0x000008, "Wrong alignment on BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint");
static_assert(sizeof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint) == 0x000040, "Wrong size on BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint");
static_assert(offsetof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint, EntryPoint) == 0x000000, "Member 'BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint, K2Node_Event_OwnerController) == 0x000008, "Member 'BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint, K2Node_DynamicCast_AsBP_Parent_Enemy) == 0x000018, "Member 'BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint::K2Node_DynamicCast_AsBP_Parent_Enemy' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint, CallFunc_GetNavPoint_PointFound) == 0x000021, "Member 'BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint::CallFunc_GetNavPoint_PointFound' has a wrong offset!");
static_assert(offsetof(BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint, CallFunc_GetNavPoint_Location) == 0x000028, "Member 'BTT_GetNavigationPoint_C_ExecuteUbergraph_BTT_GetNavigationPoint::CallFunc_GetNavPoint_Location' has a wrong offset!");

}

