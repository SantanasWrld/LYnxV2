#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPGameInstance

#include "Basic.hpp"

#include "E_InventoryItem_structs.hpp"
#include "SteamIntegrationKit_structs.hpp"
#include "E_AntiAliasingMethod_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BlueprintJson_structs.hpp"
#include "S_InventoryItem_structs.hpp"
#include "S_FindSessionsResult_structs.hpp"
#include "E_Dismemberment_structs.hpp"
#include "E_DeathType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UPGameInstance.BP_UPGameInstance_C
// 0x0680 (0x0840 - 0x01C0)
class UBP_UPGameInstance_C final : public UGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int64                                         LocalSteamId;                                      // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 SessionNameKey;                                    // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VersionKey;                                        // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CustomGameKey;                                     // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSIK_SteamId                           LobbyID;                                           // 0x0200(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class FString                                 SessionName;                                       // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<int32, class UTexture2D*>                CameroidTextures;                                  // 0x0218(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const struct FS_FindSessionsResult& Sessions)> OnSessionsFound;    // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool IsPrivate)> OnSessionCreated;                                 // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool IsPrivate)> OnSessionJoined;                                  // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsHost;                                            // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSessionFriendsOnly;                              // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SessionSlot;                                       // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LocalPlayerName;                                   // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ResultsMapName;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_UPPlayerCharacter_C*>        Players;                                           // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class ABP_UPPlayerCharacter_C* Player)> OnPlayerCreated;           // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ABP_UPPlayerCharacter_C* Player)> OnPlayerDestroyed;         // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& DestinationMapName)> OnServerTravelStarted;   // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 TransitionMapName;                                 // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 LobbyMapName;                                      // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<E_InventoryItem, struct FS_InventoryItem> InventoryItems;                                   // 0x0320(0x0050)(Edit, BlueprintVisible)
	int32                                         NextItemID;                                        // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& UserId, const class FString& Username, const class FString& LoginMethod)> OnLogin; // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FBlueprintJsonObject>           PendingEvents;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 UserId;                                            // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SessionID;                                         // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ApiKey;                                            // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 IdentifyUrl;                                       // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 EventsUrl;                                         // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 LoginEventId;                                      // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SessionEventId;                                    // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<int64, class UTexture2D*>                ProfilePictures;                                   // 0x0400(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UInputAction*                           LookInputAction;                                   // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_InputsSettings_C*                   InputsSettings;                                    // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 InputsSettingsSaveSlot;                            // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TSet<int64>                                   MutedPlayerIds;                                    // 0x0470(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 GraphicSettingsEventId;                            // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 EnterHQEventId;                                    // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DayStartEventId;                                   // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DayEndEventId;                                     // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          NewInSession;                                      // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Loading_C*                           LoadingWidget;                                     // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 SelectAvatarEventId;                               // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 BuyItemEventId;                                    // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 InteriorEnterEventId;                              // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 InteriorQuitEventId;                               // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AttackedEventId;                                   // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 KilledEventId;                                     // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ResultsEventId;                                    // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SessionSurveyEventId;                              // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 WelcomePanelEventId;                               // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 TutorialSaveSlotName;                              // 0x05A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FName, bool>                       TutorialSteps;                                     // 0x05B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   TutorialStep_WelcomePanel;                         // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              StartTimeUTC;                                      // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   TutorialStep_SessionSurvey;                        // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PlaytestSteamIds;                                  // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsPlaytestUser;                                    // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SplashScreenDisplayed;                             // 0x0629(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A[0x6];                                      // 0x062A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerSettingsSlotName;                            // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CinematicRatioEnabled;                             // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_641[0x7];                                      // 0x0641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPlayerSettingsChanged;                           // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_AntiAliasingMethod                          AntiAliasingMethod;                                // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoGoreModeEnabled;                                 // 0x0659(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LobbyMusicEnabled;                                 // 0x065A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenKicked;                                     // 0x065B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenDisconnected;                               // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingGamepad;                                    // 0x065D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65E[0x2];                                      // 0x065E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsUsingGamepad)> OnGamepadUsageChanged;                       // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnLoginDisplayed;                                  // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSIK_SteamId                           PreviousLobbyId;                                   // 0x0680(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        BaseFOV;                                           // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundMix*                              MasterSoundMix;                                    // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MasterVolume;                                      // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundClass*                            MasterSoundClass;                                  // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HeadBobbingEnabled;                                // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RenderScale;                                       // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CustomGameConfig_C*                 CustomGameConfig;                                  // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 CustomGameConfigSlotName;                          // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsCustomGame;                                      // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomGameEventId;                                 // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchBreakingNews;                                   // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchFrontPageLegends;                               // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchAbsoluteLegends;                                // 0x0708(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchFullTeam;                                       // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchPressCorpsAssemble;                             // 0x0728(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchCloseEncounters;                                // 0x0738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchWorthyTragedy;                                  // 0x0748(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchWarCorrespondant;                               // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchBronzeAwardShot;                                // 0x0768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchSilverAwardShot;                                // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchGoldAwardShot;                                  // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchPlatinumAwardShot;                              // 0x0798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchEmeraldAwardShot;                               // 0x07A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchDiamondAwardShot;                               // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchDavidVsGoliath;                                 // 0x07C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchGreatSession;                                   // 0x07D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchExtraordinarySession;                           // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchLegendarySession;                               // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchPerfectPrecision;                               // 0x0808(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 AchNotDeadYet;                                     // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           StoreAchievementTimer;                             // 0x0828(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnJoinRequestFailed;                               // 0x0830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddRequestLobbyCustomGamesFilter(bool IncludeCustomGames);
	void ApplyAntiAliasingMethod();
	void ApplyPlayerSettings();
	void ApplyRenderScale();
	void CheckIfPlaytestUser();
	void CheckSessionName(const class FString& InSessionName, class FString* OutSessionName);
	void ClearCameroidTextures(bool IsPrivate);
	void ClearItemSave(int32 ItemId);
	void DeleteSavedSession(int32 SessionSlot_0);
	void DeleteTempSaveFiles();
	void ExecuteUbergraph_BP_UPGameInstance(int32 EntryPoint);
	void GetAllItems(TArray<struct FS_InventoryItemSave>* Items);
	void GetCurrentMapType(bool* InLobby, bool* InResult);
	void GetGameSession(class ABP_UPGameSession_C** GameSession);
	void GetMaxPlayersInSession(int32* MaxPlayers);
	void GetNewItemID(int32* ItemId);
	void GetPerfEventProperties(class FString* MapName, bool* IsHost_0, bool* IsInterior, int32* FrameRate, int32* Latency);
	void GetPlayersCount(int32* PlayersCount);
	void GetPlayerWithId(int64 SteamID, class ABP_UPPlayerCharacter_C** Player);
	void GetProfilePicture(int64 SteamID, class UTexture2D** ProfilePicture);
	void GetResultsDetails(class ABP_Episodes_C* Episodes, int32* Score, int32* Difficulty, bool* IsSuccess, bool* IsFailed);
	void GetSaveSessionInfo(int32 SessionSlot_0, bool* IsUsed, int32* Objective, int32* DaysLeft, bool* IsCustom);
	void GetSaveSessionSlot(const class FString& ObjectSlot, int32 SessionSlot_0, class FString* Slot);
	void GetSessionDifficulty(int32* Difficulty);
	void GetSessionElapsedDuration(class ABP_UPGameSession_C* GameSession, int32* Duration);
	void GetStatistics(class UW_Statistics_C** Statistics);
	void HideLoading();
	void InitAnalytics();
	void InitCombatEvents(class ABP_UPPlayerCharacter_C* Player);
	void InitCustomGame();
	void InitEvents();
	void InitInputs();
	void InitInteriorEvents(class ABP_UPPlayerCharacter_C* Player);
	void InitLoginEvent();
	void InitMapEvents();
	void InitMasterSoundMix();
	void InitOnlineServices();
	void InitPlayerAnalytics(class ABP_UPPlayerCharacter_C* Player);
	void InitResultsEvent();
	void InitSessionCreatedEvent();
	void InitSessionId();
	void InitSessionJoinedEvent();
	void InitSettings();
	void InitTutorial();
	void IsCurrentSessionFull(bool* IsFull);
	void IsFirstSpawnInResults(bool* Result);
	void IsInLobby(bool* InLobby);
	void IsInResults(bool* InResults);
	void IsInSession(bool* InSession);
	void IsLobbyVersion(const struct FSIK_SteamId& LobbyID_0, const class FString& Version, bool* Compatible);
	void IsLobbyVersionCompatible(const struct FSIK_SteamId& LobbyID_0, bool* Compatible);
	void IsLocalPlayerDead(bool* IsDead);
	void IsLoggedIn(bool* LoggedIn);
	void IsSessionFull(int64 SessionID_0, bool* IsFull);
	void IsTempSaveFile(const class FString& Filename, bool* IsTemp);
	void IsTutorialDone(class FName TutorialStep, bool* IsDone);
	void KickedOutOfSession();
	void LoadCustomGameConfig(int32 SaveSlot, bool* IsCustomGame_0);
	void LoadPlayerSettings();
	void LoadSavedSession();
	void LoadSavedSessionObject(const class FString& ObjectSlot, int32 SessionSlot_0, class USaveGame** SaveObject);
	void LoadTutorial();
	void MakeIdentification(const class FString& UserId_0, const TMap<class FString, struct FBlueprintJsonValue>& UserProperties, struct FBlueprintJsonObject* Identification);
	void OnFailure_3F21F4844E933DB6BDE924BFD6B4CF07(ESIK_Result Result, bool bLocked, ESIK_ChatRoomEnterResponse ChatRoomEnterResponse);
	void OnFailure_C16FC9C64CE22E0C5B9170B23CEA3D5C(ESIK_Result Result, const struct FSIK_SteamId& LobbyID_0);
	void OnFailure_D1760A044E6CA70A24A8B6BE23278679(int32 LobbiesMatching);
	void OnSuccess_3F21F4844E933DB6BDE924BFD6B4CF07(ESIK_Result Result, bool bLocked, ESIK_ChatRoomEnterResponse ChatRoomEnterResponse);
	void OnSuccess_C16FC9C64CE22E0C5B9170B23CEA3D5C(ESIK_Result Result, const struct FSIK_SteamId& LobbyID_0);
	void OnSuccess_D1760A044E6CA70A24A8B6BE23278679(int32 LobbiesMatching);
	void OS_AbsoluteServerTravel(const class FString& MapName);
	void OS_CreateSession(const class FString& SessionName_0, bool FriendsOnly, bool CustomGame);
	void OS_EndLogin(int64 SteamID, const class FString& PlayerName, const class FString& Method);
	void OS_FindSessions(ESIK_LobbyDistanceFilter DistanceFilter, bool IncludeCustomGames);
	void OS_HostMigrated(const struct FSIK_SteamId& LobbyID_0, bool bLocalPlayerHost);
	void OS_InitHostMigration();
	void OS_InitInvites();
	void OS_InviteAccepted(const struct FSIK_SteamId& SteamID, const struct FSIK_SteamId& LobbyID_0);
	void OS_InviteFriendToSession();
	void OS_JoinSession(int64 SessionID_0);
	void OS_LoginWithSteam();
	void OS_PrepareHostMigration(bool IsPrivate);
	void OS_ServerTravel(const class FString& MapName);
	void OS_SetSessionFriendsOnly(bool FriendsOnly);
	void OS_StopSession();
	void PlayerCreated(class ABP_UPPlayerCharacter_C* Player);
	void PlayerDestroyed(class ABP_UPPlayerCharacter_C* Player);
	void PostLogin(const class FString& UserId_0, const class FString& Username, const class FString& LoginMethod);
	void ProcessSteamLobbies(int32 Count, bool IncludeCustomGames, struct FS_FindSessionsResult* Result);
	void PullPendingEvents(bool* HasEvents, TArray<struct FBlueprintJsonValue>* EventsArray);
	void ReceiveInit();
	void ReceiveShutdown();
	void RemoveLoadingWidget();
	void SaveCustomGameConfig();
	void SaveInputsSettings();
	void SavePlayerSettings();
	void SavePlayersIfInSession();
	void SaveSession();
	void SaveSessionObject(class USaveGame* ObjectSave, const class FString& ObjectSlot, int32 SessionSlot_0);
	void SaveTutorial();
	void SendAttackedEvent(int32 Damage, bool Ragdoll, const struct FVector& SourceLocation, double Force, E_Dismemberment Dismemberment, E_DeathType DeathType, class AActor* Attacker);
	void SendDayEndEvent(class ABP_UPGameSession_C* GameSession);
	void SendDayStartEvent();
	void SendEnterHQEvent();
	void SendEvent(const struct FBlueprintJsonObject& Event);
	void SendEvents();
	void SendEventWithProperties(const class FString& EventName, const TMap<class FString, struct FBlueprintJsonValue>& properties);
	void SendIdentify(const TMap<class FString, struct FBlueprintJsonValue>& properties);
	void SendInteriorEnterEvent();
	void SendInteriorQuitEvent();
	void SendKilledEvent(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void SendResultsEvent(class ABP_Episodes_C* Episodes);
	void SendSimpleEvent(const class FString& EventName);
	void SessionCreated(bool IsPrivate);
	void SessionJoined(bool IsPrivate);
	void SetAntiAliasingMethod(E_AntiAliasingMethod AntiAliasingMethod_0);
	void SetBaseFov(double BaseFOV_0);
	void SetCinematicRatioEnabled(bool CinematicRatioEnabled_0);
	void SetHeadBobbingEnabled(bool HeadBobbingEnabled_0);
	void SetInvertMouseX(bool InvertMouseX);
	void SetInvertMouseY(bool InvertMouseY);
	void SetLobbyMusicEnabled(bool LobbyMusicEnabled_0);
	void SetLookSensitivity(double Sensitivity);
	void SetMasterVolume(double MasterVolume_0);
	void SetNoGoreModeEnabled(bool NoGoreModeEnabled_0);
	void SetRenderScale(double RenderScale_0);
	void SetTutorialDone(class FName TutorialStep);
	void SetUserPropertyInt(const class FString& Key, int32 Value);
	void SetUserPropertyString(const class FString& Key, const class FString& Value);
	void ShouldShowSessionSurvey(bool* Result);
	void ShowLoading(const class FString& MapName, int32 Difficulty, int32 CurrentPoints, int32 Objective, int32 RemainingDays);
	void StoreAchievements();
	void UnlockAchievement(const class FString& AchievementName);
	void UpdateGamepadUsage(bool IsUsingGamepad_0);
	void UpdateMasterSoundMix();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UPGameInstance_C">();
	}
	static class UBP_UPGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UPGameInstance_C>();
	}
};
static_assert(alignof(UBP_UPGameInstance_C) == 0x000008, "Wrong alignment on UBP_UPGameInstance_C");
static_assert(sizeof(UBP_UPGameInstance_C) == 0x000840, "Wrong size on UBP_UPGameInstance_C");
static_assert(offsetof(UBP_UPGameInstance_C, UberGraphFrame) == 0x0001C0, "Member 'UBP_UPGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LocalSteamId) == 0x0001C8, "Member 'UBP_UPGameInstance_C::LocalSteamId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SessionNameKey) == 0x0001D0, "Member 'UBP_UPGameInstance_C::SessionNameKey' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, VersionKey) == 0x0001E0, "Member 'UBP_UPGameInstance_C::VersionKey' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, CustomGameKey) == 0x0001F0, "Member 'UBP_UPGameInstance_C::CustomGameKey' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LobbyID) == 0x000200, "Member 'UBP_UPGameInstance_C::LobbyID' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SessionName) == 0x000208, "Member 'UBP_UPGameInstance_C::SessionName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, CameroidTextures) == 0x000218, "Member 'UBP_UPGameInstance_C::CameroidTextures' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnSessionsFound) == 0x000268, "Member 'UBP_UPGameInstance_C::OnSessionsFound' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnSessionCreated) == 0x000278, "Member 'UBP_UPGameInstance_C::OnSessionCreated' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnSessionJoined) == 0x000288, "Member 'UBP_UPGameInstance_C::OnSessionJoined' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, IsHost) == 0x000298, "Member 'UBP_UPGameInstance_C::IsHost' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, IsSessionFriendsOnly) == 0x000299, "Member 'UBP_UPGameInstance_C::IsSessionFriendsOnly' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SessionSlot) == 0x00029C, "Member 'UBP_UPGameInstance_C::SessionSlot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LocalPlayerName) == 0x0002A0, "Member 'UBP_UPGameInstance_C::LocalPlayerName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, ResultsMapName) == 0x0002B0, "Member 'UBP_UPGameInstance_C::ResultsMapName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, Players) == 0x0002C0, "Member 'UBP_UPGameInstance_C::Players' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnPlayerCreated) == 0x0002D0, "Member 'UBP_UPGameInstance_C::OnPlayerCreated' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnPlayerDestroyed) == 0x0002E0, "Member 'UBP_UPGameInstance_C::OnPlayerDestroyed' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnServerTravelStarted) == 0x0002F0, "Member 'UBP_UPGameInstance_C::OnServerTravelStarted' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, TransitionMapName) == 0x000300, "Member 'UBP_UPGameInstance_C::TransitionMapName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LobbyMapName) == 0x000310, "Member 'UBP_UPGameInstance_C::LobbyMapName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, InventoryItems) == 0x000320, "Member 'UBP_UPGameInstance_C::InventoryItems' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, NextItemID) == 0x000370, "Member 'UBP_UPGameInstance_C::NextItemID' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnLogin) == 0x000378, "Member 'UBP_UPGameInstance_C::OnLogin' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, PendingEvents) == 0x000388, "Member 'UBP_UPGameInstance_C::PendingEvents' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, UserId) == 0x000398, "Member 'UBP_UPGameInstance_C::UserId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SessionID) == 0x0003A8, "Member 'UBP_UPGameInstance_C::SessionID' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, ApiKey) == 0x0003B0, "Member 'UBP_UPGameInstance_C::ApiKey' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, IdentifyUrl) == 0x0003C0, "Member 'UBP_UPGameInstance_C::IdentifyUrl' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, EventsUrl) == 0x0003D0, "Member 'UBP_UPGameInstance_C::EventsUrl' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LoginEventId) == 0x0003E0, "Member 'UBP_UPGameInstance_C::LoginEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SessionEventId) == 0x0003F0, "Member 'UBP_UPGameInstance_C::SessionEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, ProfilePictures) == 0x000400, "Member 'UBP_UPGameInstance_C::ProfilePictures' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LookInputAction) == 0x000450, "Member 'UBP_UPGameInstance_C::LookInputAction' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, InputsSettings) == 0x000458, "Member 'UBP_UPGameInstance_C::InputsSettings' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, InputsSettingsSaveSlot) == 0x000460, "Member 'UBP_UPGameInstance_C::InputsSettingsSaveSlot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, MutedPlayerIds) == 0x000470, "Member 'UBP_UPGameInstance_C::MutedPlayerIds' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, GraphicSettingsEventId) == 0x0004C0, "Member 'UBP_UPGameInstance_C::GraphicSettingsEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, EnterHQEventId) == 0x0004D0, "Member 'UBP_UPGameInstance_C::EnterHQEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, DayStartEventId) == 0x0004E0, "Member 'UBP_UPGameInstance_C::DayStartEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, DayEndEventId) == 0x0004F0, "Member 'UBP_UPGameInstance_C::DayEndEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, NewInSession) == 0x000500, "Member 'UBP_UPGameInstance_C::NewInSession' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LoadingWidget) == 0x000508, "Member 'UBP_UPGameInstance_C::LoadingWidget' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SelectAvatarEventId) == 0x000510, "Member 'UBP_UPGameInstance_C::SelectAvatarEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, BuyItemEventId) == 0x000520, "Member 'UBP_UPGameInstance_C::BuyItemEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, InteriorEnterEventId) == 0x000530, "Member 'UBP_UPGameInstance_C::InteriorEnterEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, InteriorQuitEventId) == 0x000540, "Member 'UBP_UPGameInstance_C::InteriorQuitEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AttackedEventId) == 0x000550, "Member 'UBP_UPGameInstance_C::AttackedEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, KilledEventId) == 0x000560, "Member 'UBP_UPGameInstance_C::KilledEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, ResultsEventId) == 0x000570, "Member 'UBP_UPGameInstance_C::ResultsEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SessionSurveyEventId) == 0x000580, "Member 'UBP_UPGameInstance_C::SessionSurveyEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, WelcomePanelEventId) == 0x000590, "Member 'UBP_UPGameInstance_C::WelcomePanelEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, TutorialSaveSlotName) == 0x0005A0, "Member 'UBP_UPGameInstance_C::TutorialSaveSlotName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, TutorialSteps) == 0x0005B0, "Member 'UBP_UPGameInstance_C::TutorialSteps' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, TutorialStep_WelcomePanel) == 0x000600, "Member 'UBP_UPGameInstance_C::TutorialStep_WelcomePanel' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, StartTimeUTC) == 0x000608, "Member 'UBP_UPGameInstance_C::StartTimeUTC' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, TutorialStep_SessionSurvey) == 0x000610, "Member 'UBP_UPGameInstance_C::TutorialStep_SessionSurvey' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, PlaytestSteamIds) == 0x000618, "Member 'UBP_UPGameInstance_C::PlaytestSteamIds' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, IsPlaytestUser) == 0x000628, "Member 'UBP_UPGameInstance_C::IsPlaytestUser' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, SplashScreenDisplayed) == 0x000629, "Member 'UBP_UPGameInstance_C::SplashScreenDisplayed' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, PlayerSettingsSlotName) == 0x000630, "Member 'UBP_UPGameInstance_C::PlayerSettingsSlotName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, CinematicRatioEnabled) == 0x000640, "Member 'UBP_UPGameInstance_C::CinematicRatioEnabled' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnPlayerSettingsChanged) == 0x000648, "Member 'UBP_UPGameInstance_C::OnPlayerSettingsChanged' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AntiAliasingMethod) == 0x000658, "Member 'UBP_UPGameInstance_C::AntiAliasingMethod' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, NoGoreModeEnabled) == 0x000659, "Member 'UBP_UPGameInstance_C::NoGoreModeEnabled' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, LobbyMusicEnabled) == 0x00065A, "Member 'UBP_UPGameInstance_C::LobbyMusicEnabled' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, HasBeenKicked) == 0x00065B, "Member 'UBP_UPGameInstance_C::HasBeenKicked' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, HasBeenDisconnected) == 0x00065C, "Member 'UBP_UPGameInstance_C::HasBeenDisconnected' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, IsUsingGamepad) == 0x00065D, "Member 'UBP_UPGameInstance_C::IsUsingGamepad' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnGamepadUsageChanged) == 0x000660, "Member 'UBP_UPGameInstance_C::OnGamepadUsageChanged' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnLoginDisplayed) == 0x000670, "Member 'UBP_UPGameInstance_C::OnLoginDisplayed' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, PreviousLobbyId) == 0x000680, "Member 'UBP_UPGameInstance_C::PreviousLobbyId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, BaseFOV) == 0x000688, "Member 'UBP_UPGameInstance_C::BaseFOV' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, MasterSoundMix) == 0x000690, "Member 'UBP_UPGameInstance_C::MasterSoundMix' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, MasterVolume) == 0x000698, "Member 'UBP_UPGameInstance_C::MasterVolume' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, MasterSoundClass) == 0x0006A0, "Member 'UBP_UPGameInstance_C::MasterSoundClass' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, HeadBobbingEnabled) == 0x0006A8, "Member 'UBP_UPGameInstance_C::HeadBobbingEnabled' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, RenderScale) == 0x0006B0, "Member 'UBP_UPGameInstance_C::RenderScale' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, CustomGameConfig) == 0x0006B8, "Member 'UBP_UPGameInstance_C::CustomGameConfig' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, CustomGameConfigSlotName) == 0x0006C0, "Member 'UBP_UPGameInstance_C::CustomGameConfigSlotName' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, IsCustomGame) == 0x0006D0, "Member 'UBP_UPGameInstance_C::IsCustomGame' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, CustomGameEventId) == 0x0006D8, "Member 'UBP_UPGameInstance_C::CustomGameEventId' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchBreakingNews) == 0x0006E8, "Member 'UBP_UPGameInstance_C::AchBreakingNews' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchFrontPageLegends) == 0x0006F8, "Member 'UBP_UPGameInstance_C::AchFrontPageLegends' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchAbsoluteLegends) == 0x000708, "Member 'UBP_UPGameInstance_C::AchAbsoluteLegends' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchFullTeam) == 0x000718, "Member 'UBP_UPGameInstance_C::AchFullTeam' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchPressCorpsAssemble) == 0x000728, "Member 'UBP_UPGameInstance_C::AchPressCorpsAssemble' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchCloseEncounters) == 0x000738, "Member 'UBP_UPGameInstance_C::AchCloseEncounters' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchWorthyTragedy) == 0x000748, "Member 'UBP_UPGameInstance_C::AchWorthyTragedy' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchWarCorrespondant) == 0x000758, "Member 'UBP_UPGameInstance_C::AchWarCorrespondant' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchBronzeAwardShot) == 0x000768, "Member 'UBP_UPGameInstance_C::AchBronzeAwardShot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchSilverAwardShot) == 0x000778, "Member 'UBP_UPGameInstance_C::AchSilverAwardShot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchGoldAwardShot) == 0x000788, "Member 'UBP_UPGameInstance_C::AchGoldAwardShot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchPlatinumAwardShot) == 0x000798, "Member 'UBP_UPGameInstance_C::AchPlatinumAwardShot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchEmeraldAwardShot) == 0x0007A8, "Member 'UBP_UPGameInstance_C::AchEmeraldAwardShot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchDiamondAwardShot) == 0x0007B8, "Member 'UBP_UPGameInstance_C::AchDiamondAwardShot' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchDavidVsGoliath) == 0x0007C8, "Member 'UBP_UPGameInstance_C::AchDavidVsGoliath' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchGreatSession) == 0x0007D8, "Member 'UBP_UPGameInstance_C::AchGreatSession' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchExtraordinarySession) == 0x0007E8, "Member 'UBP_UPGameInstance_C::AchExtraordinarySession' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchLegendarySession) == 0x0007F8, "Member 'UBP_UPGameInstance_C::AchLegendarySession' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchPerfectPrecision) == 0x000808, "Member 'UBP_UPGameInstance_C::AchPerfectPrecision' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, AchNotDeadYet) == 0x000818, "Member 'UBP_UPGameInstance_C::AchNotDeadYet' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, StoreAchievementTimer) == 0x000828, "Member 'UBP_UPGameInstance_C::StoreAchievementTimer' has a wrong offset!");
static_assert(offsetof(UBP_UPGameInstance_C, OnJoinRequestFailed) == 0x000830, "Member 'UBP_UPGameInstance_C::OnJoinRequestFailed' has a wrong offset!");

}

