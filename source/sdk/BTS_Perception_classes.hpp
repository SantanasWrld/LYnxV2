#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_Perception

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_Perception.BTS_Perception_C
// 0x0138 (0x01D0 - 0x0098)
class UBTS_Perception_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSubclassOf<class UAISense>                   MainSense;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UAISense>                   WarningSense;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 TargetKey;                                         // 0x00B0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 TargetDistanceKey;                                 // 0x00D8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 LastPerceivedLocationKey;                          // 0x0100(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 IsCurrentlyPerceivedKey;                           // 0x0128(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 IsConfirmedKey;                                    // 0x0150(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 IsAccessibleKey;                                   // 0x0178(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 IsVisibleByTargetKey;                              // 0x01A0(0x0028)(Edit, BlueprintVisible)
	bool                                          IgnoreRagdolls;                                    // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsVisibleByTarget(class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, bool* IsVisible);
	void IsTargetAccessible(class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, bool* IsAccessible);
	void IsPossibleTarget(class ABP_KillableCharacter_C* Killable, class ABP_Parent_Enemy_C* Pawn, bool* Result);
	void SetBlackboardValues(class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, double Distance, const struct FVector& LastPerceivedLocation, bool IsCurrentlyPerceived, bool IsConfirmed, bool IsAccessible, bool IsVisibleByTarget_0);
	void IsCurrentlyPerceived(class AAIController* Controller, class ABP_KillableCharacter_C* Killable, bool* IsPerceived);
	void SetResults(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, double Distance, bool IsConfirmed);
	void GetLastPerceivedLocation(class AAIController* Controller, class ABP_KillableCharacter_C* Target, struct FVector* PerceivedLocation);
	void GetClosestPerceivedActor(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, TSubclassOf<class UAISense> Sense, class ABP_KillableCharacter_C** Killable, double* Distance);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ExecuteUbergraph_BTS_Perception(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_Perception_C">();
	}
	static class UBTS_Perception_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_Perception_C>();
	}
};
static_assert(alignof(UBTS_Perception_C) == 0x000008, "Wrong alignment on UBTS_Perception_C");
static_assert(sizeof(UBTS_Perception_C) == 0x0001D0, "Wrong size on UBTS_Perception_C");
static_assert(offsetof(UBTS_Perception_C, UberGraphFrame) == 0x000098, "Member 'UBTS_Perception_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, MainSense) == 0x0000A0, "Member 'UBTS_Perception_C::MainSense' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, WarningSense) == 0x0000A8, "Member 'UBTS_Perception_C::WarningSense' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, TargetKey) == 0x0000B0, "Member 'UBTS_Perception_C::TargetKey' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, TargetDistanceKey) == 0x0000D8, "Member 'UBTS_Perception_C::TargetDistanceKey' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, LastPerceivedLocationKey) == 0x000100, "Member 'UBTS_Perception_C::LastPerceivedLocationKey' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, IsCurrentlyPerceivedKey) == 0x000128, "Member 'UBTS_Perception_C::IsCurrentlyPerceivedKey' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, IsConfirmedKey) == 0x000150, "Member 'UBTS_Perception_C::IsConfirmedKey' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, IsAccessibleKey) == 0x000178, "Member 'UBTS_Perception_C::IsAccessibleKey' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, IsVisibleByTargetKey) == 0x0001A0, "Member 'UBTS_Perception_C::IsVisibleByTargetKey' has a wrong offset!");
static_assert(offsetof(UBTS_Perception_C, IgnoreRagdolls) == 0x0001C8, "Member 'UBTS_Perception_C::IgnoreRagdolls' has a wrong offset!");

}

