#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Killable

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_Dismemberment_structs.hpp"
#include "E_DeathType_structs.hpp"


namespace SDK::Params
{

// Function BPI_Killable.BPI_Killable_C.Harm
// 0x0038 (0x0038 - 0x0000)
struct BPI_Killable_C_Harm final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ragdoll;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SourceLocation;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Force;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Dismemberment                               Dismemberment;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DeathType                                   DeathType;                                         // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Attacker;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Killable_C_Harm) == 0x000008, "Wrong alignment on BPI_Killable_C_Harm");
static_assert(sizeof(BPI_Killable_C_Harm) == 0x000038, "Wrong size on BPI_Killable_C_Harm");
static_assert(offsetof(BPI_Killable_C_Harm, Damage) == 0x000000, "Member 'BPI_Killable_C_Harm::Damage' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Harm, Ragdoll) == 0x000004, "Member 'BPI_Killable_C_Harm::Ragdoll' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Harm, SourceLocation) == 0x000008, "Member 'BPI_Killable_C_Harm::SourceLocation' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Harm, Force) == 0x000020, "Member 'BPI_Killable_C_Harm::Force' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Harm, Dismemberment) == 0x000028, "Member 'BPI_Killable_C_Harm::Dismemberment' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Harm, DeathType) == 0x000029, "Member 'BPI_Killable_C_Harm::DeathType' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Harm, Attacker) == 0x000030, "Member 'BPI_Killable_C_Harm::Attacker' has a wrong offset!");

// Function BPI_Killable.BPI_Killable_C.IsDead
// 0x0001 (0x0001 - 0x0000)
struct BPI_Killable_C_IsDead final
{
public:
	bool                                          Dead;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Killable_C_IsDead) == 0x000001, "Wrong alignment on BPI_Killable_C_IsDead");
static_assert(sizeof(BPI_Killable_C_IsDead) == 0x000001, "Wrong size on BPI_Killable_C_IsDead");
static_assert(offsetof(BPI_Killable_C_IsDead, Dead) == 0x000000, "Member 'BPI_Killable_C_IsDead::Dead' has a wrong offset!");

// Function BPI_Killable.BPI_Killable_C.Kill
// 0x0038 (0x0038 - 0x0000)
struct BPI_Killable_C_Kill final
{
public:
	bool                                          Ragdoll;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SourceLocation;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Force;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Dismemberment                               Dismemberment;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DeathType                                   DeathType;                                         // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Killer;                                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Killable_C_Kill) == 0x000008, "Wrong alignment on BPI_Killable_C_Kill");
static_assert(sizeof(BPI_Killable_C_Kill) == 0x000038, "Wrong size on BPI_Killable_C_Kill");
static_assert(offsetof(BPI_Killable_C_Kill, Ragdoll) == 0x000000, "Member 'BPI_Killable_C_Kill::Ragdoll' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Kill, SourceLocation) == 0x000008, "Member 'BPI_Killable_C_Kill::SourceLocation' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Kill, Force) == 0x000020, "Member 'BPI_Killable_C_Kill::Force' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Kill, Dismemberment) == 0x000028, "Member 'BPI_Killable_C_Kill::Dismemberment' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Kill, DeathType) == 0x000029, "Member 'BPI_Killable_C_Kill::DeathType' has a wrong offset!");
static_assert(offsetof(BPI_Killable_C_Kill, Killer) == 0x000030, "Member 'BPI_Killable_C_Kill::Killer' has a wrong offset!");

}

