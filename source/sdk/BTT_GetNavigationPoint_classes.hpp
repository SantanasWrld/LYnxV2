#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_GetNavigationPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_GetNavigationPoint.BTT_GetNavigationPoint_C
// 0x0048 (0x00F0 - 0x00A8)
class UBTT_GetNavigationPoint_C : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x00B0(0x0028)(Edit, BlueprintVisible)
	double                                        MinDistance;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireReachability;                               // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RadiusMultiplier;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsNavPointAvailable(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, class ABP_NavigationPoint_C* NavPoint, bool* Available, struct FVector* Location);
	void GetNavPoint(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, bool* PointFound, struct FVector* Location);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ExecuteUbergraph_BTT_GetNavigationPoint(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_GetNavigationPoint_C">();
	}
	static class UBTT_GetNavigationPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_GetNavigationPoint_C>();
	}
};
static_assert(alignof(UBTT_GetNavigationPoint_C) == 0x000008, "Wrong alignment on UBTT_GetNavigationPoint_C");
static_assert(sizeof(UBTT_GetNavigationPoint_C) == 0x0000F0, "Wrong size on UBTT_GetNavigationPoint_C");
static_assert(offsetof(UBTT_GetNavigationPoint_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_GetNavigationPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_GetNavigationPoint_C, DestinationKey) == 0x0000B0, "Member 'UBTT_GetNavigationPoint_C::DestinationKey' has a wrong offset!");
static_assert(offsetof(UBTT_GetNavigationPoint_C, MinDistance) == 0x0000D8, "Member 'UBTT_GetNavigationPoint_C::MinDistance' has a wrong offset!");
static_assert(offsetof(UBTT_GetNavigationPoint_C, RequireReachability) == 0x0000E0, "Member 'UBTT_GetNavigationPoint_C::RequireReachability' has a wrong offset!");
static_assert(offsetof(UBTT_GetNavigationPoint_C, RadiusMultiplier) == 0x0000E8, "Member 'UBTT_GetNavigationPoint_C::RadiusMultiplier' has a wrong offset!");

}

