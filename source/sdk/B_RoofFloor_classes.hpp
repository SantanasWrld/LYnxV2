#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_RoofFloor

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_Shapes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ProceduralMeshComponent_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_RoofFloor.B_RoofFloor_C
// 0x01B0 (0x0448 - 0x0298)
class AB_RoofFloor_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProceduralMeshComponent*               Roof;                                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CustomVertices;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        CustomVerticesTop;                                 // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        CustomVerticesSides;                               // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      Custom_Top_UV;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TempForTris;                                       // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CustomTopTris;                                     // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Custom_BottomTris;                                 // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 CustomSidesTris;                                   // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstance*                      OverwriteMaterialTop;                              // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      OverwriteMaterialBottom;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      OverwriteMaterialSides;                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Shapes                                      Shape;                                             // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dimension1;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dimension2;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Material_Top_Type;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Material_Bottom_Type;                              // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Thickness;                                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Two_Sides;                                         // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Generate_Sides;                                    // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_366[0x2];                                      // 0x0366(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SectionIndex;                                      // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TempMeshVertices;                                  // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        TempNormals;                                       // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      TempUV;                                            // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FProcMeshTangent>               TempTangents;                                      // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 TempTris;                                          // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentSectionNumber;                              // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSectionFinalBuilding;                       // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialTop;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material_Of_Section;                               // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UProceduralMeshComponent*               ProceduralMeshTemp;                                // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialBottom;                                    // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialSides;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Recalculate_Spline___Right_Angles;                 // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_Integer;                                      // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Materials_Top;                                     // 0x03F8(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	double                                        RealDimension1;                                    // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RealDimension2;                                    // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Overwrite_Material;                                // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Materials_Bottom;                                  // 0x0420(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	class UStaticMeshComponent*                   Temp_SM_Component;                                 // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* HierarchicalInstancedSM;                        // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* HierarchicalInstancedSMbottom;                  // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ConstructionFunction();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_RoofFloor_C">();
	}
	static class AB_RoofFloor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_RoofFloor_C>();
	}
};
static_assert(alignof(AB_RoofFloor_C) == 0x000008, "Wrong alignment on AB_RoofFloor_C");
static_assert(sizeof(AB_RoofFloor_C) == 0x000448, "Wrong size on AB_RoofFloor_C");
static_assert(offsetof(AB_RoofFloor_C, Spline) == 0x000298, "Member 'AB_RoofFloor_C::Spline' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Roof) == 0x0002A0, "Member 'AB_RoofFloor_C::Roof' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, DefaultSceneRoot) == 0x0002A8, "Member 'AB_RoofFloor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, CustomVertices) == 0x0002B0, "Member 'AB_RoofFloor_C::CustomVertices' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, CustomVerticesTop) == 0x0002C0, "Member 'AB_RoofFloor_C::CustomVerticesTop' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, CustomVerticesSides) == 0x0002D0, "Member 'AB_RoofFloor_C::CustomVerticesSides' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Custom_Top_UV) == 0x0002E0, "Member 'AB_RoofFloor_C::Custom_Top_UV' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, TempForTris) == 0x0002F0, "Member 'AB_RoofFloor_C::TempForTris' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, CustomTopTris) == 0x0002F8, "Member 'AB_RoofFloor_C::CustomTopTris' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Custom_BottomTris) == 0x000308, "Member 'AB_RoofFloor_C::Custom_BottomTris' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, CustomSidesTris) == 0x000318, "Member 'AB_RoofFloor_C::CustomSidesTris' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, OverwriteMaterialTop) == 0x000328, "Member 'AB_RoofFloor_C::OverwriteMaterialTop' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, OverwriteMaterialBottom) == 0x000330, "Member 'AB_RoofFloor_C::OverwriteMaterialBottom' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, OverwriteMaterialSides) == 0x000338, "Member 'AB_RoofFloor_C::OverwriteMaterialSides' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Shape) == 0x000340, "Member 'AB_RoofFloor_C::Shape' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Dimension1) == 0x000348, "Member 'AB_RoofFloor_C::Dimension1' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Dimension2) == 0x000350, "Member 'AB_RoofFloor_C::Dimension2' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Material_Top_Type) == 0x000358, "Member 'AB_RoofFloor_C::Material_Top_Type' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Material_Bottom_Type) == 0x00035C, "Member 'AB_RoofFloor_C::Material_Bottom_Type' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Thickness) == 0x000360, "Member 'AB_RoofFloor_C::Thickness' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Two_Sides) == 0x000364, "Member 'AB_RoofFloor_C::Two_Sides' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Generate_Sides) == 0x000365, "Member 'AB_RoofFloor_C::Generate_Sides' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, SectionIndex) == 0x000368, "Member 'AB_RoofFloor_C::SectionIndex' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, TempMeshVertices) == 0x000370, "Member 'AB_RoofFloor_C::TempMeshVertices' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, TempNormals) == 0x000380, "Member 'AB_RoofFloor_C::TempNormals' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, TempUV) == 0x000390, "Member 'AB_RoofFloor_C::TempUV' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, TempTangents) == 0x0003A0, "Member 'AB_RoofFloor_C::TempTangents' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, TempTris) == 0x0003B0, "Member 'AB_RoofFloor_C::TempTris' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, CurrentSectionNumber) == 0x0003C0, "Member 'AB_RoofFloor_C::CurrentSectionNumber' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, CurrentSectionFinalBuilding) == 0x0003C4, "Member 'AB_RoofFloor_C::CurrentSectionFinalBuilding' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, MaterialTop) == 0x0003C8, "Member 'AB_RoofFloor_C::MaterialTop' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Material_Of_Section) == 0x0003D0, "Member 'AB_RoofFloor_C::Material_Of_Section' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, ProceduralMeshTemp) == 0x0003D8, "Member 'AB_RoofFloor_C::ProceduralMeshTemp' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, MaterialBottom) == 0x0003E0, "Member 'AB_RoofFloor_C::MaterialBottom' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, MaterialSides) == 0x0003E8, "Member 'AB_RoofFloor_C::MaterialSides' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Recalculate_Spline___Right_Angles) == 0x0003F0, "Member 'AB_RoofFloor_C::Recalculate_Spline___Right_Angles' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Temp_Integer) == 0x0003F4, "Member 'AB_RoofFloor_C::Temp_Integer' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Materials_Top) == 0x0003F8, "Member 'AB_RoofFloor_C::Materials_Top' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, RealDimension1) == 0x000408, "Member 'AB_RoofFloor_C::RealDimension1' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, RealDimension2) == 0x000410, "Member 'AB_RoofFloor_C::RealDimension2' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Overwrite_Material) == 0x000418, "Member 'AB_RoofFloor_C::Overwrite_Material' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Materials_Bottom) == 0x000420, "Member 'AB_RoofFloor_C::Materials_Bottom' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, Temp_SM_Component) == 0x000430, "Member 'AB_RoofFloor_C::Temp_SM_Component' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, HierarchicalInstancedSM) == 0x000438, "Member 'AB_RoofFloor_C::HierarchicalInstancedSM' has a wrong offset!");
static_assert(offsetof(AB_RoofFloor_C, HierarchicalInstancedSMbottom) == 0x000440, "Member 'AB_RoofFloor_C::HierarchicalInstancedSMbottom' has a wrong offset!");

}

