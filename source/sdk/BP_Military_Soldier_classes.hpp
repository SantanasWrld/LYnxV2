#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Military_Soldier

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Military_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Military_Soldier.BP_Military_Soldier_C
// 0x0040 (0x0BE0 - 0x0BA0)
class ABP_Military_Soldier_C final : public ABP_Military_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Military_Soldier_C;              // 0x0BA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        WeaponShells;                                      // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        WeaponEnd;                                         // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Military_Captain_C*                 Captain;                                           // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         BulletsMax;                                        // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletsLeft;                                       // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponRange;                                       // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShootNoiseRange;                                   // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HarmForce;                                         // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CanShoot(bool* Value);
	void ExecuteUbergraph_BP_Military_Soldier(int32 EntryPoint);
	void GetBulletTrajectory(class AActor* AimedTarget, struct FVector* Origin, struct FVector* End);
	void ReceiveBeginPlay();
	void Shoot(class AActor* TargetActor);
	void Shooting_Effects();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Military_Soldier_C">();
	}
	static class ABP_Military_Soldier_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Military_Soldier_C>();
	}
};
static_assert(alignof(ABP_Military_Soldier_C) == 0x000010, "Wrong alignment on ABP_Military_Soldier_C");
static_assert(sizeof(ABP_Military_Soldier_C) == 0x000BE0, "Wrong size on ABP_Military_Soldier_C");
static_assert(offsetof(ABP_Military_Soldier_C, UberGraphFrame_BP_Military_Soldier_C) == 0x000BA0, "Member 'ABP_Military_Soldier_C::UberGraphFrame_BP_Military_Soldier_C' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, WeaponShells) == 0x000BA8, "Member 'ABP_Military_Soldier_C::WeaponShells' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, WeaponEnd) == 0x000BB0, "Member 'ABP_Military_Soldier_C::WeaponEnd' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, Captain) == 0x000BB8, "Member 'ABP_Military_Soldier_C::Captain' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, BulletsMax) == 0x000BC0, "Member 'ABP_Military_Soldier_C::BulletsMax' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, BulletsLeft) == 0x000BC4, "Member 'ABP_Military_Soldier_C::BulletsLeft' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, WeaponRange) == 0x000BC8, "Member 'ABP_Military_Soldier_C::WeaponRange' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, ShootNoiseRange) == 0x000BD0, "Member 'ABP_Military_Soldier_C::ShootNoiseRange' has a wrong offset!");
static_assert(offsetof(ABP_Military_Soldier_C, HarmForce) == 0x000BD8, "Member 'ABP_Military_Soldier_C::HarmForce' has a wrong offset!");

}

