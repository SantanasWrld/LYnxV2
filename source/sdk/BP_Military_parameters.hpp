#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Military

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Military.BP_Military_C.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct BP_Military_C_IsAiming final
{
public:
	bool                                          Aiming;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Military_C_IsAiming) == 0x000001, "Wrong alignment on BP_Military_C_IsAiming");
static_assert(sizeof(BP_Military_C_IsAiming) == 0x000001, "Wrong size on BP_Military_C_IsAiming");
static_assert(offsetof(BP_Military_C_IsAiming, Aiming) == 0x000000, "Member 'BP_Military_C_IsAiming::Aiming' has a wrong offset!");

// Function BP_Military.BP_Military_C.CanShoot
// 0x0001 (0x0001 - 0x0000)
struct BP_Military_C_CanShoot final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Military_C_CanShoot) == 0x000001, "Wrong alignment on BP_Military_C_CanShoot");
static_assert(sizeof(BP_Military_C_CanShoot) == 0x000001, "Wrong size on BP_Military_C_CanShoot");
static_assert(offsetof(BP_Military_C_CanShoot, Value) == 0x000000, "Member 'BP_Military_C_CanShoot::Value' has a wrong offset!");

// Function BP_Military.BP_Military_C.SetAiming
// 0x0001 (0x0001 - 0x0000)
struct BP_Military_C_SetAiming final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Military_C_SetAiming) == 0x000001, "Wrong alignment on BP_Military_C_SetAiming");
static_assert(sizeof(BP_Military_C_SetAiming) == 0x000001, "Wrong size on BP_Military_C_SetAiming");
static_assert(offsetof(BP_Military_C_SetAiming, Value) == 0x000000, "Member 'BP_Military_C_SetAiming::Value' has a wrong offset!");

// Function BP_Military.BP_Military_C.Shoot
// 0x0008 (0x0008 - 0x0000)
struct BP_Military_C_Shoot final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Military_C_Shoot) == 0x000008, "Wrong alignment on BP_Military_C_Shoot");
static_assert(sizeof(BP_Military_C_Shoot) == 0x000008, "Wrong size on BP_Military_C_Shoot");
static_assert(offsetof(BP_Military_C_Shoot, TargetActor) == 0x000000, "Member 'BP_Military_C_Shoot::TargetActor' has a wrong offset!");

// Function BP_Military.BP_Military_C.MilitaryKilled (All)
// 0x0010 (0x0010 - 0x0000)
struct BP_Military_C_MilitaryKilled__All_ final
{
public:
	class ABP_KillableCharacter_C*                KilledCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Killer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Military_C_MilitaryKilled__All_) == 0x000008, "Wrong alignment on BP_Military_C_MilitaryKilled__All_");
static_assert(sizeof(BP_Military_C_MilitaryKilled__All_) == 0x000010, "Wrong size on BP_Military_C_MilitaryKilled__All_");
static_assert(offsetof(BP_Military_C_MilitaryKilled__All_, KilledCharacter) == 0x000000, "Member 'BP_Military_C_MilitaryKilled__All_::KilledCharacter' has a wrong offset!");
static_assert(offsetof(BP_Military_C_MilitaryKilled__All_, Killer) == 0x000008, "Member 'BP_Military_C_MilitaryKilled__All_::Killer' has a wrong offset!");

// Function BP_Military.BP_Military_C.PlayVoiceSound
// 0x0010 (0x0010 - 0x0000)
struct BP_Military_C_PlayVoiceSound final
{
public:
	class USoundCue*                              Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Military_C_PlayVoiceSound) == 0x000008, "Wrong alignment on BP_Military_C_PlayVoiceSound");
static_assert(sizeof(BP_Military_C_PlayVoiceSound) == 0x000010, "Wrong size on BP_Military_C_PlayVoiceSound");
static_assert(offsetof(BP_Military_C_PlayVoiceSound, Sound) == 0x000000, "Member 'BP_Military_C_PlayVoiceSound::Sound' has a wrong offset!");
static_assert(offsetof(BP_Military_C_PlayVoiceSound, Duration) == 0x000008, "Member 'BP_Military_C_PlayVoiceSound::Duration' has a wrong offset!");

// Function BP_Military.BP_Military_C.BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Military_C_BndEvt__BP_Military_PlayerDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Military.BP_Military_C.ExecuteUbergraph_BP_Military
// 0x01B8 (0x01B8 - 0x0000)
struct BP_Military_C_ExecuteUbergraph_BP_Military final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Value;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_TargetActor;                          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_KillableCharacter_C*                K2Node_CustomEvent_KilledCharacter;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Killer;                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer)> K2Node_CreateDelegate_OutputDelegate; // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_CustomEvent_Sound;                          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Duration;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEyesLocation_EyesLocation;             // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0090(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UPPlayerCharacter_C*                K2Node_DynamicCast_AsBP_UPPlayer_Character;        // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloat_ReturnValue;                  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloat_ReturnValue_1;                // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A2[0x2];                                      // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_2;            // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayVoiceSound_Duration_ImplicitCast;     // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayVoiceSound_Duration_ImplicitCast_1;   // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Military_C_ExecuteUbergraph_BP_Military) == 0x000008, "Wrong alignment on BP_Military_C_ExecuteUbergraph_BP_Military");
static_assert(sizeof(BP_Military_C_ExecuteUbergraph_BP_Military) == 0x0001B8, "Wrong size on BP_Military_C_ExecuteUbergraph_BP_Military");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, EntryPoint) == 0x000000, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, Temp_bool_IsClosed_Variable) == 0x000010, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, Temp_bool_Has_Been_Initd_Variable) == 0x000011, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_Event_Value) == 0x000012, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_Event_TargetActor) == 0x000018, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_Event_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_CustomEvent_KilledCharacter) == 0x000020, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_CustomEvent_KilledCharacter' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_CustomEvent_Killer) == 0x000028, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_CustomEvent_Killer' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_CustomEvent_Sound) == 0x000040, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_CustomEvent_Sound' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_CustomEvent_Duration) == 0x000048, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_CustomEvent_Duration' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_GetEyesLocation_EyesLocation) == 0x000050, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_GetEyesLocation_EyesLocation' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, Temp_bool_IsClosed_Variable_1) == 0x000068, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000070, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_ComponentBoundEvent_OtherActor) == 0x000078, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_ComponentBoundEvent_OtherComp) == 0x000080, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000088, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_ComponentBoundEvent_bFromSweep) == 0x00008C, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_ComponentBoundEvent_SweepResult) == 0x000090, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, Temp_bool_Has_Been_Initd_Variable_1) == 0x000178, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_DynamicCast_AsBP_UPPlayer_Character) == 0x000180, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_DynamicCast_AsBP_UPPlayer_Character' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, K2Node_DynamicCast_bSuccess) == 0x000188, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_RandomFloat_ReturnValue) == 0x000190, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_RandomFloat_ReturnValue_1) == 0x000198, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_RandomFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0001A0, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x0001A1, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_Delay_Duration_ImplicitCast) == 0x0001A4, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_Delay_Duration_ImplicitCast_1) == 0x0001A8, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_Delay_Duration_ImplicitCast_2) == 0x0001AC, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_Delay_Duration_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_PlayVoiceSound_Duration_ImplicitCast) == 0x0001B0, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_PlayVoiceSound_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Military_C_ExecuteUbergraph_BP_Military, CallFunc_PlayVoiceSound_Duration_ImplicitCast_1) == 0x0001B4, "Member 'BP_Military_C_ExecuteUbergraph_BP_Military::CallFunc_PlayVoiceSound_Duration_ImplicitCast_1' has a wrong offset!");

}

