#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mine.BP_Mine_C
// 0x00C0 (0x0358 - 0x0298)
class ABP_Mine_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_PlayersProximity_C*                Players_Proximity;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MineMesh;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       MineRadius;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Force;                                             // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, bool>                     Affinities;                                        // 0x02D8(0x0050)(Edit, BlueprintVisible)
	TArray<class AActor*>                         ActorsInDanger;                                    // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class USoundBase*                             Sound;                                             // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BipDelay;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BopTimerHandle;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasExploded;                                       // 0x0350(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTriggered;                                       // 0x0351(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void Bip();
	void BndEvt__BP_Mine_MineRadius_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Mine_SphereCollision_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_Mine(int32 EntryPoint);
	void IsTriggerActor(class AActor* Actor, bool* Result);
	void OnRep_HasExploded();
	void OnRep_IsTriggered();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mine_C">();
	}
	static class ABP_Mine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mine_C>();
	}
};
static_assert(alignof(ABP_Mine_C) == 0x000008, "Wrong alignment on ABP_Mine_C");
static_assert(sizeof(ABP_Mine_C) == 0x000358, "Wrong size on ABP_Mine_C");
static_assert(offsetof(ABP_Mine_C, UberGraphFrame) == 0x000298, "Member 'ABP_Mine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, Players_Proximity) == 0x0002A0, "Member 'ABP_Mine_C::Players_Proximity' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, Scoring) == 0x0002A8, "Member 'ABP_Mine_C::Scoring' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, PointLight) == 0x0002B0, "Member 'ABP_Mine_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, MineMesh) == 0x0002B8, "Member 'ABP_Mine_C::MineMesh' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, MineRadius) == 0x0002C0, "Member 'ABP_Mine_C::MineRadius' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_Mine_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, Force) == 0x0002D0, "Member 'ABP_Mine_C::Force' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, Affinities) == 0x0002D8, "Member 'ABP_Mine_C::Affinities' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, ActorsInDanger) == 0x000328, "Member 'ABP_Mine_C::ActorsInDanger' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, Sound) == 0x000338, "Member 'ABP_Mine_C::Sound' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, BipDelay) == 0x000340, "Member 'ABP_Mine_C::BipDelay' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, BopTimerHandle) == 0x000348, "Member 'ABP_Mine_C::BopTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, HasExploded) == 0x000350, "Member 'ABP_Mine_C::HasExploded' has a wrong offset!");
static_assert(offsetof(ABP_Mine_C, IsTriggered) == 0x000351, "Member 'ABP_Mine_C::IsTriggered' has a wrong offset!");

}

