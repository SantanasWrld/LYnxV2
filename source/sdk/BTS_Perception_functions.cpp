#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_Perception

#include "Basic.hpp"

#include "BTS_Perception_classes.hpp"
#include "BTS_Perception_parameters.hpp"


namespace SDK
{

// Function BTS_Perception.BTS_Perception_C.IsVisibleByTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_KillableCharacter_C*          Killable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsVisible                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::IsVisibleByTarget(class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, bool* IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "IsVisibleByTarget");

	Params::BTS_Perception_C_IsVisibleByTarget Parms{};

	Parms.Pawn = Pawn;
	Parms.Killable = Killable;

	UObject::ProcessEvent(Func, &Parms);

	if (IsVisible != nullptr)
		*IsVisible = Parms.IsVisible;
}


// Function BTS_Perception.BTS_Perception_C.IsTargetAccessible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_KillableCharacter_C*          Killable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsAccessible                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::IsTargetAccessible(class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, bool* IsAccessible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "IsTargetAccessible");

	Params::BTS_Perception_C_IsTargetAccessible Parms{};

	Parms.Pawn = Pawn;
	Parms.Killable = Killable;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAccessible != nullptr)
		*IsAccessible = Parms.IsAccessible;
}


// Function BTS_Perception.BTS_Perception_C.IsPossibleTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_KillableCharacter_C*          Killable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::IsPossibleTarget(class ABP_KillableCharacter_C* Killable, class ABP_Parent_Enemy_C* Pawn, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "IsPossibleTarget");

	Params::BTS_Perception_C_IsPossibleTarget Parms{};

	Parms.Killable = Killable;
	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BTS_Perception.BTS_Perception_C.SetBlackboardValues
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_KillableCharacter_C*          Killable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   LastPerceivedLocation                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCurrentlyPerceived                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsConfirmed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAccessible                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsVisibleByTarget_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::SetBlackboardValues(class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, double Distance, const struct FVector& LastPerceivedLocation, bool IsCurrentlyPerceived, bool IsConfirmed, bool IsAccessible, bool IsVisibleByTarget_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "SetBlackboardValues");

	Params::BTS_Perception_C_SetBlackboardValues Parms{};

	Parms.Pawn = Pawn;
	Parms.Killable = Killable;
	Parms.Distance = Distance;
	Parms.LastPerceivedLocation = std::move(LastPerceivedLocation);
	Parms.IsCurrentlyPerceived = IsCurrentlyPerceived;
	Parms.IsConfirmed = IsConfirmed;
	Parms.IsAccessible = IsAccessible;
	Parms.IsVisibleByTarget_0 = IsVisibleByTarget_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_Perception.BTS_Perception_C.IsCurrentlyPerceived
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_KillableCharacter_C*          Killable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsPerceived                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::IsCurrentlyPerceived(class AAIController* Controller, class ABP_KillableCharacter_C* Killable, bool* IsPerceived)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "IsCurrentlyPerceived");

	Params::BTS_Perception_C_IsCurrentlyPerceived Parms{};

	Parms.Controller = Controller;
	Parms.Killable = Killable;

	UObject::ProcessEvent(Func, &Parms);

	if (IsPerceived != nullptr)
		*IsPerceived = Parms.IsPerceived;
}


// Function BTS_Perception.BTS_Perception_C.SetResults
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_KillableCharacter_C*          Killable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsConfirmed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::SetResults(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, class ABP_KillableCharacter_C* Killable, double Distance, bool IsConfirmed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "SetResults");

	Params::BTS_Perception_C_SetResults Parms{};

	Parms.Controller = Controller;
	Parms.Pawn = Pawn;
	Parms.Killable = Killable;
	Parms.Distance = Distance;
	Parms.IsConfirmed = IsConfirmed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_Perception.BTS_Perception_C.GetLastPerceivedLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_KillableCharacter_C*          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         PerceivedLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::GetLastPerceivedLocation(class AAIController* Controller, class ABP_KillableCharacter_C* Target, struct FVector* PerceivedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "GetLastPerceivedLocation");

	Params::BTS_Perception_C_GetLastPerceivedLocation Parms{};

	Parms.Controller = Controller;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (PerceivedLocation != nullptr)
		*PerceivedLocation = std::move(Parms.PerceivedLocation);
}


// Function BTS_Perception.BTS_Perception_C.GetClosestPerceivedActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_Parent_Enemy_C*               Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSubclassOf<class UAISense>             Sense                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class ABP_KillableCharacter_C**         Killable                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::GetClosestPerceivedActor(class AAIController* Controller, class ABP_Parent_Enemy_C* Pawn, TSubclassOf<class UAISense> Sense, class ABP_KillableCharacter_C** Killable, double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "GetClosestPerceivedActor");

	Params::BTS_Perception_C_GetClosestPerceivedActor Parms{};

	Parms.Controller = Controller;
	Parms.Pawn = Pawn;
	Parms.Sense = Sense;

	UObject::ProcessEvent(Func, &Parms);

	if (Killable != nullptr)
		*Killable = Parms.Killable;

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BTS_Perception.BTS_Perception_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "ReceiveTickAI");

	Params::BTS_Perception_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_Perception.BTS_Perception_C.ExecuteUbergraph_BTS_Perception
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_Perception_C::ExecuteUbergraph_BTS_Perception(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_Perception_C", "ExecuteUbergraph_BTS_Perception");

	Params::BTS_Perception_C_ExecuteUbergraph_BTS_Perception Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

