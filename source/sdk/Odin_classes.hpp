#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Odin

#include "Basic.hpp"

#include "AudioCapture_classes.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "Odin_structs.hpp"
#include "AudioMixer_classes.hpp"


namespace SDK
{

// Class Odin.OdinAudioCapture
// 0x0090 (0x0140 - 0x00B0)
class UOdinAudioCapture final : public UAudioCapture
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCaptureDeviceReset;                              // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDefaultDeviceChanged;                            // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         CurrentSelectedDeviceIndex;                        // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AllowedTimeWithoutStreamUpdate;                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AllowedTimeForStreamSetup;                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCapturingPaused;                                // 0x00EC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTryRecognizingDeviceDisconnect;                   // 0x00ED(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EE[0x52];                                      // 0x00EE(0x0052)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AsyncChangeCaptureDeviceById(const class FString& NewDeviceId, TDelegate<void(bool bSuccess)> OnChangeCompleted);
	void AsyncChangeCaptureDeviceByName(class FName DeviceName, TDelegate<void(bool bSuccess)> OnChangeCompleted);
	void AsyncGetCaptureDevicesAvailable(TDelegate<void(const TArray<struct FOdinCaptureDeviceInfo>& OutDevices, const struct FOdinCaptureDeviceInfo& CurrentDevice)> OnResult);
	void ChangeCaptureDeviceById(const class FString& NewDeviceId, bool* bSuccess);
	void ChangeCaptureDeviceByName(class FName DeviceName, bool* bSuccess);
	void GetCaptureDevicesAvailable(TArray<struct FOdinCaptureDeviceInfo>* OutDevices);
	void GetCurrentAudioCaptureDevice(struct FOdinCaptureDeviceInfo* CurrentDevice);
	bool RestartCapturing(bool bAutomaticallyStartCapture);
	void SetIsMuted(bool bNewValue);
	void SetIsPaused(bool bNewValue);
	void SetTryRecognizingDeviceDisconnected(bool bTryRecognizing);
	void SetVolumeMultiplier(float NewMultiplierValue);

	bool GetIsMuted() const;
	bool GetIsPaused() const;
	float GetStreamTime() const;
	bool GetTryRecognizingDeviceDisconnected() const;
	float GetVolumeMultiplier() const;
	bool IsStreamOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinAudioCapture">();
	}
	static class UOdinAudioCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinAudioCapture>();
	}
};
static_assert(alignof(UOdinAudioCapture) == 0x000008, "Wrong alignment on UOdinAudioCapture");
static_assert(sizeof(UOdinAudioCapture) == 0x000140, "Wrong size on UOdinAudioCapture");
static_assert(offsetof(UOdinAudioCapture, OnCaptureDeviceReset) == 0x0000C0, "Member 'UOdinAudioCapture::OnCaptureDeviceReset' has a wrong offset!");
static_assert(offsetof(UOdinAudioCapture, OnDefaultDeviceChanged) == 0x0000D0, "Member 'UOdinAudioCapture::OnDefaultDeviceChanged' has a wrong offset!");
static_assert(offsetof(UOdinAudioCapture, CurrentSelectedDeviceIndex) == 0x0000E0, "Member 'UOdinAudioCapture::CurrentSelectedDeviceIndex' has a wrong offset!");
static_assert(offsetof(UOdinAudioCapture, AllowedTimeWithoutStreamUpdate) == 0x0000E4, "Member 'UOdinAudioCapture::AllowedTimeWithoutStreamUpdate' has a wrong offset!");
static_assert(offsetof(UOdinAudioCapture, AllowedTimeForStreamSetup) == 0x0000E8, "Member 'UOdinAudioCapture::AllowedTimeForStreamSetup' has a wrong offset!");
static_assert(offsetof(UOdinAudioCapture, bIsCapturingPaused) == 0x0000EC, "Member 'UOdinAudioCapture::bIsCapturingPaused' has a wrong offset!");
static_assert(offsetof(UOdinAudioCapture, bTryRecognizingDeviceDisconnect) == 0x0000ED, "Member 'UOdinAudioCapture::bTryRecognizingDeviceDisconnect' has a wrong offset!");

// Class Odin.OdinAudioControl
// 0x0000 (0x0000 - 0x0000)
class IOdinAudioControl final
{
public:
	void SetIsMuted(bool bNewIsMuted);
	void SetVolumeMultiplier(float NewMultiplierValue);

	bool GetIsMuted() const;
	float GetVolumeMultiplier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinAudioControl">();
	}
	static class IOdinAudioControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<IOdinAudioControl>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IOdinAudioControl) == 0x000001, "Wrong alignment on IOdinAudioControl");
static_assert(sizeof(IOdinAudioControl) == 0x000001, "Wrong size on IOdinAudioControl");

// Class Odin.OdinMediaBase
// 0x0008 (0x0030 - 0x0028)
class UOdinMediaBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinMediaBase">();
	}
	static class UOdinMediaBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinMediaBase>();
	}
};
static_assert(alignof(UOdinMediaBase) == 0x000008, "Wrong alignment on UOdinMediaBase");
static_assert(sizeof(UOdinMediaBase) == 0x000030, "Wrong size on UOdinMediaBase");

// Class Odin.OdinCaptureMedia
// 0x0080 (0x00B0 - 0x0030)
class UOdinCaptureMedia final : public UOdinMediaBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableMonoMixing;                                 // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioGenerator*                        audio_capture_;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         volume_multiplier_;                                // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         max_volume_multiplier_;                            // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnableMonoMixing(const bool bShouldEnableMonoMixing);
	void SetMaxVolumeMultiplier(const float NewValue);
	void SetVolumeMultiplier(const float NewValue);

	bool GetEnableMonoMixing() const;
	float GetMaxVolumeMultiplier() const;
	float GetVolumeMultiplier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinCaptureMedia">();
	}
	static class UOdinCaptureMedia* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinCaptureMedia>();
	}
};
static_assert(alignof(UOdinCaptureMedia) == 0x000008, "Wrong alignment on UOdinCaptureMedia");
static_assert(sizeof(UOdinCaptureMedia) == 0x0000B0, "Wrong size on UOdinCaptureMedia");
static_assert(offsetof(UOdinCaptureMedia, bEnableMonoMixing) == 0x000038, "Member 'UOdinCaptureMedia::bEnableMonoMixing' has a wrong offset!");
static_assert(offsetof(UOdinCaptureMedia, audio_capture_) == 0x000040, "Member 'UOdinCaptureMedia::audio_capture_' has a wrong offset!");
static_assert(offsetof(UOdinCaptureMedia, volume_multiplier_) == 0x000048, "Member 'UOdinCaptureMedia::volume_multiplier_' has a wrong offset!");
static_assert(offsetof(UOdinCaptureMedia, max_volume_multiplier_) == 0x00004C, "Member 'UOdinCaptureMedia::max_volume_multiplier_' has a wrong offset!");

// Class Odin.OdinFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UOdinFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString BytesToString(const TArray<uint8>& Data);
	static class UOdinAudioCapture* CreateOdinAudioCapture(class UObject* WorldContextObject);
	static class FString FormatError(int32 Code, bool ueTrace);
	static class FString FormatOdinError(int64 Code, bool ueTrace);
	static class FString GenerateAccessKey();
	static class UOdinFunctionLibrary* getOdinFunctionLibrary();
	static class UOdinCaptureMedia* Odin_CreateMedia(class UAudioGenerator*& AudioCapture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinFunctionLibrary">();
	}
	static class UOdinFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinFunctionLibrary>();
	}
};
static_assert(alignof(UOdinFunctionLibrary) == 0x000008, "Wrong alignment on UOdinFunctionLibrary");
static_assert(sizeof(UOdinFunctionLibrary) == 0x000028, "Wrong size on UOdinFunctionLibrary");

// Class Odin.OdinInitializationSubsystem
// 0x0010 (0x0040 - 0x0030)
class UOdinInitializationSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinInitializationSubsystem">();
	}
	static class UOdinInitializationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinInitializationSubsystem>();
	}
};
static_assert(alignof(UOdinInitializationSubsystem) == 0x000008, "Wrong alignment on UOdinInitializationSubsystem");
static_assert(sizeof(UOdinInitializationSubsystem) == 0x000040, "Wrong size on UOdinInitializationSubsystem");

// Class Odin.OdinJsonObject
// 0x0010 (0x0038 - 0x0028)
class UOdinJsonObject final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinJsonObject* ConstructJsonObject(class UObject* WorldContextObject);
	static class UOdinJsonObject* ConstructJsonObjectFromBytes(class UObject* WorldContextObject, const TArray<uint8>& Data);
	static class UOdinJsonObject* ConstructJsonObjectFromString(class UObject* WorldContextObject, const class FString& Data);

	bool DecodeJson(const class FString& JsonString);
	TArray<class UOdinJsonValue*> GetArrayField(const class FString& FieldName);
	TArray<bool> GetBoolArrayField(const class FString& FieldName);
	TArray<class FString> GetFieldNames();
	TArray<float> GetNumberArrayField(const class FString& FieldName);
	TArray<class UOdinJsonObject*> GetObjectArrayField(const class FString& FieldName);
	TArray<class FString> GetStringArrayField(const class FString& FieldName);
	void MergeJsonObject(class UOdinJsonObject* InJsonObject, bool Overwrite);
	void RemoveField(const class FString& FieldName);
	void Reset();
	void SetArrayField(const class FString& FieldName, const TArray<class UOdinJsonValue*>& inArray);
	void SetBoolArrayField(const class FString& FieldName, const TArray<bool>& BoolArray);
	void SetBoolField(const class FString& FieldName, bool InValue);
	void SetField(const class FString& FieldName, class UOdinJsonValue* JsonValue);
	void SetFieldNull(const class FString& FieldName);
	void SetNumberArrayField(const class FString& FieldName, const TArray<float>& NumberArray);
	void SetNumberField(const class FString& FieldName, float Number);
	void SetObjectArrayField(const class FString& FieldName, const TArray<class UOdinJsonObject*>& ObjectArray);
	void SetObjectField(const class FString& FieldName, class UOdinJsonObject* JsonObject);
	void SetStringArrayField(const class FString& FieldName, const TArray<class FString>& StringArray);
	void SetStringField(const class FString& FieldName, const class FString& StringValue);

	class FString EncodeJson() const;
	TArray<uint8> EncodeJsonBytes() const;
	bool GetBoolField(const class FString& FieldName) const;
	class UOdinJsonValue* GetField(const class FString& FieldName) const;
	float GetNumberField(const class FString& FieldName) const;
	class UOdinJsonObject* GetObjectField(const class FString& FieldName) const;
	class FString GetStringField(const class FString& FieldName) const;
	bool HasField(const class FString& FieldName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinJsonObject">();
	}
	static class UOdinJsonObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinJsonObject>();
	}
};
static_assert(alignof(UOdinJsonObject) == 0x000008, "Wrong alignment on UOdinJsonObject");
static_assert(sizeof(UOdinJsonObject) == 0x000038, "Wrong size on UOdinJsonObject");

// Class Odin.OdinJsonValue
// 0x0010 (0x0038 - 0x0028)
class UOdinJsonValue final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinJsonValue* ConstructJsonValueArray(class UObject* WorldContextObject, const TArray<class UOdinJsonValue*>& inArray);
	static class UOdinJsonValue* ConstructJsonValueBool(class UObject* WorldContextObject, bool InValue);
	static class UOdinJsonValue* ConstructJsonValueNumber(class UObject* WorldContextObject, float Number);
	static class UOdinJsonValue* ConstructJsonValueObject(class UObject* WorldContextObject, class UOdinJsonObject* JsonObject);
	static class UOdinJsonValue* ConstructJsonValueString(class UObject* WorldContextObject, const class FString& StringValue);

	class UOdinJsonObject* AsObject();

	TArray<class UOdinJsonValue*> AsArray() const;
	bool AsBool() const;
	float AsNumber() const;
	class FString AsString() const;
	EOJson GetType() const;
	class FString GetTypeString() const;
	bool IsNull() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinJsonValue">();
	}
	static class UOdinJsonValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinJsonValue>();
	}
};
static_assert(alignof(UOdinJsonValue) == 0x000008, "Wrong alignment on UOdinJsonValue");
static_assert(sizeof(UOdinJsonValue) == 0x000038, "Wrong size on UOdinJsonValue");

// Class Odin.OdinPlaybackMedia
// 0x0008 (0x0038 - 0x0030)
class UOdinPlaybackMedia final : public UOdinMediaBase
{
public:
	class UOdinRoom*                              room;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FOdinAudioStreamStats AudioStreamStats();
	int32 GetMediaId();
	int64 GetPeerId();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinPlaybackMedia">();
	}
	static class UOdinPlaybackMedia* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinPlaybackMedia>();
	}
};
static_assert(alignof(UOdinPlaybackMedia) == 0x000008, "Wrong alignment on UOdinPlaybackMedia");
static_assert(sizeof(UOdinPlaybackMedia) == 0x000038, "Wrong size on UOdinPlaybackMedia");
static_assert(offsetof(UOdinPlaybackMedia, room) == 0x000030, "Member 'UOdinPlaybackMedia::room' has a wrong offset!");

// Class Odin.OdinRoomJoin
// 0x0080 (0x00B0 - 0x0030)
class UOdinRoomJoin final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UOdinRoom*                              room;                                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x68];                                      // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomJoin* JoinRoom(class UObject* WorldContextObject, class UOdinRoom*& room_0, const class FString& URL, const class FString& Token, const TArray<uint8>& initialPeerUserData, const struct FVector& initialPosition, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void(const class FString& roomId, const TArray<uint8>& roomUserData, const class FString& customer, int64 ownPeerId, const class FString& ownUserId)>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomJoin">();
	}
	static class UOdinRoomJoin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomJoin>();
	}
};
static_assert(alignof(UOdinRoomJoin) == 0x000008, "Wrong alignment on UOdinRoomJoin");
static_assert(sizeof(UOdinRoomJoin) == 0x0000B0, "Wrong size on UOdinRoomJoin");
static_assert(offsetof(UOdinRoomJoin, OnResponse) == 0x000030, "Member 'UOdinRoomJoin::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomJoin, room) == 0x000040, "Member 'UOdinRoomJoin::room' has a wrong offset!");

// Class Odin.OdinRoomAddMedia
// 0x0040 (0x0070 - 0x0030)
class UOdinRoomAddMedia final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinRoom>               room;                                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinCaptureMedia>       CaptureMedia;                                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomAddMedia* AddMedia(class UObject* WorldContextObject, class UOdinRoom*& room_0, class UOdinCaptureMedia*& Media, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void(int32 mediaId)>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomAddMedia">();
	}
	static class UOdinRoomAddMedia* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomAddMedia>();
	}
};
static_assert(alignof(UOdinRoomAddMedia) == 0x000008, "Wrong alignment on UOdinRoomAddMedia");
static_assert(sizeof(UOdinRoomAddMedia) == 0x000070, "Wrong size on UOdinRoomAddMedia");
static_assert(offsetof(UOdinRoomAddMedia, OnResponse) == 0x000030, "Member 'UOdinRoomAddMedia::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomAddMedia, room) == 0x000040, "Member 'UOdinRoomAddMedia::room' has a wrong offset!");
static_assert(offsetof(UOdinRoomAddMedia, CaptureMedia) == 0x000048, "Member 'UOdinRoomAddMedia::CaptureMedia' has a wrong offset!");

// Class Odin.OdinRoomPauseMedia
// 0x0038 (0x0068 - 0x0030)
class UOdinRoomPauseMedia final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinPlaybackMedia>      PlaybackMedia;                                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x20];                                      // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomPauseMedia* PauseMedia(class UObject* WorldContextObject, class UOdinPlaybackMedia*& Media, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void()>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomPauseMedia">();
	}
	static class UOdinRoomPauseMedia* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomPauseMedia>();
	}
};
static_assert(alignof(UOdinRoomPauseMedia) == 0x000008, "Wrong alignment on UOdinRoomPauseMedia");
static_assert(sizeof(UOdinRoomPauseMedia) == 0x000068, "Wrong size on UOdinRoomPauseMedia");
static_assert(offsetof(UOdinRoomPauseMedia, OnResponse) == 0x000030, "Member 'UOdinRoomPauseMedia::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomPauseMedia, PlaybackMedia) == 0x000040, "Member 'UOdinRoomPauseMedia::PlaybackMedia' has a wrong offset!");

// Class Odin.OdinRoomResumeMedia
// 0x0038 (0x0068 - 0x0030)
class UOdinRoomResumeMedia final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinPlaybackMedia>      PlaybackMedia;                                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x20];                                      // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomResumeMedia* ResumeMedia(class UObject* WorldContextObject, class UOdinPlaybackMedia*& Media, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void()>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomResumeMedia">();
	}
	static class UOdinRoomResumeMedia* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomResumeMedia>();
	}
};
static_assert(alignof(UOdinRoomResumeMedia) == 0x000008, "Wrong alignment on UOdinRoomResumeMedia");
static_assert(sizeof(UOdinRoomResumeMedia) == 0x000068, "Wrong size on UOdinRoomResumeMedia");
static_assert(offsetof(UOdinRoomResumeMedia, OnResponse) == 0x000030, "Member 'UOdinRoomResumeMedia::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomResumeMedia, PlaybackMedia) == 0x000040, "Member 'UOdinRoomResumeMedia::PlaybackMedia' has a wrong offset!");

// Class Odin.OdinRoomRemoveMedia
// 0x0040 (0x0070 - 0x0030)
class UOdinRoomRemoveMedia final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinRoom>               room;                                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinCaptureMedia>       CaptureMedia;                                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomRemoveMedia* RemoveMedia(class UObject* WorldContextObject, class UOdinRoom*& room_0, class UOdinCaptureMedia* Media, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void()>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomRemoveMedia">();
	}
	static class UOdinRoomRemoveMedia* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomRemoveMedia>();
	}
};
static_assert(alignof(UOdinRoomRemoveMedia) == 0x000008, "Wrong alignment on UOdinRoomRemoveMedia");
static_assert(sizeof(UOdinRoomRemoveMedia) == 0x000070, "Wrong size on UOdinRoomRemoveMedia");
static_assert(offsetof(UOdinRoomRemoveMedia, OnResponse) == 0x000030, "Member 'UOdinRoomRemoveMedia::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomRemoveMedia, room) == 0x000040, "Member 'UOdinRoomRemoveMedia::room' has a wrong offset!");
static_assert(offsetof(UOdinRoomRemoveMedia, CaptureMedia) == 0x000048, "Member 'UOdinRoomRemoveMedia::CaptureMedia' has a wrong offset!");

// Class Odin.OdinRoomUpdatePosition
// 0x0050 (0x0080 - 0x0030)
class UOdinRoomUpdatePosition final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinRoom>               room;                                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x38];                                      // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomUpdatePosition* UpdatePosition(class UObject* WorldContextObject, class UOdinRoom*& room_0, const struct FVector& Position, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void()>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomUpdatePosition">();
	}
	static class UOdinRoomUpdatePosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomUpdatePosition>();
	}
};
static_assert(alignof(UOdinRoomUpdatePosition) == 0x000008, "Wrong alignment on UOdinRoomUpdatePosition");
static_assert(sizeof(UOdinRoomUpdatePosition) == 0x000080, "Wrong size on UOdinRoomUpdatePosition");
static_assert(offsetof(UOdinRoomUpdatePosition, OnResponse) == 0x000030, "Member 'UOdinRoomUpdatePosition::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomUpdatePosition, room) == 0x000040, "Member 'UOdinRoomUpdatePosition::room' has a wrong offset!");

// Class Odin.OdinRoomUpdatePeerUserData
// 0x0048 (0x0078 - 0x0030)
class UOdinRoomUpdatePeerUserData final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinRoom>               room;                                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomUpdatePeerUserData* UpdatePeerUserData(class UObject* WorldContextObject, class UOdinRoom*& room_0, const TArray<uint8>& Data, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void()>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomUpdatePeerUserData">();
	}
	static class UOdinRoomUpdatePeerUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomUpdatePeerUserData>();
	}
};
static_assert(alignof(UOdinRoomUpdatePeerUserData) == 0x000008, "Wrong alignment on UOdinRoomUpdatePeerUserData");
static_assert(sizeof(UOdinRoomUpdatePeerUserData) == 0x000078, "Wrong size on UOdinRoomUpdatePeerUserData");
static_assert(offsetof(UOdinRoomUpdatePeerUserData, OnResponse) == 0x000030, "Member 'UOdinRoomUpdatePeerUserData::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomUpdatePeerUserData, room) == 0x000040, "Member 'UOdinRoomUpdatePeerUserData::room' has a wrong offset!");

// Class Odin.OdinRoomSendMessage
// 0x0058 (0x0088 - 0x0030)
class UOdinRoomSendMessage final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success)>  OnResponse;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UOdinRoom>               room;                                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoomSendMessage* SendMessage(class UObject* WorldContextObject, class UOdinRoom*& room_0, const TArray<int64>& Targets, const TArray<uint8>& Data, const TDelegate<void(int64 errorCode)>& onError, const TDelegate<void()>& OnSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoomSendMessage">();
	}
	static class UOdinRoomSendMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoomSendMessage>();
	}
};
static_assert(alignof(UOdinRoomSendMessage) == 0x000008, "Wrong alignment on UOdinRoomSendMessage");
static_assert(sizeof(UOdinRoomSendMessage) == 0x000088, "Wrong size on UOdinRoomSendMessage");
static_assert(offsetof(UOdinRoomSendMessage, OnResponse) == 0x000030, "Member 'UOdinRoomSendMessage::OnResponse' has a wrong offset!");
static_assert(offsetof(UOdinRoomSendMessage, room) == 0x000040, "Member 'UOdinRoomSendMessage::room' has a wrong offset!");

// Class Odin.OdinRoom
// 0x01E0 (0x0208 - 0x0028)
class UOdinRoom final : public UObject
{
public:
	TMulticastInlineDelegate<void(int64 peerId, const TArray<uint8>& roomUserData, class UOdinRoom* room)> onRoomJoined; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<uint8>& userData, class UOdinRoom* room)> onRoomUserDataChanged; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 peerId, class UOdinPlaybackMedia* Media, class UOdinJsonObject* properties, class UOdinRoom* room)> onMediaAdded; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 peerId, class UOdinPlaybackMedia* Media, class UOdinRoom* room)> onMediaRemoved; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 peerId, const class UOdinMediaBase* Media, bool Active, class UOdinRoom* room)> onMediaActiveStateChanged; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 peerId, const TArray<uint8>& Data, class UOdinRoom* room)> onMessageReceived; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 peerId, const class FString& UserId, const TArray<uint8>& userData, class UOdinRoom* room)> onPeerJoined; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 peerId, class UOdinRoom* room)> onPeerLeft;                  // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 peerId, const TArray<uint8>& userData, class UOdinRoom* room)> onPeerUserDataChanged; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EOdinRoomConnectionState ConnectionState, class UOdinRoom* room)> onConnectionStateChanged; // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Deprecated, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FRoomConnectionStateChangedData& stateChangedData, class UOdinRoom* room)> onRoomConnectionStateChanged; // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRoomConnectionStateChangedData        LastRoomConnectionStateChangedData;                // 0x00D8(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DefaultAPMStreamDelay;                             // 0x00E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOdinApmSettings                       current_apm_settings_;                             // 0x00F0(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x28];                                     // 0x0110(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UOdinCaptureMedia*>              capture_medias_;                                   // 0x0138(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x28];                                     // 0x0148(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint64, class UOdinMediaBase*>           medias_;                                           // 0x0170(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x38];                                     // 0x01C0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UOdinSubmixListener*                    submix_listener_;                                  // 0x01F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinRoom* ConstructRoom(class UObject* WorldContextObject, const struct FOdinApmSettings& InitialAPMSettings);

	struct FOdinConnectionStats ConnectionStats();
	void Destroy();
	void SetPositionScale(float Scale);
	void UpdateAPMConfig(const struct FOdinApmSettings& apm_config);
	void UpdateAPMStreamDelay(int64 DelayInMs);

	struct FOdinApmSettings GetCurrentApmSettings() const;
	class UOdinSubmixListener* GetSubmixListener() const;
	bool IsConnected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinRoom">();
	}
	static class UOdinRoom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinRoom>();
	}
};
static_assert(alignof(UOdinRoom) == 0x000008, "Wrong alignment on UOdinRoom");
static_assert(sizeof(UOdinRoom) == 0x000208, "Wrong size on UOdinRoom");
static_assert(offsetof(UOdinRoom, onRoomJoined) == 0x000028, "Member 'UOdinRoom::onRoomJoined' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onRoomUserDataChanged) == 0x000038, "Member 'UOdinRoom::onRoomUserDataChanged' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onMediaAdded) == 0x000048, "Member 'UOdinRoom::onMediaAdded' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onMediaRemoved) == 0x000058, "Member 'UOdinRoom::onMediaRemoved' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onMediaActiveStateChanged) == 0x000068, "Member 'UOdinRoom::onMediaActiveStateChanged' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onMessageReceived) == 0x000078, "Member 'UOdinRoom::onMessageReceived' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onPeerJoined) == 0x000088, "Member 'UOdinRoom::onPeerJoined' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onPeerLeft) == 0x000098, "Member 'UOdinRoom::onPeerLeft' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onPeerUserDataChanged) == 0x0000A8, "Member 'UOdinRoom::onPeerUserDataChanged' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onConnectionStateChanged) == 0x0000B8, "Member 'UOdinRoom::onConnectionStateChanged' has a wrong offset!");
static_assert(offsetof(UOdinRoom, onRoomConnectionStateChanged) == 0x0000C8, "Member 'UOdinRoom::onRoomConnectionStateChanged' has a wrong offset!");
static_assert(offsetof(UOdinRoom, LastRoomConnectionStateChangedData) == 0x0000D8, "Member 'UOdinRoom::LastRoomConnectionStateChangedData' has a wrong offset!");
static_assert(offsetof(UOdinRoom, DefaultAPMStreamDelay) == 0x0000E0, "Member 'UOdinRoom::DefaultAPMStreamDelay' has a wrong offset!");
static_assert(offsetof(UOdinRoom, current_apm_settings_) == 0x0000F0, "Member 'UOdinRoom::current_apm_settings_' has a wrong offset!");
static_assert(offsetof(UOdinRoom, capture_medias_) == 0x000138, "Member 'UOdinRoom::capture_medias_' has a wrong offset!");
static_assert(offsetof(UOdinRoom, medias_) == 0x000170, "Member 'UOdinRoom::medias_' has a wrong offset!");
static_assert(offsetof(UOdinRoom, submix_listener_) == 0x0001F8, "Member 'UOdinRoom::submix_listener_' has a wrong offset!");

// Class Odin.OdinSubmixListener
// 0x0020 (0x0048 - 0x0028)
class UOdinSubmixListener final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRecordSubmixOutput(bool bNewActive);
	void StopRecording();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinSubmixListener">();
	}
	static class UOdinSubmixListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinSubmixListener>();
	}
};
static_assert(alignof(UOdinSubmixListener) == 0x000008, "Wrong alignment on UOdinSubmixListener");
static_assert(sizeof(UOdinSubmixListener) == 0x000048, "Wrong size on UOdinSubmixListener");

// Class Odin.OdinSubsystem
// 0x0078 (0x00A8 - 0x0030)
class UOdinSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x78];                                      // 0x0030(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinSubsystem">();
	}
	static class UOdinSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinSubsystem>();
	}
};
static_assert(alignof(UOdinSubsystem) == 0x000008, "Wrong alignment on UOdinSubsystem");
static_assert(sizeof(UOdinSubsystem) == 0x0000A8, "Wrong size on UOdinSubsystem");

// Class Odin.OdinSynthComponent
// 0x0040 (0x0940 - 0x0900)
class UOdinSynthComponent final : public USynthComponent
{
public:
	class UOdinPlaybackMedia*                     playback_media_;                                   // 0x0900(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_908[0x38];                                     // 0x0908(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);
	void Odin_AssignSynthToCaptureMedia(class UOdinCaptureMedia*& Media);
	void Odin_AssignSynthToMedia(class UOdinPlaybackMedia*& Media);
	void Reset();

	class UOdinPlaybackMedia* GetConnectedPlaybackMedia() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinSynthComponent">();
	}
	static class UOdinSynthComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinSynthComponent>();
	}
};
static_assert(alignof(UOdinSynthComponent) == 0x000010, "Wrong alignment on UOdinSynthComponent");
static_assert(sizeof(UOdinSynthComponent) == 0x000940, "Wrong size on UOdinSynthComponent");
static_assert(offsetof(UOdinSynthComponent, playback_media_) == 0x000900, "Member 'UOdinSynthComponent::playback_media_' has a wrong offset!");

// Class Odin.OdinTokenGenerator
// 0x0008 (0x0030 - 0x0028)
class UOdinTokenGenerator final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOdinTokenGenerator* ConstructTokenGenerator(class UObject* WorldContextObject, const class FString& AccessKey);

	class FString GenerateRoomToken(const class FString& roomId, const class FString& UserId, EOdinTokenAudience TokenAudience);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OdinTokenGenerator">();
	}
	static class UOdinTokenGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOdinTokenGenerator>();
	}
};
static_assert(alignof(UOdinTokenGenerator) == 0x000008, "Wrong alignment on UOdinTokenGenerator");
static_assert(sizeof(UOdinTokenGenerator) == 0x000030, "Wrong size on UOdinTokenGenerator");

}

