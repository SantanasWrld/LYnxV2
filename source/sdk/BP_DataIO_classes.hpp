#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DataIO

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DataIO.BP_DataIO_C
// 0x00C0 (0x0358 - 0x0298)
class ABP_DataIO_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_VoiceChat_C*                        VoiceChat;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            CaptureIdForData;                                  // 0x02B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, class ABP_ReplicatedCapture_C*>   ReplicatedCaptures;                                // 0x0308(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddPendingCapture__All_(int32 DataLength, int32 CaptureId);
	void AddPendingCapture__Server_(int32 DataLength, int32 CaptureId);
	void BroadcastCapture(const TArray<uint8>& CompressedData);
	void BroadcastMessage(const TArray<uint8>& Data);
	void CaptureUncompressed(class ABP_ReplicatedCapture_C* ReplicatedCapture);
	void DestroyReplicatedCapture(class ABP_ReplicatedCapture_C* ReplicatedCapture);
	void ExecuteUbergraph_BP_DataIO(int32 EntryPoint);
	void GetOrCreateReplicatedCapture(int32 DataLength, const TDelegate<void(class ABP_ReplicatedCapture_C* ReplicatedCapture)>& CaptureUncompressedEvent, class ABP_ReplicatedCapture_C** ReplicatedCapture);
	void GetOtherPeerIds(TArray<int64>* PeerIds);
	void InitMessaging();
	void MessageReceived(int64 peerId, const TArray<uint8>& Data, class UOdinRoom* room);
	void OnResponse_AA3122D84FA83A2EF79C40BF2F8B276C(bool Success);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SendMessageFailed(int64 errorCode);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DataIO_C">();
	}
	static class ABP_DataIO_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DataIO_C>();
	}
};
static_assert(alignof(ABP_DataIO_C) == 0x000008, "Wrong alignment on ABP_DataIO_C");
static_assert(sizeof(ABP_DataIO_C) == 0x000358, "Wrong size on ABP_DataIO_C");
static_assert(offsetof(ABP_DataIO_C, UberGraphFrame) == 0x000298, "Member 'ABP_DataIO_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DataIO_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_DataIO_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DataIO_C, GameInstance) == 0x0002A8, "Member 'ABP_DataIO_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_DataIO_C, VoiceChat) == 0x0002B0, "Member 'ABP_DataIO_C::VoiceChat' has a wrong offset!");
static_assert(offsetof(ABP_DataIO_C, CaptureIdForData) == 0x0002B8, "Member 'ABP_DataIO_C::CaptureIdForData' has a wrong offset!");
static_assert(offsetof(ABP_DataIO_C, ReplicatedCaptures) == 0x000308, "Member 'ABP_DataIO_C::ReplicatedCaptures' has a wrong offset!");

}

