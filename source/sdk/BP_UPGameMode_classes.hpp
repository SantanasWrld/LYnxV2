#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UPGameMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UPGameMode.BP_UPGameMode_C
// 0x0088 (0x03C0 - 0x0338)
class ABP_UPGameMode_C final : public AGameModeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_VoiceChat_C*                        VoiceChat;                                         // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObject*                                LoadingListener;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_SessionStart_C*                     SessionStart;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerStart*>                   PlayerStarts;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PlayerStartIndex;                                  // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Loading_C*                          Loading;                                           // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Episodes_C*                         Episodes;                                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Scoring_C*                          Scoring;                                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_DataIO_C*                           DataIO;                                            // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoringId;                                         // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_UPPlayerCharacter_C* Player, class APlayerStart* PlayerStart)> OnPlayerSpawned; // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        PlayerZLimit;                                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckPlayersCount();
	class AActor* ChoosePlayerStart(class AController* Player);
	void ExecuteUbergraph_BP_UPGameMode(int32 EntryPoint);
	void ForceSpawnPlayer(class ABP_UPPlayerController_C* PlayerController);
	void GetLastPlayerStart(class APlayerStart** PlayerStart);
	void GetNextPlayerStart(class APlayerStart** PlayerStart);
	void GetPlayerStarts(TArray<class APlayerStart*>* PlayerStarts_0);
	void IncrementPlayerStart();
	void InitDataIO();
	void InitEpisodes();
	void InitLoading();
	void InitPlayer(class ABP_UPPlayerController_C* PlayerController, class ABP_UPPlayerCharacter_C* PlayerCharacter);
	void InitScoring();
	void InitVoiceChat();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RegisterScoringComponent(class UBPC_ScoringComponent_C* Scoring_0);
	void ResetVoiceChat();
	void SelectSessionStart(class ABP_SessionStart_C** SessionStart_0);
	void ShouldEnableVoiceChat(bool* EnableVoiceChat);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UPGameMode_C">();
	}
	static class ABP_UPGameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UPGameMode_C>();
	}
};
static_assert(alignof(ABP_UPGameMode_C) == 0x000008, "Wrong alignment on ABP_UPGameMode_C");
static_assert(sizeof(ABP_UPGameMode_C) == 0x0003C0, "Wrong size on ABP_UPGameMode_C");
static_assert(offsetof(ABP_UPGameMode_C, UberGraphFrame) == 0x000338, "Member 'ABP_UPGameMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, DefaultSceneRoot) == 0x000340, "Member 'ABP_UPGameMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, GameInstance) == 0x000348, "Member 'ABP_UPGameMode_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, VoiceChat) == 0x000350, "Member 'ABP_UPGameMode_C::VoiceChat' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, LoadingListener) == 0x000358, "Member 'ABP_UPGameMode_C::LoadingListener' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, SessionStart) == 0x000360, "Member 'ABP_UPGameMode_C::SessionStart' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, PlayerStarts) == 0x000368, "Member 'ABP_UPGameMode_C::PlayerStarts' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, PlayerStartIndex) == 0x000378, "Member 'ABP_UPGameMode_C::PlayerStartIndex' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, Loading) == 0x000380, "Member 'ABP_UPGameMode_C::Loading' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, Episodes) == 0x000388, "Member 'ABP_UPGameMode_C::Episodes' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, Scoring) == 0x000390, "Member 'ABP_UPGameMode_C::Scoring' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, DataIO) == 0x000398, "Member 'ABP_UPGameMode_C::DataIO' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, ScoringId) == 0x0003A0, "Member 'ABP_UPGameMode_C::ScoringId' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, OnPlayerSpawned) == 0x0003A8, "Member 'ABP_UPGameMode_C::OnPlayerSpawned' has a wrong offset!");
static_assert(offsetof(ABP_UPGameMode_C, PlayerZLimit) == 0x0003B8, "Member 'ABP_UPGameMode_C::PlayerZLimit' has a wrong offset!");

}

