#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tornado

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Tornado.BP_Tornado_C
// 0x0090 (0x03B0 - 0x0320)
class ABP_Tornado_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        TornadoIdleAudio;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RightEye;                                          // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftEye;                                           // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Eyes;                                              // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFloatingPawnMovement*                  FloatingPawnMovement;                              // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TornadoParticles;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CharactersDetector;                                // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      PhysicActorDetector;                               // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        CenteringForce;                                    // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationForce;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalForce;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxVelocity;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RadialForce;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NavigationPoint_Huge_C*>     NavPoints;                                         // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void AddForceToAllBodies(class UPrimitiveComponent* Component, const struct FVector& Force);
	void BndEvt__BP_Tornado_CharactersDetector_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_BP_Tornado(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateEyes();
	void UpdatePhysics();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Tornado_C">();
	}
	static class ABP_Tornado_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Tornado_C>();
	}
};
static_assert(alignof(ABP_Tornado_C) == 0x000008, "Wrong alignment on ABP_Tornado_C");
static_assert(sizeof(ABP_Tornado_C) == 0x0003B0, "Wrong size on ABP_Tornado_C");
static_assert(offsetof(ABP_Tornado_C, UberGraphFrame) == 0x000320, "Member 'ABP_Tornado_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, TornadoIdleAudio) == 0x000328, "Member 'ABP_Tornado_C::TornadoIdleAudio' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, RightEye) == 0x000330, "Member 'ABP_Tornado_C::RightEye' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, LeftEye) == 0x000338, "Member 'ABP_Tornado_C::LeftEye' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, Eyes) == 0x000340, "Member 'ABP_Tornado_C::Eyes' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, Scoring) == 0x000348, "Member 'ABP_Tornado_C::Scoring' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, FloatingPawnMovement) == 0x000350, "Member 'ABP_Tornado_C::FloatingPawnMovement' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, TornadoParticles) == 0x000358, "Member 'ABP_Tornado_C::TornadoParticles' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, CharactersDetector) == 0x000360, "Member 'ABP_Tornado_C::CharactersDetector' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, PhysicActorDetector) == 0x000368, "Member 'ABP_Tornado_C::PhysicActorDetector' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, DefaultSceneRoot) == 0x000370, "Member 'ABP_Tornado_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, CenteringForce) == 0x000378, "Member 'ABP_Tornado_C::CenteringForce' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, RotationForce) == 0x000380, "Member 'ABP_Tornado_C::RotationForce' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, VerticalForce) == 0x000388, "Member 'ABP_Tornado_C::VerticalForce' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, MaxVelocity) == 0x000390, "Member 'ABP_Tornado_C::MaxVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, RadialForce) == 0x000398, "Member 'ABP_Tornado_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_Tornado_C, NavPoints) == 0x0003A0, "Member 'ABP_Tornado_C::NavPoints' has a wrong offset!");

}

