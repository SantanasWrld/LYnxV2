#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Scoring

#include "Basic.hpp"

#include "E_ScoringActorState_structs.hpp"
#include "E_ScoringActorVariant_structs.hpp"
#include "S_ScoringCombo_structs.hpp"
#include "E_ScoringCategory_structs.hpp"
#include "S_ScoringComboItem_structs.hpp"
#include "S_CameroidActorScore_structs.hpp"
#include "S_ScoringCategory_structs.hpp"
#include "E_ScoringTag_structs.hpp"
#include "E_ScoringActorGroup_structs.hpp"
#include "S_ScoringActorGroup_structs.hpp"
#include "E_ScoringActor_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "S_CameroidCapture_structs.hpp"


namespace SDK::Params
{

// Function BP_Scoring.BP_Scoring_C.CanCreateCapture
// 0x0018 (0x0018 - 0x0000)
struct BP_Scoring_C_CanCreateCapture final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCapturesLeft_CapturesLeft;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_CanCreateCapture) == 0x000008, "Wrong alignment on BP_Scoring_C_CanCreateCapture");
static_assert(sizeof(BP_Scoring_C_CanCreateCapture) == 0x000018, "Wrong size on BP_Scoring_C_CanCreateCapture");
static_assert(offsetof(BP_Scoring_C_CanCreateCapture, Cameroid) == 0x000000, "Member 'BP_Scoring_C_CanCreateCapture::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CanCreateCapture, Result) == 0x000008, "Member 'BP_Scoring_C_CanCreateCapture::Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CanCreateCapture, CallFunc_GetCapturesLeft_CapturesLeft) == 0x00000C, "Member 'BP_Scoring_C_CanCreateCapture::CallFunc_GetCapturesLeft_CapturesLeft' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CanCreateCapture, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_Scoring_C_CanCreateCapture::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CanCreateCapture, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_Scoring_C_CanCreateCapture::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ComputeActorScore
// 0x0188 (0x0188 - 0x0000)
struct BP_Scoring_C_ComputeActorScore final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureLocation;                                   // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureRotation;                                   // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        HorizontalHalfFov;                                 // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalHalfFov;                                   // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HorizontalFov;                                     // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsScoring;                                         // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        RelativeScore;                                     // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionScore;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AngleScore;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VisibilityScore;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VisiblePointsCount;                                // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  PointsVisibility;                                  // 0x0090(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        SamplePoints;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         TotalScore;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidScoringActor_IsValid;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_ScoringComponent_C*                CallFunc_IsValidScoringActor_ScoringComponent;     // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ComputeDirectionScore_Score;              // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeVisibilityScore_VisibilityScore;   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_ComputeVisibilityScore_SamplePoints;      // 0x0118(0x0010)(ReferenceParm)
	TArray<bool>                                  CallFunc_ComputeVisibilityScore_PointsVisibility;  // 0x0128(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ComputeAngleScore_AngleScore;             // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_2;              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast_1;      // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast_2;      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1;   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ComputeActorScore) == 0x000008, "Wrong alignment on BP_Scoring_C_ComputeActorScore");
static_assert(sizeof(BP_Scoring_C_ComputeActorScore) == 0x000188, "Wrong size on BP_Scoring_C_ComputeActorScore");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, Cameroid) == 0x000000, "Member 'BP_Scoring_C_ComputeActorScore::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, Actor) == 0x000008, "Member 'BP_Scoring_C_ComputeActorScore::Actor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CaptureLocation) == 0x000010, "Member 'BP_Scoring_C_ComputeActorScore::CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CaptureRotation) == 0x000028, "Member 'BP_Scoring_C_ComputeActorScore::CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, HorizontalHalfFov) == 0x000040, "Member 'BP_Scoring_C_ComputeActorScore::HorizontalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, VerticalHalfFov) == 0x000048, "Member 'BP_Scoring_C_ComputeActorScore::VerticalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, HorizontalFov) == 0x000050, "Member 'BP_Scoring_C_ComputeActorScore::HorizontalFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, Debug) == 0x000058, "Member 'BP_Scoring_C_ComputeActorScore::Debug' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, IsScoring) == 0x000059, "Member 'BP_Scoring_C_ComputeActorScore::IsScoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, Scoring) == 0x000060, "Member 'BP_Scoring_C_ComputeActorScore::Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, RelativeScore) == 0x000068, "Member 'BP_Scoring_C_ComputeActorScore::RelativeScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, DirectionScore) == 0x000070, "Member 'BP_Scoring_C_ComputeActorScore::DirectionScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, AngleScore) == 0x000078, "Member 'BP_Scoring_C_ComputeActorScore::AngleScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, VisibilityScore) == 0x000080, "Member 'BP_Scoring_C_ComputeActorScore::VisibilityScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, VisiblePointsCount) == 0x000088, "Member 'BP_Scoring_C_ComputeActorScore::VisiblePointsCount' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, PointsVisibility) == 0x000090, "Member 'BP_Scoring_C_ComputeActorScore::PointsVisibility' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, SamplePoints) == 0x0000A0, "Member 'BP_Scoring_C_ComputeActorScore::SamplePoints' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, TotalScore) == 0x0000B0, "Member 'BP_Scoring_C_ComputeActorScore::TotalScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B8, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_IsValidScoringActor_IsValid) == 0x0000D0, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_IsValidScoringActor_IsValid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_IsValidScoringActor_ScoringComponent) == 0x0000D8, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_IsValidScoringActor_ScoringComponent' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000E0, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_Vector_Distance_ReturnValue) == 0x0000F8, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_GetFloatValue_ReturnValue) == 0x000100, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_ComputeDirectionScore_Score) == 0x000108, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_ComputeDirectionScore_Score' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_ComputeVisibilityScore_VisibilityScore) == 0x000110, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_ComputeVisibilityScore_VisibilityScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_ComputeVisibilityScore_SamplePoints) == 0x000118, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_ComputeVisibilityScore_SamplePoints' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_ComputeVisibilityScore_PointsVisibility) == 0x000128, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_ComputeVisibilityScore_PointsVisibility' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000138, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000139, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_ComputeAngleScore_AngleScore) == 0x000140, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_ComputeAngleScore_AngleScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_GetFloatValue_ReturnValue_1) == 0x000148, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_GetFloatValue_ReturnValue_2) == 0x00014C, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_GetFloatValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000150, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000158, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000160, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000168, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_GetFloatValue_InTime_ImplicitCast_1) == 0x000170, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_GetFloatValue_InTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_GetFloatValue_InTime_ImplicitCast_2) == 0x000174, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_GetFloatValue_InTime_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000178, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScore, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1) == 0x000180, "Member 'BP_Scoring_C_ComputeActorScore::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ComputeActorScores
// 0x0130 (0x0130 - 0x0000)
struct BP_Scoring_C_ComputeActorScores final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureLocation;                                   // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureRotation;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        HorizontalFov;                                     // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0048(0x0010)(Parm, OutParm)
	TArray<struct FS_CameroidActorScore>          _ActorsScores;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	double                                        _VerticalHalfFov;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _HorizontalHalfFov;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _HorizontalFov;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               _CaptureRotation;                                  // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                _CaptureLocation;                                  // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAllActorsOfClass_OutActors;            // 0x00C8(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComputeActorScore_IsScoring;              // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_ScoringComponent_C*                CallFunc_ComputeActorScore_Scoring;                // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeActorScore_RelativeScore;          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CameroidActorScore                  CallFunc_CreateActorScore_ActorScore;              // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet__HorizontalHalfFov_ImplicitCast; // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeActorScore_HorizontalHalfFov_ImplicitCast; // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ComputeActorScores) == 0x000008, "Wrong alignment on BP_Scoring_C_ComputeActorScores");
static_assert(sizeof(BP_Scoring_C_ComputeActorScores) == 0x000130, "Wrong size on BP_Scoring_C_ComputeActorScores");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, Cameroid) == 0x000000, "Member 'BP_Scoring_C_ComputeActorScores::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CaptureLocation) == 0x000008, "Member 'BP_Scoring_C_ComputeActorScores::CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CaptureRotation) == 0x000020, "Member 'BP_Scoring_C_ComputeActorScores::CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, HorizontalFov) == 0x000038, "Member 'BP_Scoring_C_ComputeActorScores::HorizontalFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, Debug) == 0x000040, "Member 'BP_Scoring_C_ComputeActorScores::Debug' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, ActorsScores) == 0x000048, "Member 'BP_Scoring_C_ComputeActorScores::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, _ActorsScores) == 0x000058, "Member 'BP_Scoring_C_ComputeActorScores::_ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, _VerticalHalfFov) == 0x000068, "Member 'BP_Scoring_C_ComputeActorScores::_VerticalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, _HorizontalHalfFov) == 0x000070, "Member 'BP_Scoring_C_ComputeActorScores::_HorizontalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, _HorizontalFov) == 0x000074, "Member 'BP_Scoring_C_ComputeActorScores::_HorizontalFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, _CaptureRotation) == 0x000078, "Member 'BP_Scoring_C_ComputeActorScores::_CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, _CaptureLocation) == 0x000090, "Member 'BP_Scoring_C_ComputeActorScores::_CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, Temp_int_Loop_Counter_Variable) == 0x0000A8, "Member 'BP_Scoring_C_ComputeActorScores::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, Temp_int_Array_Index_Variable) == 0x0000BC, "Member 'BP_Scoring_C_ComputeActorScores::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_GetAllActorsOfClass_OutActors) == 0x0000C8, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Array_Length_ReturnValue) == 0x0000E0, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_ComputeActorScore_IsScoring) == 0x0000E4, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_ComputeActorScore_IsScoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_ComputeActorScore_Scoring) == 0x0000E8, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_ComputeActorScore_Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_ComputeActorScore_RelativeScore) == 0x0000F0, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_ComputeActorScore_RelativeScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Less_IntInt_ReturnValue) == 0x0000F8, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_CreateActorScore_ActorScore) == 0x000100, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_CreateActorScore_ActorScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Array_Add_ReturnValue) == 0x000118, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, K2Node_VariableSet__HorizontalHalfFov_ImplicitCast) == 0x00011C, "Member 'BP_Scoring_C_ComputeActorScores::K2Node_VariableSet__HorizontalHalfFov_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000120, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeActorScores, CallFunc_ComputeActorScore_HorizontalHalfFov_ImplicitCast) == 0x000128, "Member 'BP_Scoring_C_ComputeActorScores::CallFunc_ComputeActorScore_HorizontalHalfFov_ImplicitCast' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ComputeAngleScore
// 0x0108 (0x0108 - 0x0000)
struct BP_Scoring_C_ComputeAngleScore final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<bool>                                  PointsVisibility;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                CaptureLocation;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HorizontalFov;                                     // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AngleScore;                                        // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxAngle;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ComputeAngleScore) == 0x000008, "Wrong alignment on BP_Scoring_C_ComputeAngleScore");
static_assert(sizeof(BP_Scoring_C_ComputeAngleScore) == 0x000108, "Wrong size on BP_Scoring_C_ComputeAngleScore");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, Points) == 0x000000, "Member 'BP_Scoring_C_ComputeAngleScore::Points' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, PointsVisibility) == 0x000010, "Member 'BP_Scoring_C_ComputeAngleScore::PointsVisibility' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CaptureLocation) == 0x000020, "Member 'BP_Scoring_C_ComputeAngleScore::CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, HorizontalFov) == 0x000038, "Member 'BP_Scoring_C_ComputeAngleScore::HorizontalFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, AngleScore) == 0x000040, "Member 'BP_Scoring_C_ComputeAngleScore::AngleScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, MaxAngle) == 0x000048, "Member 'BP_Scoring_C_ComputeAngleScore::MaxAngle' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_Scoring_C_ComputeAngleScore::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BP_Scoring_C_ComputeAngleScore::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Normal_ReturnValue) == 0x000080, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, Temp_int_Array_Index_Variable_1) == 0x000098, "Member 'BP_Scoring_C_ComputeAngleScore::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, Temp_int_Loop_Counter_Variable_1) == 0x00009C, "Member 'BP_Scoring_C_ComputeAngleScore::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A1, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A4, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_BooleanAND_ReturnValue) == 0x0000A9, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000B0, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Normal_ReturnValue_1) == 0x0000C8, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000E0, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_DegAcos_ReturnValue) == 0x0000E8, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Abs_ReturnValue) == 0x0000F8, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeAngleScore, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000100, "Member 'BP_Scoring_C_ComputeAngleScore::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ComputeCaptureScore
// 0x0098 (0x0098 - 0x0000)
struct BP_Scoring_C_ComputeCaptureScore final
{
public:
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_ScoringTag>                          Tags_0;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FS_ScoringCategory                     Category;                                          // 0x0020(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         Score;                                             // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _Score;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CameroidActorScore                  CallFunc_Array_Get_Item;                           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ComputeCaptureScore) == 0x000008, "Wrong alignment on BP_Scoring_C_ComputeCaptureScore");
static_assert(sizeof(BP_Scoring_C_ComputeCaptureScore) == 0x000098, "Wrong size on BP_Scoring_C_ComputeCaptureScore");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, ActorsScores) == 0x000000, "Member 'BP_Scoring_C_ComputeCaptureScore::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, Tags_0) == 0x000010, "Member 'BP_Scoring_C_ComputeCaptureScore::Tags_0' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, Category) == 0x000020, "Member 'BP_Scoring_C_ComputeCaptureScore::Category' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, Score) == 0x000048, "Member 'BP_Scoring_C_ComputeCaptureScore::Score' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, _Score) == 0x00004C, "Member 'BP_Scoring_C_ComputeCaptureScore::_Score' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_Scoring_C_ComputeCaptureScore::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BP_Scoring_C_ComputeCaptureScore::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000080, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Add_IntInt_ReturnValue_1) == 0x000090, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeCaptureScore, CallFunc_Round_ReturnValue) == 0x000094, "Member 'BP_Scoring_C_ComputeCaptureScore::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ComputeDirectionScore
// 0x0078 (0x0078 - 0x0000)
struct BP_Scoring_C_ComputeDirectionScore final
{
public:
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureRotation;                                   // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Score;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ComputeDirectionScore) == 0x000008, "Wrong alignment on BP_Scoring_C_ComputeDirectionScore");
static_assert(sizeof(BP_Scoring_C_ComputeDirectionScore) == 0x000078, "Wrong size on BP_Scoring_C_ComputeDirectionScore");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, Scoring) == 0x000000, "Member 'BP_Scoring_C_ComputeDirectionScore::Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, CaptureRotation) == 0x000008, "Member 'BP_Scoring_C_ComputeDirectionScore::CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, Score) == 0x000020, "Member 'BP_Scoring_C_ComputeDirectionScore::Score' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, CallFunc_GetForwardVector_ReturnValue) == 0x000028, "Member 'BP_Scoring_C_ComputeDirectionScore::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, CallFunc_GetForwardVector_ReturnValue_1) == 0x000040, "Member 'BP_Scoring_C_ComputeDirectionScore::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, CallFunc_Dot_VectorVector_ReturnValue) == 0x000058, "Member 'BP_Scoring_C_ComputeDirectionScore::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_Scoring_C_ComputeDirectionScore::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_Scoring_C_ComputeDirectionScore::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeDirectionScore, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_Scoring_C_ComputeDirectionScore::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ComputeVisibilityScore
// 0x00F8 (0x00F8 - 0x0000)
struct BP_Scoring_C_ComputeVisibilityScore final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ScoringActor;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureLocation;                                   // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureRotation;                                   // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        HorizontalHalfFov;                                 // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalHalfFov;                                   // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VisibilityScore;                                   // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SamplePoints;                                      // 0x0068(0x0010)(Parm, OutParm)
	TArray<bool>                                  PointsVisibility;                                  // 0x0078(0x0010)(Parm, OutParm)
	struct FVector                                CallFunc_GetBounds_Origin;                         // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBounds_BoxExtent;                      // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_GetSamplePoints_SamplePoints;             // 0x00B8(0x0010)(ReferenceParm)
	TArray<bool>                                  CallFunc_GetPointsVisibility_PointsVisbility;      // 0x00C8(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetPointsVisibility_VisiblePointsCount;   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ComputeVisibilityScore) == 0x000008, "Wrong alignment on BP_Scoring_C_ComputeVisibilityScore");
static_assert(sizeof(BP_Scoring_C_ComputeVisibilityScore) == 0x0000F8, "Wrong size on BP_Scoring_C_ComputeVisibilityScore");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, Cameroid) == 0x000000, "Member 'BP_Scoring_C_ComputeVisibilityScore::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, Scoring) == 0x000008, "Member 'BP_Scoring_C_ComputeVisibilityScore::Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, ScoringActor) == 0x000010, "Member 'BP_Scoring_C_ComputeVisibilityScore::ScoringActor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CaptureLocation) == 0x000018, "Member 'BP_Scoring_C_ComputeVisibilityScore::CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CaptureRotation) == 0x000030, "Member 'BP_Scoring_C_ComputeVisibilityScore::CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, HorizontalHalfFov) == 0x000048, "Member 'BP_Scoring_C_ComputeVisibilityScore::HorizontalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, VerticalHalfFov) == 0x000050, "Member 'BP_Scoring_C_ComputeVisibilityScore::VerticalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, Debug) == 0x000058, "Member 'BP_Scoring_C_ComputeVisibilityScore::Debug' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, VisibilityScore) == 0x000060, "Member 'BP_Scoring_C_ComputeVisibilityScore::VisibilityScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, SamplePoints) == 0x000068, "Member 'BP_Scoring_C_ComputeVisibilityScore::SamplePoints' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, PointsVisibility) == 0x000078, "Member 'BP_Scoring_C_ComputeVisibilityScore::PointsVisibility' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_GetBounds_Origin) == 0x000088, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_GetBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_GetBounds_BoxExtent) == 0x0000A0, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_GetBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_GetSamplePoints_SamplePoints) == 0x0000B8, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_GetSamplePoints_SamplePoints' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_GetPointsVisibility_PointsVisbility) == 0x0000C8, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_GetPointsVisibility_PointsVisbility' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_GetPointsVisibility_VisiblePointsCount) == 0x0000D8, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_GetPointsVisibility_VisiblePointsCount' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_Array_Length_ReturnValue) == 0x0000DC, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000E0, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000E8, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ComputeVisibilityScore, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'BP_Scoring_C_ComputeVisibilityScore::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ContainsActor
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Scoring_C_ContainsActor final
{
public:
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	E_ScoringActor                                Actor;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ScoringActorState                           State;                                             // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   IgnoredActors;                                     // 0x0018(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_CameroidActorScore                  CallFunc_Array_Get_Item;                           // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStateCompatible_Result;                 // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ContainsActor) == 0x000008, "Wrong alignment on BP_Scoring_C_ContainsActor");
static_assert(sizeof(BP_Scoring_C_ContainsActor) == 0x0000A0, "Wrong size on BP_Scoring_C_ContainsActor");
static_assert(offsetof(BP_Scoring_C_ContainsActor, ActorsScores) == 0x000000, "Member 'BP_Scoring_C_ContainsActor::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, Actor) == 0x000010, "Member 'BP_Scoring_C_ContainsActor::Actor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, State) == 0x000011, "Member 'BP_Scoring_C_ContainsActor::State' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, IgnoredActors) == 0x000018, "Member 'BP_Scoring_C_ContainsActor::IgnoredActors' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, Result) == 0x000068, "Member 'BP_Scoring_C_ContainsActor::Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'BP_Scoring_C_ContainsActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_Scoring_C_ContainsActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'BP_Scoring_C_ContainsActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'BP_Scoring_C_ContainsActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'BP_Scoring_C_ContainsActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_Array_Get_Item) == 0x000080, "Member 'BP_Scoring_C_ContainsActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_Greater_IntInt_ReturnValue) == 0x000098, "Member 'BP_Scoring_C_ContainsActor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_IsStateCompatible_Result) == 0x000099, "Member 'BP_Scoring_C_ContainsActor::CallFunc_IsStateCompatible_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00009A, "Member 'BP_Scoring_C_ContainsActor::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_Set_Contains_ReturnValue) == 0x00009B, "Member 'BP_Scoring_C_ContainsActor::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_Not_PreBool_ReturnValue) == 0x00009C, "Member 'BP_Scoring_C_ContainsActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_BooleanAND_ReturnValue) == 0x00009D, "Member 'BP_Scoring_C_ContainsActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_BooleanAND_ReturnValue_1) == 0x00009E, "Member 'BP_Scoring_C_ContainsActor::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActor, CallFunc_BooleanAND_ReturnValue_2) == 0x00009F, "Member 'BP_Scoring_C_ContainsActor::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ContainsActorGroup
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Scoring_C_ContainsActorGroup final
{
public:
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	E_ScoringActorGroup                           Group;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ScoringActorState                           State;                                             // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   IgnoredActors;                                     // 0x0018(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ScoringActorGroup                   CallFunc_GetScoringActorGroup_Group;               // 0x0070(0x0018)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ScoringActor                                CallFunc_Array_Get_Item;                           // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsActor_Result;                     // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ContainsActorGroup) == 0x000008, "Wrong alignment on BP_Scoring_C_ContainsActorGroup");
static_assert(sizeof(BP_Scoring_C_ContainsActorGroup) == 0x0000A0, "Wrong size on BP_Scoring_C_ContainsActorGroup");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, ActorsScores) == 0x000000, "Member 'BP_Scoring_C_ContainsActorGroup::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, Group) == 0x000010, "Member 'BP_Scoring_C_ContainsActorGroup::Group' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, State) == 0x000011, "Member 'BP_Scoring_C_ContainsActorGroup::State' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, IgnoredActors) == 0x000018, "Member 'BP_Scoring_C_ContainsActorGroup::IgnoredActors' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, Result) == 0x000068, "Member 'BP_Scoring_C_ContainsActorGroup::Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, Temp_int_Array_Index_Variable) == 0x00006C, "Member 'BP_Scoring_C_ContainsActorGroup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, CallFunc_GetScoringActorGroup_Group) == 0x000070, "Member 'BP_Scoring_C_ContainsActorGroup::CallFunc_GetScoringActorGroup_Group' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'BP_Scoring_C_ContainsActorGroup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, CallFunc_Array_Get_Item) == 0x00008C, "Member 'BP_Scoring_C_ContainsActorGroup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, CallFunc_ContainsActor_Result) == 0x00008D, "Member 'BP_Scoring_C_ContainsActorGroup::CallFunc_ContainsActor_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'BP_Scoring_C_ContainsActorGroup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'BP_Scoring_C_ContainsActorGroup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsActorGroup, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'BP_Scoring_C_ContainsActorGroup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ContainsCombo
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Scoring_C_ContainsCombo final
{
public:
	struct FS_ScoringCombo                        Combo;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_ScoringTag>                          Tags_0;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   _IgnoredActors;                                    // 0x0038(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ScoringComboItem                    CallFunc_Array_Get_Item;                           // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsComboItem_Result;                 // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ContainsCombo) == 0x000008, "Wrong alignment on BP_Scoring_C_ContainsCombo");
static_assert(sizeof(BP_Scoring_C_ContainsCombo) == 0x0000A8, "Wrong size on BP_Scoring_C_ContainsCombo");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, Combo) == 0x000000, "Member 'BP_Scoring_C_ContainsCombo::Combo' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, ActorsScores) == 0x000010, "Member 'BP_Scoring_C_ContainsCombo::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, Tags_0) == 0x000020, "Member 'BP_Scoring_C_ContainsCombo::Tags_0' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, Result) == 0x000030, "Member 'BP_Scoring_C_ContainsCombo::Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, _IgnoredActors) == 0x000038, "Member 'BP_Scoring_C_ContainsCombo::_IgnoredActors' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, Temp_int_Array_Index_Variable) == 0x000088, "Member 'BP_Scoring_C_ContainsCombo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, CallFunc_Array_Get_Item) == 0x00008C, "Member 'BP_Scoring_C_ContainsCombo::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'BP_Scoring_C_ContainsCombo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'BP_Scoring_C_ContainsCombo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'BP_Scoring_C_ContainsCombo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'BP_Scoring_C_ContainsCombo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsCombo, CallFunc_ContainsComboItem_Result) == 0x0000A0, "Member 'BP_Scoring_C_ContainsCombo::CallFunc_ContainsComboItem_Result' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ContainsComboItem
// 0x0080 (0x0080 - 0x0000)
struct BP_Scoring_C_ContainsComboItem final
{
public:
	struct FS_ScoringComboItem                    Item;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_ScoringTag>                          Tags_0;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TSet<int32>                                   IgnoredActors;                                     // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Result;                                            // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsActor_Result;                     // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsActorGroup_Result;                // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsTag_Result;                       // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ContainsComboItem) == 0x000008, "Wrong alignment on BP_Scoring_C_ContainsComboItem");
static_assert(sizeof(BP_Scoring_C_ContainsComboItem) == 0x000080, "Wrong size on BP_Scoring_C_ContainsComboItem");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, Item) == 0x000000, "Member 'BP_Scoring_C_ContainsComboItem::Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, ActorsScores) == 0x000008, "Member 'BP_Scoring_C_ContainsComboItem::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, Tags_0) == 0x000018, "Member 'BP_Scoring_C_ContainsComboItem::Tags_0' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, IgnoredActors) == 0x000028, "Member 'BP_Scoring_C_ContainsComboItem::IgnoredActors' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, Result) == 0x000078, "Member 'BP_Scoring_C_ContainsComboItem::Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000079, "Member 'BP_Scoring_C_ContainsComboItem::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, CallFunc_ContainsActor_Result) == 0x00007A, "Member 'BP_Scoring_C_ContainsComboItem::CallFunc_ContainsActor_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, CallFunc_ContainsActorGroup_Result) == 0x00007B, "Member 'BP_Scoring_C_ContainsComboItem::CallFunc_ContainsActorGroup_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00007C, "Member 'BP_Scoring_C_ContainsComboItem::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, CallFunc_ContainsTag_Result) == 0x00007D, "Member 'BP_Scoring_C_ContainsComboItem::CallFunc_ContainsTag_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsComboItem, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00007E, "Member 'BP_Scoring_C_ContainsComboItem::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ContainsTag
// 0x0018 (0x0018 - 0x0000)
struct BP_Scoring_C_ContainsTag final
{
public:
	TArray<E_ScoringTag>                          Tags_0;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	E_ScoringTag                                  Tag;                                               // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ContainsTag) == 0x000008, "Wrong alignment on BP_Scoring_C_ContainsTag");
static_assert(sizeof(BP_Scoring_C_ContainsTag) == 0x000018, "Wrong size on BP_Scoring_C_ContainsTag");
static_assert(offsetof(BP_Scoring_C_ContainsTag, Tags_0) == 0x000000, "Member 'BP_Scoring_C_ContainsTag::Tags_0' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsTag, Tag) == 0x000010, "Member 'BP_Scoring_C_ContainsTag::Tag' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsTag, Result) == 0x000011, "Member 'BP_Scoring_C_ContainsTag::Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ContainsTag, CallFunc_Array_Contains_ReturnValue) == 0x000012, "Member 'BP_Scoring_C_ContainsTag::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.CreateActorScore
// 0x0080 (0x0080 - 0x0000)
struct BP_Scoring_C_CreateActorScore final
{
public:
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        RelativeScore;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_CameroidActorScore                  ActorScore;                                        // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetVariantMultiplier_VariantMultiplier;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetStateMultiplier_StateMultiplier;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CameroidActorScore                  K2Node_MakeStruct_S_CameroidActorScore;            // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_CreateActorScore) == 0x000008, "Wrong alignment on BP_Scoring_C_CreateActorScore");
static_assert(sizeof(BP_Scoring_C_CreateActorScore) == 0x000080, "Wrong size on BP_Scoring_C_CreateActorScore");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, Scoring) == 0x000000, "Member 'BP_Scoring_C_CreateActorScore::Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, RelativeScore) == 0x000008, "Member 'BP_Scoring_C_CreateActorScore::RelativeScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, ActorScore) == 0x000010, "Member 'BP_Scoring_C_CreateActorScore::ActorScore' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_GetVariantMultiplier_VariantMultiplier) == 0x000028, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_GetVariantMultiplier_VariantMultiplier' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_Map_Find_Value) == 0x000030, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_Map_Find_ReturnValue) == 0x000034, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_GetStateMultiplier_StateMultiplier) == 0x000038, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_GetStateMultiplier_StateMultiplier' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000040, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000058, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, CallFunc_Round_ReturnValue) == 0x000060, "Member 'BP_Scoring_C_CreateActorScore::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateActorScore, K2Node_MakeStruct_S_CameroidActorScore) == 0x000068, "Member 'BP_Scoring_C_CreateActorScore::K2Node_MakeStruct_S_CameroidActorScore' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.CreateCapture
// 0x01B8 (0x01B8 - 0x0000)
struct BP_Scoring_C_CreateCapture final
{
public:
	int32                                         CaptureId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureLocation;                                   // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureRotation;                                   // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        HorizontalFov;                                     // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CameroidCapture                     Capture;                                           // 0x0050(0x0040)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         _Score;                                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ScoringCategory                     _Category;                                         // 0x0098(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<E_ScoringTag>                          _Tags;                                             // 0x00C0(0x0010)(Edit, BlueprintVisible)
	struct FRotator                               _CaptureRotation;                                  // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                _CapturePosition;                                  // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_CameroidActorScore>          _ActorsScores;                                     // 0x0100(0x0010)(Edit, BlueprintVisible)
	TArray<struct FS_CameroidActorScore>          CallFunc_ComputeActorScores_ActorsScores;          // 0x0110(0x0010)(ReferenceParm)
	TArray<E_ScoringTag>                          CallFunc_GetScoringTags_Tags;                      // 0x0120(0x0010)(ReferenceParm)
	struct FS_ScoringCategory                     CallFunc_GetScoringCategory_Category;              // 0x0130(0x0028)(HasGetValueTypeHash)
	struct FS_CameroidCapture                     CallFunc_MakeCapture_Capture;                      // 0x0158(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_ComputeCaptureScore_Score;                // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_CreateCapture) == 0x000008, "Wrong alignment on BP_Scoring_C_CreateCapture");
static_assert(sizeof(BP_Scoring_C_CreateCapture) == 0x0001B8, "Wrong size on BP_Scoring_C_CreateCapture");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CaptureId) == 0x000000, "Member 'BP_Scoring_C_CreateCapture::CaptureId' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, Cameroid) == 0x000008, "Member 'BP_Scoring_C_CreateCapture::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CaptureLocation) == 0x000010, "Member 'BP_Scoring_C_CreateCapture::CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CaptureRotation) == 0x000028, "Member 'BP_Scoring_C_CreateCapture::CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, HorizontalFov) == 0x000040, "Member 'BP_Scoring_C_CreateCapture::HorizontalFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, Debug) == 0x000048, "Member 'BP_Scoring_C_CreateCapture::Debug' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, Capture) == 0x000050, "Member 'BP_Scoring_C_CreateCapture::Capture' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, _Score) == 0x000090, "Member 'BP_Scoring_C_CreateCapture::_Score' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, _Category) == 0x000098, "Member 'BP_Scoring_C_CreateCapture::_Category' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, _Tags) == 0x0000C0, "Member 'BP_Scoring_C_CreateCapture::_Tags' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, _CaptureRotation) == 0x0000D0, "Member 'BP_Scoring_C_CreateCapture::_CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, _CapturePosition) == 0x0000E8, "Member 'BP_Scoring_C_CreateCapture::_CapturePosition' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, _ActorsScores) == 0x000100, "Member 'BP_Scoring_C_CreateCapture::_ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_ComputeActorScores_ActorsScores) == 0x000110, "Member 'BP_Scoring_C_CreateCapture::CallFunc_ComputeActorScores_ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_GetScoringTags_Tags) == 0x000120, "Member 'BP_Scoring_C_CreateCapture::CallFunc_GetScoringTags_Tags' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_GetScoringCategory_Category) == 0x000130, "Member 'BP_Scoring_C_CreateCapture::CallFunc_GetScoringCategory_Category' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_MakeCapture_Capture) == 0x000158, "Member 'BP_Scoring_C_CreateCapture::CallFunc_MakeCapture_Capture' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_ComputeCaptureScore_Score) == 0x000198, "Member 'BP_Scoring_C_CreateCapture::CallFunc_ComputeCaptureScore_Score' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0001A0, "Member 'BP_Scoring_C_CreateCapture::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001A8, "Member 'BP_Scoring_C_CreateCapture::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateCapture, CallFunc_Round_ReturnValue) == 0x0001B0, "Member 'BP_Scoring_C_CreateCapture::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.CreateSave
// 0x0010 (0x0010 - 0x0000)
struct BP_Scoring_C_CreateSave final
{
public:
	class UBP_ScoringSave_C*                      ScoringSave;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ScoringSave_C*                      CallFunc_CreateSaveGameObject_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_CreateSave) == 0x000008, "Wrong alignment on BP_Scoring_C_CreateSave");
static_assert(sizeof(BP_Scoring_C_CreateSave) == 0x000010, "Wrong size on BP_Scoring_C_CreateSave");
static_assert(offsetof(BP_Scoring_C_CreateSave, ScoringSave) == 0x000000, "Member 'BP_Scoring_C_CreateSave::ScoringSave' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_CreateSave, CallFunc_CreateSaveGameObject_ReturnValue) == 0x000008, "Member 'BP_Scoring_C_CreateSave::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ExecuteUbergraph_BP_Scoring
// 0x0008 (0x0008 - 0x0000)
struct BP_Scoring_C_ExecuteUbergraph_BP_Scoring final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSessionHost_IsHost;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ExecuteUbergraph_BP_Scoring) == 0x000004, "Wrong alignment on BP_Scoring_C_ExecuteUbergraph_BP_Scoring");
static_assert(sizeof(BP_Scoring_C_ExecuteUbergraph_BP_Scoring) == 0x000008, "Wrong size on BP_Scoring_C_ExecuteUbergraph_BP_Scoring");
static_assert(offsetof(BP_Scoring_C_ExecuteUbergraph_BP_Scoring, EntryPoint) == 0x000000, "Member 'BP_Scoring_C_ExecuteUbergraph_BP_Scoring::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ExecuteUbergraph_BP_Scoring, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_Scoring_C_ExecuteUbergraph_BP_Scoring::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ExecuteUbergraph_BP_Scoring, CallFunc_IsSessionHost_IsHost) == 0x000005, "Member 'BP_Scoring_C_ExecuteUbergraph_BP_Scoring::CallFunc_IsSessionHost_IsHost' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_ExecuteUbergraph_BP_Scoring, K2Node_Event_EndPlayReason) == 0x000006, "Member 'BP_Scoring_C_ExecuteUbergraph_BP_Scoring::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.FindCategory
// 0x0070 (0x0070 - 0x0000)
struct BP_Scoring_C_FindCategory final
{
public:
	E_ScoringCategory                             ECategory;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ScoringCategory                     Category;                                          // 0x0008(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ScoringCategory                     CallFunc_Array_Get_Item;                           // 0x0040(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_FindCategory) == 0x000008, "Wrong alignment on BP_Scoring_C_FindCategory");
static_assert(sizeof(BP_Scoring_C_FindCategory) == 0x000070, "Wrong size on BP_Scoring_C_FindCategory");
static_assert(offsetof(BP_Scoring_C_FindCategory, ECategory) == 0x000000, "Member 'BP_Scoring_C_FindCategory::ECategory' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, Category) == 0x000008, "Member 'BP_Scoring_C_FindCategory::Category' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_Scoring_C_FindCategory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_Scoring_C_FindCategory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_Scoring_C_FindCategory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_Scoring_C_FindCategory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_Scoring_C_FindCategory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_Scoring_C_FindCategory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_FindCategory, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000069, "Member 'BP_Scoring_C_FindCategory::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetActiveScoringComponent
// 0x0040 (0x0040 - 0x0000)
struct BP_Scoring_C_GetActiveScoringComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                Scoring;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UBPC_ScoringComponent_C*>        CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanScore_Result;                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetActiveScoringComponent) == 0x000008, "Wrong alignment on BP_Scoring_C_GetActiveScoringComponent");
static_assert(sizeof(BP_Scoring_C_GetActiveScoringComponent) == 0x000040, "Wrong size on BP_Scoring_C_GetActiveScoringComponent");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, Actor) == 0x000000, "Member 'BP_Scoring_C_GetActiveScoringComponent::Actor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, Scoring) == 0x000008, "Member 'BP_Scoring_C_GetActiveScoringComponent::Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'BP_Scoring_C_GetActiveScoringComponent::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_Scoring_C_GetActiveScoringComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_Scoring_C_GetActiveScoringComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_Scoring_C_GetActiveScoringComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, CallFunc_CanScore_Result) == 0x000030, "Member 'BP_Scoring_C_GetActiveScoringComponent::CallFunc_CanScore_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_Scoring_C_GetActiveScoringComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_Scoring_C_GetActiveScoringComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetActiveScoringComponent, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_Scoring_C_GetActiveScoringComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetGroups
// 0x0060 (0x0060 - 0x0000)
struct BP_Scoring_C_GetGroups final
{
public:
	E_ScoringActor                                Actor;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ScoringActorGroup>                   Groups;                                            // 0x0008(0x0010)(Parm, OutParm)
	TArray<E_ScoringActorGroup>                   _Groups;                                           // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ScoringActorGroup                   CallFunc_Array_Get_Item;                           // 0x0038(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetGroups) == 0x000008, "Wrong alignment on BP_Scoring_C_GetGroups");
static_assert(sizeof(BP_Scoring_C_GetGroups) == 0x000060, "Wrong size on BP_Scoring_C_GetGroups");
static_assert(offsetof(BP_Scoring_C_GetGroups, Actor) == 0x000000, "Member 'BP_Scoring_C_GetGroups::Actor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, Groups) == 0x000008, "Member 'BP_Scoring_C_GetGroups::Groups' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, _Groups) == 0x000018, "Member 'BP_Scoring_C_GetGroups::_Groups' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_Scoring_C_GetGroups::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_Scoring_C_GetGroups::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_Scoring_C_GetGroups::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_Scoring_C_GetGroups::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Scoring_C_GetGroups::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, CallFunc_Array_Contains_ReturnValue) == 0x000054, "Member 'BP_Scoring_C_GetGroups::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'BP_Scoring_C_GetGroups::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetGroups, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'BP_Scoring_C_GetGroups::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetNewCaptureID
// 0x0010 (0x0010 - 0x0000)
struct BP_Scoring_C_GetNewCaptureID final
{
public:
	int32                                         CaptureId;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _CaptureID;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetNewCaptureID) == 0x000004, "Wrong alignment on BP_Scoring_C_GetNewCaptureID");
static_assert(sizeof(BP_Scoring_C_GetNewCaptureID) == 0x000010, "Wrong size on BP_Scoring_C_GetNewCaptureID");
static_assert(offsetof(BP_Scoring_C_GetNewCaptureID, CaptureId) == 0x000000, "Member 'BP_Scoring_C_GetNewCaptureID::CaptureId' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetNewCaptureID, _CaptureID) == 0x000004, "Member 'BP_Scoring_C_GetNewCaptureID::_CaptureID' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetNewCaptureID, Temp_int_Variable) == 0x000008, "Member 'BP_Scoring_C_GetNewCaptureID::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetNewCaptureID, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Scoring_C_GetNewCaptureID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetPointsVisibility
// 0x00D8 (0x00D8 - 0x0000)
struct BP_Scoring_C_GetPointsVisibility final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Points;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                CaptureLocation;                                   // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureRotation;                                   // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        HorizontalHalfFov;                                 // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalHalfFov;                                   // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  PointsVisbility;                                   // 0x0068(0x0010)(Parm, OutParm)
	int32                                         VisiblePointsCount;                                // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Visbility;                                         // 0x0080(0x0010)(Edit, BlueprintVisible)
	int32                                         VisibilityCount;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPointVisibility_IsVisible;             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetPointsVisibility) == 0x000008, "Wrong alignment on BP_Scoring_C_GetPointsVisibility");
static_assert(sizeof(BP_Scoring_C_GetPointsVisibility) == 0x0000D8, "Wrong size on BP_Scoring_C_GetPointsVisibility");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Cameroid) == 0x000000, "Member 'BP_Scoring_C_GetPointsVisibility::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Actor) == 0x000008, "Member 'BP_Scoring_C_GetPointsVisibility::Actor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Points) == 0x000010, "Member 'BP_Scoring_C_GetPointsVisibility::Points' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CaptureLocation) == 0x000020, "Member 'BP_Scoring_C_GetPointsVisibility::CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CaptureRotation) == 0x000038, "Member 'BP_Scoring_C_GetPointsVisibility::CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, HorizontalHalfFov) == 0x000050, "Member 'BP_Scoring_C_GetPointsVisibility::HorizontalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, VerticalHalfFov) == 0x000058, "Member 'BP_Scoring_C_GetPointsVisibility::VerticalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Debug) == 0x000060, "Member 'BP_Scoring_C_GetPointsVisibility::Debug' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, PointsVisbility) == 0x000068, "Member 'BP_Scoring_C_GetPointsVisibility::PointsVisbility' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, VisiblePointsCount) == 0x000078, "Member 'BP_Scoring_C_GetPointsVisibility::VisiblePointsCount' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Visbility) == 0x000080, "Member 'BP_Scoring_C_GetPointsVisibility::Visbility' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, VisibilityCount) == 0x000090, "Member 'BP_Scoring_C_GetPointsVisibility::VisibilityCount' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Temp_int_Array_Index_Variable) == 0x000094, "Member 'BP_Scoring_C_GetPointsVisibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_Scoring_C_GetPointsVisibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_Scoring_C_GetPointsVisibility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CallFunc_GetPointVisibility_IsVisible) == 0x0000B8, "Member 'BP_Scoring_C_GetPointsVisibility::CallFunc_GetPointVisibility_IsVisible' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Temp_int_Loop_Counter_Variable) == 0x0000BC, "Member 'BP_Scoring_C_GetPointsVisibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CallFunc_Less_IntInt_ReturnValue) == 0x0000C0, "Member 'BP_Scoring_C_GetPointsVisibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_Scoring_C_GetPointsVisibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, Temp_int_Variable) == 0x0000C8, "Member 'BP_Scoring_C_GetPointsVisibility::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000CC, "Member 'BP_Scoring_C_GetPointsVisibility::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointsVisibility, CallFunc_Array_Add_ReturnValue) == 0x0000D0, "Member 'BP_Scoring_C_GetPointsVisibility::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetPointVisibility
// 0x0180 (0x0180 - 0x0000)
struct BP_Scoring_C_GetPointVisibility final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point;                                             // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CaptureLocation;                                   // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CaptureRotation;                                   // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        HorizontalHalfFov;                                 // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalHalfFov;                                   // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVisible;                                         // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInFrustrum_Result;                      // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_LineTraceMulti_OutHits;                   // 0x0088(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceMulti_ReturnValue;               // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetPointVisibility) == 0x000008, "Wrong alignment on BP_Scoring_C_GetPointVisibility");
static_assert(sizeof(BP_Scoring_C_GetPointVisibility) == 0x000180, "Wrong size on BP_Scoring_C_GetPointVisibility");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, Cameroid) == 0x000000, "Member 'BP_Scoring_C_GetPointVisibility::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, Actor) == 0x000008, "Member 'BP_Scoring_C_GetPointVisibility::Actor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, Point) == 0x000010, "Member 'BP_Scoring_C_GetPointVisibility::Point' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CaptureLocation) == 0x000028, "Member 'BP_Scoring_C_GetPointVisibility::CaptureLocation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CaptureRotation) == 0x000040, "Member 'BP_Scoring_C_GetPointVisibility::CaptureRotation' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, HorizontalHalfFov) == 0x000058, "Member 'BP_Scoring_C_GetPointVisibility::HorizontalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, VerticalHalfFov) == 0x000060, "Member 'BP_Scoring_C_GetPointVisibility::VerticalHalfFov' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, Debug) == 0x000068, "Member 'BP_Scoring_C_GetPointVisibility::Debug' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, IsVisible) == 0x000069, "Member 'BP_Scoring_C_GetPointVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_IsInFrustrum_Result) == 0x00006A, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_IsInFrustrum_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_GetOwner_ReturnValue) == 0x000070, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, K2Node_MakeArray_Array) == 0x000078, "Member 'BP_Scoring_C_GetPointVisibility::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_LineTraceMulti_OutHits) == 0x000088, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_LineTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_LineTraceMulti_ReturnValue) == 0x000098, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_LineTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_bBlockingHit) == 0x000099, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_bInitialOverlap) == 0x00009A, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_Time) == 0x00009C, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_Distance) == 0x0000A0, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_Location) == 0x0000A8, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C0, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_Normal) == 0x0000D8, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F0, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_PhysMat) == 0x000108, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_HitActor) == 0x000110, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_HitComponent) == 0x000118, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_HitBoneName) == 0x000120, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_BoneName) == 0x000128, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_ElementIndex) == 0x000134, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_FaceIndex) == 0x000138, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_TraceStart) == 0x000140, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_BreakHitResult_TraceEnd) == 0x000158, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetPointVisibility, CallFunc_GetObjectName_ReturnValue) == 0x000170, "Member 'BP_Scoring_C_GetPointVisibility::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetSamplePoints
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Scoring_C_GetSamplePoints final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoxExtent;                                         // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoundsScale;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        SamplePoints;                                      // 0x0040(0x0010)(Parm, OutParm)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxElement_ReturnValue;                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_SampleBoundsPoints_ReturnValue;           // 0x0090(0x0010)(ReferenceParm)
	float                                         CallFunc_SampleBoundsPoints_BoundsScale_ImplicitCast; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetSamplePoints) == 0x000008, "Wrong alignment on BP_Scoring_C_GetSamplePoints");
static_assert(sizeof(BP_Scoring_C_GetSamplePoints) == 0x0000A8, "Wrong size on BP_Scoring_C_GetSamplePoints");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, Origin) == 0x000000, "Member 'BP_Scoring_C_GetSamplePoints::Origin' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, BoxExtent) == 0x000018, "Member 'BP_Scoring_C_GetSamplePoints::BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, BoundsScale) == 0x000030, "Member 'BP_Scoring_C_GetSamplePoints::BoundsScale' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, Debug) == 0x000038, "Member 'BP_Scoring_C_GetSamplePoints::Debug' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, SamplePoints) == 0x000040, "Member 'BP_Scoring_C_GetSamplePoints::SamplePoints' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000050, "Member 'BP_Scoring_C_GetSamplePoints::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000068, "Member 'BP_Scoring_C_GetSamplePoints::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, CallFunc_GetMaxElement_ReturnValue) == 0x000080, "Member 'BP_Scoring_C_GetSamplePoints::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_Scoring_C_GetSamplePoints::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, CallFunc_SelectInt_ReturnValue) == 0x00008C, "Member 'BP_Scoring_C_GetSamplePoints::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, CallFunc_SampleBoundsPoints_ReturnValue) == 0x000090, "Member 'BP_Scoring_C_GetSamplePoints::CallFunc_SampleBoundsPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetSamplePoints, CallFunc_SampleBoundsPoints_BoundsScale_ImplicitCast) == 0x0000A0, "Member 'BP_Scoring_C_GetSamplePoints::CallFunc_SampleBoundsPoints_BoundsScale_ImplicitCast' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetScoringActorGroup
// 0x0050 (0x0050 - 0x0000)
struct BP_Scoring_C_GetScoringActorGroup final
{
public:
	E_ScoringActorGroup                           GroupEnum;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ScoringActorGroup                   Group;                                             // 0x0008(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ScoringActorGroup                   CallFunc_Array_Get_Item;                           // 0x0030(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetScoringActorGroup) == 0x000008, "Wrong alignment on BP_Scoring_C_GetScoringActorGroup");
static_assert(sizeof(BP_Scoring_C_GetScoringActorGroup) == 0x000050, "Wrong size on BP_Scoring_C_GetScoringActorGroup");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, GroupEnum) == 0x000000, "Member 'BP_Scoring_C_GetScoringActorGroup::GroupEnum' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, Group) == 0x000008, "Member 'BP_Scoring_C_GetScoringActorGroup::Group' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_Scoring_C_GetScoringActorGroup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_Scoring_C_GetScoringActorGroup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_Scoring_C_GetScoringActorGroup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_Scoring_C_GetScoringActorGroup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_Scoring_C_GetScoringActorGroup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_Scoring_C_GetScoringActorGroup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringActorGroup, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000049, "Member 'BP_Scoring_C_GetScoringActorGroup::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetScoringCategory
// 0x00C8 (0x00C8 - 0x0000)
struct BP_Scoring_C_GetScoringCategory final
{
public:
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_ScoringTag>                          Tags_0;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FS_ScoringCategory                     Category;                                          // 0x0020(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FS_ScoringCombo>                _Combos;                                           // 0x0048(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ScoringCategory                     CallFunc_Array_Get_Item;                           // 0x0078(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ScoringCombo                        CallFunc_Array_Get_Item_1;                         // 0x00A8(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ContainsCombo_Result;                     // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetScoringCategory) == 0x000008, "Wrong alignment on BP_Scoring_C_GetScoringCategory");
static_assert(sizeof(BP_Scoring_C_GetScoringCategory) == 0x0000C8, "Wrong size on BP_Scoring_C_GetScoringCategory");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, ActorsScores) == 0x000000, "Member 'BP_Scoring_C_GetScoringCategory::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, Tags_0) == 0x000010, "Member 'BP_Scoring_C_GetScoringCategory::Tags_0' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, Category) == 0x000020, "Member 'BP_Scoring_C_GetScoringCategory::Category' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, _Combos) == 0x000048, "Member 'BP_Scoring_C_GetScoringCategory::_Combos' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'BP_Scoring_C_GetScoringCategory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BP_Scoring_C_GetScoringCategory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, Temp_int_Array_Index_Variable_1) == 0x000064, "Member 'BP_Scoring_C_GetScoringCategory::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, Temp_int_Loop_Counter_Variable_1) == 0x000068, "Member 'BP_Scoring_C_GetScoringCategory::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Array_LastIndex_ReturnValue) == 0x000070, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Array_Get_Item_1) == 0x0000A8, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_ContainsCombo_Result) == 0x0000B9, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_ContainsCombo_Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Array_Length_ReturnValue_1) == 0x0000BC, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringCategory, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C0, "Member 'BP_Scoring_C_GetScoringCategory::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetScoringTags
// 0x0028 (0x0028 - 0x0000)
struct BP_Scoring_C_GetScoringTags final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<E_ScoringTag>                          Tags_0;                                            // 0x0008(0x0010)(Parm, OutParm)
	TArray<E_ScoringTag>                          CallFunc_GetCurrentTags_Tags;                      // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_Scoring_C_GetScoringTags) == 0x000008, "Wrong alignment on BP_Scoring_C_GetScoringTags");
static_assert(sizeof(BP_Scoring_C_GetScoringTags) == 0x000028, "Wrong size on BP_Scoring_C_GetScoringTags");
static_assert(offsetof(BP_Scoring_C_GetScoringTags, Cameroid) == 0x000000, "Member 'BP_Scoring_C_GetScoringTags::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringTags, Tags_0) == 0x000008, "Member 'BP_Scoring_C_GetScoringTags::Tags_0' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetScoringTags, CallFunc_GetCurrentTags_Tags) == 0x000018, "Member 'BP_Scoring_C_GetScoringTags::CallFunc_GetCurrentTags_Tags' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetStateMultiplier
// 0x0020 (0x0020 - 0x0000)
struct BP_Scoring_C_GetStateMultiplier final
{
public:
	E_ScoringActorState                           State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StateMultiplier;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetStateMultiplier) == 0x000008, "Wrong alignment on BP_Scoring_C_GetStateMultiplier");
static_assert(sizeof(BP_Scoring_C_GetStateMultiplier) == 0x000020, "Wrong size on BP_Scoring_C_GetStateMultiplier");
static_assert(offsetof(BP_Scoring_C_GetStateMultiplier, State) == 0x000000, "Member 'BP_Scoring_C_GetStateMultiplier::State' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetStateMultiplier, StateMultiplier) == 0x000008, "Member 'BP_Scoring_C_GetStateMultiplier::StateMultiplier' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetStateMultiplier, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_Scoring_C_GetStateMultiplier::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetStateMultiplier, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_Scoring_C_GetStateMultiplier::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.GetVariantMultiplier
// 0x0020 (0x0020 - 0x0000)
struct BP_Scoring_C_GetVariantMultiplier final
{
public:
	E_ScoringActorVariant                         Variant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        VariantMultiplier;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Find_Value;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_GetVariantMultiplier) == 0x000008, "Wrong alignment on BP_Scoring_C_GetVariantMultiplier");
static_assert(sizeof(BP_Scoring_C_GetVariantMultiplier) == 0x000020, "Wrong size on BP_Scoring_C_GetVariantMultiplier");
static_assert(offsetof(BP_Scoring_C_GetVariantMultiplier, Variant) == 0x000000, "Member 'BP_Scoring_C_GetVariantMultiplier::Variant' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetVariantMultiplier, VariantMultiplier) == 0x000008, "Member 'BP_Scoring_C_GetVariantMultiplier::VariantMultiplier' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetVariantMultiplier, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_Scoring_C_GetVariantMultiplier::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_GetVariantMultiplier, CallFunc_Map_Find_ReturnValue) == 0x000018, "Member 'BP_Scoring_C_GetVariantMultiplier::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.IsStateCompatible
// 0x0005 (0x0005 - 0x0000)
struct BP_Scoring_C_IsStateCompatible final
{
public:
	E_ScoringActorState                           WantedState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ScoringActorState                           ActorState;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_IsStateCompatible) == 0x000001, "Wrong alignment on BP_Scoring_C_IsStateCompatible");
static_assert(sizeof(BP_Scoring_C_IsStateCompatible) == 0x000005, "Wrong size on BP_Scoring_C_IsStateCompatible");
static_assert(offsetof(BP_Scoring_C_IsStateCompatible, WantedState) == 0x000000, "Member 'BP_Scoring_C_IsStateCompatible::WantedState' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsStateCompatible, ActorState) == 0x000001, "Member 'BP_Scoring_C_IsStateCompatible::ActorState' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsStateCompatible, Result) == 0x000002, "Member 'BP_Scoring_C_IsStateCompatible::Result' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsStateCompatible, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_Scoring_C_IsStateCompatible::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsStateCompatible, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'BP_Scoring_C_IsStateCompatible::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.IsValidScoringActor
// 0x0038 (0x0038 - 0x0000)
struct BP_Scoring_C_IsValidScoringActor final
{
public:
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPC_ScoringComponent_C*                ScoringComponent;                                  // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                _Scoring;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBPC_ScoringComponent_C*                CallFunc_GetActiveScoringComponent_Scoring;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_IsValidScoringActor) == 0x000008, "Wrong alignment on BP_Scoring_C_IsValidScoringActor");
static_assert(sizeof(BP_Scoring_C_IsValidScoringActor) == 0x000038, "Wrong size on BP_Scoring_C_IsValidScoringActor");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, Cameroid) == 0x000000, "Member 'BP_Scoring_C_IsValidScoringActor::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, Actor) == 0x000008, "Member 'BP_Scoring_C_IsValidScoringActor::Actor' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, IsValid) == 0x000010, "Member 'BP_Scoring_C_IsValidScoringActor::IsValid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, ScoringComponent) == 0x000018, "Member 'BP_Scoring_C_IsValidScoringActor::ScoringComponent' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, _Scoring) == 0x000020, "Member 'BP_Scoring_C_IsValidScoringActor::_Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, CallFunc_GetActiveScoringComponent_Scoring) == 0x000028, "Member 'BP_Scoring_C_IsValidScoringActor::CallFunc_GetActiveScoringComponent_Scoring' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_Scoring_C_IsValidScoringActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BP_Scoring_C_IsValidScoringActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000032, "Member 'BP_Scoring_C_IsValidScoringActor::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_IsValidScoringActor, CallFunc_BooleanOR_ReturnValue) == 0x000033, "Member 'BP_Scoring_C_IsValidScoringActor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.LoadFromDisk
// 0x0008 (0x0008 - 0x0000)
struct BP_Scoring_C_LoadFromDisk final
{
public:
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_LoadFromDisk) == 0x000008, "Wrong alignment on BP_Scoring_C_LoadFromDisk");
static_assert(sizeof(BP_Scoring_C_LoadFromDisk) == 0x000008, "Wrong size on BP_Scoring_C_LoadFromDisk");
static_assert(offsetof(BP_Scoring_C_LoadFromDisk, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000000, "Member 'BP_Scoring_C_LoadFromDisk::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.LoadSave
// 0x0018 (0x0018 - 0x0000)
struct BP_Scoring_C_LoadSave final
{
public:
	class UObject*                                SaveObject;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ScoringSave_C*                      K2Node_DynamicCast_AsBP_Scoring_Save;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_LoadSave) == 0x000008, "Wrong alignment on BP_Scoring_C_LoadSave");
static_assert(sizeof(BP_Scoring_C_LoadSave) == 0x000018, "Wrong size on BP_Scoring_C_LoadSave");
static_assert(offsetof(BP_Scoring_C_LoadSave, SaveObject) == 0x000000, "Member 'BP_Scoring_C_LoadSave::SaveObject' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_LoadSave, K2Node_DynamicCast_AsBP_Scoring_Save) == 0x000008, "Member 'BP_Scoring_C_LoadSave::K2Node_DynamicCast_AsBP_Scoring_Save' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_LoadSave, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Scoring_C_LoadSave::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.MakeCapture
// 0x00F8 (0x00F8 - 0x0000)
struct BP_Scoring_C_MakeCapture final
{
public:
	int32                                         CaptureId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Cameroid_C*                         Cameroid;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_CameroidActorScore>          ActorsScores;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_ScoringTag>                          Tags_0;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	E_ScoringCategory                             ScoringCategory;                                   // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_CameroidCapture                     Capture;                                           // 0x0038(0x0040)(Parm, OutParm, HasGetValueTypeHash)
	struct FS_CameroidCapture                     CameroidCapture;                                   // 0x0078(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FS_CameroidCapture                     K2Node_MakeStruct_S_CameroidCapture;               // 0x00B8(0x0040)(HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_MakeCapture) == 0x000008, "Wrong alignment on BP_Scoring_C_MakeCapture");
static_assert(sizeof(BP_Scoring_C_MakeCapture) == 0x0000F8, "Wrong size on BP_Scoring_C_MakeCapture");
static_assert(offsetof(BP_Scoring_C_MakeCapture, CaptureId) == 0x000000, "Member 'BP_Scoring_C_MakeCapture::CaptureId' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, Cameroid) == 0x000008, "Member 'BP_Scoring_C_MakeCapture::Cameroid' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, ActorsScores) == 0x000010, "Member 'BP_Scoring_C_MakeCapture::ActorsScores' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, Tags_0) == 0x000020, "Member 'BP_Scoring_C_MakeCapture::Tags_0' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, ScoringCategory) == 0x000030, "Member 'BP_Scoring_C_MakeCapture::ScoringCategory' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, Score) == 0x000034, "Member 'BP_Scoring_C_MakeCapture::Score' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, Capture) == 0x000038, "Member 'BP_Scoring_C_MakeCapture::Capture' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, CameroidCapture) == 0x000078, "Member 'BP_Scoring_C_MakeCapture::CameroidCapture' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_MakeCapture, K2Node_MakeStruct_S_CameroidCapture) == 0x0000B8, "Member 'BP_Scoring_C_MakeCapture::K2Node_MakeStruct_S_CameroidCapture' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Scoring_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Scoring_C_ReceiveEndPlay");
static_assert(sizeof(BP_Scoring_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Scoring_C_ReceiveEndPlay");
static_assert(offsetof(BP_Scoring_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Scoring_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Scoring.BP_Scoring_C.SaveToDisk
// 0x0010 (0x0010 - 0x0000)
struct BP_Scoring_C_SaveToDisk final
{
public:
	class UBP_ScoringSave_C*                      CallFunc_CreateSave_ScoringSave;                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Scoring_C_SaveToDisk) == 0x000008, "Wrong alignment on BP_Scoring_C_SaveToDisk");
static_assert(sizeof(BP_Scoring_C_SaveToDisk) == 0x000010, "Wrong size on BP_Scoring_C_SaveToDisk");
static_assert(offsetof(BP_Scoring_C_SaveToDisk, CallFunc_CreateSave_ScoringSave) == 0x000000, "Member 'BP_Scoring_C_SaveToDisk::CallFunc_CreateSave_ScoringSave' has a wrong offset!");
static_assert(offsetof(BP_Scoring_C_SaveToDisk, CallFunc_SaveGameToSlot_ReturnValue) == 0x000008, "Member 'BP_Scoring_C_SaveToDisk::CallFunc_SaveGameToSlot_ReturnValue' has a wrong offset!");

}

