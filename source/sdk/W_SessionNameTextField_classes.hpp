#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SessionNameTextField

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_SessionNameTextField.W_SessionNameTextField_C
// 0x0020 (0x02E0 - 0x02C0)
class UW_SessionNameTextField_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UEditableTextBox*                       TextBox;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_UPGameInstance_C*                   GameInstance;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         SessionNameMaxLength;                              // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__W_SessionNameTextField_TextBox_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text);
	void ExecuteUbergraph_W_SessionNameTextField(int32 EntryPoint);
	void GamepadTextInputDismissed(bool bSubmitted, int32 nSubmittedText);
	void GetSessionName(class FString* SessionName);
	void InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void OnInitialized();
	void SetDefaultSessionName();
	void ShowGamepadKeyboard();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_SessionNameTextField_C">();
	}
	static class UW_SessionNameTextField_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_SessionNameTextField_C>();
	}
};
static_assert(alignof(UW_SessionNameTextField_C) == 0x000008, "Wrong alignment on UW_SessionNameTextField_C");
static_assert(sizeof(UW_SessionNameTextField_C) == 0x0002E0, "Wrong size on UW_SessionNameTextField_C");
static_assert(offsetof(UW_SessionNameTextField_C, UberGraphFrame) == 0x0002C0, "Member 'UW_SessionNameTextField_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_SessionNameTextField_C, TextBox) == 0x0002C8, "Member 'UW_SessionNameTextField_C::TextBox' has a wrong offset!");
static_assert(offsetof(UW_SessionNameTextField_C, GameInstance) == 0x0002D0, "Member 'UW_SessionNameTextField_C::GameInstance' has a wrong offset!");
static_assert(offsetof(UW_SessionNameTextField_C, SessionNameMaxLength) == 0x0002D8, "Member 'UW_SessionNameTextField_C::SessionNameMaxLength' has a wrong offset!");

}

