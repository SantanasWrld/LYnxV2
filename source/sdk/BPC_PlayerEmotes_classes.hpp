#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerEmotes

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_Emote_structs.hpp"
#include "E_Emote_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_PlayerEmotes.BPC_PlayerEmotes_C
// 0x0050 (0x00F0 - 0x00A0)
class UBPC_PlayerEmotes_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FS_Emote>                       Emotes;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible)
	class ABP_UPPlayerCharacter_C*                Player;                                            // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_Emote                                       PlayingEmote;                                      // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       CurrentCameraShake;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(E_Emote Emote)> OnEmoteStart;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnEmoteStop;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void IsCameroidInFocus(bool* Result);
	void SetArmsVisibility(bool Visible);
	void PlayEmoteAnim(class UAnimationAsset* Anim);
	void GetEmote(E_Emote EEmote, bool* Found, struct FS_Emote* Emote);
	void InpActEvt_IA_Emote1_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Emote2_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Emote3_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Emote4_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Emote5_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Emote6_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Emote7_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Emote8_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void ReceiveBeginPlay();
	void PlayEmoteAnimation(E_Emote Emote);
	void StopEmoteAnimationDelayed(double Duration);
	void StartPlayingEmote(E_Emote Emote);
	void StartPlatingEmoteByIndex(uint8 EmoteIdx);
	void StopEmoteAnimation();
	void ReceiveTick(float DeltaSeconds);
	void MulticastStopEmoteAnimation();
	void CameraShakeIfLocal(class UClass* CameraShake);
	void StopCameraShakeIfLocal();
	void UpdateArmsVisibility();
	void ExecuteUbergraph_BPC_PlayerEmotes(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_PlayerEmotes_C">();
	}
	static class UBPC_PlayerEmotes_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_PlayerEmotes_C>();
	}
};
static_assert(alignof(UBPC_PlayerEmotes_C) == 0x000008, "Wrong alignment on UBPC_PlayerEmotes_C");
static_assert(sizeof(UBPC_PlayerEmotes_C) == 0x0000F0, "Wrong size on UBPC_PlayerEmotes_C");
static_assert(offsetof(UBPC_PlayerEmotes_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_PlayerEmotes_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerEmotes_C, Emotes) == 0x0000A8, "Member 'UBPC_PlayerEmotes_C::Emotes' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerEmotes_C, Player) == 0x0000B8, "Member 'UBPC_PlayerEmotes_C::Player' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerEmotes_C, PlayingEmote) == 0x0000C0, "Member 'UBPC_PlayerEmotes_C::PlayingEmote' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerEmotes_C, CurrentCameraShake) == 0x0000C8, "Member 'UBPC_PlayerEmotes_C::CurrentCameraShake' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerEmotes_C, OnEmoteStart) == 0x0000D0, "Member 'UBPC_PlayerEmotes_C::OnEmoteStart' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerEmotes_C, OnEmoteStop) == 0x0000E0, "Member 'UBPC_PlayerEmotes_C::OnEmoteStop' has a wrong offset!");

}

