#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Insect

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "ABP_Insect_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Insect.ABP_Insect_C
// 0x0460 (0x07B0 - 0x0350)
class UABP_Insect_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Insect::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                   // 0x0358(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0370(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0390(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x03B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0408(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0430(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0458(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0480(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x04C8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x04E8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0530(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0550(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0598(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x05B8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0600(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0620(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0690(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x06B0(0x00C8)()
	bool                                          IsInAir;                                           // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Direction;                                         // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttacking;                                       // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_791[0x7];                                      // 0x0791(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        WalkAudio;                                         // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_Insect_C*                           Insect;                                            // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Insect_AnimGraphNode_TransitionResult_3AA8703545D2FBEC79BF9A85F00ADCF5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Insect_AnimGraphNode_TransitionResult_5E2290804055AF15738F1189F89ABD33();
	void ExecuteUbergraph_ABP_Insect(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Insect_C">();
	}
	static class UABP_Insect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Insect_C>();
	}
};
static_assert(alignof(UABP_Insect_C) == 0x000010, "Wrong alignment on UABP_Insect_C");
static_assert(sizeof(UABP_Insect_C) == 0x0007B0, "Wrong size on UABP_Insect_C");
static_assert(offsetof(UABP_Insect_C, UberGraphFrame) == 0x000350, "Member 'UABP_Insect_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, __AnimBlueprintMutables) == 0x000358, "Member 'UABP_Insect_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimBlueprintExtension_PropertyAccess) == 0x000360, "Member 'UABP_Insect_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UABP_Insect_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_Root) == 0x000370, "Member 'UABP_Insect_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_TransitionResult_5) == 0x000390, "Member 'UABP_Insect_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_TransitionResult_4) == 0x0003B8, "Member 'UABP_Insect_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_TransitionResult_3) == 0x0003E0, "Member 'UABP_Insect_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_TransitionResult_2) == 0x000408, "Member 'UABP_Insect_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_TransitionResult_1) == 0x000430, "Member 'UABP_Insect_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_TransitionResult) == 0x000458, "Member 'UABP_Insect_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_SequencePlayer_3) == 0x000480, "Member 'UABP_Insect_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_StateResult_4) == 0x0004C8, "Member 'UABP_Insect_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_SequencePlayer_2) == 0x0004E8, "Member 'UABP_Insect_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_StateResult_3) == 0x000530, "Member 'UABP_Insect_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_SequencePlayer_1) == 0x000550, "Member 'UABP_Insect_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_StateResult_2) == 0x000598, "Member 'UABP_Insect_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_SequencePlayer) == 0x0005B8, "Member 'UABP_Insect_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_StateResult_1) == 0x000600, "Member 'UABP_Insect_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_BlendSpacePlayer) == 0x000620, "Member 'UABP_Insect_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_StateResult) == 0x000690, "Member 'UABP_Insect_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, AnimGraphNode_StateMachine) == 0x0006B0, "Member 'UABP_Insect_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, IsInAir) == 0x000778, "Member 'UABP_Insect_C::IsInAir' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, Speed) == 0x000780, "Member 'UABP_Insect_C::Speed' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, Direction) == 0x000788, "Member 'UABP_Insect_C::Direction' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, IsAttacking) == 0x000790, "Member 'UABP_Insect_C::IsAttacking' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, WalkAudio) == 0x000798, "Member 'UABP_Insect_C::WalkAudio' has a wrong offset!");
static_assert(offsetof(UABP_Insect_C, Insect) == 0x0007A0, "Member 'UABP_Insect_C::Insect' has a wrong offset!");

}

