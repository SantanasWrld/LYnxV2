#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Odin

#include "Basic.hpp"

#include "AudioCapture_structs.hpp"


namespace SDK
{

// Enum Odin.EOdinNoiseSuppressionLevel
// NumValues: 0x0006
enum class EOdinNoiseSuppressionLevel : uint8
{
	OdinNS_None                              = 0,
	OdinNS_Low                               = 1,
	OdinNS_Moderate                          = 2,
	OdinNS_High                              = 3,
	OdinNS_VeryHigh                          = 4,
	OdinNS_MAX                               = 5,
};

// Enum Odin.EOdinRoomConnectionState
// NumValues: 0x0005
enum class EOdinRoomConnectionState : uint8
{
	Disconnected                             = 0,
	Disconnecting                            = 1,
	Connecting                               = 2,
	Connected                                = 3,
	EOdinRoomConnectionState_MAX             = 4,
};

// Enum Odin.EOdinRoomConnectionStateChangeReason
// NumValues: 0x0004
enum class EOdinRoomConnectionStateChangeReason : uint8
{
	ClientRequested                          = 0,
	ServerRequested                          = 1,
	ConnectionLost                           = 2,
	EOdinRoomConnectionStateChangeReason_MAX = 3,
};

// Enum Odin.EOJson
// NumValues: 0x0008
enum class EOJson : uint8
{
	None                                     = 0,
	Null                                     = 1,
	String                                   = 2,
	Number                                   = 3,
	Boolean                                  = 4,
	Array                                    = 5,
	Object                                   = 6,
	EOJson_MAX                               = 7,
};

// Enum Odin.EOdinTokenAudience
// NumValues: 0x0003
enum class EOdinTokenAudience : uint8
{
	Default                                  = 0,
	SingleServer                             = 1,
	EOdinTokenAudience_MAX                   = 2,
};

// ScriptStruct Odin.OdinCaptureDeviceInfo
// 0x0020 (0x0020 - 0x0000)
struct FOdinCaptureDeviceInfo final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioCaptureDeviceInfo                AudioCaptureInfo;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOdinCaptureDeviceInfo) == 0x000008, "Wrong alignment on FOdinCaptureDeviceInfo");
static_assert(sizeof(FOdinCaptureDeviceInfo) == 0x000020, "Wrong size on FOdinCaptureDeviceInfo");
static_assert(offsetof(FOdinCaptureDeviceInfo, DeviceID) == 0x000000, "Member 'FOdinCaptureDeviceInfo::DeviceID' has a wrong offset!");
static_assert(offsetof(FOdinCaptureDeviceInfo, AudioCaptureInfo) == 0x000010, "Member 'FOdinCaptureDeviceInfo::AudioCaptureInfo' has a wrong offset!");

// ScriptStruct Odin.OdinConnectionStats
// 0x0048 (0x0048 - 0x0000)
struct FOdinConnectionStats final
{
public:
	int64                                         udp_tx_datagrams;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         udp_tx_acks;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         udp_tx_bytes;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         udp_rx_datagrams;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         udp_rx_acks;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         udp_rx_bytes;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         cwnd;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         congestion_events;                                 // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rtt;                                               // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdinConnectionStats) == 0x000008, "Wrong alignment on FOdinConnectionStats");
static_assert(sizeof(FOdinConnectionStats) == 0x000048, "Wrong size on FOdinConnectionStats");
static_assert(offsetof(FOdinConnectionStats, udp_tx_datagrams) == 0x000000, "Member 'FOdinConnectionStats::udp_tx_datagrams' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, udp_tx_acks) == 0x000008, "Member 'FOdinConnectionStats::udp_tx_acks' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, udp_tx_bytes) == 0x000010, "Member 'FOdinConnectionStats::udp_tx_bytes' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, udp_rx_datagrams) == 0x000018, "Member 'FOdinConnectionStats::udp_rx_datagrams' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, udp_rx_acks) == 0x000020, "Member 'FOdinConnectionStats::udp_rx_acks' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, udp_rx_bytes) == 0x000028, "Member 'FOdinConnectionStats::udp_rx_bytes' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, cwnd) == 0x000030, "Member 'FOdinConnectionStats::cwnd' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, congestion_events) == 0x000038, "Member 'FOdinConnectionStats::congestion_events' has a wrong offset!");
static_assert(offsetof(FOdinConnectionStats, rtt) == 0x000040, "Member 'FOdinConnectionStats::rtt' has a wrong offset!");

// ScriptStruct Odin.RoomConnectionStateChangedData
// 0x0002 (0x0002 - 0x0000)
struct FRoomConnectionStateChangedData final
{
public:
	EOdinRoomConnectionState                      State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOdinRoomConnectionStateChangeReason          Reason;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoomConnectionStateChangedData) == 0x000001, "Wrong alignment on FRoomConnectionStateChangedData");
static_assert(sizeof(FRoomConnectionStateChangedData) == 0x000002, "Wrong size on FRoomConnectionStateChangedData");
static_assert(offsetof(FRoomConnectionStateChangedData, State) == 0x000000, "Member 'FRoomConnectionStateChangedData::State' has a wrong offset!");
static_assert(offsetof(FRoomConnectionStateChangedData, Reason) == 0x000001, "Member 'FRoomConnectionStateChangedData::Reason' has a wrong offset!");

// ScriptStruct Odin.OdinApmSettings
// 0x0020 (0x0020 - 0x0000)
struct FOdinApmSettings final
{
public:
	bool                                          bVoiceActivityDetection;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fVadAttackProbability;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fVadReleaseProbability;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumeGate;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fVolumeGateAttackLoudness;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fVolumeGateReleaseLoudness;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEchoCanceller;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighPassFilter;                                   // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreAmplifier;                                     // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOdinNoiseSuppressionLevel                    noise_suppression_level;                           // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransientSuppresor;                               // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGainController;                                   // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdinApmSettings) == 0x000004, "Wrong alignment on FOdinApmSettings");
static_assert(sizeof(FOdinApmSettings) == 0x000020, "Wrong size on FOdinApmSettings");
static_assert(offsetof(FOdinApmSettings, bVoiceActivityDetection) == 0x000000, "Member 'FOdinApmSettings::bVoiceActivityDetection' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, fVadAttackProbability) == 0x000004, "Member 'FOdinApmSettings::fVadAttackProbability' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, fVadReleaseProbability) == 0x000008, "Member 'FOdinApmSettings::fVadReleaseProbability' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, bEnableVolumeGate) == 0x00000C, "Member 'FOdinApmSettings::bEnableVolumeGate' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, fVolumeGateAttackLoudness) == 0x000010, "Member 'FOdinApmSettings::fVolumeGateAttackLoudness' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, fVolumeGateReleaseLoudness) == 0x000014, "Member 'FOdinApmSettings::fVolumeGateReleaseLoudness' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, bEchoCanceller) == 0x000018, "Member 'FOdinApmSettings::bEchoCanceller' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, bHighPassFilter) == 0x000019, "Member 'FOdinApmSettings::bHighPassFilter' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, bPreAmplifier) == 0x00001A, "Member 'FOdinApmSettings::bPreAmplifier' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, noise_suppression_level) == 0x00001B, "Member 'FOdinApmSettings::noise_suppression_level' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, bTransientSuppresor) == 0x00001C, "Member 'FOdinApmSettings::bTransientSuppresor' has a wrong offset!");
static_assert(offsetof(FOdinApmSettings, bGainController) == 0x00001D, "Member 'FOdinApmSettings::bGainController' has a wrong offset!");

// ScriptStruct Odin.OdinAudioStreamStats
// 0x0020 (0x0020 - 0x0000)
struct FOdinAudioStreamStats final
{
public:
	int32                                         packets_total;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         packets_processed;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         packets_arrived_too_early;                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         packets_arrived_too_late;                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         packets_dropped;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         packets_invalid;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         packets_repeated;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         packets_lost;                                      // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOdinAudioStreamStats) == 0x000004, "Wrong alignment on FOdinAudioStreamStats");
static_assert(sizeof(FOdinAudioStreamStats) == 0x000020, "Wrong size on FOdinAudioStreamStats");
static_assert(offsetof(FOdinAudioStreamStats, packets_total) == 0x000000, "Member 'FOdinAudioStreamStats::packets_total' has a wrong offset!");
static_assert(offsetof(FOdinAudioStreamStats, packets_processed) == 0x000004, "Member 'FOdinAudioStreamStats::packets_processed' has a wrong offset!");
static_assert(offsetof(FOdinAudioStreamStats, packets_arrived_too_early) == 0x000008, "Member 'FOdinAudioStreamStats::packets_arrived_too_early' has a wrong offset!");
static_assert(offsetof(FOdinAudioStreamStats, packets_arrived_too_late) == 0x00000C, "Member 'FOdinAudioStreamStats::packets_arrived_too_late' has a wrong offset!");
static_assert(offsetof(FOdinAudioStreamStats, packets_dropped) == 0x000010, "Member 'FOdinAudioStreamStats::packets_dropped' has a wrong offset!");
static_assert(offsetof(FOdinAudioStreamStats, packets_invalid) == 0x000014, "Member 'FOdinAudioStreamStats::packets_invalid' has a wrong offset!");
static_assert(offsetof(FOdinAudioStreamStats, packets_repeated) == 0x000018, "Member 'FOdinAudioStreamStats::packets_repeated' has a wrong offset!");
static_assert(offsetof(FOdinAudioStreamStats, packets_lost) == 0x00001C, "Member 'FOdinAudioStreamStats::packets_lost' has a wrong offset!");

}

