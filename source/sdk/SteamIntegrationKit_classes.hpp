#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamIntegrationKit

#include "Basic.hpp"

#include "SteamIntegrationKit_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK
{

// Class SteamIntegrationKit.HostMigrationSubsystem
// 0x0040 (0x0070 - 0x0030)
class UHostMigrationSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, bool bLocalPlayerHost)> OnHostMigration; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartHostMigration(const struct FSIK_SteamId& LobbyID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HostMigrationSubsystem">();
	}
	static class UHostMigrationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHostMigrationSubsystem>();
	}
};
static_assert(alignof(UHostMigrationSubsystem) == 0x000008, "Wrong alignment on UHostMigrationSubsystem");
static_assert(sizeof(UHostMigrationSubsystem) == 0x000070, "Wrong size on UHostMigrationSubsystem");
static_assert(offsetof(UHostMigrationSubsystem, OnHostMigration) == 0x000030, "Member 'UHostMigrationSubsystem::OnHostMigration' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RemoveDependency_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_RemoveDependency_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RemoveDependency_AsyncFunction* RemoveDependency(const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RemoveDependency_AsyncFunction">();
	}
	static class USIK_RemoveDependency_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RemoveDependency_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RemoveDependency_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RemoveDependency_AsyncFunction");
static_assert(sizeof(USIK_RemoveDependency_AsyncFunction) == 0x000090, "Wrong size on USIK_RemoveDependency_AsyncFunction");
static_assert(offsetof(USIK_RemoveDependency_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RemoveDependency_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RemoveDependency_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RemoveDependency_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIKSettings
// 0x00A8 (0x00E0 - 0x0038)
class USIKSettings final : public UDeveloperSettings
{
public:
	class FString                                 GameVersion;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SteamAppId;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SteamDevAppId;                                     // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelaunchInSteam;                                  // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameServerPort;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         P2PConnectionTimeout;                              // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESIK_BuildConfiguration                       BuildConfiguration;                                // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MapsToCook;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DepotIds;                                          // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 BranchName;                                        // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerDescription;                                 // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerGameDir;                                     // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIKSettings">();
	}
	static class USIKSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIKSettings>();
	}
};
static_assert(alignof(USIKSettings) == 0x000008, "Wrong alignment on USIKSettings");
static_assert(sizeof(USIKSettings) == 0x0000E0, "Wrong size on USIKSettings");
static_assert(offsetof(USIKSettings, GameVersion) == 0x000038, "Member 'USIKSettings::GameVersion' has a wrong offset!");
static_assert(offsetof(USIKSettings, SteamAppId) == 0x000048, "Member 'USIKSettings::SteamAppId' has a wrong offset!");
static_assert(offsetof(USIKSettings, SteamDevAppId) == 0x00004C, "Member 'USIKSettings::SteamDevAppId' has a wrong offset!");
static_assert(offsetof(USIKSettings, bRelaunchInSteam) == 0x000050, "Member 'USIKSettings::bRelaunchInSteam' has a wrong offset!");
static_assert(offsetof(USIKSettings, GameServerPort) == 0x000054, "Member 'USIKSettings::GameServerPort' has a wrong offset!");
static_assert(offsetof(USIKSettings, P2PConnectionTimeout) == 0x000058, "Member 'USIKSettings::P2PConnectionTimeout' has a wrong offset!");
static_assert(offsetof(USIKSettings, BuildConfiguration) == 0x00005C, "Member 'USIKSettings::BuildConfiguration' has a wrong offset!");
static_assert(offsetof(USIKSettings, MapsToCook) == 0x000060, "Member 'USIKSettings::MapsToCook' has a wrong offset!");
static_assert(offsetof(USIKSettings, DepotIds) == 0x000070, "Member 'USIKSettings::DepotIds' has a wrong offset!");
static_assert(offsetof(USIKSettings, BranchName) == 0x000080, "Member 'USIKSettings::BranchName' has a wrong offset!");
static_assert(offsetof(USIKSettings, Username) == 0x000090, "Member 'USIKSettings::Username' has a wrong offset!");
static_assert(offsetof(USIKSettings, Password) == 0x0000A0, "Member 'USIKSettings::Password' has a wrong offset!");
static_assert(offsetof(USIKSettings, ServerName) == 0x0000B0, "Member 'USIKSettings::ServerName' has a wrong offset!");
static_assert(offsetof(USIKSettings, ServerDescription) == 0x0000C0, "Member 'USIKSettings::ServerDescription' has a wrong offset!");
static_assert(offsetof(USIKSettings, ServerGameDir) == 0x0000D0, "Member 'USIKSettings::ServerGameDir' has a wrong offset!");

// Class SteamIntegrationKit.SIK_AddAppDependency_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_AddAppDependency_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_AddAppDependency_AsyncFunction* AddAppDependency(const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_AddAppDependency_AsyncFunction">();
	}
	static class USIK_AddAppDependency_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_AddAppDependency_AsyncFunction>();
	}
};
static_assert(alignof(USIK_AddAppDependency_AsyncFunction) == 0x000008, "Wrong alignment on USIK_AddAppDependency_AsyncFunction");
static_assert(sizeof(USIK_AddAppDependency_AsyncFunction) == 0x000090, "Wrong size on USIK_AddAppDependency_AsyncFunction");
static_assert(offsetof(USIK_AddAppDependency_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_AddAppDependency_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_AddAppDependency_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_AddAppDependency_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_AddDependency_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_AddDependency_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_AddDependency_AsyncFunction* AddDependency(const struct FSIK_PublishedFileId& ParentPublishedFileID, const struct FSIK_PublishedFileId& ChildPublishedFileID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_AddDependency_AsyncFunction">();
	}
	static class USIK_AddDependency_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_AddDependency_AsyncFunction>();
	}
};
static_assert(alignof(USIK_AddDependency_AsyncFunction) == 0x000008, "Wrong alignment on USIK_AddDependency_AsyncFunction");
static_assert(sizeof(USIK_AddDependency_AsyncFunction) == 0x000090, "Wrong size on USIK_AddDependency_AsyncFunction");
static_assert(offsetof(USIK_AddDependency_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_AddDependency_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_AddDependency_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_AddDependency_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_AddItemToFavorites_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_AddItemToFavorites_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool bWasAddRequest)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool bWasAddRequest)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_AddItemToFavorites_AsyncFunction* AddItemToFavorites(const struct FSIK_AppId& AppID, const struct FSIK_PublishedFileId& PublishedFileId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_AddItemToFavorites_AsyncFunction">();
	}
	static class USIK_AddItemToFavorites_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_AddItemToFavorites_AsyncFunction>();
	}
};
static_assert(alignof(USIK_AddItemToFavorites_AsyncFunction) == 0x000008, "Wrong alignment on USIK_AddItemToFavorites_AsyncFunction");
static_assert(sizeof(USIK_AddItemToFavorites_AsyncFunction) == 0x000090, "Wrong size on USIK_AddItemToFavorites_AsyncFunction");
static_assert(offsetof(USIK_AddItemToFavorites_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_AddItemToFavorites_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_AddItemToFavorites_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_AddItemToFavorites_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestEncryptedAppTicket_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_RequestEncryptedAppTicket_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnSuccess;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnFailure;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestEncryptedAppTicket_AsyncFunction* RequestEncryptedAppTicket(const TArray<uint8>& EncryptedAppTicket);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestEncryptedAppTicket_AsyncFunction">();
	}
	static class USIK_RequestEncryptedAppTicket_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestEncryptedAppTicket_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestEncryptedAppTicket_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestEncryptedAppTicket_AsyncFunction");
static_assert(sizeof(USIK_RequestEncryptedAppTicket_AsyncFunction) == 0x000090, "Wrong size on USIK_RequestEncryptedAppTicket_AsyncFunction");
static_assert(offsetof(USIK_RequestEncryptedAppTicket_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestEncryptedAppTicket_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestEncryptedAppTicket_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestEncryptedAppTicket_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_AppLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_AppLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetAppBuildID();
	static class FString GetAppInstallDir(int32 AppID);
	static struct FSIK_SteamId GetAppOwner();
	static TArray<class FString> GetAvailableGameLanguages();
	static bool GetCurrentBetaName(class FString* Name_0);
	static class FString GetCurrentGameLanguage();
	static int32 GetDLCCount();
	static bool GetDLCDataByIndex(int32 Index_0, struct FSIK_AppId* AppID, bool* Available, class FString* Name_0);
	static bool GetDLCDownloadProgress(const struct FSIK_AppId& AppID, int64* BytesDownloaded, int64* BytesTotal);
	static int32 GetEarliestPurchaseUnixTime(const struct FSIK_AppId& AppID);
	static TArray<int32> GetInstalledDepots(const struct FSIK_AppId& AppID);
	static int32 GetLaunchCommandLine(class FString* CommandLine);
	static class FString GetLaunchQueryParam(const class FString& Key);
	static void InstallDLC(const struct FSIK_AppId& AppID);
	static bool IsAppInstalled(const struct FSIK_AppId& AppID);
	static bool IsCybercafe();
	static bool IsDLCInstalled(int32 AppID);
	static bool IsLowViolence();
	static bool IsSubscribed();
	static bool IsSubscribedApp(int32 AppID);
	static bool IsSubscribedFromFamilySharing();
	static bool IsSubscribedFromFreeWeekend();
	static bool IsTimedTrial(int32* SecondsAllowed, int32* SecondsPlayed);
	static bool IsVACBanned();
	static bool MarkContentCorrupt(bool MissingFilesOnly);
	static void UninstallDLC(const struct FSIK_AppId& AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_AppLibrary">();
	}
	static class USIK_AppLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_AppLibrary>();
	}
};
static_assert(alignof(USIK_AppLibrary) == 0x000008, "Wrong alignment on USIK_AppLibrary");
static_assert(sizeof(USIK_AppLibrary) == 0x000028, "Wrong size on USIK_AppLibrary");

// Class SteamIntegrationKit.SIK_AppSubsystem
// 0x00C0 (0x00F0 - 0x0030)
class USIK_AppSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(int32 AppID)>   OnDlcInstalled;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, int32 FileSize, int32 Flags, const TArray<uint8>& SHA)> OnFileDetails; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnNewUrlLaunchParameters;                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AppID, bool bIsOffline, int32 SecondsAllowed, int32 SecondsPlayed)> OnTimedTrialStatus; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x80];                                      // 0x0070(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_AppSubsystem">();
	}
	static class USIK_AppSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_AppSubsystem>();
	}
};
static_assert(alignof(USIK_AppSubsystem) == 0x000008, "Wrong alignment on USIK_AppSubsystem");
static_assert(sizeof(USIK_AppSubsystem) == 0x0000F0, "Wrong size on USIK_AppSubsystem");
static_assert(offsetof(USIK_AppSubsystem, OnDlcInstalled) == 0x000030, "Member 'USIK_AppSubsystem::OnDlcInstalled' has a wrong offset!");
static_assert(offsetof(USIK_AppSubsystem, OnFileDetails) == 0x000040, "Member 'USIK_AppSubsystem::OnFileDetails' has a wrong offset!");
static_assert(offsetof(USIK_AppSubsystem, OnNewUrlLaunchParameters) == 0x000050, "Member 'USIK_AppSubsystem::OnNewUrlLaunchParameters' has a wrong offset!");
static_assert(offsetof(USIK_AppSubsystem, OnTimedTrialStatus) == 0x000060, "Member 'USIK_AppSubsystem::OnTimedTrialStatus' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RemoteStorageSubsystem
// 0x0180 (0x01B0 - 0x0030)
class USIK_RemoteStorageSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_UGCHandle& UGCHandle, int32 AppID, const class FString& Filename, int32 Size, const struct FSIK_SteamId& SteamIDOwner)> OnRemoteStorageDownloadUGCResult; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_UGCHandle& FileHandle, const class FString& Filename)> OnRemoteStorageFileShareResult; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnRemoteStorageFileWriteAsyncComplete;        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnRemoteStoragePublishedFileSubscribedComplete; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnRemoteStoragePublishedFileUnsubscribedComplete; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, ESIK_Result Result)> OnRemoteStorageSubscribePublishedFileResult; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, ESIK_Result Result)> OnRemoteStorageUnsubscribePublishedFileResult; // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRemoteStorageLocalFileChange;                    // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x100];                                     // 0x00B0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RemoteStorageSubsystem">();
	}
	static class USIK_RemoteStorageSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RemoteStorageSubsystem>();
	}
};
static_assert(alignof(USIK_RemoteStorageSubsystem) == 0x000008, "Wrong alignment on USIK_RemoteStorageSubsystem");
static_assert(sizeof(USIK_RemoteStorageSubsystem) == 0x0001B0, "Wrong size on USIK_RemoteStorageSubsystem");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStorageDownloadUGCResult) == 0x000030, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStorageDownloadUGCResult' has a wrong offset!");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStorageFileShareResult) == 0x000040, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStorageFileShareResult' has a wrong offset!");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStorageFileWriteAsyncComplete) == 0x000050, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStorageFileWriteAsyncComplete' has a wrong offset!");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStoragePublishedFileSubscribedComplete) == 0x000060, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStoragePublishedFileSubscribedComplete' has a wrong offset!");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStoragePublishedFileUnsubscribedComplete) == 0x000070, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStoragePublishedFileUnsubscribedComplete' has a wrong offset!");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStorageSubscribePublishedFileResult) == 0x000080, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStorageSubscribePublishedFileResult' has a wrong offset!");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStorageUnsubscribePublishedFileResult) == 0x000090, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStorageUnsubscribePublishedFileResult' has a wrong offset!");
static_assert(offsetof(USIK_RemoteStorageSubsystem, OnRemoteStorageLocalFileChange) == 0x0000A0, "Member 'USIK_RemoteStorageSubsystem::OnRemoteStorageLocalFileChange' has a wrong offset!");

// Class SteamIntegrationKit.SIK_AssociateWithClan_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_AssociateWithClan_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const ESIK_Result& Result)> OnSuccess;                             // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const ESIK_Result& Result)> OnFailure;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_AssociateWithClan_AsyncFunction* AssociateWithClan(const struct FSIK_SteamId& SteamIdClan);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_AssociateWithClan_AsyncFunction">();
	}
	static class USIK_AssociateWithClan_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_AssociateWithClan_AsyncFunction>();
	}
};
static_assert(alignof(USIK_AssociateWithClan_AsyncFunction) == 0x000008, "Wrong alignment on USIK_AssociateWithClan_AsyncFunction");
static_assert(sizeof(USIK_AssociateWithClan_AsyncFunction) == 0x000088, "Wrong size on USIK_AssociateWithClan_AsyncFunction");
static_assert(offsetof(USIK_AssociateWithClan_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_AssociateWithClan_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_AssociateWithClan_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_AssociateWithClan_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_FindLeaderboard_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_FindLeaderboard_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 LeaderboardID)> OnSuccess;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 LeaderboardID)> OnFailure;                                   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_FindLeaderboard_AsyncFunction* FindLeaderboard(const class FString& LeaderboardName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_FindLeaderboard_AsyncFunction">();
	}
	static class USIK_FindLeaderboard_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_FindLeaderboard_AsyncFunction>();
	}
};
static_assert(alignof(USIK_FindLeaderboard_AsyncFunction) == 0x000008, "Wrong alignment on USIK_FindLeaderboard_AsyncFunction");
static_assert(sizeof(USIK_FindLeaderboard_AsyncFunction) == 0x000090, "Wrong size on USIK_FindLeaderboard_AsyncFunction");
static_assert(offsetof(USIK_FindLeaderboard_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_FindLeaderboard_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_FindLeaderboard_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_FindLeaderboard_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_ChangeNumOpenSlots_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_ChangeNumOpenSlots_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const ESIK_Result Result)> OnSuccess;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const ESIK_Result Result)> OnFailure;                              // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_ChangeNumOpenSlots_AsyncFunction* ChangeNumOpenSlots(const struct FSIK_PartyBeaconID& PartyBeaconID, int32 OpenSlots);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_ChangeNumOpenSlots_AsyncFunction">();
	}
	static class USIK_ChangeNumOpenSlots_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_ChangeNumOpenSlots_AsyncFunction>();
	}
};
static_assert(alignof(USIK_ChangeNumOpenSlots_AsyncFunction) == 0x000008, "Wrong alignment on USIK_ChangeNumOpenSlots_AsyncFunction");
static_assert(sizeof(USIK_ChangeNumOpenSlots_AsyncFunction) == 0x000090, "Wrong size on USIK_ChangeNumOpenSlots_AsyncFunction");
static_assert(offsetof(USIK_ChangeNumOpenSlots_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_ChangeNumOpenSlots_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_ChangeNumOpenSlots_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_ChangeNumOpenSlots_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_ComputeNewPlayerCompatibility_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_ComputeNewPlayerCompatibility_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const ESIK_Result& Result, int32 PlayersThatDontLikeCandidate, int32 PlayersThatCandidateDoesntLike, int32 ClanPlayersThatDontLikeCandidate)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const ESIK_Result& Result, int32 PlayersThatDontLikeCandidate, int32 PlayersThatCandidateDoesntLike, int32 ClanPlayersThatDontLikeCandidate)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_ComputeNewPlayerCompatibility_AsyncFunction* ComputeNewPlayerCompatibility(const struct FSIK_SteamId& PlayerSteamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_ComputeNewPlayerCompatibility_AsyncFunction">();
	}
	static class USIK_ComputeNewPlayerCompatibility_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_ComputeNewPlayerCompatibility_AsyncFunction>();
	}
};
static_assert(alignof(USIK_ComputeNewPlayerCompatibility_AsyncFunction) == 0x000008, "Wrong alignment on USIK_ComputeNewPlayerCompatibility_AsyncFunction");
static_assert(sizeof(USIK_ComputeNewPlayerCompatibility_AsyncFunction) == 0x000088, "Wrong size on USIK_ComputeNewPlayerCompatibility_AsyncFunction");
static_assert(offsetof(USIK_ComputeNewPlayerCompatibility_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_ComputeNewPlayerCompatibility_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_ComputeNewPlayerCompatibility_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_ComputeNewPlayerCompatibility_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_DownloadClanActivityCounts_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_DownloadClanActivityCounts_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void()>              OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_DownloadClanActivityCounts_AsyncFunction* DownloadClanActivityCounts(const TArray<int64>& ClanIds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_DownloadClanActivityCounts_AsyncFunction">();
	}
	static class USIK_DownloadClanActivityCounts_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_DownloadClanActivityCounts_AsyncFunction>();
	}
};
static_assert(alignof(USIK_DownloadClanActivityCounts_AsyncFunction) == 0x000008, "Wrong alignment on USIK_DownloadClanActivityCounts_AsyncFunction");
static_assert(sizeof(USIK_DownloadClanActivityCounts_AsyncFunction) == 0x000090, "Wrong size on USIK_DownloadClanActivityCounts_AsyncFunction");
static_assert(offsetof(USIK_DownloadClanActivityCounts_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_DownloadClanActivityCounts_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_DownloadClanActivityCounts_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_DownloadClanActivityCounts_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_CreateBeacon_AsyncFunction
// 0x0088 (0x00B8 - 0x0030)
class USIK_CreateBeacon_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PartyBeaconID& BeaconID)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PartyBeaconID& BeaconID)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x68];                                      // 0x0050(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_CreateBeacon_AsyncFunction* CreateBeacon(int32 OpenSlots, const struct FSIK_SteamPartyBeaconLocation& Location, const class FString& ConnectString, const class FString& MetaData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_CreateBeacon_AsyncFunction">();
	}
	static class USIK_CreateBeacon_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_CreateBeacon_AsyncFunction>();
	}
};
static_assert(alignof(USIK_CreateBeacon_AsyncFunction) == 0x000008, "Wrong alignment on USIK_CreateBeacon_AsyncFunction");
static_assert(sizeof(USIK_CreateBeacon_AsyncFunction) == 0x0000B8, "Wrong size on USIK_CreateBeacon_AsyncFunction");
static_assert(offsetof(USIK_CreateBeacon_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_CreateBeacon_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_CreateBeacon_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_CreateBeacon_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_CreateItem_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_CreateItem_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool bUserNeedsToAcceptWorkshopLegalAgreement)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool bUserNeedsToAcceptWorkshopLegalAgreement)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_CreateItem_AsyncFunction* CreateItem(const struct FSIK_AppId& ConsumerAppID, ESIK_WorkshopFileType FileType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_CreateItem_AsyncFunction">();
	}
	static class USIK_CreateItem_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_CreateItem_AsyncFunction>();
	}
};
static_assert(alignof(USIK_CreateItem_AsyncFunction) == 0x000008, "Wrong alignment on USIK_CreateItem_AsyncFunction");
static_assert(sizeof(USIK_CreateItem_AsyncFunction) == 0x000088, "Wrong size on USIK_CreateItem_AsyncFunction");
static_assert(offsetof(USIK_CreateItem_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_CreateItem_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_CreateItem_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_CreateItem_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_CreateLeaderboard_AsyncFunction
// 0x0068 (0x0098 - 0x0030)
class USIK_CreateLeaderboard_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 LeaderboardID)> OnSuccess;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 LeaderboardID)> OnFailure;                                   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_CreateLeaderboard_AsyncFunction* CreateLeaderboard(const class FString& LeaderboardName, ESIK_LeaderboardSortMethod SortMethod, ESIK_LeaderboardDisplayType DisplayType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_CreateLeaderboard_AsyncFunction">();
	}
	static class USIK_CreateLeaderboard_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_CreateLeaderboard_AsyncFunction>();
	}
};
static_assert(alignof(USIK_CreateLeaderboard_AsyncFunction) == 0x000008, "Wrong alignment on USIK_CreateLeaderboard_AsyncFunction");
static_assert(sizeof(USIK_CreateLeaderboard_AsyncFunction) == 0x000098, "Wrong size on USIK_CreateLeaderboard_AsyncFunction");
static_assert(offsetof(USIK_CreateLeaderboard_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_CreateLeaderboard_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_CreateLeaderboard_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_CreateLeaderboard_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_CreateLobby_AsyncFunction
// 0x0090 (0x00C0 - 0x0030)
class USIK_CreateLobby_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x70];                                      // 0x0030(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID)> OnSuccess;                    // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID)> OnFail;                       // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USIK_CreateLobby_AsyncFunction* CreateSIKLobby(const TMap<class FString, struct FSIKAttribute>& SessionSettings, class FName SessionName, int32 NumberOfPublicConnections, const struct FSIKCreateLobbySettings& ExtraSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_CreateLobby_AsyncFunction">();
	}
	static class USIK_CreateLobby_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_CreateLobby_AsyncFunction>();
	}
};
static_assert(alignof(USIK_CreateLobby_AsyncFunction) == 0x000008, "Wrong alignment on USIK_CreateLobby_AsyncFunction");
static_assert(sizeof(USIK_CreateLobby_AsyncFunction) == 0x0000C0, "Wrong size on USIK_CreateLobby_AsyncFunction");
static_assert(offsetof(USIK_CreateLobby_AsyncFunction, OnSuccess) == 0x0000A0, "Member 'USIK_CreateLobby_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_CreateLobby_AsyncFunction, OnFail) == 0x0000B0, "Member 'USIK_CreateLobby_AsyncFunction::OnFail' has a wrong offset!");

// Class SteamIntegrationKit.SIK_FileShare_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_FileShare_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const ESIK_Result& Result, const class FString& SharedFile, const struct FSIK_UGCHandle& UGCHandle)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const ESIK_Result& Result, const class FString& SharedFile, const struct FSIK_UGCHandle& UGCHandle)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_FileShare_AsyncFunction* FileShareAsync(const class FString& Filename);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_FileShare_AsyncFunction">();
	}
	static class USIK_FileShare_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_FileShare_AsyncFunction>();
	}
};
static_assert(alignof(USIK_FileShare_AsyncFunction) == 0x000008, "Wrong alignment on USIK_FileShare_AsyncFunction");
static_assert(sizeof(USIK_FileShare_AsyncFunction) == 0x000090, "Wrong size on USIK_FileShare_AsyncFunction");
static_assert(offsetof(USIK_FileShare_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_FileShare_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_FileShare_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_FileShare_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_CreateSession_AsyncFunction
// 0x00A0 (0x00D0 - 0x0030)
class USIK_CreateSession_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x80];                                      // 0x0030(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& SessionID)> OnSuccess;                        // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& SessionID)> OnFail;                           // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USIK_CreateSession_AsyncFunction* CreateEIKSession(const TMap<class FString, struct FSIKAttribute>& SessionSettings, class FName SessionName, int32 NumberOfPublicConnections, const struct FSIKDedicatedServerSettings& DedicatedServerSettings, const struct FSIK_CreateSessionExtraSettings& ExtraSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_CreateSession_AsyncFunction">();
	}
	static class USIK_CreateSession_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_CreateSession_AsyncFunction>();
	}
};
static_assert(alignof(USIK_CreateSession_AsyncFunction) == 0x000008, "Wrong alignment on USIK_CreateSession_AsyncFunction");
static_assert(sizeof(USIK_CreateSession_AsyncFunction) == 0x0000D0, "Wrong size on USIK_CreateSession_AsyncFunction");
static_assert(offsetof(USIK_CreateSession_AsyncFunction, OnSuccess) == 0x0000B0, "Member 'USIK_CreateSession_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_CreateSession_AsyncFunction, OnFail) == 0x0000C0, "Member 'USIK_CreateSession_AsyncFunction::OnFail' has a wrong offset!");

// Class SteamIntegrationKit.SIK_DeleteItem_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_DeleteItem_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId_t)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId_t)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_DeleteItem_AsyncFunction* DeleteItem(const struct FSIK_PublishedFileId& PublishedFileId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_DeleteItem_AsyncFunction">();
	}
	static class USIK_DeleteItem_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_DeleteItem_AsyncFunction>();
	}
};
static_assert(alignof(USIK_DeleteItem_AsyncFunction) == 0x000008, "Wrong alignment on USIK_DeleteItem_AsyncFunction");
static_assert(sizeof(USIK_DeleteItem_AsyncFunction) == 0x000088, "Wrong size on USIK_DeleteItem_AsyncFunction");
static_assert(offsetof(USIK_DeleteItem_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_DeleteItem_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_DeleteItem_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_DeleteItem_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_DestroySession_AsyncFunction
// 0x0030 (0x0060 - 0x0030)
class USIK_DestroySession_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFail;                                            // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class USIK_DestroySession_AsyncFunction* DestroySIKSessions(class FName SessionName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_DestroySession_AsyncFunction">();
	}
	static class USIK_DestroySession_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_DestroySession_AsyncFunction>();
	}
};
static_assert(alignof(USIK_DestroySession_AsyncFunction) == 0x000008, "Wrong alignment on USIK_DestroySession_AsyncFunction");
static_assert(sizeof(USIK_DestroySession_AsyncFunction) == 0x000060, "Wrong size on USIK_DestroySession_AsyncFunction");
static_assert(offsetof(USIK_DestroySession_AsyncFunction, OnSuccess) == 0x000040, "Member 'USIK_DestroySession_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_DestroySession_AsyncFunction, OnFail) == 0x000050, "Member 'USIK_DestroySession_AsyncFunction::OnFail' has a wrong offset!");

// Class SteamIntegrationKit.SIK_DownloadLeaderboardEntries_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_DownloadLeaderboardEntries_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FDownloadedLeaderboardEntry>& LeaderboardEntries)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FDownloadedLeaderboardEntry>& LeaderboardEntries)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_DownloadLeaderboardEntries_AsyncFunction* DownloadLeaderboardEntries(int32 LeaderboardID, int32 RangeStart, int32 RangeEnd, ESIK_LeaderboardDataRequest LeaderboardDataRequest);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_DownloadLeaderboardEntries_AsyncFunction">();
	}
	static class USIK_DownloadLeaderboardEntries_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_DownloadLeaderboardEntries_AsyncFunction>();
	}
};
static_assert(alignof(USIK_DownloadLeaderboardEntries_AsyncFunction) == 0x000008, "Wrong alignment on USIK_DownloadLeaderboardEntries_AsyncFunction");
static_assert(sizeof(USIK_DownloadLeaderboardEntries_AsyncFunction) == 0x000090, "Wrong size on USIK_DownloadLeaderboardEntries_AsyncFunction");
static_assert(offsetof(USIK_DownloadLeaderboardEntries_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_DownloadLeaderboardEntries_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_DownloadLeaderboardEntries_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_DownloadLeaderboardEntries_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_EnumerateFollowingList_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_EnumerateFollowingList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FSIK_SteamId>& FollowingList, int64 ResultsReturned, int64 TotalResults)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FSIK_SteamId>& FollowingList, int64 ResultsReturned, int64 TotalResults)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_EnumerateFollowingList_AsyncFunction* EnumerateFollowingList(int32 StartIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_EnumerateFollowingList_AsyncFunction">();
	}
	static class USIK_EnumerateFollowingList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_EnumerateFollowingList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_EnumerateFollowingList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_EnumerateFollowingList_AsyncFunction");
static_assert(sizeof(USIK_EnumerateFollowingList_AsyncFunction) == 0x000088, "Wrong size on USIK_EnumerateFollowingList_AsyncFunction");
static_assert(offsetof(USIK_EnumerateFollowingList_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_EnumerateFollowingList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_EnumerateFollowingList_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_EnumerateFollowingList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_FileReadAsync_AsyncFunction
// 0x0068 (0x0098 - 0x0030)
class USIK_FileReadAsync_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const ESIK_Result& Result, int32 nOffset, int32 nBytesRead, const TArray<uint8>& Data)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const ESIK_Result& Result, int32 nOffset, int32 nBytesRead, const TArray<uint8>& Data)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_FileReadAsync_AsyncFunction* FileReadAsync(const class FString& Filename, int32 nOffset, int32 nBytesToRead);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_FileReadAsync_AsyncFunction">();
	}
	static class USIK_FileReadAsync_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_FileReadAsync_AsyncFunction>();
	}
};
static_assert(alignof(USIK_FileReadAsync_AsyncFunction) == 0x000008, "Wrong alignment on USIK_FileReadAsync_AsyncFunction");
static_assert(sizeof(USIK_FileReadAsync_AsyncFunction) == 0x000098, "Wrong size on USIK_FileReadAsync_AsyncFunction");
static_assert(offsetof(USIK_FileReadAsync_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_FileReadAsync_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_FileReadAsync_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_FileReadAsync_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_FileWriteAsync_AsyncFunction
// 0x0070 (0x00A0 - 0x0030)
class USIK_FileWriteAsync_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const ESIK_Result& Result)> OnSuccess;                             // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const ESIK_Result& Result)> OnFailure;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_FileWriteAsync_AsyncFunction* FileWriteAsync(const class FString& Filename, const TArray<uint8>& FileData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_FileWriteAsync_AsyncFunction">();
	}
	static class USIK_FileWriteAsync_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_FileWriteAsync_AsyncFunction>();
	}
};
static_assert(alignof(USIK_FileWriteAsync_AsyncFunction) == 0x000008, "Wrong alignment on USIK_FileWriteAsync_AsyncFunction");
static_assert(sizeof(USIK_FileWriteAsync_AsyncFunction) == 0x0000A0, "Wrong size on USIK_FileWriteAsync_AsyncFunction");
static_assert(offsetof(USIK_FileWriteAsync_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_FileWriteAsync_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_FileWriteAsync_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_FileWriteAsync_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_FindSessions_AsyncFunction
// 0x0090 (0x00C0 - 0x0030)
class USIK_FindSessions_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const TArray<struct FSSessionFindStruct>& SessionResults)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<struct FSSessionFindStruct>& SessionResults)> OnFail; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x70];                                      // 0x0050(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_FindSessions_AsyncFunction* FindSIKSessions(const TMap<class FName, struct FSIKAttribute>& SessionSettings, ESMatchType MatchType, int32 MaxResults, bool bLanSearch, bool bEmptyServerOnly, bool bSecureServerOnly);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_FindSessions_AsyncFunction">();
	}
	static class USIK_FindSessions_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_FindSessions_AsyncFunction>();
	}
};
static_assert(alignof(USIK_FindSessions_AsyncFunction) == 0x000008, "Wrong alignment on USIK_FindSessions_AsyncFunction");
static_assert(sizeof(USIK_FindSessions_AsyncFunction) == 0x0000C0, "Wrong size on USIK_FindSessions_AsyncFunction");
static_assert(offsetof(USIK_FindSessions_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_FindSessions_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_FindSessions_AsyncFunction, OnFail) == 0x000040, "Member 'USIK_FindSessions_AsyncFunction::OnFail' has a wrong offset!");

// Class SteamIntegrationKit.SIK_FriendsLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_FriendsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ActivateGameOverlay(const class FString& DialogToOpen);
	static void ActivateGameOverlayInviteDialog(const int64& SteamIdLobby);
	static void ActivateGameOverlayToStore(const struct FSIK_AppId& AppID, bool bAddToCartAndShow);
	static void ActivateGameOverlayToUser(const class FString& Dialog, int64 steamIDUser);
	static void ActivateGameOverlayToWebPage(const class FString& URL, bool bUseModal);
	static bool BHasEquippedProfileItem(const struct FSIK_SteamId& steamIDUser, ESIK_ECommunityProfileItemType ItemType);
	static void ClearRichPresence();
	static bool CloseClanChatWindowInSteam(int64 SteamIdClanChat);
	static struct FSIK_SteamId GetChatMemberByIndex(const struct FSIK_SteamId& SteamIdClan, int32 MemberIndex);
	static bool GetClanActivityCounts(const struct FSIK_SteamId& SteamIdClan, int32* Online, int32* InGame, int32* Chatting);
	static struct FSIK_SteamId GetClanByIndex(int32 ClanIndex);
	static int32 GetClanChatMemberCount(const struct FSIK_SteamId& SteamIdClan);
	static int32 GetClanChatMessage(const struct FSIK_SteamId& SteamIdClan, int32 MessageIndex, const TArray<uint8>& Text, struct FSIK_SteamId* steamIDUser, class FString* ChatEntryType);
	static int32 GetClanCount();
	static class FString GetClanName(const struct FSIK_SteamId& SteamIdClan);
	static struct FSIK_SteamId GetClanOfficerByIndex(const struct FSIK_SteamId& SteamIdClan, int32 OfficerIndex);
	static int32 GetClanOfficerCount(const struct FSIK_SteamId& SteamIdClan);
	static struct FSIK_SteamId GetClanOwner(const struct FSIK_SteamId& SteamIdClan);
	static class FString GetClanTag(const struct FSIK_SteamId& SteamIdClan);
	static struct FSIK_SteamId GetCoplayFriend(int32 CoplayFriend);
	static int32 GetCoplayFriendCount();
	static struct FSIK_SteamId GetFriendByIndex(int32 FriendIndex, const TArray<ESIK_FriendFlags>& FriendFlags);
	static struct FSIK_AppId GetFriendCoplayGame(const struct FSIK_SteamId& SteamIdFriend);
	static struct FDateTime GetFriendCoplayTime(const struct FSIK_SteamId& SteamIdFriend);
	static int32 GetFriendCount(const TArray<ESIK_FriendFlags>& FriendFlags);
	static int32 GetFriendCountFromSource(const struct FSIK_SteamId& SteamIdSource);
	static struct FSIK_SteamId GetFriendFromSourceByIndex(const struct FSIK_SteamId& SteamIdSource, int32 FriendIndex);
	static bool GetFriendGamePlayed(const struct FSIK_SteamId& SteamIdFriend, struct FSIK_FriendGameInfo* GameInfo);
	static int32 GetFriendGroupCount();
	static struct FSIK_FriendsGroupID GetFriendGroupIDByIndex(int32 GroupIndex);
	static int32 GetFriendGroupMembersCount(const struct FSIK_FriendsGroupID& FriendsGroupID);
	static int32 GetFriendMessage(const struct FSIK_SteamId& SteamIdFriend, int32 MessageIndex, TArray<uint8>* Text, class FString* ChatEntryType);
	static class FString GetFriendPersonaName(const struct FSIK_SteamId& SteamIdFriend);
	static class FString GetFriendPersonaNameHistory(const struct FSIK_SteamId& SteamIdFriend, int32 PersonaNameIndex);
	static ESIK_PersonaState GetFriendPersonaState(const struct FSIK_SteamId& SteamIdFriend);
	static ESIK_FriendRelationship GetFriendRelationship(const struct FSIK_SteamId& SteamIdFriend);
	static class FString GetFriendRichPresence(const struct FSIK_SteamId& SteamIdFriend, const class FString& Key);
	static class FString GetFriendRichPresenceKeyByIndex(const struct FSIK_SteamId& SteamIdFriend, int32 KeyIndex);
	static int32 GetFriendRichPresenceKeyCount(const struct FSIK_SteamId& SteamIdFriend);
	static TArray<struct FSIK_SteamId> GetFriendsGroupMembersList(const struct FSIK_FriendsGroupID& FriendsGroupID, int32 MembersCount);
	static class FString GetFriendsGroupName(const struct FSIK_FriendsGroupID& FriendsGroupID);
	static int32 GetFriendSteamLevel(const struct FSIK_SteamId& SteamIdFriend);
	static int32 GetLargeFriendAvatar(const struct FSIK_SteamId& SteamIdFriend);
	static int32 GetMediumFriendAvatar(const struct FSIK_SteamId& SteamIdFriend);
	static class FString GetPersonaName();
	static ESIK_PersonaState GetPersonaState();
	static class FString GetPlayerNickname(const struct FSIK_SteamId& SteamIdPlayer);
	static bool GetProfileItemPropertyString(const struct FSIK_SteamId& steamIDUser, ESIK_ECommunityProfileItemType ItemType, ESIK_ECommunityProfileItemProperty Property);
	static bool GetProfileItemPropertyUint(const struct FSIK_SteamId& steamIDUser, ESIK_ECommunityProfileItemType ItemType, ESIK_ECommunityProfileItemProperty Property);
	static class UTexture2D* GetSmallFriendAvatar(const struct FSIK_SteamId& SteamIdFriend);
	static int32 GetUserRestrictions();
	static bool HasFriend(const struct FSIK_SteamId& SteamIdFriend, const TArray<ESIK_FriendFlags>& FriendFlags);
	static bool InviteUserToGame(const struct FSIK_SteamId& SteamIdFriend, const class FString& ConnectString);
	static bool IsClanChatAdmin(const struct FSIK_SteamId& SteamIdClanChat, const struct FSIK_SteamId& steamIDUser);
	static bool IsClanChatWindowOpenInSteam(const struct FSIK_SteamId& SteamIdClanChat);
	static bool IsClanOfficialGameGroup(const struct FSIK_SteamId& SteamIdClan);
	static bool IsClanPublic(const struct FSIK_SteamId& SteamIdClan);
	static bool IsFollowing(const struct FSIK_SteamId& SteamIdFriend);
	static bool IsUserInSource(const struct FSIK_SteamId& SteamIdFriend, const struct FSIK_SteamId& SteamIdSource);
	static bool LeaveClanChatRoom(const struct FSIK_SteamId& SteamIdClanChat);
	static bool ReplyToFriendMessage(const struct FSIK_SteamId& SteamIdFriend, const class FString& Text);
	static void RequestFriendRichPresence(const struct FSIK_SteamId& SteamIdFriend);
	static bool RequestUserInfo(const struct FSIK_SteamId& steamIDUser, bool bRequireNameOnly);
	static bool SendClanChatMessage(const struct FSIK_SteamId& SteamIdClanChat, const class FString& Text);
	static void SetInGameVoiceSpeaking(const struct FSIK_SteamId& SteamIdFriend, bool bSpeaking);
	static void SetListenForFriendMessage(bool bInterceptEnabled);
	static void SetPlayedWith(const struct FSIK_SteamId& steamIDUser);
	static bool SetRichPresence(const class FString& Key, const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_FriendsLibrary">();
	}
	static class USIK_FriendsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_FriendsLibrary>();
	}
};
static_assert(alignof(USIK_FriendsLibrary) == 0x000008, "Wrong alignment on USIK_FriendsLibrary");
static_assert(sizeof(USIK_FriendsLibrary) == 0x000028, "Wrong size on USIK_FriendsLibrary");

// Class SteamIntegrationKit.SIK_FriendsSubsystem
// 0x0360 (0x0390 - 0x0030)
class USIK_FriendsSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, int32 OfficerCount, bool bSuccess)> OnClanOfficerList; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, const struct FSIK_AppId& AppID)> OnFriendRichPresenceUpdate; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess)> OnDownloadClanActivityCountsResult;                // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const TArray<struct FSIK_SteamId>& SteamID, int32 ResultsReturned, int32 TotalResults)> OnFriendEnumerateFollowingList; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& SteamID, int32 Count)> OnFriendsGetFollowerCount; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& SteamID, bool bIsFollowing)> OnFriendsIsFollowing; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& ClanChatId, const struct FSIK_SteamId& User)> OnGameConnectedChatJoin; // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& ClanChatId, const struct FSIK_SteamId& User, bool Kicked, bool Dropped)> OnGameConnectedChatLeave; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& ClanChatId, const struct FSIK_SteamId& User, int32 MessageID)> OnGameConnectedClanChatMsg; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& User, int32 MessageID)> OnGameConnectedFriendChatMsg; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, const struct FSIK_SteamId& LobbyID)> OnGameLobbyJoinRequested; // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bActive)>  OnGameOverlayActivated;                            // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, const class FString& ConnectString)> OnGameRichPresenceJoinRequested; // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Server, const class FString& Password)> OnGameServerChangeRequested; // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& ClanChatId, ESIK_ChatRoomEnterResponse ChatRoomEnterResponse)> OnJoinClanChatRoomCompletionResult; // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, int32 ChangeFlags)> OnPersonaStateChange; // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, bool bLocalSuccess, bool bRemoteSuccess)> OnSetPersonaNameResponse; // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, int32 Image, int32 Wide, int32 Tall)> OnAvatarImageLoaded; // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x240];                                    // 0x0150(0x0240)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_FriendsSubsystem">();
	}
	static class USIK_FriendsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_FriendsSubsystem>();
	}
};
static_assert(alignof(USIK_FriendsSubsystem) == 0x000008, "Wrong alignment on USIK_FriendsSubsystem");
static_assert(sizeof(USIK_FriendsSubsystem) == 0x000390, "Wrong size on USIK_FriendsSubsystem");
static_assert(offsetof(USIK_FriendsSubsystem, OnClanOfficerList) == 0x000030, "Member 'USIK_FriendsSubsystem::OnClanOfficerList' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnFriendRichPresenceUpdate) == 0x000040, "Member 'USIK_FriendsSubsystem::OnFriendRichPresenceUpdate' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnDownloadClanActivityCountsResult) == 0x000050, "Member 'USIK_FriendsSubsystem::OnDownloadClanActivityCountsResult' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnFriendEnumerateFollowingList) == 0x000060, "Member 'USIK_FriendsSubsystem::OnFriendEnumerateFollowingList' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnFriendsGetFollowerCount) == 0x000070, "Member 'USIK_FriendsSubsystem::OnFriendsGetFollowerCount' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnFriendsIsFollowing) == 0x000080, "Member 'USIK_FriendsSubsystem::OnFriendsIsFollowing' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameConnectedChatJoin) == 0x000090, "Member 'USIK_FriendsSubsystem::OnGameConnectedChatJoin' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameConnectedChatLeave) == 0x0000A0, "Member 'USIK_FriendsSubsystem::OnGameConnectedChatLeave' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameConnectedClanChatMsg) == 0x0000B0, "Member 'USIK_FriendsSubsystem::OnGameConnectedClanChatMsg' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameConnectedFriendChatMsg) == 0x0000C0, "Member 'USIK_FriendsSubsystem::OnGameConnectedFriendChatMsg' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameLobbyJoinRequested) == 0x0000D0, "Member 'USIK_FriendsSubsystem::OnGameLobbyJoinRequested' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameOverlayActivated) == 0x0000E0, "Member 'USIK_FriendsSubsystem::OnGameOverlayActivated' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameRichPresenceJoinRequested) == 0x0000F0, "Member 'USIK_FriendsSubsystem::OnGameRichPresenceJoinRequested' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnGameServerChangeRequested) == 0x000100, "Member 'USIK_FriendsSubsystem::OnGameServerChangeRequested' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnJoinClanChatRoomCompletionResult) == 0x000110, "Member 'USIK_FriendsSubsystem::OnJoinClanChatRoomCompletionResult' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnPersonaStateChange) == 0x000120, "Member 'USIK_FriendsSubsystem::OnPersonaStateChange' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnSetPersonaNameResponse) == 0x000130, "Member 'USIK_FriendsSubsystem::OnSetPersonaNameResponse' has a wrong offset!");
static_assert(offsetof(USIK_FriendsSubsystem, OnAvatarImageLoaded) == 0x000140, "Member 'USIK_FriendsSubsystem::OnAvatarImageLoaded' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GameServerLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_GameServerLibrary final : public UBlueprintFunctionLibrary
{
public:
	static ESIK_BeginAuthSessionResult BeginAuthSession(const TArray<uint8>& Token, const struct FSIK_SteamId& SteamID);
	static void CancelAuthTicket(const struct FSIK_AuthTicket& AuthTicket);
	static void ClearAllKeyValues();
	static struct FSIK_SteamId CreateUnauthenticatedUserConnection();
	static void EnableHeartbeats(bool bActive);
	static void EndAuthSession(const struct FSIK_SteamId& SteamID);
	static void ForceHeartbeat();
	static TArray<uint8> GetAuthSessionTicket();
	static struct FSIK_SteamIPAddress GetPublicIP();
	static struct FSIK_SteamId GetSteamID();
	static bool LoggedOn();
	static void LogOff();
	static void LogOn(const class FString& Token);
	static void LogOnAnonymous();
	static bool RequestUserGroupStatus(const struct FSIK_SteamId& SteamID, const struct FSIK_SteamId& GroupID);
	static bool Secure();
	static void SetBotPlayerCount(int32 BotPlayerCount);
	static void SetDedicatedServer(bool bDedicated);
	static void SetGameData(const class FString& GameData);
	static void SetGameDescription(const class FString& GameDescription);
	static void SetGameTags(const class FString& GameTags);
	static void SetKeyValue(const class FString& Key, const class FString& Value);
	static void SetMapName(const class FString& MapName);
	static void SetMaxPlayerCount(int32 MaxPlayerCount);
	static void SetModDir(const class FString& ModDir);
	static void SetPasswordProtected(bool bPasswordProtected);
	static void SetProduct(const class FString& Product);
	static void SetRegion(const class FString& Region);
	static void SetServerName(const class FString& ServerName);
	static void SetSpectatorPort(int32 SpectatorPort);
	static void SetSpectatorServerName(const class FString& SpectatorServerName);
	static bool UpdateUserData(const struct FSIK_SteamId& SteamID, const class FString& PlayerName, int32 Score);
	static ESIK_UserHasLicenseForAppResult UserHasLicenseForApp(const struct FSIK_SteamId& SteamID, int32 AppID);
	static bool WasRestartRequested();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GameServerLibrary">();
	}
	static class USIK_GameServerLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GameServerLibrary>();
	}
};
static_assert(alignof(USIK_GameServerLibrary) == 0x000008, "Wrong alignment on USIK_GameServerLibrary");
static_assert(sizeof(USIK_GameServerLibrary) == 0x000028, "Wrong size on USIK_GameServerLibrary");

// Class SteamIntegrationKit.SIK_GameServerStatsLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_GameServerStatsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ClearUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName);
	static bool GetFloatUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, float* Data);
	static bool GetIntUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, int32* Data);
	static bool GetUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName, bool* bAchieved);
	static bool RequestUserStats(const struct FSIK_SteamId& SteamID);
	static bool SetFloatUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, float Data);
	static bool SetIntUserStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, int32 Data);
	static bool SetUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName);
	static bool StoreUserStats(const struct FSIK_SteamId& SteamID);
	static bool UpdateUserAvgRateStat(const struct FSIK_SteamId& SteamID, const class FString& StatName, float CountThisSession, float SessionLength);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GameServerStatsLibrary">();
	}
	static class USIK_GameServerStatsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GameServerStatsLibrary>();
	}
};
static_assert(alignof(USIK_GameServerStatsLibrary) == 0x000008, "Wrong alignment on USIK_GameServerStatsLibrary");
static_assert(sizeof(USIK_GameServerStatsLibrary) == 0x000028, "Wrong size on USIK_GameServerStatsLibrary");

// Class SteamIntegrationKit.SIK_GameServerStatsSubsystem
// 0x0090 (0x00C0 - 0x0030)
class USIK_GameServerStatsSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, ESIK_Result Result)> OnGSStatsReceived; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, ESIK_Result Result)> OnGSStatsStored; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID)> OnGSStatsUnloaded;            // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x60];                                      // 0x0060(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GameServerStatsSubsystem">();
	}
	static class USIK_GameServerStatsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GameServerStatsSubsystem>();
	}
};
static_assert(alignof(USIK_GameServerStatsSubsystem) == 0x000008, "Wrong alignment on USIK_GameServerStatsSubsystem");
static_assert(sizeof(USIK_GameServerStatsSubsystem) == 0x0000C0, "Wrong size on USIK_GameServerStatsSubsystem");
static_assert(offsetof(USIK_GameServerStatsSubsystem, OnGSStatsReceived) == 0x000030, "Member 'USIK_GameServerStatsSubsystem::OnGSStatsReceived' has a wrong offset!");
static_assert(offsetof(USIK_GameServerStatsSubsystem, OnGSStatsStored) == 0x000040, "Member 'USIK_GameServerStatsSubsystem::OnGSStatsStored' has a wrong offset!");
static_assert(offsetof(USIK_GameServerStatsSubsystem, OnGSStatsUnloaded) == 0x000050, "Member 'USIK_GameServerStatsSubsystem::OnGSStatsUnloaded' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GameServerSubsystem
// 0x0150 (0x0180 - 0x0030)
class USIK_GameServerSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnAssociateWithClanResult;                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& SteamID, int32 PlayersThatDontLikeCandidate, int32 PlayersThatCandidateDoesntLike, int32 ClanPlayersThatDontLikeCandidate)> OnComputeNewPlayerCompatibilityResult; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, const struct FSIK_SteamId& OwnerSteamID)> OnGSClientApprove; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, ESIK_DenyReason Reason, const class FString& OptionalText)> OnGSClientDeny; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, const struct FSIK_SteamId& GroupID, bool Member, bool Officer)> OnGSClientGroupStatus; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, ESIK_DenyReason Reason)> OnGSClientKick; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Secure)>   OnGSPolicyResponse;                                // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0xE0];                                      // 0x00A0(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GameServerSubsystem">();
	}
	static class USIK_GameServerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GameServerSubsystem>();
	}
};
static_assert(alignof(USIK_GameServerSubsystem) == 0x000008, "Wrong alignment on USIK_GameServerSubsystem");
static_assert(sizeof(USIK_GameServerSubsystem) == 0x000180, "Wrong size on USIK_GameServerSubsystem");
static_assert(offsetof(USIK_GameServerSubsystem, OnAssociateWithClanResult) == 0x000030, "Member 'USIK_GameServerSubsystem::OnAssociateWithClanResult' has a wrong offset!");
static_assert(offsetof(USIK_GameServerSubsystem, OnComputeNewPlayerCompatibilityResult) == 0x000040, "Member 'USIK_GameServerSubsystem::OnComputeNewPlayerCompatibilityResult' has a wrong offset!");
static_assert(offsetof(USIK_GameServerSubsystem, OnGSClientApprove) == 0x000050, "Member 'USIK_GameServerSubsystem::OnGSClientApprove' has a wrong offset!");
static_assert(offsetof(USIK_GameServerSubsystem, OnGSClientDeny) == 0x000060, "Member 'USIK_GameServerSubsystem::OnGSClientDeny' has a wrong offset!");
static_assert(offsetof(USIK_GameServerSubsystem, OnGSClientGroupStatus) == 0x000070, "Member 'USIK_GameServerSubsystem::OnGSClientGroupStatus' has a wrong offset!");
static_assert(offsetof(USIK_GameServerSubsystem, OnGSClientKick) == 0x000080, "Member 'USIK_GameServerSubsystem::OnGSClientKick' has a wrong offset!");
static_assert(offsetof(USIK_GameServerSubsystem, OnGSPolicyResponse) == 0x000090, "Member 'USIK_GameServerSubsystem::OnGSPolicyResponse' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GetAppDependencies_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_GetAppDependencies_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const TArray<struct FSIK_AppId>& AppIDs, int32 NumAppIDs, int32 TotalNumAppIDs)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const TArray<struct FSIK_AppId>& AppIDs, int32 NumAppIDs, int32 TotalNumAppIDs)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_GetAppDependencies_AsyncFunction* GetAppDependencies(const struct FSIK_PublishedFileId& PublishedFileId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GetAppDependencies_AsyncFunction">();
	}
	static class USIK_GetAppDependencies_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GetAppDependencies_AsyncFunction>();
	}
};
static_assert(alignof(USIK_GetAppDependencies_AsyncFunction) == 0x000008, "Wrong alignment on USIK_GetAppDependencies_AsyncFunction");
static_assert(sizeof(USIK_GetAppDependencies_AsyncFunction) == 0x000088, "Wrong size on USIK_GetAppDependencies_AsyncFunction");
static_assert(offsetof(USIK_GetAppDependencies_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_GetAppDependencies_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_GetAppDependencies_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_GetAppDependencies_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GetDurationControl_AsyncFunction
// 0x0050 (0x0080 - 0x0030)
class USIK_GetDurationControl_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, ESIK_DurationControlNotification Notification, ESIK_DurationControlProgress Progress, int32 SecsLast5h, bool bApplicable, int32 AppID)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, ESIK_DurationControlNotification Notification, ESIK_DurationControlProgress Progress, int32 SecsLast5h, bool bApplicable, int32 AppID)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_GetDurationControl_AsyncFunction* GetDurationControl();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GetDurationControl_AsyncFunction">();
	}
	static class USIK_GetDurationControl_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GetDurationControl_AsyncFunction>();
	}
};
static_assert(alignof(USIK_GetDurationControl_AsyncFunction) == 0x000008, "Wrong alignment on USIK_GetDurationControl_AsyncFunction");
static_assert(sizeof(USIK_GetDurationControl_AsyncFunction) == 0x000080, "Wrong size on USIK_GetDurationControl_AsyncFunction");
static_assert(offsetof(USIK_GetDurationControl_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_GetDurationControl_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_GetDurationControl_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_GetDurationControl_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GetFileDetails_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_GetFileDetails_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, int64 FileSize, const TArray<int32>& FileHash, int32 Flags)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, int64 FileSize, const TArray<int32>& FileHash, int32 Flags)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_GetFileDetails_AsyncFunction* GetFileDetails(const class FString& Filename);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GetFileDetails_AsyncFunction">();
	}
	static class USIK_GetFileDetails_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GetFileDetails_AsyncFunction>();
	}
};
static_assert(alignof(USIK_GetFileDetails_AsyncFunction) == 0x000008, "Wrong alignment on USIK_GetFileDetails_AsyncFunction");
static_assert(sizeof(USIK_GetFileDetails_AsyncFunction) == 0x000090, "Wrong size on USIK_GetFileDetails_AsyncFunction");
static_assert(offsetof(USIK_GetFileDetails_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_GetFileDetails_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_GetFileDetails_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_GetFileDetails_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GetFollowerCount_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_GetFollowerCount_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 FollowerCount, const struct FSIK_SteamId& UserSteamId)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 FollowerCount, const struct FSIK_SteamId& UserSteamId)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_GetFollowerCount_AsyncFunction* GetFollowerCount(const struct FSIK_SteamId& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GetFollowerCount_AsyncFunction">();
	}
	static class USIK_GetFollowerCount_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GetFollowerCount_AsyncFunction>();
	}
};
static_assert(alignof(USIK_GetFollowerCount_AsyncFunction) == 0x000008, "Wrong alignment on USIK_GetFollowerCount_AsyncFunction");
static_assert(sizeof(USIK_GetFollowerCount_AsyncFunction) == 0x000088, "Wrong size on USIK_GetFollowerCount_AsyncFunction");
static_assert(offsetof(USIK_GetFollowerCount_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_GetFollowerCount_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_GetFollowerCount_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_GetFollowerCount_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GetNumberOfCurrentPlayers_AsyncFunction
// 0x0050 (0x0080 - 0x0030)
class USIK_GetNumberOfCurrentPlayers_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 NumberOfCurrentPlayers)> OnSuccess;                          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 NumberOfCurrentPlayers)> OnFailure;                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_GetNumberOfCurrentPlayers_AsyncFunction* GetNumberOfCurrentPlayers();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GetNumberOfCurrentPlayers_AsyncFunction">();
	}
	static class USIK_GetNumberOfCurrentPlayers_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GetNumberOfCurrentPlayers_AsyncFunction>();
	}
};
static_assert(alignof(USIK_GetNumberOfCurrentPlayers_AsyncFunction) == 0x000008, "Wrong alignment on USIK_GetNumberOfCurrentPlayers_AsyncFunction");
static_assert(sizeof(USIK_GetNumberOfCurrentPlayers_AsyncFunction) == 0x000080, "Wrong size on USIK_GetNumberOfCurrentPlayers_AsyncFunction");
static_assert(offsetof(USIK_GetNumberOfCurrentPlayers_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_GetNumberOfCurrentPlayers_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_GetNumberOfCurrentPlayers_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_GetNumberOfCurrentPlayers_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_GetUserItemVote_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_GetUserItemVote_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool bVotedUp, bool bVotedDown, bool bVoteSkipped)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool bVotedUp, bool bVotedDown, bool bVoteSkipped)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_GetUserItemVote_AsyncFunction* GetUserItemVote(const struct FSIK_PublishedFileId& PublishedFileId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_GetUserItemVote_AsyncFunction">();
	}
	static class USIK_GetUserItemVote_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_GetUserItemVote_AsyncFunction>();
	}
};
static_assert(alignof(USIK_GetUserItemVote_AsyncFunction) == 0x000008, "Wrong alignment on USIK_GetUserItemVote_AsyncFunction");
static_assert(sizeof(USIK_GetUserItemVote_AsyncFunction) == 0x000088, "Wrong size on USIK_GetUserItemVote_AsyncFunction");
static_assert(offsetof(USIK_GetUserItemVote_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_GetUserItemVote_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_GetUserItemVote_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_GetUserItemVote_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_InventoryLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_InventoryLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AddPromoItem(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemDef& ItemDef);
	static bool AddPromoItems(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemDef>& ItemDefs);
	static bool CheckResultSteamID(const struct FSIK_SteamInventoryResult& InventoryResult, const struct FSIK_SteamId& SteamID);
	static bool ConsumeItem(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemInstanceID& ItemInstance, int32 Quantity);
	static bool DeserializeResult(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<uint8>& Buffer);
	static void DestroyResult(const struct FSIK_SteamInventoryResult& InventoryResult);
	static bool ExchangeItems(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemDef>& ItemDefsToCreate, const TArray<int32>& ArrayGenerateQuantity, const TArray<struct FSIK_SteamItemInstanceID>& ItemDefsToDestroy, const TArray<int32>& DestroyQuantity);
	static bool GenerateItems(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemDef>& ItemDefs, const TArray<int32>& Quantity);
	static bool GetAllItems(struct FSIK_SteamInventoryResult* InventoryResult);
	static bool GetEligiblePromoItemDefinitionIDs(const struct FSIK_SteamId& SteamID, TArray<struct FSIK_SteamItemDef>* ItemDefs);
	static bool GetItemDefinitionIDs(TArray<struct FSIK_SteamItemDef>* ItemDefs);
	static bool GetItemDefinitionProperty(const struct FSIK_SteamItemDef& ItemDef, const class FString& PropertyName, class FString* Value);
	static bool GetItemPrice(const struct FSIK_SteamItemDef& ItemDef, int64* CurrentPrice, int64* BasePrice);
	static bool GetItemsByID(struct FSIK_SteamInventoryResult* InventoryResult, const TArray<struct FSIK_SteamItemInstanceID>& ItemInstances);
	static bool GetItemsWithPrices(TArray<struct FSIK_SteamItemDef>* ItemDefs, TArray<int64>* CurrentPrices, TArray<int64>* BasePrices, int32 ArraySize);
	static int32 GetNumItemsWithPrices();
	static bool GetResultItemProperty(const struct FSIK_SteamInventoryResult& InventoryResult, int32 ItemIndex, const class FString& PropertyName, class FString* Value);
	static bool GetResultItems(const struct FSIK_SteamInventoryResult& InventoryResult, TArray<struct FSIK_SteamItemDetails>* ItemInstances);
	static ESIK_Result GetResultStatus(const struct FSIK_SteamInventoryResult& InventoryResult);
	static struct FDateTime GetResultTimestamp(const struct FSIK_SteamInventoryResult& InventoryResult, int32* Timestamp);
	static bool GrantPromoItems(struct FSIK_SteamInventoryResult* InventoryResult);
	static bool LoadItemDefinitions();
	static bool RemoveProperty(const struct FSIK_SteamInventoryUpdateHandle& UpdateHandle, const struct FSIK_SteamItemInstanceID& ItemInstance, const class FString& PropertyName);
	static bool SerializeResult(const struct FSIK_SteamInventoryResult& InventoryResult, TArray<uint8>* Buffer);
	static bool SetProperty(const struct FSIK_SteamInventoryUpdateHandle& UpdateHandle, const struct FSIK_SteamItemInstanceID& ItemInstance, const class FString& PropertyName, const class FString& Value);
	static struct FSIK_SteamInventoryUpdateHandle StartUpdateProperties();
	static bool SubmitUpdateProperties(const struct FSIK_SteamInventoryUpdateHandle& UpdateHandle, struct FSIK_SteamInventoryResult* InventoryResult);
	static bool TransferItemQuantity(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemInstanceID& ItemInstance, int32 Quantity, const struct FSIK_SteamItemInstanceID& itemIdDest);
	static bool TriggerItemDrop(struct FSIK_SteamInventoryResult* InventoryResult, const struct FSIK_SteamItemDef& ItemDef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_InventoryLibrary">();
	}
	static class USIK_InventoryLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_InventoryLibrary>();
	}
};
static_assert(alignof(USIK_InventoryLibrary) == 0x000008, "Wrong alignment on USIK_InventoryLibrary");
static_assert(sizeof(USIK_InventoryLibrary) == 0x000028, "Wrong size on USIK_InventoryLibrary");

// Class SteamIntegrationKit.SIK_InventorySubsystem
// 0x0120 (0x0150 - 0x0030)
class USIK_InventorySubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void()>              OnSteamInventoryDefinitionUpdate;                  // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& SteamID, int32 ItemDefs, bool CachedData)> OnSteamInventoryEligiblePromoItemDefIDs; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamInventoryResult& Result)> OnSteamInventoryFullUpdate; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamInventoryResult& Result, ESIK_Result ResultType)> OnSteamInventoryResultReady; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, int64 OrderID, int64 TransID)> OnSteamInventoryStartPurchaseResult; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const class FString& Currency)> OnSteamInventoryRequestPricesResult; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0xC0];                                      // 0x0090(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_InventorySubsystem">();
	}
	static class USIK_InventorySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_InventorySubsystem>();
	}
};
static_assert(alignof(USIK_InventorySubsystem) == 0x000008, "Wrong alignment on USIK_InventorySubsystem");
static_assert(sizeof(USIK_InventorySubsystem) == 0x000150, "Wrong size on USIK_InventorySubsystem");
static_assert(offsetof(USIK_InventorySubsystem, OnSteamInventoryDefinitionUpdate) == 0x000030, "Member 'USIK_InventorySubsystem::OnSteamInventoryDefinitionUpdate' has a wrong offset!");
static_assert(offsetof(USIK_InventorySubsystem, OnSteamInventoryEligiblePromoItemDefIDs) == 0x000040, "Member 'USIK_InventorySubsystem::OnSteamInventoryEligiblePromoItemDefIDs' has a wrong offset!");
static_assert(offsetof(USIK_InventorySubsystem, OnSteamInventoryFullUpdate) == 0x000050, "Member 'USIK_InventorySubsystem::OnSteamInventoryFullUpdate' has a wrong offset!");
static_assert(offsetof(USIK_InventorySubsystem, OnSteamInventoryResultReady) == 0x000060, "Member 'USIK_InventorySubsystem::OnSteamInventoryResultReady' has a wrong offset!");
static_assert(offsetof(USIK_InventorySubsystem, OnSteamInventoryStartPurchaseResult) == 0x000070, "Member 'USIK_InventorySubsystem::OnSteamInventoryStartPurchaseResult' has a wrong offset!");
static_assert(offsetof(USIK_InventorySubsystem, OnSteamInventoryRequestPricesResult) == 0x000080, "Member 'USIK_InventorySubsystem::OnSteamInventoryRequestPricesResult' has a wrong offset!");

// Class SteamIntegrationKit.SIK_JoinClanChatRoom_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_JoinClanChatRoom_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void()>              OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_JoinClanChatRoom_AsyncFunction* JoinClanChatRoom(const struct FSIK_SteamId& ClanId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_JoinClanChatRoom_AsyncFunction">();
	}
	static class USIK_JoinClanChatRoom_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_JoinClanChatRoom_AsyncFunction>();
	}
};
static_assert(alignof(USIK_JoinClanChatRoom_AsyncFunction) == 0x000008, "Wrong alignment on USIK_JoinClanChatRoom_AsyncFunction");
static_assert(sizeof(USIK_JoinClanChatRoom_AsyncFunction) == 0x000088, "Wrong size on USIK_JoinClanChatRoom_AsyncFunction");
static_assert(offsetof(USIK_JoinClanChatRoom_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_JoinClanChatRoom_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_JoinClanChatRoom_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_JoinClanChatRoom_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_JoinLobby_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_JoinLobby_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, bool bLocked, ESIK_ChatRoomEnterResponse ChatRoomEnterResponse)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, bool bLocked, ESIK_ChatRoomEnterResponse ChatRoomEnterResponse)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_JoinLobby_AsyncFunction* JoinLobby(const struct FSIK_SteamId& LobbyID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_JoinLobby_AsyncFunction">();
	}
	static class USIK_JoinLobby_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_JoinLobby_AsyncFunction>();
	}
};
static_assert(alignof(USIK_JoinLobby_AsyncFunction) == 0x000008, "Wrong alignment on USIK_JoinLobby_AsyncFunction");
static_assert(sizeof(USIK_JoinLobby_AsyncFunction) == 0x000088, "Wrong size on USIK_JoinLobby_AsyncFunction");
static_assert(offsetof(USIK_JoinLobby_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_JoinLobby_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_JoinLobby_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_JoinLobby_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_JoinParty_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_JoinParty_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PartyBeaconID& PartyBeaconID, const struct FSIK_SteamId& BeaconOwner, const class FString& ConnectString)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PartyBeaconID& PartyBeaconID, const struct FSIK_SteamId& BeaconOwner, const class FString& ConnectString)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_JoinParty_AsyncFunction* JoinParty(const struct FSIK_PartyBeaconID& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_JoinParty_AsyncFunction">();
	}
	static class USIK_JoinParty_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_JoinParty_AsyncFunction>();
	}
};
static_assert(alignof(USIK_JoinParty_AsyncFunction) == 0x000008, "Wrong alignment on USIK_JoinParty_AsyncFunction");
static_assert(sizeof(USIK_JoinParty_AsyncFunction) == 0x000088, "Wrong size on USIK_JoinParty_AsyncFunction");
static_assert(offsetof(USIK_JoinParty_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_JoinParty_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_JoinParty_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_JoinParty_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_JoinSession_AsyncFunction
// 0x01C8 (0x01F8 - 0x0030)
class USIK_JoinSession_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESIKJoinResult Result, const class FString& SessionJoinAddress)> OnSuccess; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIKJoinResult Result, const class FString& SessionJoinAddress)> OnFail; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x190];                                     // 0x0060(0x0190)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Var_WorldContextObject;                            // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class USIK_JoinSession_AsyncFunction* JoinSIKSessions(class UObject* WorldContextObject, class FName SessionName, const struct FSSessionFindStruct& SessionToJoin);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_JoinSession_AsyncFunction">();
	}
	static class USIK_JoinSession_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_JoinSession_AsyncFunction>();
	}
};
static_assert(alignof(USIK_JoinSession_AsyncFunction) == 0x000008, "Wrong alignment on USIK_JoinSession_AsyncFunction");
static_assert(sizeof(USIK_JoinSession_AsyncFunction) == 0x0001F8, "Wrong size on USIK_JoinSession_AsyncFunction");
static_assert(offsetof(USIK_JoinSession_AsyncFunction, OnSuccess) == 0x000040, "Member 'USIK_JoinSession_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_JoinSession_AsyncFunction, OnFail) == 0x000050, "Member 'USIK_JoinSession_AsyncFunction::OnFail' has a wrong offset!");
static_assert(offsetof(USIK_JoinSession_AsyncFunction, Var_WorldContextObject) == 0x0001F0, "Member 'USIK_JoinSession_AsyncFunction::Var_WorldContextObject' has a wrong offset!");

// Class SteamIntegrationKit.SIK_MatchmakingLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_MatchmakingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 AddFavoriteGame(const struct FSIK_AppId& AppID, const class FString& IP, int32 ConnPort, int32 QueryPort, const TArray<int32>& Flags_0, int32 Time32LastPlayedOnServer);
	static void AddRequestLobbyListCompatibleMembersFilter(const struct FSIK_SteamId& SteamID);
	static void AddRequestLobbyListDistanceFilter(ESIK_LobbyDistanceFilter LobbyDistanceFilter);
	static void AddRequestLobbyListFilterSlotsAvailable(int32 SlotsAvailable);
	static void AddRequestLobbyListNearValueFilter(const class FString& KeyToMatch, int32 ValueToBeCloseTo);
	static void AddRequestLobbyListNumericalFilter(const class FString& KeyToMatch, int32 ValueToMatch, ESIK_LobbyComparisonType ComparisonType);
	static void AddRequestLobbyListResultCountFilter(int32 MaxResults);
	static void AddRequestLobbyListStringFilter(const class FString& KeyToMatch, const class FString& ValueToMatch, ESIK_LobbyComparisonType ComparisonType);
	static bool DeleteLobbyData(const struct FSIK_SteamId& SteamID, const class FString& Key);
	static bool GetFavoriteGame(int32 GameIndex, struct FSIK_AppId* AppID, class FString* IP, int32* ConnPort, int32* QueryPort, TArray<int32>* Flags_0, int32* Time32LastPlayedOnServer);
	static int32 GetFavoriteGameCount();
	static struct FSIK_SteamId GetLobbyByIndex(int32 LobbyIndex);
	static void GetLobbyChatEntry(const struct FSIK_SteamId& SteamID, int32 ChatID, struct FSIK_SteamId* steamIDUser, class FString* ChatEntry, ESIK_LobbyChatEntryType* ChatEntryType);
	static class FString GetLobbyData(const struct FSIK_SteamId& LobbyID, const class FString& Key);
	static bool GetLobbyDataByIndex(const struct FSIK_SteamId& LobbyID, int32 DataIndex, class FString* Key, class FString* Value);
	static int32 GetLobbyDataCount(const struct FSIK_SteamId& LobbyID);
	static bool GetLobbyGameServer(const struct FSIK_SteamId& LobbyID, class FString* ServerIP, int32* ServerPort, struct FSIK_SteamId* SteamID);
	static struct FSIK_SteamId GetLobbyMemberByIndex(const struct FSIK_SteamId& LobbyID, int32 MemberIndex);
	static class FString GetLobbyMemberData(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& UserId, const class FString& Key);
	static int32 GetLobbyMemberLimit(const struct FSIK_SteamId& LobbyID);
	static struct FSIK_SteamId GetLobbyOwner(const struct FSIK_SteamId& LobbyID);
	static int32 GetNumLobbyMembers(const struct FSIK_SteamId& LobbyID);
	static bool InviteUserToLobby(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& SteamID);
	static void LeaveLobby(const struct FSIK_SteamId& LobbyID);
	static bool RemoveFavoriteGame(const struct FSIK_AppId& AppID, const class FString& IP, int32 ConnPort, int32 QueryPort, const TArray<int32>& Flags_0);
	static bool RequestLobbyData(const struct FSIK_SteamId& LobbyID);
	static bool SendLobbyChatMessage(const struct FSIK_SteamId& LobbyID, const class FString& Message);
	static void SetLinkedLobby(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& DependentLobbyID);
	static bool SetLobbyData(const struct FSIK_SteamId& LobbyID, const class FString& Key, const class FString& Value);
	static void SetLobbyGameServer(const struct FSIK_SteamId& LobbyID, const class FString& ServerIP, int32 ServerPort, const struct FSIK_SteamId& SteamID);
	static bool SetLobbyJoinable(const struct FSIK_SteamId& LobbyID, bool bJoinable);
	static void SetLobbyMemberData(const struct FSIK_SteamId& LobbyID, const class FString& Key, const class FString& Value);
	static void SetLobbyMemberLimit(const struct FSIK_SteamId& LobbyID, int32 MemberLimit);
	static void SetLobbyOwner(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& SteamID);
	static bool SetLobbyType(const struct FSIK_SteamId& LobbyID, ESIK_LobbyType LobbyType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_MatchmakingLibrary">();
	}
	static class USIK_MatchmakingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_MatchmakingLibrary>();
	}
};
static_assert(alignof(USIK_MatchmakingLibrary) == 0x000008, "Wrong alignment on USIK_MatchmakingLibrary");
static_assert(sizeof(USIK_MatchmakingLibrary) == 0x000028, "Wrong size on USIK_MatchmakingLibrary");

// Class SteamIntegrationKit.SIK_MatchmakingSubsystem
// 0x0210 (0x0240 - 0x0030)
class USIK_MatchmakingSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnFavoritesListAccountsUpdated;               // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& IP, int32 QueryPort, int32 ConnPort, const struct FSIK_AppId& AppID, int32 Flags, bool Add, int32 AccountId)> OnFavoritesListChanged; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& UserId, ESIK_LobbyChatEntryType ChatEntryType, int32 ChatID)> OnLobbyChatMsg; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& UserId, const struct FSIK_SteamId& MemberIDMakingChange, ESIK_LobbyChatMemberStateChange ChatMemberStateChange)> OnLobbyChatUpdate; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, ESIK_Result Result)> OnLobbyCreated; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& UserId, bool Success)> OnLobbyDataUpdate; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, bool bLocked, ESIK_ChatRoomEnterResponse Response)> OnLobbyEnter; // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& GameServerId, const class FString& GameServerIP, int32 GameServerPort)> OnLobbyGameCreated; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& SenderUserId, const struct FSIK_AppId& AppID)> OnLobbyInvite; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& LobbyID, const struct FSIK_SteamId& AdminId, bool bKickedDueToDisconnect)> OnLobbyKicked; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 LobbyCount)> OnLobbyMatchList;                               // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x160];                                     // 0x00E0(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_MatchmakingSubsystem">();
	}
	static class USIK_MatchmakingSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_MatchmakingSubsystem>();
	}
};
static_assert(alignof(USIK_MatchmakingSubsystem) == 0x000008, "Wrong alignment on USIK_MatchmakingSubsystem");
static_assert(sizeof(USIK_MatchmakingSubsystem) == 0x000240, "Wrong size on USIK_MatchmakingSubsystem");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnFavoritesListAccountsUpdated) == 0x000030, "Member 'USIK_MatchmakingSubsystem::OnFavoritesListAccountsUpdated' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnFavoritesListChanged) == 0x000040, "Member 'USIK_MatchmakingSubsystem::OnFavoritesListChanged' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyChatMsg) == 0x000050, "Member 'USIK_MatchmakingSubsystem::OnLobbyChatMsg' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyChatUpdate) == 0x000060, "Member 'USIK_MatchmakingSubsystem::OnLobbyChatUpdate' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyCreated) == 0x000070, "Member 'USIK_MatchmakingSubsystem::OnLobbyCreated' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyDataUpdate) == 0x000080, "Member 'USIK_MatchmakingSubsystem::OnLobbyDataUpdate' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyEnter) == 0x000090, "Member 'USIK_MatchmakingSubsystem::OnLobbyEnter' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyGameCreated) == 0x0000A0, "Member 'USIK_MatchmakingSubsystem::OnLobbyGameCreated' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyInvite) == 0x0000B0, "Member 'USIK_MatchmakingSubsystem::OnLobbyInvite' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyKicked) == 0x0000C0, "Member 'USIK_MatchmakingSubsystem::OnLobbyKicked' has a wrong offset!");
static_assert(offsetof(USIK_MatchmakingSubsystem, OnLobbyMatchList) == 0x0000D0, "Member 'USIK_MatchmakingSubsystem::OnLobbyMatchList' has a wrong offset!");

// Class SteamIntegrationKit.SIK_MusicLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_MusicLibrary final : public UBlueprintFunctionLibrary
{
public:
	static ESIK_AudioPlayback_Status GetPlaybackStatus();
	static float GetVolume();
	static bool IsEnabled();
	static bool IsPlaying();
	static void Pause();
	static void Play();
	static void PlayNext();
	static void PlayPrevious();
	static void SetVolume(float Volume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_MusicLibrary">();
	}
	static class USIK_MusicLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_MusicLibrary>();
	}
};
static_assert(alignof(USIK_MusicLibrary) == 0x000008, "Wrong alignment on USIK_MusicLibrary");
static_assert(sizeof(USIK_MusicLibrary) == 0x000028, "Wrong size on USIK_MusicLibrary");

// Class SteamIntegrationKit.SIK_MusicRemoteLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_MusicRemoteLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ActivationSuccess(bool bValue);
	static bool CurrentEntryDidChange();
	static bool CurrentEntryIsAvailable(bool bAvailable);
	static bool CurrentEntryWillChange();
	static bool DeregisterSteamMusicRemote();
	static bool EnableLooped(bool bEnable);
	static bool EnablePlaylists(bool bEnable);
	static bool EnablePlayNext(bool bEnable);
	static bool EnablePlayPrevious(bool bEnable);
	static bool EnableQueue(bool bEnable);
	static bool EnableShuffled(bool bEnable);
	static bool IsCurrentMusicRemote();
	static bool PlaylistDidChange();
	static bool PlaylistWillChange();
	static bool QueueDidChange();
	static bool QueueWillChange();
	static bool RegisterSteamMusicRemote(const class FString& Name_0);
	static bool ResetPlaylistEntries();
	static bool ResetQueueEntries();
	static bool SetCurrentPlaylistEntry(int32 nID);
	static bool SetCurrentQueueEntry(int32 nID);
	static bool SetDisplayName(const class FString& DisplayName);
	static bool SetPlaylistEntry(int32 nID, int32 nPosition, const class FString& EntryText);
	static bool SetPNGIcon_64x64(const TArray<uint8>& PNGData);
	static bool SetQueueEntry(int32 nID, int32 nPosition, const class FString& EntryText);
	static bool UpdateCurrentEntryCoverArt(const TArray<uint8>& PNGData);
	static bool UpdateCurrentEntryElapsedSeconds(int32 nValue);
	static bool UpdateCurrentEntryText(const class FString& Text);
	static bool UpdateLooped(bool bLooped);
	static bool UpdatePlaybackStatus(ESIK_AudioPlayback_Status Status);
	static bool UpdateShuffled(bool bShuffled);
	static bool UpdateVolume(float flValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_MusicRemoteLibrary">();
	}
	static class USIK_MusicRemoteLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_MusicRemoteLibrary>();
	}
};
static_assert(alignof(USIK_MusicRemoteLibrary) == 0x000008, "Wrong alignment on USIK_MusicRemoteLibrary");
static_assert(sizeof(USIK_MusicRemoteLibrary) == 0x000028, "Wrong size on USIK_MusicRemoteLibrary");

// Class SteamIntegrationKit.SIK_MusicRemoteSubsystem
// 0x02A0 (0x02D0 - 0x0030)
class USIK_MusicRemoteSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void()>              OnMusicPlayerRemoteToFront;                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMusicPlayerRemoteWillActivate;                   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMusicPlayerRemoteWillDeactivate;                 // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 nID)>     OnMusicPlayerSelectsPlaylistEntry;                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 nID)>     OnMusicPlayerSelectsQueueEntry;                    // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bEnable)>  OnMusicPlayerWantsLooped;                          // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMusicPlayerWantsPause;                           // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 nStatus)> OnMusicPlayerWantsPlayingRepeatStatus;             // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMusicPlayerWantsPlayNext;                        // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMusicPlayerWantsPlayPrevious;                    // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMusicPlayerWantsPlay;                            // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bShuffled)> OnMusicPlayerWantsShuffled;                       // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float NewVolume)> OnMusicPlayerWantsVolume;                        // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMusicPlayerWillQuit;                             // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x1C0];                                    // 0x0110(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_MusicRemoteSubsystem">();
	}
	static class USIK_MusicRemoteSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_MusicRemoteSubsystem>();
	}
};
static_assert(alignof(USIK_MusicRemoteSubsystem) == 0x000008, "Wrong alignment on USIK_MusicRemoteSubsystem");
static_assert(sizeof(USIK_MusicRemoteSubsystem) == 0x0002D0, "Wrong size on USIK_MusicRemoteSubsystem");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerRemoteToFront) == 0x000030, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerRemoteToFront' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerRemoteWillActivate) == 0x000040, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerRemoteWillActivate' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerRemoteWillDeactivate) == 0x000050, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerRemoteWillDeactivate' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerSelectsPlaylistEntry) == 0x000060, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerSelectsPlaylistEntry' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerSelectsQueueEntry) == 0x000070, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerSelectsQueueEntry' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsLooped) == 0x000080, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsLooped' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsPause) == 0x000090, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsPause' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsPlayingRepeatStatus) == 0x0000A0, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsPlayingRepeatStatus' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsPlayNext) == 0x0000B0, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsPlayNext' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsPlayPrevious) == 0x0000C0, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsPlayPrevious' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsPlay) == 0x0000D0, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsPlay' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsShuffled) == 0x0000E0, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsShuffled' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWantsVolume) == 0x0000F0, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWantsVolume' has a wrong offset!");
static_assert(offsetof(USIK_MusicRemoteSubsystem, OnMusicPlayerWillQuit) == 0x000100, "Member 'USIK_MusicRemoteSubsystem::OnMusicPlayerWillQuit' has a wrong offset!");

// Class SteamIntegrationKit.SIK_MusicSubsystem
// 0x0060 (0x0090 - 0x0030)
class USIK_MusicSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void()>              PlaybackStatusHasChanged;                          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Volume)>  VolumeHasChanged;                                  // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_MusicSubsystem">();
	}
	static class USIK_MusicSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_MusicSubsystem>();
	}
};
static_assert(alignof(USIK_MusicSubsystem) == 0x000008, "Wrong alignment on USIK_MusicSubsystem");
static_assert(sizeof(USIK_MusicSubsystem) == 0x000090, "Wrong size on USIK_MusicSubsystem");
static_assert(offsetof(USIK_MusicSubsystem, PlaybackStatusHasChanged) == 0x000030, "Member 'USIK_MusicSubsystem::PlaybackStatusHasChanged' has a wrong offset!");
static_assert(offsetof(USIK_MusicSubsystem, VolumeHasChanged) == 0x000040, "Member 'USIK_MusicSubsystem::VolumeHasChanged' has a wrong offset!");

// Class SteamIntegrationKit.SIK_NetworkingLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_NetworkingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AcceptP2PSessionWithUser(const struct FSIK_SteamId& SteamIDRemote);
	static bool AllowP2PPacketRelay(bool Allow);
	static bool CloseP2PChannelWithUser(const struct FSIK_SteamId& SteamIDRemote, int32 Channel);
	static bool CloseP2PSessionWithUser(const struct FSIK_SteamId& SteamIDRemote);
	static bool GetP2PSessionState(const struct FSIK_SteamId& SteamIDRemote, struct FSIK_P2PSessionState* OutP2PSessionState);
	static bool IsP2PPacketAvailable(int32* MsgSize, int32 Channel);
	static bool ReadP2PPacket(TArray<uint8>* OutMsg, int32 MsgSize, struct FSIK_SteamId* OutSteamIDRemote, int32 Channel);
	static bool SendP2PPacket(const struct FSIK_SteamId& SteamIDRemote, const TArray<uint8>& Msg, int32 Channel, ESIK_P2PSend SendType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_NetworkingLibrary">();
	}
	static class USIK_NetworkingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_NetworkingLibrary>();
	}
};
static_assert(alignof(USIK_NetworkingLibrary) == 0x000008, "Wrong alignment on USIK_NetworkingLibrary");
static_assert(sizeof(USIK_NetworkingLibrary) == 0x000028, "Wrong size on USIK_NetworkingLibrary");

// Class SteamIntegrationKit.SIK_NetworkingSubsystem
// 0x0060 (0x0090 - 0x0030)
class USIK_NetworkingSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, ESIK_P2PSessionError Error)> OnP2PSessionConnectFail; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID)> OnP2PSessionRequest;          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_NetworkingSubsystem">();
	}
	static class USIK_NetworkingSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_NetworkingSubsystem>();
	}
};
static_assert(alignof(USIK_NetworkingSubsystem) == 0x000008, "Wrong alignment on USIK_NetworkingSubsystem");
static_assert(sizeof(USIK_NetworkingSubsystem) == 0x000090, "Wrong size on USIK_NetworkingSubsystem");
static_assert(offsetof(USIK_NetworkingSubsystem, OnP2PSessionConnectFail) == 0x000030, "Member 'USIK_NetworkingSubsystem::OnP2PSessionConnectFail' has a wrong offset!");
static_assert(offsetof(USIK_NetworkingSubsystem, OnP2PSessionRequest) == 0x000040, "Member 'USIK_NetworkingSubsystem::OnP2PSessionRequest' has a wrong offset!");

// Class SteamIntegrationKit.SIK_NetworkingUtilsLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_NetworkingUtilsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckPingDataUpToDate(float MaxAgeSeconds);
	static class FString ConvertPingLocationToString(const struct FSIK_SteamNetworkPingLocation& Location);
	static int32 EstimatePingTimeBetweenTwoLocations(const struct FSIK_SteamNetworkPingLocation& Location1, const struct FSIK_SteamNetworkPingLocation& Location2);
	static int32 EstimatePingTimeFromLocalHost(const struct FSIK_SteamNetworkPingLocation& Location);
	static int32 GetDirectPingToPOP(const struct FSIK_SteamNetworkingPOPID& PopID);
	static float GetLocalPingLocation(struct FSIK_SteamNetworkPingLocation* OutPingLocation);
	static int32 GetPingToDataCenter(const struct FSIK_SteamNetworkingPOPID& PopID, struct FSIK_SteamNetworkingPOPID* ViaRelayPoP);
	static int32 GetPOPCount();
	static int32 GetPOPList(int32 ListSize, TArray<struct FSIK_SteamNetworkingPOPID>* OutPOPIDList);
	static ESIK_SteamNetworkingAvailability GetRelayNetworkStatus();
	static void InitRelayNetworkAccess();
	static bool IsPingMeasurementInProgress();
	static bool ParsePingLocationString(const class FString& PingLocationString, struct FSIK_SteamNetworkPingLocation* OutPingLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_NetworkingUtilsLibrary">();
	}
	static class USIK_NetworkingUtilsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_NetworkingUtilsLibrary>();
	}
};
static_assert(alignof(USIK_NetworkingUtilsLibrary) == 0x000008, "Wrong alignment on USIK_NetworkingUtilsLibrary");
static_assert(sizeof(USIK_NetworkingUtilsLibrary) == 0x000028, "Wrong size on USIK_NetworkingUtilsLibrary");

// Class SteamIntegrationKit.SIK_PartiesLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_PartiesLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DestroyBeacon(const struct FSIK_PartyBeaconID& BeaconID);
	static bool GetAvailableBeaconLocations(int32 MaxNumberOfLocations, TArray<struct FSIK_SteamPartyBeaconLocation>* Locations);
	static struct FSIK_PartyBeaconID GetBeaconByIndex(int32 Index_0);
	static bool GetBeaconDetails(const struct FSIK_PartyBeaconID& BeaconID, struct FSIK_SteamId* CreatorId, struct FSIK_SteamPartyBeaconLocation* Location, class FString* MetaData);
	static bool GetBeaconLocationData(const struct FSIK_SteamPartyBeaconLocation& BeaconLocation, ESIK_SteamPartyBeaconLocationType* LocationType, class FString* LocationString);
	static void GetNumActiveBeacons(int32* NumActiveBeacons);
	static bool GetNumAvailableBeaconLocations(int32* NumLocations);
	static void OnReservationCompleted(const struct FSIK_PartyBeaconID& BeaconID, const struct FSIK_SteamId& UserSteamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_PartiesLibrary">();
	}
	static class USIK_PartiesLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_PartiesLibrary>();
	}
};
static_assert(alignof(USIK_PartiesLibrary) == 0x000008, "Wrong alignment on USIK_PartiesLibrary");
static_assert(sizeof(USIK_PartiesLibrary) == 0x000028, "Wrong size on USIK_PartiesLibrary");

// Class SteamIntegrationKit.SIK_PartiesSubsystem
// 0x0120 (0x0150 - 0x0030)
class USIK_PartiesSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PartyBeaconID& PartyBeaconID, const struct FSIK_SteamId& BeaconOwner, const class FString& ConnectString)> OnJoinPartyResult; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PartyBeaconID& BeaconID)> OnCreateBeaconResult; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PartyBeaconID& BeaconID, const struct FSIK_SteamId& SteamID)> OnReservationNotification; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const ESIK_Result Result)> OnChangeNumOpenSlots;                   // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAvailableBeaconLocationsUpdated;                 // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnActiveBeaconsUpdated;                            // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0xC0];                                      // 0x0090(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_PartiesSubsystem">();
	}
	static class USIK_PartiesSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_PartiesSubsystem>();
	}
};
static_assert(alignof(USIK_PartiesSubsystem) == 0x000008, "Wrong alignment on USIK_PartiesSubsystem");
static_assert(sizeof(USIK_PartiesSubsystem) == 0x000150, "Wrong size on USIK_PartiesSubsystem");
static_assert(offsetof(USIK_PartiesSubsystem, OnJoinPartyResult) == 0x000030, "Member 'USIK_PartiesSubsystem::OnJoinPartyResult' has a wrong offset!");
static_assert(offsetof(USIK_PartiesSubsystem, OnCreateBeaconResult) == 0x000040, "Member 'USIK_PartiesSubsystem::OnCreateBeaconResult' has a wrong offset!");
static_assert(offsetof(USIK_PartiesSubsystem, OnReservationNotification) == 0x000050, "Member 'USIK_PartiesSubsystem::OnReservationNotification' has a wrong offset!");
static_assert(offsetof(USIK_PartiesSubsystem, OnChangeNumOpenSlots) == 0x000060, "Member 'USIK_PartiesSubsystem::OnChangeNumOpenSlots' has a wrong offset!");
static_assert(offsetof(USIK_PartiesSubsystem, OnAvailableBeaconLocationsUpdated) == 0x000070, "Member 'USIK_PartiesSubsystem::OnAvailableBeaconLocationsUpdated' has a wrong offset!");
static_assert(offsetof(USIK_PartiesSubsystem, OnActiveBeaconsUpdated) == 0x000080, "Member 'USIK_PartiesSubsystem::OnActiveBeaconsUpdated' has a wrong offset!");

// Class SteamIntegrationKit.SIK_PlayerDetails_AsyncFunction
// 0x0050 (0x0080 - 0x0030)
class USIK_PlayerDetails_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& PlayerName, int32 Score, float TimePlayed)> OnAddPlayerToList; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayersFailedToRespond;                          // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayersRefreshComplete;                          // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x18];                                      // 0x0068(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_PlayerDetails_AsyncFunction* RequestPlayerDetails(const class FString& ServerIP, int32 ServerPort);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_PlayerDetails_AsyncFunction">();
	}
	static class USIK_PlayerDetails_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_PlayerDetails_AsyncFunction>();
	}
};
static_assert(alignof(USIK_PlayerDetails_AsyncFunction) == 0x000008, "Wrong alignment on USIK_PlayerDetails_AsyncFunction");
static_assert(sizeof(USIK_PlayerDetails_AsyncFunction) == 0x000080, "Wrong size on USIK_PlayerDetails_AsyncFunction");
static_assert(offsetof(USIK_PlayerDetails_AsyncFunction, OnAddPlayerToList) == 0x000038, "Member 'USIK_PlayerDetails_AsyncFunction::OnAddPlayerToList' has a wrong offset!");
static_assert(offsetof(USIK_PlayerDetails_AsyncFunction, OnPlayersFailedToRespond) == 0x000048, "Member 'USIK_PlayerDetails_AsyncFunction::OnPlayersFailedToRespond' has a wrong offset!");
static_assert(offsetof(USIK_PlayerDetails_AsyncFunction, OnPlayersRefreshComplete) == 0x000058, "Member 'USIK_PlayerDetails_AsyncFunction::OnPlayersRefreshComplete' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RemoteStorageLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_RemoteStorageLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool BeginFileWriteBatch();
	static bool EndFileWriteBatch();
	static bool FileDelete(const class FString& Filename);
	static bool FileExists(const class FString& Filename);
	static bool FileForget(const class FString& Filename);
	static bool FilePersisted(const class FString& Filename);
	static int32 FileRead(const class FString& Filename, TArray<uint8>* Data);
	static bool FileWrite(const class FString& Filename, const TArray<uint8>& Data);
	static bool FileWriteStreamCancel(const struct FSIK_UGCFileWriteStreamHandle& WriteStreamHandle);
	static bool FileWriteStreamClose(const struct FSIK_UGCFileWriteStreamHandle& WriteStreamHandle);
	static struct FSIK_UGCFileWriteStreamHandle FileWriteStreamOpen(const class FString& Filename);
	static bool FileWriteStreamWriteChunk(const struct FSIK_UGCFileWriteStreamHandle& WriteStreamHandle, const TArray<uint8>& Data);
	static int32 GetCachedUGCCount();
	static struct FSIK_UGCHandle GetCachedUGCHandle(int32 CachedContent);
	static int32 GetFileCount();
	static class FString GetFileNameAndSize(int32 File, int32* FileSize);
	static int32 GetFileSize(const class FString& Filename);
	static struct FDateTime GetFileTimestamp(const class FString& Filename, int64* Timestamp);
	static class FString GetLocalFileChange(int32 File, ESIK_RemoteStorageLocalFileChange* ChangeType, ESIK_RemoteStorageFilePathType* PathType);
	static int32 GetLocalFileChangeCount();
	static bool GetQuota(int64* TotalBytes, int64* AvailableBytes);
	static ESIK_RemoteStoragePlatform GetSyncPlatforms(const class FString& Filename);
	static bool GetUGCDetails(const struct FSIK_UGCHandle& UGCHandle, class FString* Filename, int32* FileSize, struct FSIK_SteamId* OwnerID);
	static bool GetUGCDownloadProgress(const struct FSIK_UGCHandle& UGCHandle, int32* BytesDownloaded, int32* BytesExpected);
	static bool IsCloudEnabledForAccount();
	static bool IsCloudEnabledForApp();
	static void SetCloudEnabledForApp(bool bEnabled);
	static bool SetSyncPlatforms(const class FString& Filename, ESIK_RemoteStoragePlatform RemoteStoragePlatform);
	static int32 UGCRead(const struct FSIK_UGCHandle& UGCHandle, TArray<uint8>* Data, int32 DataToRead, int32 Offset, ESIK_UGCReadAction Action);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RemoteStorageLibrary">();
	}
	static class USIK_RemoteStorageLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RemoteStorageLibrary>();
	}
};
static_assert(alignof(USIK_RemoteStorageLibrary) == 0x000008, "Wrong alignment on USIK_RemoteStorageLibrary");
static_assert(sizeof(USIK_RemoteStorageLibrary) == 0x000028, "Wrong size on USIK_RemoteStorageLibrary");

// Class SteamIntegrationKit.SIK_RemoveAppDependency_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_RemoveAppDependency_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RemoveAppDependency_AsyncFunction* RemoveAppDependency(const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RemoveAppDependency_AsyncFunction">();
	}
	static class USIK_RemoveAppDependency_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RemoveAppDependency_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RemoveAppDependency_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RemoveAppDependency_AsyncFunction");
static_assert(sizeof(USIK_RemoveAppDependency_AsyncFunction) == 0x000090, "Wrong size on USIK_RemoveAppDependency_AsyncFunction");
static_assert(offsetof(USIK_RemoveAppDependency_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RemoveAppDependency_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RemoveAppDependency_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RemoveAppDependency_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RemoveItemFromFavorites_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_RemoveItemFromFavorites_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, ESIK_Result Result, bool bWasAddRequest)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, ESIK_Result Result, bool bWasAddRequest)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RemoveItemFromFavorites_AsyncFunction* RemoveItemFromFavorites(const struct FSIK_AppId& AppID, const struct FSIK_PublishedFileId& PublishedFileId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RemoveItemFromFavorites_AsyncFunction">();
	}
	static class USIK_RemoveItemFromFavorites_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RemoveItemFromFavorites_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RemoveItemFromFavorites_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RemoveItemFromFavorites_AsyncFunction");
static_assert(sizeof(USIK_RemoveItemFromFavorites_AsyncFunction) == 0x000090, "Wrong size on USIK_RemoveItemFromFavorites_AsyncFunction");
static_assert(offsetof(USIK_RemoveItemFromFavorites_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RemoveItemFromFavorites_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RemoveItemFromFavorites_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RemoveItemFromFavorites_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestClanOfficerList_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_RequestClanOfficerList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 NumberOfOfficers)> OnSuccess;                                // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 NumberOfOfficers)> OnFailure;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestClanOfficerList_AsyncFunction* RequestClanOfficerList(const struct FSIK_SteamId& ClanId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestClanOfficerList_AsyncFunction">();
	}
	static class USIK_RequestClanOfficerList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestClanOfficerList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestClanOfficerList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestClanOfficerList_AsyncFunction");
static_assert(sizeof(USIK_RequestClanOfficerList_AsyncFunction) == 0x000088, "Wrong size on USIK_RequestClanOfficerList_AsyncFunction");
static_assert(offsetof(USIK_RequestClanOfficerList_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestClanOfficerList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestClanOfficerList_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestClanOfficerList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& SteamID, int32 numEligiblePromoItemDefs, bool bCachedData)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& SteamID, int32 numEligiblePromoItemDefs, bool bCachedData)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction* RequestEligiblePromoItemDefinitionsIDs(const struct FSIK_SteamId& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction">();
	}
	static class USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction");
static_assert(sizeof(USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction) == 0x000088, "Wrong size on USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction");
static_assert(offsetof(USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestEligiblePromoItemDefinitionsIDs_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestFavoritesServerList_AsyncFunction
// 0x0090 (0x00C0 - 0x0030)
class USIK_RequestFavoritesServerList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnSuccess; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnFailure; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x68];                                      // 0x0058(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestFavoritesServerList_AsyncFunction* RequestFavoritesServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestFavoritesServerList_AsyncFunction">();
	}
	static class USIK_RequestFavoritesServerList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestFavoritesServerList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestFavoritesServerList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestFavoritesServerList_AsyncFunction");
static_assert(sizeof(USIK_RequestFavoritesServerList_AsyncFunction) == 0x0000C0, "Wrong size on USIK_RequestFavoritesServerList_AsyncFunction");
static_assert(offsetof(USIK_RequestFavoritesServerList_AsyncFunction, OnSuccess) == 0x000038, "Member 'USIK_RequestFavoritesServerList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestFavoritesServerList_AsyncFunction, OnFailure) == 0x000048, "Member 'USIK_RequestFavoritesServerList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestFriendsServerList_AsyncFunction
// 0x0090 (0x00C0 - 0x0030)
class USIK_RequestFriendsServerList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnSuccess; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnFailure; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x68];                                      // 0x0058(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestFriendsServerList_AsyncFunction* RequestFriendsServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestFriendsServerList_AsyncFunction">();
	}
	static class USIK_RequestFriendsServerList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestFriendsServerList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestFriendsServerList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestFriendsServerList_AsyncFunction");
static_assert(sizeof(USIK_RequestFriendsServerList_AsyncFunction) == 0x0000C0, "Wrong size on USIK_RequestFriendsServerList_AsyncFunction");
static_assert(offsetof(USIK_RequestFriendsServerList_AsyncFunction, OnSuccess) == 0x000038, "Member 'USIK_RequestFriendsServerList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestFriendsServerList_AsyncFunction, OnFailure) == 0x000048, "Member 'USIK_RequestFriendsServerList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestGlobalStats_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_RequestGlobalStats_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnSuccess;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnFailure;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestGlobalStats_AsyncFunction* RequestGlobalStats(int32 HistoryDays);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestGlobalStats_AsyncFunction">();
	}
	static class USIK_RequestGlobalStats_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestGlobalStats_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestGlobalStats_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestGlobalStats_AsyncFunction");
static_assert(sizeof(USIK_RequestGlobalStats_AsyncFunction) == 0x000088, "Wrong size on USIK_RequestGlobalStats_AsyncFunction");
static_assert(offsetof(USIK_RequestGlobalStats_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestGlobalStats_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestGlobalStats_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestGlobalStats_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestHistoryServerList_AsyncFunction
// 0x0090 (0x00C0 - 0x0030)
class USIK_RequestHistoryServerList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnSuccess; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnFailure; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x68];                                      // 0x0058(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestHistoryServerList_AsyncFunction* RequestHistoryServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestHistoryServerList_AsyncFunction">();
	}
	static class USIK_RequestHistoryServerList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestHistoryServerList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestHistoryServerList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestHistoryServerList_AsyncFunction");
static_assert(sizeof(USIK_RequestHistoryServerList_AsyncFunction) == 0x0000C0, "Wrong size on USIK_RequestHistoryServerList_AsyncFunction");
static_assert(offsetof(USIK_RequestHistoryServerList_AsyncFunction, OnSuccess) == 0x000038, "Member 'USIK_RequestHistoryServerList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestHistoryServerList_AsyncFunction, OnFailure) == 0x000048, "Member 'USIK_RequestHistoryServerList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestInternetServerList_AsyncFunction
// 0x0090 (0x00C0 - 0x0030)
class USIK_RequestInternetServerList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnSuccess; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnFailure; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x68];                                      // 0x0058(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestInternetServerList_AsyncFunction* RequestInternetServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestInternetServerList_AsyncFunction">();
	}
	static class USIK_RequestInternetServerList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestInternetServerList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestInternetServerList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestInternetServerList_AsyncFunction");
static_assert(sizeof(USIK_RequestInternetServerList_AsyncFunction) == 0x0000C0, "Wrong size on USIK_RequestInternetServerList_AsyncFunction");
static_assert(offsetof(USIK_RequestInternetServerList_AsyncFunction, OnSuccess) == 0x000038, "Member 'USIK_RequestInternetServerList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestInternetServerList_AsyncFunction, OnFailure) == 0x000048, "Member 'USIK_RequestInternetServerList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestLANServerList_AsyncFunction
// 0x0040 (0x0070 - 0x0030)
class USIK_RequestLANServerList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnSuccess; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnFailure; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestLANServerList_AsyncFunction* RequestLANServerList(const struct FSIK_AppId& AppID, float Timeout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestLANServerList_AsyncFunction">();
	}
	static class USIK_RequestLANServerList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestLANServerList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestLANServerList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestLANServerList_AsyncFunction");
static_assert(sizeof(USIK_RequestLANServerList_AsyncFunction) == 0x000070, "Wrong size on USIK_RequestLANServerList_AsyncFunction");
static_assert(offsetof(USIK_RequestLANServerList_AsyncFunction, OnSuccess) == 0x000038, "Member 'USIK_RequestLANServerList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestLANServerList_AsyncFunction, OnFailure) == 0x000048, "Member 'USIK_RequestLANServerList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestLobbyList_AsyncFunction
// 0x0050 (0x0080 - 0x0030)
class USIK_RequestLobbyList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 LobbiesMatching)> OnSuccess;                                 // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 LobbiesMatching)> OnFailure;                                 // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestLobbyList_AsyncFunction* RequestLobbyList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestLobbyList_AsyncFunction">();
	}
	static class USIK_RequestLobbyList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestLobbyList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestLobbyList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestLobbyList_AsyncFunction");
static_assert(sizeof(USIK_RequestLobbyList_AsyncFunction) == 0x000080, "Wrong size on USIK_RequestLobbyList_AsyncFunction");
static_assert(offsetof(USIK_RequestLobbyList_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestLobbyList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestLobbyList_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestLobbyList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestPrices_AsyncFunction
// 0x0050 (0x0080 - 0x0030)
class USIK_RequestPrices_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const class FString& CurrencyCode)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const class FString& CurrencyCode)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestPrices_AsyncFunction* RequestPrices();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestPrices_AsyncFunction">();
	}
	static class USIK_RequestPrices_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestPrices_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestPrices_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestPrices_AsyncFunction");
static_assert(sizeof(USIK_RequestPrices_AsyncFunction) == 0x000080, "Wrong size on USIK_RequestPrices_AsyncFunction");
static_assert(offsetof(USIK_RequestPrices_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestPrices_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestPrices_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestPrices_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestSpectatorServerList_AsyncFunction
// 0x0090 (0x00C0 - 0x0030)
class USIK_RequestSpectatorServerList_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnSuccess; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_MatchMakingServerResponse Response, const TArray<struct FSIK_FoundServers>& ServerList)> OnFailure; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x68];                                      // 0x0058(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestSpectatorServerList_AsyncFunction* RequestSpectatorServerList(const struct FSIK_AppId& AppID, const TMap<class FString, class FString>& Filters, float Timeout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestSpectatorServerList_AsyncFunction">();
	}
	static class USIK_RequestSpectatorServerList_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestSpectatorServerList_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestSpectatorServerList_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestSpectatorServerList_AsyncFunction");
static_assert(sizeof(USIK_RequestSpectatorServerList_AsyncFunction) == 0x0000C0, "Wrong size on USIK_RequestSpectatorServerList_AsyncFunction");
static_assert(offsetof(USIK_RequestSpectatorServerList_AsyncFunction, OnSuccess) == 0x000038, "Member 'USIK_RequestSpectatorServerList_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestSpectatorServerList_AsyncFunction, OnFailure) == 0x000048, "Member 'USIK_RequestSpectatorServerList_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestStoreAuthURL_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_RequestStoreAuthURL_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const class FString& URL)> OnSuccess;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& URL)> OnFailure;                              // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestStoreAuthURL_AsyncFunction* RequestStoreAuthURL(const class FString& URL);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestStoreAuthURL_AsyncFunction">();
	}
	static class USIK_RequestStoreAuthURL_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestStoreAuthURL_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestStoreAuthURL_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestStoreAuthURL_AsyncFunction");
static_assert(sizeof(USIK_RequestStoreAuthURL_AsyncFunction) == 0x000090, "Wrong size on USIK_RequestStoreAuthURL_AsyncFunction");
static_assert(offsetof(USIK_RequestStoreAuthURL_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestStoreAuthURL_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestStoreAuthURL_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestStoreAuthURL_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_RequestUserStats_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_RequestUserStats_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnSuccess;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnFailure;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_RequestUserStats_AsyncFunction* RequestUserStats(const struct FSIK_SteamId& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_RequestUserStats_AsyncFunction">();
	}
	static class USIK_RequestUserStats_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_RequestUserStats_AsyncFunction>();
	}
};
static_assert(alignof(USIK_RequestUserStats_AsyncFunction) == 0x000008, "Wrong alignment on USIK_RequestUserStats_AsyncFunction");
static_assert(sizeof(USIK_RequestUserStats_AsyncFunction) == 0x000088, "Wrong size on USIK_RequestUserStats_AsyncFunction");
static_assert(offsetof(USIK_RequestUserStats_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_RequestUserStats_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_RequestUserStats_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_RequestUserStats_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_ScreenshotsLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_ScreenshotsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FSIK_ScreenshotHandle AddScreenshotToLibrary(const class FString& Filename, const class FString& ThumbnailFileName, int32 Width, int32 Height);
	static struct FSIK_ScreenshotHandle AddVRScreenshotToLibrary(ESIK_VRScreenshotType Type, const class FString& Filename, const class FString& VR_Filename);
	static void HookScreenshots(bool bHook);
	static bool IsScreenshotsHooked();
	static bool SetLocation(const struct FSIK_ScreenshotHandle& Handle, const class FString& Location);
	static bool TagPublishedFile(const struct FSIK_ScreenshotHandle& Handle, const struct FSIK_PublishedFileId& PublishedFileId);
	static bool TagUser(const struct FSIK_ScreenshotHandle& Handle, const struct FSIK_SteamId& SteamID);
	static void TriggerScreenshot();
	static struct FSIK_ScreenshotHandle WriteScreenshot(const TArray<uint8>& Data, int32 Width, int32 Height);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_ScreenshotsLibrary">();
	}
	static class USIK_ScreenshotsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_ScreenshotsLibrary>();
	}
};
static_assert(alignof(USIK_ScreenshotsLibrary) == 0x000008, "Wrong alignment on USIK_ScreenshotsLibrary");
static_assert(sizeof(USIK_ScreenshotsLibrary) == 0x000028, "Wrong size on USIK_ScreenshotsLibrary");

// Class SteamIntegrationKit.SIK_ScreenshotsSubsystem
// 0x0060 (0x0090 - 0x0030)
class USIK_ScreenshotsSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_ScreenshotHandle& ScreenshotHandle, const ESIK_Result& Result)> OnScreenshotReady; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnScreenshotRequested;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_ScreenshotsSubsystem">();
	}
	static class USIK_ScreenshotsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_ScreenshotsSubsystem>();
	}
};
static_assert(alignof(USIK_ScreenshotsSubsystem) == 0x000008, "Wrong alignment on USIK_ScreenshotsSubsystem");
static_assert(sizeof(USIK_ScreenshotsSubsystem) == 0x000090, "Wrong size on USIK_ScreenshotsSubsystem");
static_assert(offsetof(USIK_ScreenshotsSubsystem, OnScreenshotReady) == 0x000030, "Member 'USIK_ScreenshotsSubsystem::OnScreenshotReady' has a wrong offset!");
static_assert(offsetof(USIK_ScreenshotsSubsystem, OnScreenshotRequested) == 0x000040, "Member 'USIK_ScreenshotsSubsystem::OnScreenshotRequested' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SendQueryUGCRequest_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_SendQueryUGCRequest_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_UGCQueryHandle& QueryHandle, ESIK_Result Result, int32 NumResultsReturned, int32 TotalMatchingResults, bool bCachedData)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_UGCQueryHandle& QueryHandle, ESIK_Result Result, int32 NumResultsReturned, int32 TotalMatchingResults, bool bCachedData)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_SendQueryUGCRequest_AsyncFunction* SendQueryUGCRequest(const struct FSIK_UGCQueryHandle& QueryHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SendQueryUGCRequest_AsyncFunction">();
	}
	static class USIK_SendQueryUGCRequest_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SendQueryUGCRequest_AsyncFunction>();
	}
};
static_assert(alignof(USIK_SendQueryUGCRequest_AsyncFunction) == 0x000008, "Wrong alignment on USIK_SendQueryUGCRequest_AsyncFunction");
static_assert(sizeof(USIK_SendQueryUGCRequest_AsyncFunction) == 0x000088, "Wrong size on USIK_SendQueryUGCRequest_AsyncFunction");
static_assert(offsetof(USIK_SendQueryUGCRequest_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_SendQueryUGCRequest_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_SendQueryUGCRequest_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_SendQueryUGCRequest_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SessionsSubsystem
// 0x0018 (0x0048 - 0x0030)
class USIK_SessionsSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bWasSuccesfull, const struct FBlueprintSessionResult& AcceptedSession)> OnSessionUserInviteAccepted; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static TArray<struct FSIK_CurrentSessionInfo> GetAllJoinedSessionsAndLobbies(class UObject* Context);
	static bool IsSIKActive(class UObject* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SessionsSubsystem">();
	}
	static class USIK_SessionsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SessionsSubsystem>();
	}
};
static_assert(alignof(USIK_SessionsSubsystem) == 0x000008, "Wrong alignment on USIK_SessionsSubsystem");
static_assert(sizeof(USIK_SessionsSubsystem) == 0x000048, "Wrong size on USIK_SessionsSubsystem");
static_assert(offsetof(USIK_SessionsSubsystem, OnSessionUserInviteAccepted) == 0x000038, "Member 'USIK_SessionsSubsystem::OnSessionUserInviteAccepted' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SetPersonaName_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_SetPersonaName_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void()>              OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_SetPersonaName_AsyncFunction* SetPersonaName(const class FString& PersonaName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SetPersonaName_AsyncFunction">();
	}
	static class USIK_SetPersonaName_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SetPersonaName_AsyncFunction>();
	}
};
static_assert(alignof(USIK_SetPersonaName_AsyncFunction) == 0x000008, "Wrong alignment on USIK_SetPersonaName_AsyncFunction");
static_assert(sizeof(USIK_SetPersonaName_AsyncFunction) == 0x000090, "Wrong size on USIK_SetPersonaName_AsyncFunction");
static_assert(offsetof(USIK_SetPersonaName_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_SetPersonaName_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_SetPersonaName_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_SetPersonaName_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SetUserItemVote_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_SetUserItemVote_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, bool bVoteUp, ESIK_Result Result)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, bool bVoteUp, ESIK_Result Result)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_SetUserItemVote_AsyncFunction* SetUserItemVote(const struct FSIK_PublishedFileId& PublishedFileId, bool bVoteUp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SetUserItemVote_AsyncFunction">();
	}
	static class USIK_SetUserItemVote_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SetUserItemVote_AsyncFunction>();
	}
};
static_assert(alignof(USIK_SetUserItemVote_AsyncFunction) == 0x000008, "Wrong alignment on USIK_SetUserItemVote_AsyncFunction");
static_assert(sizeof(USIK_SetUserItemVote_AsyncFunction) == 0x000090, "Wrong size on USIK_SetUserItemVote_AsyncFunction");
static_assert(offsetof(USIK_SetUserItemVote_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_SetUserItemVote_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_SetUserItemVote_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_SetUserItemVote_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SharedFile
// 0x0000 (0x0028 - 0x0028)
class USIK_SharedFile final : public UObject
{
public:
	static TArray<uint8> ConvertFileToUint8Array(const class FString& FilePath, bool* bSuccess);
	static struct FSIK_SteamId ConvertInt64ToSteamId(int64 Int64);
	static int64 ConvertSteamIdToInt64(const struct FSIK_SteamId& SteamID);
	static TArray<uint8> ConvertStringToUint8Array(const class FString& String);
	static class FString ConvertUint8ArrayToString(const TArray<uint8>& Array);
	static struct FSIK_AccountID GetAccountID(const struct FSIK_SteamId& SteamID);
	static ESIK_Universe GetUniverse(const struct FSIK_SteamId& SteamID);
	static bool IsEqualGameId(const struct FSIK_GameID& GameId1, const struct FSIK_GameID& GameId2);
	static bool IsEqualSteamId(const struct FSIK_SteamId& SteamId1, const struct FSIK_SteamId& SteamId2);
	static bool IsValidGameId(const struct FSIK_GameID& GameID);
	static bool IsValidSteamId(const struct FSIK_SteamId& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SharedFile">();
	}
	static class USIK_SharedFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SharedFile>();
	}
};
static_assert(alignof(USIK_SharedFile) == 0x000008, "Wrong alignment on USIK_SharedFile");
static_assert(sizeof(USIK_SharedFile) == 0x000028, "Wrong size on USIK_SharedFile");

// Class SteamIntegrationKit.SIK_StartPlaytimeTracking_AsyncFunction
// 0x0068 (0x0098 - 0x0030)
class USIK_StartPlaytimeTracking_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnSuccess;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnFailure;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_StartPlaytimeTracking_AsyncFunction* StartPlaytimeTracking(const TArray<struct FSIK_PublishedFileId>& PublishedFileId, int32 NumPublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_StartPlaytimeTracking_AsyncFunction">();
	}
	static class USIK_StartPlaytimeTracking_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_StartPlaytimeTracking_AsyncFunction>();
	}
};
static_assert(alignof(USIK_StartPlaytimeTracking_AsyncFunction) == 0x000008, "Wrong alignment on USIK_StartPlaytimeTracking_AsyncFunction");
static_assert(sizeof(USIK_StartPlaytimeTracking_AsyncFunction) == 0x000098, "Wrong size on USIK_StartPlaytimeTracking_AsyncFunction");
static_assert(offsetof(USIK_StartPlaytimeTracking_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_StartPlaytimeTracking_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_StartPlaytimeTracking_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_StartPlaytimeTracking_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_StartPurchase_AsyncFunction
// 0x0070 (0x00A0 - 0x0030)
class USIK_StartPurchase_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, int64 OrderID, int64 TransID)> OnSuccess;      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, int64 OrderID, int64 TransID)> OnFailure;      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_StartPurchase_AsyncFunction* StartPurchase(const TArray<struct FSIK_SteamItemDef>& Items, const TArray<int32>& Quantity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_StartPurchase_AsyncFunction">();
	}
	static class USIK_StartPurchase_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_StartPurchase_AsyncFunction>();
	}
};
static_assert(alignof(USIK_StartPurchase_AsyncFunction) == 0x000008, "Wrong alignment on USIK_StartPurchase_AsyncFunction");
static_assert(sizeof(USIK_StartPurchase_AsyncFunction) == 0x0000A0, "Wrong size on USIK_StartPurchase_AsyncFunction");
static_assert(offsetof(USIK_StartPurchase_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_StartPurchase_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_StartPurchase_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_StartPurchase_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SteamCreateLobby_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_SteamCreateLobby_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& LobbyID)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_SteamId& LobbyID)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_SteamCreateLobby_AsyncFunction* CreateLobby(int32 MaxMembers, ESIK_LobbyType LobbyType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SteamCreateLobby_AsyncFunction">();
	}
	static class USIK_SteamCreateLobby_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SteamCreateLobby_AsyncFunction>();
	}
};
static_assert(alignof(USIK_SteamCreateLobby_AsyncFunction) == 0x000008, "Wrong alignment on USIK_SteamCreateLobby_AsyncFunction");
static_assert(sizeof(USIK_SteamCreateLobby_AsyncFunction) == 0x000088, "Wrong size on USIK_SteamCreateLobby_AsyncFunction");
static_assert(offsetof(USIK_SteamCreateLobby_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_SteamCreateLobby_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_SteamCreateLobby_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_SteamCreateLobby_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_StopPlaytimeTrackingForAllItems_AsyncFunction
// 0x0050 (0x0080 - 0x0030)
class USIK_StopPlaytimeTrackingForAllItems_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnSuccess;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnFailure;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_StopPlaytimeTrackingForAllItems_AsyncFunction* StopPlaytimeTrackingForAllItems();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_StopPlaytimeTrackingForAllItems_AsyncFunction">();
	}
	static class USIK_StopPlaytimeTrackingForAllItems_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_StopPlaytimeTrackingForAllItems_AsyncFunction>();
	}
};
static_assert(alignof(USIK_StopPlaytimeTrackingForAllItems_AsyncFunction) == 0x000008, "Wrong alignment on USIK_StopPlaytimeTrackingForAllItems_AsyncFunction");
static_assert(sizeof(USIK_StopPlaytimeTrackingForAllItems_AsyncFunction) == 0x000080, "Wrong size on USIK_StopPlaytimeTrackingForAllItems_AsyncFunction");
static_assert(offsetof(USIK_StopPlaytimeTrackingForAllItems_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_StopPlaytimeTrackingForAllItems_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_StopPlaytimeTrackingForAllItems_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_StopPlaytimeTrackingForAllItems_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_StopPlaytimeTracking_AsyncFunction
// 0x0068 (0x0098 - 0x0030)
class USIK_StopPlaytimeTracking_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnSuccess;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnFailure;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_StopPlaytimeTracking_AsyncFunction* StopPlaytimeTracking(const TArray<struct FSIK_PublishedFileId>& PublishedFileId, int32 NumPublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_StopPlaytimeTracking_AsyncFunction">();
	}
	static class USIK_StopPlaytimeTracking_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_StopPlaytimeTracking_AsyncFunction>();
	}
};
static_assert(alignof(USIK_StopPlaytimeTracking_AsyncFunction) == 0x000008, "Wrong alignment on USIK_StopPlaytimeTracking_AsyncFunction");
static_assert(sizeof(USIK_StopPlaytimeTracking_AsyncFunction) == 0x000098, "Wrong size on USIK_StopPlaytimeTracking_AsyncFunction");
static_assert(offsetof(USIK_StopPlaytimeTracking_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_StopPlaytimeTracking_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_StopPlaytimeTracking_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_StopPlaytimeTracking_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SubmitItemUpdate_AsyncFunction
// 0x0068 (0x0098 - 0x0030)
class USIK_SubmitItemUpdate_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, bool bUserNeedsToAcceptWorkshopLegalAgreement)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, bool bUserNeedsToAcceptWorkshopLegalAgreement)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_SubmitItemUpdate_AsyncFunction* SubmitItemUpdate(const struct FSIK_UGCUpdateHandle& UgcUpdateHandle, const class FString& ChangeNote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SubmitItemUpdate_AsyncFunction">();
	}
	static class USIK_SubmitItemUpdate_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SubmitItemUpdate_AsyncFunction>();
	}
};
static_assert(alignof(USIK_SubmitItemUpdate_AsyncFunction) == 0x000008, "Wrong alignment on USIK_SubmitItemUpdate_AsyncFunction");
static_assert(sizeof(USIK_SubmitItemUpdate_AsyncFunction) == 0x000098, "Wrong size on USIK_SubmitItemUpdate_AsyncFunction");
static_assert(offsetof(USIK_SubmitItemUpdate_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_SubmitItemUpdate_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_SubmitItemUpdate_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_SubmitItemUpdate_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_SubscribeItem_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_SubscribeItem_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_SubscribeItem_AsyncFunction* SubscribeItem(const struct FSIK_PublishedFileId& PublishedFileId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_SubscribeItem_AsyncFunction">();
	}
	static class USIK_SubscribeItem_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_SubscribeItem_AsyncFunction>();
	}
};
static_assert(alignof(USIK_SubscribeItem_AsyncFunction) == 0x000008, "Wrong alignment on USIK_SubscribeItem_AsyncFunction");
static_assert(sizeof(USIK_SubscribeItem_AsyncFunction) == 0x000088, "Wrong size on USIK_SubscribeItem_AsyncFunction");
static_assert(offsetof(USIK_SubscribeItem_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_SubscribeItem_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_SubscribeItem_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_SubscribeItem_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_TimelineLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_TimelineLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearTimelineStateDescription(float flTimeDelta);
	static void SetTimelineStateDescription(const class FString& pchDescription, float flTimeDelta);

	void AddTimelineEvent(const class FString& pchIcon, const class FString& pchTitle, const class FString& pchDescription, int32 unPriority, float flStartOffsetSeconds, float flDurationSecondsm, ESIK_TimelineEventClipPriority ePossibleClip);
	void SetTimelineGameMode(ESIK_TimelineGameMode eMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_TimelineLibrary">();
	}
	static class USIK_TimelineLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_TimelineLibrary>();
	}
};
static_assert(alignof(USIK_TimelineLibrary) == 0x000008, "Wrong alignment on USIK_TimelineLibrary");
static_assert(sizeof(USIK_TimelineLibrary) == 0x000028, "Wrong size on USIK_TimelineLibrary");

// Class SteamIntegrationKit.SIK_UGCLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_UGCLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AddContentDescriptor(const struct FSIK_UGCUpdateHandle& UpdateHandle, ESIK_UGCContentDescriptorID ContentDescriptor);
	static bool AddExcludedTag(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& TagName);
	static bool AddItemKeyValueTag(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Key, const class FString& Value);
	static bool AddItemPreviewFile(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& PreviewFile, ESIK_ItemPreviewType FileType);
	static bool AddItemPreviewVideo(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& VideoID);
	static bool AddRequiredKeyValueTag(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Key, const class FString& Value);
	static bool AddRequiredTag(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& TagName);
	static bool AddRequiredTagGroup(const struct FSIK_UGCQueryHandle& QueryHandle, const TArray<class FString>& TagNames);
	static bool BInitWorkshopForGameServer(const struct FSIK_DepotId& DepotID, const class FString& Folder);
	static struct FSIK_UGCQueryHandle CreateQueryAllUGCRequest(ESIK_UGCQuery QueryType, ESIK_UGCMatchingUGCType MatchingType, const struct FSIK_AppId& CreatorAppID, const struct FSIK_AppId& ConsumerAppID, int32 Page);
	static struct FSIK_UGCQueryHandle CreateQueryUGCDetailsRequest(const TArray<struct FSIK_PublishedFileId>& PublishedFileIDs);
	static struct FSIK_UGCQueryHandle CreateQueryUserUGCRequest(const struct FSIK_AccountID& AccountId, ESIK_UserUGCList ListType, ESIK_UGCMatchingUGCType MatchingType, ESIK_UserUGCListSortOrder SortOrder, const struct FSIK_AppId& CreatorAppID, const struct FSIK_AppId& ConsumerAppID, int32 Page);
	static bool DownloadItem(const struct FSIK_PublishedFileId& PublishedFileId, bool bHighPriority);
	static bool GetAppDependencies(const struct FSIK_PublishedFileId& PublishedFileId);
	static bool GetItemDownloadInfo(const struct FSIK_PublishedFileId& PublishedFileId, int64* BytesDownloaded, int64* BytesTotal);
	static bool GetItemInstallInfo(const struct FSIK_PublishedFileId& PublishedFileId, int64* SizeOnDisk, class FString* Folder, int32* Timestamp);
	static int32 GetItemState(const struct FSIK_PublishedFileId& PublishedFileId);
	static ESIK_ItemUpdateStatus GetItemUpdateProgress(const struct FSIK_UGCUpdateHandle& UpdateHandle, int64* BytesProcessed, int64* BytesTotal);
	static int32 GetNumSubscribedItems();
	static bool GetQueryUGCAdditionalPreview(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, int32 PreviewIndex, class FString* PreviewURL, class FString* OriginalFileName, ESIK_ItemPreviewType* FileType);
	static bool GetQueryUGCChildren(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, TArray<struct FSIK_PublishedFileId>* PublishedFileIDs, int32 MaxEntries);
	static int32 GetQueryUGCContentDescriptors(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, TArray<ESIK_UGCContentDescriptorID>* ContentDescriptors, int32 MaxEntries);
	static bool GetQueryUGCKeyValueTag(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, const class FString& Key, class FString* Value);
	static bool GetQueryUGCMetadata(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, class FString* MetaData);
	static int32 GetQueryUGCNumAdditionalPreviews(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0);
	static int32 GetQueryUGCNumKeyValueTags(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0);
	static int32 GetQueryUGCNumTags(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0);
	static bool GetQueryUGCPreviewURL(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, class FString* URL);
	static bool GetQueryUGCResult(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, struct FSIK_SteamUGCDetails* Details);
	static bool GetQueryUGCStatistic(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, ESIK_ItemStatistic StatType, int64* Value);
	static bool GetQueryUGCTag(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, int32 TagIndex, class FString* TagName);
	static bool GetQueryUGCTagDisplayName(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Index_0, int32 TagIndex, class FString* TagName);
	static int32 GetSubscribedItems(TArray<struct FSIK_PublishedFileId>* PublishedFileIDs, int32 MaxEntries);
	static bool ReleaseQueryUGCRequest(const struct FSIK_UGCQueryHandle& QueryHandle);
	static bool RemoveContentDescriptor(const struct FSIK_UGCUpdateHandle& UpdateHandle, ESIK_UGCContentDescriptorID ContentDescriptor);
	static bool RemoveItemKeyValueTags(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Key);
	static bool RemoveItemPreview(const struct FSIK_UGCUpdateHandle& UpdateHandle, int32 PreviewIndex);
	static bool SetAllowCachedResponse(const struct FSIK_UGCQueryHandle& QueryHandle, int32 MaxAgeSeconds);
	static bool SetCloudFileNameFilter(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& MatchCloudFileName);
	static bool SetItemContent(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Content);
	static bool SetItemDescription(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Description);
	static bool SetItemMetadata(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& MetaData);
	static bool SetItemPreview(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& PreviewFile);
	static bool SetItemTags(const struct FSIK_UGCUpdateHandle& UpdateHandle, const TArray<class FString>& Tags);
	static bool SetItemTitle(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Title);
	static bool SetItemUpdateLanguage(const struct FSIK_UGCUpdateHandle& UpdateHandle, const class FString& Language);
	static bool SetItemVisibility(const struct FSIK_UGCUpdateHandle& UpdateHandle, ESIK_RemoteStoragePublishedFileVisibility Visibility);
	static bool SetLanguage(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& Language);
	static bool SetMatchAnyTag(const struct FSIK_UGCQueryHandle& QueryHandle, bool bMatchAnyTag);
	static bool SetRankedByTrendDays(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Days);
	static bool SetReturnAdditionalPreviews(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnAdditionalPreviews);
	static bool SetReturnChildren(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnChildren);
	static bool SetReturnKeyValueTags(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnKeyValueTags);
	static bool SetReturnLongDescription(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnLongDescription);
	static bool SetReturnMetadata(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnMetadata);
	static bool SetReturnOnlyIDs(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnOnlyIDs);
	static bool SetReturnPlaytimeStats(const struct FSIK_UGCQueryHandle& QueryHandle, int32 Days);
	static bool SetReturnTotalOnly(const struct FSIK_UGCQueryHandle& QueryHandle, bool bReturnTotalOnly);
	static bool SetSearchText(const struct FSIK_UGCQueryHandle& QueryHandle, const class FString& SearchText);
	static bool SetUserItemVote(const struct FSIK_PublishedFileId& PublishedFileId, bool bVoteUp);
	static bool ShowWorkshopEULA();
	static struct FSIK_UGCUpdateHandle StartItemUpdate(const struct FSIK_AppId& AppID, const struct FSIK_PublishedFileId& PublishedFileId);
	static void SuspendDownloads(bool bSuspend);
	static bool UpdateItemPreviewFile(const struct FSIK_UGCUpdateHandle& UpdateHandle, int32 PreviewIndex, const class FString& PreviewFile);
	static bool UpdateItemPreviewVideo(const struct FSIK_UGCUpdateHandle& UpdateHandle, int32 PreviewIndex, const class FString& VideoID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UGCLibrary">();
	}
	static class USIK_UGCLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UGCLibrary>();
	}
};
static_assert(alignof(USIK_UGCLibrary) == 0x000008, "Wrong alignment on USIK_UGCLibrary");
static_assert(sizeof(USIK_UGCLibrary) == 0x000028, "Wrong size on USIK_UGCLibrary");

// Class SteamIntegrationKit.SIK_UGCSubsystem
// 0x0360 (0x0390 - 0x0030)
class USIK_UGCSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnAddAppDependencyResult; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_PublishedFileId& ChildPublishedFileID)> OnAddUGCDependencyResult; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool UserNeedsToAcceptWorkshopLegalAgreement)> OnCreateItemResult; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnDownloadItemResult; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const TArray<struct FSIK_AppId>& AppDependencies, int32 NumAppDependencies, int32 TotalNumAppDependencies)> OnGetAppDependenciesResult; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId)> OnDeleteItemResult; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool VotedUp, bool VotedDown, bool VotedSkipper)> OnGetUserItemVoteResult; // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnItemInstalled; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_AppId& AppID)> OnRemoveAppDependencyResult; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, const struct FSIK_PublishedFileId& ChildPublishedFileID)> OnRemoveUGCDependencyResult; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool VotedUp)> OnSetUserItemVoteResult; // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnStartPlaytimeTrackingResult;                // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_UGCQueryHandle& UGCQueryHandle, int32 NumResultsReturned, int32 TotalMatchingResults, bool bCachedData)> OnSteamUGCQueryCompleted; // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result)> OnStopPlaytimeTrackingResult;                 // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId, bool bUserNeedsToAcceptWorkshopLegalAgreement)> OnSubmitItemUpdateResult; // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_PublishedFileId& PublishedFileId, bool bWasAddRequest, ESIK_Result Result)> OnUserFavoriteItemsListChanged; // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_AppId& AppID)> OnUserSubscribedItemsListChanged; // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_AppId& AppID, int32 Version, int32 ActionTime, bool bAccepted, bool bNeedsToAccept)> OnWorkshopEULAStatus; // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x240];                                    // 0x0150(0x0240)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UGCSubsystem">();
	}
	static class USIK_UGCSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UGCSubsystem>();
	}
};
static_assert(alignof(USIK_UGCSubsystem) == 0x000008, "Wrong alignment on USIK_UGCSubsystem");
static_assert(sizeof(USIK_UGCSubsystem) == 0x000390, "Wrong size on USIK_UGCSubsystem");
static_assert(offsetof(USIK_UGCSubsystem, OnAddAppDependencyResult) == 0x000030, "Member 'USIK_UGCSubsystem::OnAddAppDependencyResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnAddUGCDependencyResult) == 0x000040, "Member 'USIK_UGCSubsystem::OnAddUGCDependencyResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnCreateItemResult) == 0x000050, "Member 'USIK_UGCSubsystem::OnCreateItemResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnDownloadItemResult) == 0x000060, "Member 'USIK_UGCSubsystem::OnDownloadItemResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnGetAppDependenciesResult) == 0x000070, "Member 'USIK_UGCSubsystem::OnGetAppDependenciesResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnDeleteItemResult) == 0x000080, "Member 'USIK_UGCSubsystem::OnDeleteItemResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnGetUserItemVoteResult) == 0x000090, "Member 'USIK_UGCSubsystem::OnGetUserItemVoteResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnItemInstalled) == 0x0000A0, "Member 'USIK_UGCSubsystem::OnItemInstalled' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnRemoveAppDependencyResult) == 0x0000B0, "Member 'USIK_UGCSubsystem::OnRemoveAppDependencyResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnRemoveUGCDependencyResult) == 0x0000C0, "Member 'USIK_UGCSubsystem::OnRemoveUGCDependencyResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnSetUserItemVoteResult) == 0x0000D0, "Member 'USIK_UGCSubsystem::OnSetUserItemVoteResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnStartPlaytimeTrackingResult) == 0x0000E0, "Member 'USIK_UGCSubsystem::OnStartPlaytimeTrackingResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnSteamUGCQueryCompleted) == 0x0000F0, "Member 'USIK_UGCSubsystem::OnSteamUGCQueryCompleted' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnStopPlaytimeTrackingResult) == 0x000100, "Member 'USIK_UGCSubsystem::OnStopPlaytimeTrackingResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnSubmitItemUpdateResult) == 0x000110, "Member 'USIK_UGCSubsystem::OnSubmitItemUpdateResult' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnUserFavoriteItemsListChanged) == 0x000120, "Member 'USIK_UGCSubsystem::OnUserFavoriteItemsListChanged' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnUserSubscribedItemsListChanged) == 0x000130, "Member 'USIK_UGCSubsystem::OnUserSubscribedItemsListChanged' has a wrong offset!");
static_assert(offsetof(USIK_UGCSubsystem, OnWorkshopEULAStatus) == 0x000140, "Member 'USIK_UGCSubsystem::OnWorkshopEULAStatus' has a wrong offset!");

// Class SteamIntegrationKit.SIK_UnsubscribeItem_AsyncFunction
// 0x0058 (0x0088 - 0x0030)
class USIK_UnsubscribeItem_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, const struct FSIK_PublishedFileId& PublishedFileId)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x38];                                      // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_UnsubscribeItem_AsyncFunction* UnsubscribeItem(const struct FSIK_PublishedFileId& PublishedFileId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UnsubscribeItem_AsyncFunction">();
	}
	static class USIK_UnsubscribeItem_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UnsubscribeItem_AsyncFunction>();
	}
};
static_assert(alignof(USIK_UnsubscribeItem_AsyncFunction) == 0x000008, "Wrong alignment on USIK_UnsubscribeItem_AsyncFunction");
static_assert(sizeof(USIK_UnsubscribeItem_AsyncFunction) == 0x000088, "Wrong size on USIK_UnsubscribeItem_AsyncFunction");
static_assert(offsetof(USIK_UnsubscribeItem_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_UnsubscribeItem_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_UnsubscribeItem_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_UnsubscribeItem_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_UploadLeaderboardScore_AsyncFunction
// 0x0060 (0x0090 - 0x0030)
class USIK_UploadLeaderboardScore_AsyncFunction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_LeaderboardScoreUploaded& LeaderboardScoreUploaded)> OnSuccess; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_LeaderboardScoreUploaded& LeaderboardScoreUploaded)> OnFailure; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_UploadLeaderboardScore_AsyncFunction* UploadLeaderboardScore(int32 LeaderboardID, ESIK_LeaderboardUploadScoreMethod UploadScoreMethod, int32 Score);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UploadLeaderboardScore_AsyncFunction">();
	}
	static class USIK_UploadLeaderboardScore_AsyncFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UploadLeaderboardScore_AsyncFunction>();
	}
};
static_assert(alignof(USIK_UploadLeaderboardScore_AsyncFunction) == 0x000008, "Wrong alignment on USIK_UploadLeaderboardScore_AsyncFunction");
static_assert(sizeof(USIK_UploadLeaderboardScore_AsyncFunction) == 0x000090, "Wrong size on USIK_UploadLeaderboardScore_AsyncFunction");
static_assert(offsetof(USIK_UploadLeaderboardScore_AsyncFunction, OnSuccess) == 0x000030, "Member 'USIK_UploadLeaderboardScore_AsyncFunction::OnSuccess' has a wrong offset!");
static_assert(offsetof(USIK_UploadLeaderboardScore_AsyncFunction, OnFailure) == 0x000040, "Member 'USIK_UploadLeaderboardScore_AsyncFunction::OnFailure' has a wrong offset!");

// Class SteamIntegrationKit.SIK_UserLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_UserLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AdvertiseGame(const struct FSIK_SteamId& GameServerId, const class FString& GameServerIP, int32 GameServerPort);
	static ESIK_BeginAuthSessionResult BeginAuthSession(const TArray<uint8>& Ticket, const struct FSIK_SteamId& EntitySteamId);
	static void CancelAuthTicket(int32 AuthTicket);
	static ESIK_VoiceResult DecompressVoice(const TArray<uint8>& Compressed, int32 DesiredSampleRate, TArray<uint8>* Uncompressed, int32* BytesWritten);
	static void EndAuthSession(const struct FSIK_SteamId& SteamID);
	static int32 GetAuthSessionTicket(TArray<uint8>* Ticket, const struct FSIK_SteamNetworkingIdentity& Identity);
	static int32 GetAuthTicketForWebApi(const class FString& Identity);
	static ESIK_VoiceResult GetAvailableVoice(int32* Compressed, int32* Uncompressed, int32 DesiredSampleRate);
	static bool GetEncryptedAppTicket(TArray<uint8>* Ticket);
	static int32 GetGameBadgeLevel(int32 Series, bool Foil);
	static int32 GetPlayerSteamLevel();
	static struct FSIK_SteamId GetSteamID();
	static struct FSIK_SteamId GetSteamIdPure();
	static ESIK_VoiceResult GetVoice(bool bWantCompressed, TArray<uint8>* DestBuffer, int32* BytesWritten);
	static int32 GetVoiceOptimalSampleRate();
	static bool IsBehindNAT();
	static bool IsPhoneIdentifying();
	static bool IsPhoneRequiringVerification();
	static bool IsPhoneVerified();
	static bool IsTwoFactorEnabled();
	static bool LoggedOn();
	static bool LoggedOnPure();
	static void StartVoiceRecording();
	static void StopVoiceRecording();
	static bool UserHasLicenseForApp(const struct FSIK_SteamId& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UserLibrary">();
	}
	static class USIK_UserLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UserLibrary>();
	}
};
static_assert(alignof(USIK_UserLibrary) == 0x000008, "Wrong alignment on USIK_UserLibrary");
static_assert(sizeof(USIK_UserLibrary) == 0x000028, "Wrong size on USIK_UserLibrary");

// Class SteamIntegrationKit.SIK_UserStatsLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_UserStatsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CacheCurrentStats();
	static bool ClearAchievement(const class FString& AchievementName);
	static bool GetAchievement(const class FString& AchievementName);
	static bool GetAchievementAchievedPercent(const class FString& AchievementName, float* Percent);
	static void GetAchievementAndUnlockTime(const class FString& AchievementName, bool* bAchieved, struct FDateTime* UnlockTime);
	static class FString GetAchievementDisplayAttribute(const class FString& AchievementName, const class FString& Key);
	static void GetAchievementIcon(const class FString& AchievementName, class UTexture2D** Icon);
	static class FString GetAchievementName(int32 AchievementIndex);
	static bool GetGlobalStatFloat(const class FString& StatName, float* Data);
	static int32 GetGlobalStatHistoryFloat(const class FString& StatName, TArray<float>* Data);
	static int32 GetGlobalStatHistoryInt(const class FString& StatName, TArray<int32>* Data);
	static bool GetGlobalStatInt(const class FString& StatName, int64* Data);
	static ESIK_LeaderboardDisplayType GetLeaderboardDisplayType(int32 LeaderboardID);
	static int32 GetLeaderboardEntryCount(int32 LeaderboardID);
	static class FString GetLeaderboardName(int32 LeaderboardID);
	static ESIK_LeaderboardSortMethod GetLeaderboardSortMethod(int32 LeaderboardID);
	static int32 GetMostAchievedAchievementInfo(class FString* AchievementName, float* Percent, bool* bIsAchieved);
	static int32 GetNextMostAchievedAchievementInfo(int32 IteratorPrevious, class FString* AchievementName, float* Percent, bool* bIsAchieved);
	static int32 GetNumOfAchievements();
	static bool GetStatFloat(const class FString& StatName, float* Value);
	static bool GetStatInt(const class FString& StatName, int32* Value);
	static bool GetUserAchievement(const struct FSIK_SteamId& SteamID, const class FString& AchievementName, bool* bAchieved);
	static bool GetUserAchievementAndUnlockTime(const struct FSIK_SteamId& SteamID, const class FString& AchievementName, bool* bAchieved, struct FDateTime* UnlockTime);
	static bool IndicateAchievementProgress(const class FString& AchievementName, int32 CurProgress, int32 MaxProgress);
	static bool RequestCurrentStats();
	static bool ResetAllStats(bool AchievementsToo);
	static bool SetAchievement(const class FString& AchievementName);
	static bool SetStatFloat(const class FString& StatName, float Value);
	static bool SetStatInt(const class FString& StatName, int32 Value);
	static bool StoreStats();
	static bool UpdateAvgRateStat(const class FString& StatName, float Value, float Rate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UserStatsLibrary">();
	}
	static class USIK_UserStatsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UserStatsLibrary>();
	}
};
static_assert(alignof(USIK_UserStatsLibrary) == 0x000008, "Wrong alignment on USIK_UserStatsLibrary");
static_assert(sizeof(USIK_UserStatsLibrary) == 0x000028, "Wrong size on USIK_UserStatsLibrary");

// Class SteamIntegrationKit.SIK_UserStatsSubsystem
// 0x0210 (0x0240 - 0x0030)
class USIK_UserStatsSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(ESIK_Result Result, int64 GameID)> OnGlobalAchievementPercentagesReady; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESIK_Result Result, int64 GameID)> OnGlobalStatsReceived;          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamLeaderboard& Leaderboard, bool bLeaderboardFound)> OnLeaderboardFindResult; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamLeaderboard& Leaderboard, const struct FSIK_SteamLeaderboardEntries& Entries, int32 EntryCount)> OnLeaderboardScoresDownloaded; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bSuccess, const struct FSIK_SteamLeaderboard& Leaderboard, int32 Score, bool bScoreChanged, int32 GlobalRank, int32 PreviousGlobalRank)> OnLeaderboardScoreUploaded; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 NumberOfPlayers)> OnNumberOfCurrentPlayers;                  // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 GameID, const class FString& AchievementName, bool bIconFound, int32 IconHandle)> OnUserAchievementIconFetched; // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 GameID, bool bGroupAchievement, const class FString& AchievementName, int32 CurProgress, int32 MaxProgress)> OnUserAchievementStored; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 GameID, ESIK_Result Result, const struct FSIK_SteamId& steamIDUser)> OnUserStatsReceived; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int64 GameID, ESIK_Result Result)> OnUserStatsStored;              // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& steamIDUser)> OnUserStatsUnloaded;      // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x160];                                     // 0x00E0(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UserStatsSubsystem">();
	}
	static class USIK_UserStatsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UserStatsSubsystem>();
	}
};
static_assert(alignof(USIK_UserStatsSubsystem) == 0x000008, "Wrong alignment on USIK_UserStatsSubsystem");
static_assert(sizeof(USIK_UserStatsSubsystem) == 0x000240, "Wrong size on USIK_UserStatsSubsystem");
static_assert(offsetof(USIK_UserStatsSubsystem, OnGlobalAchievementPercentagesReady) == 0x000030, "Member 'USIK_UserStatsSubsystem::OnGlobalAchievementPercentagesReady' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnGlobalStatsReceived) == 0x000040, "Member 'USIK_UserStatsSubsystem::OnGlobalStatsReceived' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnLeaderboardFindResult) == 0x000050, "Member 'USIK_UserStatsSubsystem::OnLeaderboardFindResult' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnLeaderboardScoresDownloaded) == 0x000060, "Member 'USIK_UserStatsSubsystem::OnLeaderboardScoresDownloaded' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnLeaderboardScoreUploaded) == 0x000070, "Member 'USIK_UserStatsSubsystem::OnLeaderboardScoreUploaded' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnNumberOfCurrentPlayers) == 0x000080, "Member 'USIK_UserStatsSubsystem::OnNumberOfCurrentPlayers' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnUserAchievementIconFetched) == 0x000090, "Member 'USIK_UserStatsSubsystem::OnUserAchievementIconFetched' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnUserAchievementStored) == 0x0000A0, "Member 'USIK_UserStatsSubsystem::OnUserAchievementStored' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnUserStatsReceived) == 0x0000B0, "Member 'USIK_UserStatsSubsystem::OnUserStatsReceived' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnUserStatsStored) == 0x0000C0, "Member 'USIK_UserStatsSubsystem::OnUserStatsStored' has a wrong offset!");
static_assert(offsetof(USIK_UserStatsSubsystem, OnUserStatsUnloaded) == 0x0000D0, "Member 'USIK_UserStatsSubsystem::OnUserStatsUnloaded' has a wrong offset!");

// Class SteamIntegrationKit.SIK_UserSubsystem
// 0x0260 (0x0290 - 0x0030)
class USIK_UserSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(int32 AppID, const class FString& GameServerIP, int32 GameServerPort, int32 Secure, int32 Reason)> OnClientGameServerDenyCallback; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AppID)>   OnDurationControlCallback;                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Result)>  OnEncryptedAppTicketResponseCallback;              // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& URL)> OnGameWebCallbackCallback;              // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Result)>  OnGetAuthSessionTicketResponseCallback;            // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Result, int32 AuthTicket, const TArray<uint8>& TicketData)> OnGetTicketForWebApiResponseCallback; // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 FailureType)> OnIPCFailureCallback;                          // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLicensesUpdatedCallback;                         // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AppID, int32 OrderID, bool Authorized)> OnMicroTxnAuthorizationResponseCallback; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Result)>  OnSteamServerConnectFailureCallback;               // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSteamServersConnectedCallback;                   // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSteamServersDisconnectedCallback;                // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& URL)> OnStoreAuthURLResponseCallback;         // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_SteamId& SteamID, int32 AuthSessionResponse, const struct FSIK_SteamId& OwnerSteamID)> OnValidateAuthTicketResponseCallback; // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x180];                                    // 0x0110(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UserSubsystem">();
	}
	static class USIK_UserSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UserSubsystem>();
	}
};
static_assert(alignof(USIK_UserSubsystem) == 0x000008, "Wrong alignment on USIK_UserSubsystem");
static_assert(sizeof(USIK_UserSubsystem) == 0x000290, "Wrong size on USIK_UserSubsystem");
static_assert(offsetof(USIK_UserSubsystem, OnClientGameServerDenyCallback) == 0x000030, "Member 'USIK_UserSubsystem::OnClientGameServerDenyCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnDurationControlCallback) == 0x000040, "Member 'USIK_UserSubsystem::OnDurationControlCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnEncryptedAppTicketResponseCallback) == 0x000050, "Member 'USIK_UserSubsystem::OnEncryptedAppTicketResponseCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnGameWebCallbackCallback) == 0x000060, "Member 'USIK_UserSubsystem::OnGameWebCallbackCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnGetAuthSessionTicketResponseCallback) == 0x000070, "Member 'USIK_UserSubsystem::OnGetAuthSessionTicketResponseCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnGetTicketForWebApiResponseCallback) == 0x000080, "Member 'USIK_UserSubsystem::OnGetTicketForWebApiResponseCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnIPCFailureCallback) == 0x000090, "Member 'USIK_UserSubsystem::OnIPCFailureCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnLicensesUpdatedCallback) == 0x0000A0, "Member 'USIK_UserSubsystem::OnLicensesUpdatedCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnMicroTxnAuthorizationResponseCallback) == 0x0000B0, "Member 'USIK_UserSubsystem::OnMicroTxnAuthorizationResponseCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnSteamServerConnectFailureCallback) == 0x0000C0, "Member 'USIK_UserSubsystem::OnSteamServerConnectFailureCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnSteamServersConnectedCallback) == 0x0000D0, "Member 'USIK_UserSubsystem::OnSteamServersConnectedCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnSteamServersDisconnectedCallback) == 0x0000E0, "Member 'USIK_UserSubsystem::OnSteamServersDisconnectedCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnStoreAuthURLResponseCallback) == 0x0000F0, "Member 'USIK_UserSubsystem::OnStoreAuthURLResponseCallback' has a wrong offset!");
static_assert(offsetof(USIK_UserSubsystem, OnValidateAuthTicketResponseCallback) == 0x000100, "Member 'USIK_UserSubsystem::OnValidateAuthTicketResponseCallback' has a wrong offset!");

// Class SteamIntegrationKit.SIK_UtilsLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_UtilsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FSIK_AppId GetAppID();
	static int32 GetCurrentBatteryPower();
	static class FString GetEnteredGamepadTextInput();
	static int32 GetEnteredGamepadTextLength();
	static bool GetImageRGBA(int32 Image, TArray<struct FColor>* OutData, int32* OutWidth, int32* OutHeight);
	static class FString GetIPCountry();
	static int32 GetSecondsSinceAppActive();
	static int32 GetSecondsSinceComputerActive();
	static int32 GetServerRealTime();
	static class FString GetSteamUILanguage();
	static bool InitFilterText();
	static bool IsOverlayEnabled();
	static bool IsSteamChinaLauncher();
	static bool IsSteamInBigPictureMode();
	static bool IsSteamRunningInVR();
	static bool IsSteamRunningOnSteamDeck();
	static bool IsVRHeadsetStreamingEnabled();
	static bool OverlayNeedsPresent();
	static void SetGameLauncherMode(bool bLauncherMode);
	static void SetOverlayNotificationInset(int32 HorizontalInset, int32 VerticalInset);
	static void SetOverlayNotificationPosition(ESIK_NotificationPosition NotificationPosition);
	static void SetVRHeadsetStreamingEnabled(bool bEnabled);
	static bool ShowFloatingGamepadTextInput(ESIK_EFloatingGamepadTextInputMode KeyboardMode, int32 TextFieldXPosition, int32 TextFieldYPosition, int32 TextFieldWidth, int32 TextFieldHeight);
	static bool ShowGamepadTextInput(ESIK_EGamepadTextInputMode InputMode, ESIK_EGamepadTextInputLineMode LineInputMode, const class FString& Description, int32 CharMax, const class FString& ExistingText);
	static void StartVrDashboard();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UtilsLibrary">();
	}
	static class USIK_UtilsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UtilsLibrary>();
	}
};
static_assert(alignof(USIK_UtilsLibrary) == 0x000008, "Wrong alignment on USIK_UtilsLibrary");
static_assert(sizeof(USIK_UtilsLibrary) == 0x000028, "Wrong size on USIK_UtilsLibrary");

// Class SteamIntegrationKit.SIK_UtilsSubsystem
// 0x00F0 (0x0120 - 0x0030)
class USIK_UtilsSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(bool bSubmitted, int32 nSubmittedText)> OnGamepadTextInputDismissed; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnIPCountry;                                       // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 nMinutesBatteryLeft)> OnLowBatteryPower;                     // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAppResumingFromSuspend;                          // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSteamShutdown;                                   // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0xA0];                                      // 0x0080(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_UtilsSubsystem">();
	}
	static class USIK_UtilsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_UtilsSubsystem>();
	}
};
static_assert(alignof(USIK_UtilsSubsystem) == 0x000008, "Wrong alignment on USIK_UtilsSubsystem");
static_assert(sizeof(USIK_UtilsSubsystem) == 0x000120, "Wrong size on USIK_UtilsSubsystem");
static_assert(offsetof(USIK_UtilsSubsystem, OnGamepadTextInputDismissed) == 0x000030, "Member 'USIK_UtilsSubsystem::OnGamepadTextInputDismissed' has a wrong offset!");
static_assert(offsetof(USIK_UtilsSubsystem, OnIPCountry) == 0x000040, "Member 'USIK_UtilsSubsystem::OnIPCountry' has a wrong offset!");
static_assert(offsetof(USIK_UtilsSubsystem, OnLowBatteryPower) == 0x000050, "Member 'USIK_UtilsSubsystem::OnLowBatteryPower' has a wrong offset!");
static_assert(offsetof(USIK_UtilsSubsystem, OnAppResumingFromSuspend) == 0x000060, "Member 'USIK_UtilsSubsystem::OnAppResumingFromSuspend' has a wrong offset!");
static_assert(offsetof(USIK_UtilsSubsystem, OnSteamShutdown) == 0x000070, "Member 'USIK_UtilsSubsystem::OnSteamShutdown' has a wrong offset!");

// Class SteamIntegrationKit.SIK_VideoLibrary
// 0x0000 (0x0028 - 0x0028)
class USIK_VideoLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetOPFSettings(const struct FSIK_AppId& AppID);
	static bool GetOPFStringForApp(const struct FSIK_AppId& AppID, class FString* OutString);
	static void GetVideoURL(const struct FSIK_AppId& AppID);
	static bool IsBroadcasting(int32* OutNumViewers);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_VideoLibrary">();
	}
	static class USIK_VideoLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_VideoLibrary>();
	}
};
static_assert(alignof(USIK_VideoLibrary) == 0x000008, "Wrong alignment on USIK_VideoLibrary");
static_assert(sizeof(USIK_VideoLibrary) == 0x000028, "Wrong size on USIK_VideoLibrary");

// Class SteamIntegrationKit.SIK_VideoSubsystem
// 0x0060 (0x0090 - 0x0030)
class USIK_VideoSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const struct FSIK_AppId& AppID, ESIK_Result Result)> OnGetOPFSettingsResult; // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSIK_AppId& AppID, ESIK_Result Result, const class FString& URL)> OnGetVideoURLResult; // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_VideoSubsystem">();
	}
	static class USIK_VideoSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_VideoSubsystem>();
	}
};
static_assert(alignof(USIK_VideoSubsystem) == 0x000008, "Wrong alignment on USIK_VideoSubsystem");
static_assert(sizeof(USIK_VideoSubsystem) == 0x000090, "Wrong size on USIK_VideoSubsystem");
static_assert(offsetof(USIK_VideoSubsystem, OnGetOPFSettingsResult) == 0x000030, "Member 'USIK_VideoSubsystem::OnGetOPFSettingsResult' has a wrong offset!");
static_assert(offsetof(USIK_VideoSubsystem, OnGetVideoURLResult) == 0x000040, "Member 'USIK_VideoSubsystem::OnGetVideoURLResult' has a wrong offset!");

// Class SteamIntegrationKit.SIK_WebApi_ActionBase
// 0x0068 (0x0098 - 0x0030)
class USIK_WebApi_ActionBase : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool bSuccess, const class FString& Response)> OnComplete;         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_WebApi_ActionBase">();
	}
	static class USIK_WebApi_ActionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_WebApi_ActionBase>();
	}
};
static_assert(alignof(USIK_WebApi_ActionBase) == 0x000008, "Wrong alignment on USIK_WebApi_ActionBase");
static_assert(sizeof(USIK_WebApi_ActionBase) == 0x000098, "Wrong size on USIK_WebApi_ActionBase");
static_assert(offsetof(USIK_WebApi_ActionBase, OnComplete) == 0x000030, "Member 'USIK_WebApi_ActionBase::OnComplete' has a wrong offset!");

// Class SteamIntegrationKit.SIK_WebApi_AuthenticateUser
// 0x0030 (0x00C8 - 0x0098)
class USIK_WebApi_AuthenticateUser final : public USIK_WebApi_ActionBase
{
public:
	uint8                                         Pad_98[0x30];                                      // 0x0098(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_WebApi_AuthenticateUser* AuthenticateUser(const class FString& SteamID, const class FString& SessionKey, const class FString& EncryptedLoginKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_WebApi_AuthenticateUser">();
	}
	static class USIK_WebApi_AuthenticateUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_WebApi_AuthenticateUser>();
	}
};
static_assert(alignof(USIK_WebApi_AuthenticateUser) == 0x000008, "Wrong alignment on USIK_WebApi_AuthenticateUser");
static_assert(sizeof(USIK_WebApi_AuthenticateUser) == 0x0000C8, "Wrong size on USIK_WebApi_AuthenticateUser");

// Class SteamIntegrationKit.SIK_WebApi_GetFriendList
// 0x0030 (0x00C8 - 0x0098)
class USIK_WebApi_GetFriendList final : public USIK_WebApi_ActionBase
{
public:
	uint8                                         Pad_98[0x30];                                      // 0x0098(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USIK_WebApi_GetFriendList* GetFriendList(const class FString& Key, const class FString& SteamID, const class FString& Relationship);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_WebApi_GetFriendList">();
	}
	static class USIK_WebApi_GetFriendList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_WebApi_GetFriendList>();
	}
};
static_assert(alignof(USIK_WebApi_GetFriendList) == 0x000008, "Wrong alignment on USIK_WebApi_GetFriendList");
static_assert(sizeof(USIK_WebApi_GetFriendList) == 0x0000C8, "Wrong size on USIK_WebApi_GetFriendList");

// Class SteamIntegrationKit.SIK_WebApi_ReportPlayerCheating
// 0x0000 (0x0098 - 0x0098)
class USIK_WebApi_ReportPlayerCheating final : public USIK_WebApi_ActionBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SIK_WebApi_ReportPlayerCheating">();
	}
	static class USIK_WebApi_ReportPlayerCheating* GetDefaultObj()
	{
		return GetDefaultObjImpl<USIK_WebApi_ReportPlayerCheating>();
	}
};
static_assert(alignof(USIK_WebApi_ReportPlayerCheating) == 0x000008, "Wrong alignment on USIK_WebApi_ReportPlayerCheating");
static_assert(sizeof(USIK_WebApi_ReportPlayerCheating) == 0x000098, "Wrong size on USIK_WebApi_ReportPlayerCheating");

// Class SteamIntegrationKit.SteamWebApi
// 0x0000 (0x0030 - 0x0030)
class USteamWebApi final : public UGameInstanceSubsystem
{
public:
	void AuthenticateUser(const class FString& SteamID, const TArray<uint8>& SessionKey, const TArray<uint8>& EncryptedLoginKey, TDelegate<void(bool bSuccess, const class FString& Response)> OnComplete);
	void AuthenticateUserTicket(const class FString& Key, const class FString& AppID, const class FString& Ticket, const class FString& Identity, TDelegate<void(bool bSuccess, const class FString& Response)> OnComplete);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamWebApi">();
	}
	static class USteamWebApi* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamWebApi>();
	}
};
static_assert(alignof(USteamWebApi) == 0x000008, "Wrong alignment on USteamWebApi");
static_assert(sizeof(USteamWebApi) == 0x000030, "Wrong size on USteamWebApi");

}

