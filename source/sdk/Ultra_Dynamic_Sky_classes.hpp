#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Sky

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UDS_NoiseType_structs.hpp"
#include "UDS_PropertyType_structs.hpp"
#include "UDS_ColorMode_structs.hpp"
#include "UDS_SkyMode_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_FeatureToggle_structs.hpp"
#include "UDS_SkyLightMode_structs.hpp"
#include "UDS_VolRT_Mode_structs.hpp"
#include "UDS_LensFlareType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C
// 0x1218 (0x14B0 - 0x0298)
class AUltra_Dynamic_Sky_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUDS_PlayerOcclusion_C*                 Player_Occlusion;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Cloud_Fog_Post_Process;                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Moon_Icon_Arrow;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Sun_Icon_Arrow;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Sun_Icon;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Moon_Icon;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Overcast_Turbulence;                               // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Lens_Flare;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     Realtime_Capture_Based_Sky_Light;                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Inside_Cloud_Fog;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricAurora;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticCloudsSphere;                                // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Root;                                              // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     CubeMap_Sky_Light;                                 // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     Capture_Based_Sky_Light;                           // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Exposure;                                          // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Moon;                                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Sun;                                               // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Moon_Root;                                         // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Sun_Root;                                          // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ultra_Dynamic_Sky_Sphere;                          // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Sun_Light;                                         // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Custom_Sun_Light_Actor;                            // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sky_MID;                                           // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Speed;                                       // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Wisps_Opacity;                               // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_Settings;                                  // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Sky_Mode;                                          // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_ColorMode                                Color_Mode;                                        // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39A[0x6];                                      // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Coverage;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Fog;                                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Intensity;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Direction;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Phase;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Manually_Position_Moon_Target;                     // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Light_Intensity;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Moon_Mobility;                                     // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Angle;                                        // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Inclination;                                  // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Vertical_Offset;                              // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Orbit_Offset;                                 // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Casts_Shadows;                                // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Scale;                                        // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Phase;                                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Phase_Changes_Over_Time;                      // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dark_Side_Brightness;                              // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Texture_Intensity__Night_;                    // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Manually_Position_Sun_Target;                      // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Light_Intensity;                               // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Sun_Mobility;                                      // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Angle;                                         // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_Time_of_Day;                               // 0x0450(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Contrast;                                          // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Inclination;                                   // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Vertical_Offset;                               // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sun_Casts_Shadows;                                 // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Sun_Light_Color;                                   // 0x0474(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Texture_Intensity__Day_;                      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Light_Color;                                  // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Cloud_Layer_1;                              // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Cloud_Layer_2;                              // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sharpen_Outer_Edge;                                // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Intensity;                                   // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Stars_Color;                                       // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Material_Color;                               // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Sun_Target;                                        // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Radius;                                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sun_Cloud_Shadows_MID;                             // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Cloud_Shadows;                                 // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Shadows_Intensity_When_Sunny;                // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Moon_Light;                                        // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Custom_Moon_Light_Actor;                           // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Speed;                                       // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Moon_Cloud_Shadows_MID;                            // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        New_Moon_Light_Brightness;                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Texture_Rotation;                             // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Custom_Moon_Texture;                               // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Sky_Light;                                         // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              Custom_Sky_Light_Actor;                            // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Height_Fog;                                        // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExponentialHeightFog*                  Custom_Height_Fog_Actor;                           // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyLightMode                             Sky_Light_Mode;                                    // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Night_Filter_Curve;                                // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Glow_Intensity;                               // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Auroras;                                       // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Aurora_Intensity;                                  // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Aurora_Speed;                                      // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Intensity_When_Overcast;             // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Softness_When_Sunny;                 // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Softness_When_Overcast;              // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Tiling_Layer_1;                              // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Tiling_Layer_2;                              // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Horizon;                                    // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          One_cloud_layer;                                   // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Height_Layer_1;                              // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Height_Layer_2;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Swirling_Texture;                         // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Saturation;                                        // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Directional_Balance;                               // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dawn_Time;                                         // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dusk_Time;                                         // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Brightness;                                  // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Softness;                                      // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Volumetric_Scattering_Intensity;               // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Volumetric_Scattering_Intensity;              // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Aurora_Phase;                                      // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Sun_LightComponent;                                // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Moon_LightComponent;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         Height_Fog_Component;                              // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Exposure_Settings;                           // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Exposure_Compensation_Curve;                       // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        Day_Length;                                        // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Length;                                      // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extend_Dawn_and_Dusk;                              // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stationary_Lights;                                 // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Fog_Density;                                  // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy_Density_Contribution;                        // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloudy_Density_Contribution;                       // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Density_Contribution;                         // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Total_Fog_Density;                           // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Stars_Tiling;                                      // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Daytime_Intensity;                           // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Twinkle_Amount;                                    // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Twinkle_Speed;                                     // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Tiling_Stars_Texture;                              // 0x06D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Real_Stars_Texture;                                // 0x06F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        Stars_Phase;                                       // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UTexture2D*                             Custom_Tiling_Stars_Texture;                       // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Custom_Real_Stars_Texture;                         // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Stars_Intensity_Curve;                             // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sky_Light_Intensity;                               // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Sky_Light_Mobility;                                // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_749[0x7];                                      // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sky_Light_Temperature;                             // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Light_Color_Multiplier__Day_;                  // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk_;                                             // 0x0768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Light_Color_Multiplier__Night_;                // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sky_Light_Casts_Shadows;                           // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_789[0x7];                                      // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DFAO_Min_Occlusion;                                // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        DFAO_Exponent;                                     // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureCube>            Flat_Cubemap;                                      // 0x07A0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureCube>            Custom_Cubemap;                                    // 0x07C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FLinearColor                           Tinted_Sky_Light_Lower_Hemisphere_Color;           // 0x07F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Real_Time_Capture;                                 // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_801[0x3];                                      // 0x0801(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Captured_Sky_Light_Lower_Hemisphere_Tint;          // 0x0804(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Recapture_Sky_light_Periodically;                  // 0x0814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815[0x3];                                      // 0x0815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sky_Light_Recapture_Period__Seconds_;              // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lights_Update_Period;                              // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunrise_Event_Offset;                              // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunset_Event_Offset;                               // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Sunset;                                            // 0x0838(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Sunrise;                                           // 0x0848(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             Cloud_Wisps_Texture;                               // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUDS_NoiseType                                Cloud_Noise_Type;                                  // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Custom_Noise_Texture;                              // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Shader_Intensity;                              // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Directional_Lighting_Intensity;                    // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Highlight_Radius;                              // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Opacity;                                     // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Horizon_Density_Multiplier;                        // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Zenith_Density_Multiplier;                         // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Latitude_Gradient_Position;                        // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Latitude_Gradient_Width;                           // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Sun_Density_Multiplier;                     // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Sun_Density_Exponent;                       // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Moon_Density_Multiplier;                    // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Around_Moon_Density_Exponent;                      // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Shine_Intensity_Curve;                             // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Highlight_Intensity_Curve;                     // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Highlight_Radius_Curve;                        // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Shine_Variation;                                   // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Spread_Out_Tick_Behaviors_Over_3_Frames;           // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Only_Fully_Update_Active_Parameters_When_Cloud_Coverage_Changes; // 0x08F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_8F2[0x6];                                      // 0x08F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Directional_Lights_Absent_Brightness;              // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Complex;                     // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EUDS_VolRT_Mode                               Volumetric_Cloud_Rendering_Mode;                   // 0x0908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_909[0x7];                                      // 0x0909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Bottom_Altitude;                                   // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_Height_Scale;                                // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Clouds_Scale;                                 // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SubNoise_Scale;                                    // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        High_Frequency_Noise_Amount;                       // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distort_High_Frequency_Noise;                      // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extinction_Scale_Top;                              // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extinction_Scale_Bottom;                           // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shift_Curve;                                       // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Z_Disturbance;                                     // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minimum_Erosion;                                   // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        View_Sample_CountScale;                            // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_to_Sample_MaxCount;                       // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Sample_Scale;                               // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Tracing_Distance;                           // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reflection_Sample_Count_Scale;                     // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Reflection_Shadow_Sample_Count_Scale;              // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EUDS_NoiseType                                Volumetric_Cloud_Noise_Type;                       // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_999[0x7];                                      // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Volumetric_Custom_Noise_Texture;                   // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Clouds_Mip_Level;                             // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Multiscattering_Intensity;                         // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Multiscattering_Occlusion_Factor;                  // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        SubNoise_Erosion;                                  // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Simplified;                  // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Start_Distance_when_Clear;                     // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_where_Start_Distance_Reaches_Zero;     // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Randomize_Cloud_Formation_on_Run;                  // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E1[0x7];                                      // 0x09E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Macro_Variation;                                   // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Macro_Scale;                                       // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Phase_G;                                           // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Phase_G_2;                                         // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Multiscattering_Eccentricity;                      // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Time_Speed;                                        // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Internal_Time_of_Day;                              // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Weather_BP;                                        // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Clouds_Scale;                           // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Volumetric_Cloud_Color;                            // 0x0A30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Max_Start_Distance;                        // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Static_Clouds_MID;                                 // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_1;                                    // 0x0A50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_2;                                    // 0x0A60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_3;                                    // 0x0A70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Aurora_MID;                             // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Night_Brightness;                         // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Use_Sky_Mode_Scalability_Map;                      // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_A91[0x7];                                      // 0x0A91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EUDS_SkyMode>                     Sky_Mode_Scalability_Map;                          // 0x0A98(0x0050)(Edit, BlueprintVisible, AdvancedDisplay)
	double                                        Sun_Disk_Intensity;                                // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sun_Disk_Color_Curve;                              // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Aurora_Lines;                                      // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Aurora_Intensity_Curve;                            // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Inside_Clouds_Fog_MID;                             // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Max_Distance__Inside_Cloud_Layer_;         // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Tracing_Max_Distance__Outside_Cloud_Layer_;        // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Enable_Fog_Inside_Clouds;                          // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volumetric_Aurora_Sample_Count_Scale;              // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Volumetric_Aurora_Layer_Height;                    // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Aurora_Bottom_Altitude;                 // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Height_Fog_Falloff;                           // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloudy_Height_Fog_Falloff;                         // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy_Height_Fog_Falloff;                          // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inside_Cloud_Fog_Strength;                         // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Inside_Cloud_Fog_Color;                            // 0x0B60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Turbulence_0;                             // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Close_Fade_Distance;                               // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Two_Layers;                                        // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B81[0x7];                                      // 0x0B81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Layer_2_Coverage_Scale;                            // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_2_Extinction_Scale;                          // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Layer_2_Cloud_Scale;                               // 0x0B98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_2_Mip_Offset;                                // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Between_Layers;                           // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Sun_Light_Shaft_Bloom;                      // 0x0BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB9[0x7];                                      // 0x0BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Light_Shaft_Max_Brightness;                    // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Light_Shaft_Bloom_Threshold_Curve;             // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Light_Shaft_Bloom_Scale_Curve;                 // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Light_Shaft_Tint_Color;                        // 0x0BD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Moon_Light_Shaft_Bloom;                     // 0x0BE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE9[0x7];                                      // 0x0BE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Light_Shaft_Max_Brightness;                   // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Light_Shaft_Bloom_Threshold;                  // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Light_Shaft_Bloom_Scale;                      // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Light_Shaft_Tint_Color;                       // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Factor_Absent_Directional_Lights_Brightness;       // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Real_Time_Capture_Uses_Time_Slicing;               // 0x0C19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Use_Mobile_Overrides;                              // 0x0C1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Volumetric_Clouds_Replacement;                     // 0x0C1B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyLightMode                             Real_Time_Capture_Sky_Light_Replacement;           // 0x0C1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Adjust_For_Mobile_Renderer;                        // 0x0C1D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1E[0x2];                                      // 0x0C1E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Mobile_Platforms;                                  // 0x0C20(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	struct FVector                                Moon_Target;                                       // 0x0C30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Mobile;                                            // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Sun;                                 // 0x0C49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Moon;                                // 0x0C4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Stars;                               // 0x0C4B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4C[0x4];                                      // 0x0C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Latitude;                                          // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Longitude;                                         // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Zone;                                         // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Year;                                              // 0x0C68(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Month;                                             // 0x0C6C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Day;                                               // 0x0C70(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C74[0x4];                                      // 0x0C74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        North_Yaw;                                         // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Simulation_Speed;                                  // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          True_Real_World_Time;                              // 0x0C88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Daylight_Savings_Time;                       // 0x0C89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8A[0x2];                                      // 0x0C8A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DST_Start_Month;                                   // 0x0C8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_Start_Day;                                     // 0x0C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_End_Month;                                     // 0x0C94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_End_Day;                                       // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_Change_Hour;                                   // 0x0C9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<int32>                                 Months;                                            // 0x0CA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Months__Leap_Year_;                                // 0x0CB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Stellar_Calibration;                               // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Lunar_Orbit_Calibration;                           // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lunar_Inclination_Calibration;                     // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Daylight_Savings_Time;                             // 0x0CD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CDA[0x2];                                      // 0x0CDA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Total_Days_Elapsed;                                // 0x0CDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clouds_Move_with_Time_of_Day;                      // 0x0CE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE1[0x7];                                      // 0x0CE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day_Movement_Multiplier;                   // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, TSoftObjectPtr<class UMaterialInstance>> Sky_MID_Parent_Instances;           // 0x0CF0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Fog_Shadows;                                       // 0x0D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_Shadows;                                      // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Cloud_Shadows_Speed;                          // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Cloud_Shadows_Scale;                          // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_Directional_Light_Shadows_when_Fully_Shadowed_by_Clouds; // 0x0D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_D61[0x7];                                      // 0x0D61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Custom_Light_Function_Material;                    // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Force_Light_Functions_On;                          // 0x0D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_D71[0x7];                                      // 0x0D71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day_Replication_Period;                    // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Time_of_Day;                            // 0x0D80(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Moon_Phase;                             // 0x0D88(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Sun_Radius_as_it_Nears_Horizon;              // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Specular_Scale;                                // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Yaw;                                           // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Moon_Radius_as_it_Nears_Horizon;             // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Fog_Colors_from_Sky_Atmosphere;                    // 0x0DB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB1[0x7];                                      // 0x0DB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Z_Vector;                                      // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dusty_Height_Fog_Falloff;                          // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Specular_Scale;                               // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Replicated_Day_Length;                             // 0x0DD0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Night_Length;                           // 0x0DD8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Time_Speed;                             // 0x0DE0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Simulation_Speed;                       // 0x0DE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        High_Frequency_Mip_Increase_by_Distance;           // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Change_to_Simplified_Material_when_Overcast;       // 0x0DF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_DF9[0x7];                                      // 0x0DF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Simplified_Material_Cloud_Coverage_Threshold;      // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Simplified_Material_Fade_Length;                   // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Top_Bottom_Distribution;                           // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Current_Volumetric_Clouds_MID;                     // 0x0E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dim_Directional_Lights_with_Cloud_Coverage;        // 0x0E1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1D[0x3];                                      // 0x0E1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Clouds_Position;                                   // 0x0E20(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Standard_Base_Clouds_Size;                         // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Clouds_Time_of_Day_Factor;                    // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Starting_Cloud_Texture_Velocity;                   // 0x0E48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Control_Sky_Atmosphere_Settings;                   // 0x0E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E61[0x3];                                      // 0x0E61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Rayleigh_Scattering_Color;                         // 0x0E64(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E74[0x4];                                      // 0x0E74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Desaturate_Rayleigh_Scattering_when_Cloudy;        // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Brighten_Rayleigh_Scattering_When_Cloudy;          // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Tick_Set;                                  // 0x0E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E8C[0x4];                                      // 0x0E8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Time_of_Day_Offset;                        // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Frame_Cloud_Coverage;                         // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Coverage_Change_This_Frame;                  // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, EUDS_PropertyType>          properties;                                        // 0x0EA8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Last_Frame_Time_of_Day;                            // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Sky_Glow;                                    // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Night_Sky_Glow_Color;                              // 0x0F08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Pollution_Intensity;                         // 0x0F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Pollution_Color;                             // 0x0F20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Cloud_Fog_Post_Process_MID;                        // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Dimming_Range_Lower_Bound;                         // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dimming_Range_Upper_Bound;                         // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dimming_Range_Exponent;                            // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     Custom_Sky_Sphere_Material;                        // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Fog_Snow_Contribution;                             // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Midnight;                                          // 0x0F60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           Sunrise_Color__Absorption_;                        // 0x0F70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunrise_Color_Intensity__Absorption_Scale_;        // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Simulated_Sunrise_Time;                            // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Simulated_Sunset_Time;                             // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disallow_Tick_Skip;                                // 0x0F98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F99[0x7];                                      // 0x0F99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Cloud_Height;                                 // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Sun_Lens_Flare;                             // 0x0FA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_LensFlareType                            Lens_Flare_Type;                                   // 0x0FA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FAA[0x6];                                      // 0x0FAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lens_Flare_Strength;                               // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lens_Flare_Tint;                                   // 0x0FB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Lens_Flare_MID;                                    // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Custom_Lens_Flare_Parent_Instance;                 // 0x0FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Scale_Flare_Elements;                              // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dynamic_Sky_Light_Transition_Time;                 // 0x0FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Sky_Light_Multiplier;                       // 0x0FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dynamic_Sky_Light_Multiplier;                      // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_with_New_Changes;                         // 0x0FF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF9[0x7];                                      // 0x0FF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Overcast_Turbulence_MID;                           // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Corrected_for_Vol_Mode;                            // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1009[0x7];                                     // 0x1009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Low_Material_Quality_Sample_Count_Scale;           // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Medium_Material_Quality_Sample_Count_Scale;        // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UVolumeTexture>          Epic_Quality_Volume_Texture;                       // 0x1020(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UVolumeTexture>          High_Quality_Volume_Texture;                       // 0x1048(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UVolumeTexture>          Low_Quality_Volume_Texture;                        // 0x1070(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Epic_Material_Quality_Sample_Count_Scale;          // 0x1098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Inside_Cloud_Fog_Parent_Material;                  // 0x10A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          Inside_Cloud_Fog_System;                           // 0x10C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      Post_Process_Cloud_Fog_Parent_Material;            // 0x10F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Volumetric_Cloud_and_Shadow_MIDs;                  // 0x1118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Volumetric_Cloud_MIDs;                             // 0x1128(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Moon_Light_Current_Intensity_Value;                // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Keep_Planet_Top_at_Camera_XY_Location;             // 0x1140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1141[0x3];                                     // 0x1141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Base_Sky_Color__Day_;                              // 0x1144(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__0;                                           // 0x1154(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base_Sky_Color__Night_;                            // 0x1164(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Light_Color__Day_;                           // 0x1174(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__1;                                           // 0x1184(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Light_Color__Night_;                         // 0x1194(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Dark_Color__Day_;                            // 0x11A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dusk__2;                                           // 0x11B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Dark_Color__Night_;                          // 0x11C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Glow_Color;                                    // 0x11D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11E4[0x4];                                     // 0x11E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Directional_Intensity_Curve;                       // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Directional_Light_Scattering_Curve;                // 0x11F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Atmospheric_Scattering_LUT_Texture;                // 0x11F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Color_Intensity_Scale;                         // 0x1200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_Scattering_Color_Curve;                        // 0x1208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Inscattering_Sun;                              // 0x1210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Inscattering_Moon;                             // 0x1220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_Directional_Scattering_Color_Curve;            // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Directional_Inscattering;                      // 0x1238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy_Desaturation;                                // 0x1248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Desaturation;                             // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Brightness_Day;                           // 0x1258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Brightness_Night;                         // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           All_Fog_Colors_Multiplier;                         // 0x1268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sky_Atmosphere_Fog_Influence_Curve;                // 0x1278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Dust_Amount;                                       // 0x1280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Dust_Color;                                        // 0x1288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Volumetric_Fog;                                // 0x1298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1299[0x3];                                     // 0x1299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Height_Fog_Density;                                // 0x129C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Using_Cloud_Fog_Post_Process;                      // 0x12A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A1[0x7];                                     // 0x12A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Current_Camera_Location;                           // 0x12A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ambient_Fog_Color;                                 // 0x12C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Directional_Inscattering_Fog_Color;                // 0x12D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Directional_Base_Fog_Color;                        // 0x12E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Scaled_Directional_Base_Fog_Color;                 // 0x12F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Extend_Default_Luminance_Range;                    // 0x1300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1301[0x7];                                     // 0x1301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      Volumetric_Aurora_Parent_Material;                 // 0x1308(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Moon_Masks_Texture;                                // 0x1330(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Sky_and_Static_Clouds_MID;                         // 0x1358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Sky_and_Shadows_MIDs;                              // 0x1368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UMaterialInterface>      Overcast_Turbulence_Parent_Material;               // 0x1378(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Forward_Shading;                                   // 0x13A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A1[0x7];                                     // 0x13A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Hour)>    Hourly;                                            // 0x13A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Event_Hour;                                        // 0x13B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cloud_Wisps_Color_Intensity;                       // 0x13BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Sun_Source_Angle_Scale;                        // 0x13C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Source_Angle_Softness;                         // 0x13C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Max_Moon_Source_Angle_Scale;                       // 0x13D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Transition_Time_A;                                 // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Time_B;                                 // 0x13E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Transitioning_Time;                                // 0x13E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   Transition_Easing_Function;                        // 0x13E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13EA[0x6];                                     // 0x13EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Transition_Easing_Exponent;                        // 0x13F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Transition_Timer;                                  // 0x13F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Duration;                               // 0x1400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Transition_Days_Counted;                           // 0x1408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Transition_Can_Go_Backwards;                       // 0x140C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_140D[0x3];                                     // 0x140D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Source_Angle_Softness;                        // 0x1410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Exposure_Bias_Day;                                 // 0x1418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Night;                               // 0x141C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Cloudy;                              // 0x1420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Foggy;                               // 0x1424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias_Dusty;                               // 0x1428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Min_Brightness;                           // 0x142C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Exposure_Max_Brightness;                           // 0x1430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Apply_Interior_Adjustments;                        // 0x1434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1435[0x3];                                     // 0x1435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Extra_Fog_Start_Distance_in_Interior;              // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Multiplier_in_Interior;                // 0x1440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Exposure_Bias_in_Interior;                         // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_Light_Intensity_Multiplier_in_Interiors;       // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Light_Intensity_Multiplier_in_Interiors;       // 0x1458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Light_Intensity_Multiplier_in_Interiors;      // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extra_Sun_Volumetric_Scattering_in_Interiors;      // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extra_Moon_Volumetric_Scattering_in_Interiors;     // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Interior_Trace_Distance;                       // 0x1478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	ETraceTypeQuery                               Interior_Occlusion_Trace_Channel;                  // 0x1480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1481[0x7];                                     // 0x1481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Interior_Occlusion_Update_Period;                  // 0x1488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Rainbow_MID;                                       // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadow_Disable_Threshold;                    // 0x1498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fraction_of_Trace_Hits_for_No_Occlusion;           // 0x14A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Fraction_of_Trace_Hits_for_Full_Occlusion;         // 0x14A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void TwoD_Clouds_Base_Texture(TSoftObjectPtr<class UTexture2D>* Tex);
	double Absent_Directional_Lights_Brightness();
	struct FLinearColor Adjust_Color_for_Night_Brightness(const struct FLinearColor& In_Color);
	void All_Volumetric_Cloud_MIDs(bool Shadows, TArray<class UMaterialInstanceDynamic*>* MIDs);
	void Apply_Console_Variable_with_Check(const class FString& Cvar, double setting, int32 Type);
	void Apply_Saved_UDS_and_UDW_State(const struct FUDS_and_UDW_State& State);
	void Apply_Volumetric_Mode(EUDS_VolRT_Mode Mode);
	void Approximate_Real_Sun_Moon_and_Stars(int32 Month_0, int32 Day_0, int32 Year_0, double Time_of_Day_0, double Time_Zone_0, bool Only_Calculate_Sun, struct FVector* Sun_Vector, struct FVector* Moon_Vector, double* Real_Phase, struct FVector* Phase_Alignment, double* Celestial_Orbit, struct FLinearColor* Celestial_Yaw);
	void Both_Cloud_Shadows_MIDs(TArray<class UMaterialInstanceDynamic*>* Out);
	double Calculate_Night_Brightness();
	void Cancel_Shadows_Value(const struct FVector& Light_Vector, double* Out);
	void Check_for_Daylight_Savings_Time();
	bool Cloud_Coverage_Has_Changed();
	double Cloud_Darkening();
	double Cloud_Shadows_Cloud_Density();
	void Cloud_Shadows_Light_Vector_Process(const struct FVector& Vector, struct FLinearColor* Out);
	void Cloud_Shadows_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Mat);
	struct FVector Cloud_Texture_Velocity();
	double Clouds_Time_of_Day_Factor();
	void Construction_Script_Function(bool Run_By_Counterpart, bool Move_Static_Lights);
	void Convert_Time_of_Day_to_Time_Code(double Time, struct FTimecode* Timecode);
	void Create_UDS_and_UDW_State_for_Saving(struct FUDS_and_UDW_State* Packaged_State);
	struct FLinearColor Current_2D_Cloud_Tint();
	void Current_Applied_Cloud_Top_and_Bottom(double* Bottom, double* Top);
	double Current_Base_Clouds_Scale();
	double Current_Fog_Density();
	void Current_Fog_Directional_Inscattering_Color(struct FLinearColor* Directional_Inscattering_Color);
	void Current_Fog_Inscattering_Color(struct FLinearColor* Inscattering_Color);
	struct FLinearColor Current_Lens_Flare_Color();
	void Current_Lerp_to_Simplified_Clouds(double* Alpha);
	struct FLinearColor Current_Light_Pollution();
	double Current_Lit_Intensity();
	void Current_Max_Trace_Distance(double* Out);
	double Current_Mie_Anisotropy();
	double Current_Mie_Scattering_Scale();
	void Current_Moon_Light_Color(struct FLinearColor* Color);
	void Current_Moon_Light_Intensity(double* Intensity);
	struct FLinearColor Current_Moon_Light_Material_Color();
	double Current_Moon_Lit_Percent();
	double Current_Moon_Material_Intensity();
	struct FLinearColor Current_Moon_Phase_Angle();
	void Current_Moon_Scale_and_Cutout_Value(double* Scale, double* Cutout);
	void Current_Moon_Source_Angle(double* Out);
	struct FLinearColor Current_Night_Sky_Glow();
	double Current_Overall_Intensity();
	double Current_Overcast_Swirl();
	struct FLinearColor Current_Rayleigh_Scattering_Color();
	double Current_Saturation();
	void Current_Sky_Ambient_Color(struct FLinearColor* Sky_Ambient_Color);
	struct FLinearColor Current_Sky_Light_Lower_Hemisphere_Color();
	struct FLinearColor Current_Stars_Color();
	struct FLinearColor Current_Sun_Disk_Color();
	double Current_Sun_Disk_Intensity();
	struct FLinearColor Current_Sun_Light_Color();
	double Current_Sun_Light_Intensity();
	double Current_Sun_Radius();
	void Current_Sun_Source_Angle(double* Out);
	double Current_Sunrise_Event_Time();
	double Current_Sunset_Event_Time();
	struct FLinearColor Current_Volumetric_Cloud_Albedo();
	double Current_Volumetric_Cloud_Macro_Variation();
	void Current_Volumetric_Cloud_Multiscattering_Occlusion(double* Occlusion);
	void Current_Volumetric_Cloud_Subnoise_Amount(double* Erosion);
	void Current_Volumetric_Cloud_Taper_Position(double* Taper);
	double Current_Volumetric_Clouds_Density();
	double Current_Wisps_Opacity();
	double Current_Z_Disturbance();
	void Day_Ended();
	bool Dimming_Directional_Lights();
	void Directional_Inscattering_Multiplier(double* Multiplier);
	void Directional_Light_Dimming(double* Out);
	void ExecuteUbergraph_Ultra_Dynamic_Sky(int32 EntryPoint);
	double Find_Overall_Intensity(double Cloud_Darkening);
	void Sunrise_Times();
	void Finish_Time_Transition();
	void Fire_Editor_Dispatchers();
	double Flat_Cloudiness_Alpha();
	double Fog_Height_Falloff();
	double Fog_Start_Distance();
	void Force_Valid_Day();
	void Get_Current_Cloud_Shadows_Intensity_and_Softness(double* Intensity, double* Softness);
	void Get_Current_Date_and_Time(struct FDateTime* Current_Date_and_Time);
	void Get_Current_Fog_Base_Colors(struct FLinearColor* Ambient_Fog_Color_0, struct FLinearColor* Directional_Base_Color, struct FLinearColor* Scaled_Directional_Base_Color);
	void Get_Current_Sky_Light_Color_and_Intensity(double* Out_Intensity, struct FLinearColor* Out_Color);
	void Get_Current_Volumetric_Cloud_Extinction_Scales(double* Top, double* Bottom);
	TSoftObjectPtr<class UMaterialInterface> Get_Sky_MID_Parent_Material_Instance();
	void Get_Time_of_Day_in_Real_Time_Format(struct FTimecode* Time);
	void Get_Volumetric_Cloud_Emissive_Colors(struct FLinearColor* Bottom, struct FLinearColor* Top);
	void MS_to_Time_of_Day(int32 Hours, int32 Minutes, int32 Seconds, int32 Miliseconds, double* Time);
	void Increment_Day();
	void Initialize_Occlusion();
	void Is_Location_Inside_Cloud_Layer(const struct FVector& Location, bool* Inside);
	void Is_Moon_Light_Casting_Shadows(bool* Yes);
	void Is_Sun_Light_Casting_Shadows(bool* Yes);
	void Lens_Flare_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Mat);
	void Load_Required_Assets();
	void Moon_Light_Current_Intensity(double* Out);
	double Moon_Light_Specular_Scale();
	double Moon_Light_Volumetric_Scattering_Intensity();
	double Moon_Phase_Multiplier();
	double Night_Filter();
	void OnRep_Replicated_Time_of_Day();
	struct FLinearColor Overcast_Light_Contribution(bool For_Volumetric_Clouds);
	void Query_Project_Settings();
	void Recapture_SkyLight();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Restart_Inside_Cloud_Fog();
	void Scale_Sample_Count(double In, double* Out);
	void Set_Cloud_Timing();
	void Set_Date_and_Time(const struct FDateTime& Date_Time);
	void Set_Sun_and_Moon_Root_Rotation();
	void Set_Time_of_Day_using_Time_Code(const struct FTimecode& Time_Code);
	void Set_Up_Lens_Flare();
	void Set_Up_Overcast_Turbulence();
	void Simplified_Current_Color(const struct FLinearColor& Day_Color, const struct FLinearColor& Dusk_Color, const struct FLinearColor& Night_Color, struct FLinearColor* Out);
	void Sky_Atmosphere_Fog_Contribution(double* Output);
	double Sky_MID_Cloud_Density();
	void Static_Clouds_Parent_Material(TSoftObjectPtr<class UMaterialInterface>* Material);
	struct FVector Sun_Forward_Vector();
	void Sun_Shadows_MIDs(TArray<class UMaterialInstanceDynamic*>* Out);
	void Tick_Time_Transition();
	double Time_of_Day_Offset();
	void Timed_Override_with_New_Changes();
	struct FLinearColor Tint_Color_By_Weather(const struct FLinearColor& Clear_Color, const struct FLinearColor& Partly_Cloudy_Color, const struct FLinearColor& Overcast_Color);
	double Total_Time_Elapsed();
	void Transition_Sky_Light_Intensity(double New_Sky_Light_Intensity_Multiplier, double Transition_Time);
	void Transition_Time_of_Day(double New_Time_of_Day, double Transition_Duration__Seconds_, EEasingFunc Easing_Function, double Easing_Exponent, bool Allow_Time_Going_Backwards);
	void Twilight_Brightness_Falloff(double Z, double* Scale);
	void Update_Active_Variables();
	void Update_Current_Volumetric_Clouds_MID();
	void Update_Directional_Lights(bool Move_Static_Lights);
	void Update_Dynamic_Sky_Light_Multiplier();
	void Update_Exposure_Bias();
	void Update_Lens_Flare();
	void Update_Lights();
	void Update_Moon_Parameters();
	void Update_Overcast_Turbulence();
	void Update_Replicated_Time();
	void Update_Replicated_ToD();
	void Update_Settings_Based_on_Platform_and_Scalability();
	void Update_Static_Clouds();
	void Update_Static_Variables();
	void Update_Variables_Controlled_by_Weather();
	bool Use_Sky_Atmosphere();
	void UserConstructionScript();
	bool Using_2D_Clouds();
	double Volumetric_Aurora_Intensity();
	void Volumetric_Cloud_Base_Cloud_Height(double* Base_Cloud_Height_0);
	void Volumetric_Cloud_Cloud_Top_Altitude(double* Cloud_Top_Altitude);
	void Volumetric_Cloud_Layer_Height(double* Layer_Height);
	void Volumetric_Cloud_Layer_Scale(double* Layer_Scale);
	void Volumetric_Cloud_Shadows_Altitude(double* Cloud_Shadows_Altitude);
	void Volumetric_Clouds_Base_Clouds_Texture(TSoftObjectPtr<class UTexture2D>* Tex);
	void Volumetric_Clouds_Parent_Materials(TSoftObjectPtr<class UMaterialInterface>* Simplified, TSoftObjectPtr<class UMaterialInterface>* Complex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ultra_Dynamic_Sky_C">();
	}
	static class AUltra_Dynamic_Sky_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUltra_Dynamic_Sky_C>();
	}
};
static_assert(alignof(AUltra_Dynamic_Sky_C) == 0x000008, "Wrong alignment on AUltra_Dynamic_Sky_C");
static_assert(sizeof(AUltra_Dynamic_Sky_C) == 0x0014B0, "Wrong size on AUltra_Dynamic_Sky_C");
static_assert(offsetof(AUltra_Dynamic_Sky_C, UberGraphFrame) == 0x000298, "Member 'AUltra_Dynamic_Sky_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Player_Occlusion) == 0x0002A0, "Member 'AUltra_Dynamic_Sky_C::Player_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Fog_Post_Process) == 0x0002A8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Fog_Post_Process' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Icon_Arrow) == 0x0002B0, "Member 'AUltra_Dynamic_Sky_C::Moon_Icon_Arrow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Icon_Arrow) == 0x0002B8, "Member 'AUltra_Dynamic_Sky_C::Sun_Icon_Arrow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Icon) == 0x0002C0, "Member 'AUltra_Dynamic_Sky_C::Sun_Icon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Icon) == 0x0002C8, "Member 'AUltra_Dynamic_Sky_C::Moon_Icon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Turbulence) == 0x0002D0, "Member 'AUltra_Dynamic_Sky_C::Overcast_Turbulence' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare) == 0x0002D8, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Realtime_Capture_Based_Sky_Light) == 0x0002E0, "Member 'AUltra_Dynamic_Sky_C::Realtime_Capture_Based_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog) == 0x0002E8, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, VolumetricAurora) == 0x0002F0, "Member 'AUltra_Dynamic_Sky_C::VolumetricAurora' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, StaticCloudsSphere) == 0x0002F8, "Member 'AUltra_Dynamic_Sky_C::StaticCloudsSphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Root) == 0x000300, "Member 'AUltra_Dynamic_Sky_C::Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, VolumetricCloud) == 0x000308, "Member 'AUltra_Dynamic_Sky_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, CubeMap_Sky_Light) == 0x000310, "Member 'AUltra_Dynamic_Sky_C::CubeMap_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Capture_Based_Sky_Light) == 0x000318, "Member 'AUltra_Dynamic_Sky_C::Capture_Based_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure) == 0x000320, "Member 'AUltra_Dynamic_Sky_C::Exposure' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, HeightFog) == 0x000328, "Member 'AUltra_Dynamic_Sky_C::HeightFog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon) == 0x000330, "Member 'AUltra_Dynamic_Sky_C::Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun) == 0x000338, "Member 'AUltra_Dynamic_Sky_C::Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SkyAtmosphere) == 0x000340, "Member 'AUltra_Dynamic_Sky_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Root) == 0x000348, "Member 'AUltra_Dynamic_Sky_C::Moon_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Root) == 0x000350, "Member 'AUltra_Dynamic_Sky_C::Sun_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Ultra_Dynamic_Sky_Sphere) == 0x000358, "Member 'AUltra_Dynamic_Sky_C::Ultra_Dynamic_Sky_Sphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light) == 0x000360, "Member 'AUltra_Dynamic_Sky_C::Sun_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sun_Light_Actor) == 0x000368, "Member 'AUltra_Dynamic_Sky_C::Custom_Sun_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_MID) == 0x000370, "Member 'AUltra_Dynamic_Sky_C::Sky_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Speed) == 0x000378, "Member 'AUltra_Dynamic_Sky_C::Cloud_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Opacity) == 0x000380, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Opacity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Refresh_Settings) == 0x000388, "Member 'AUltra_Dynamic_Sky_C::Refresh_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day) == 0x000390, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Mode) == 0x000398, "Member 'AUltra_Dynamic_Sky_C::Sky_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Color_Mode) == 0x000399, "Member 'AUltra_Dynamic_Sky_C::Color_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage) == 0x0003A0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog) == 0x0003A8, "Member 'AUltra_Dynamic_Sky_C::Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overall_Intensity) == 0x0003B0, "Member 'AUltra_Dynamic_Sky_C::Overall_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Direction) == 0x0003B8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Phase) == 0x0003C0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Manually_Position_Moon_Target) == 0x0003C8, "Member 'AUltra_Dynamic_Sky_C::Manually_Position_Moon_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Intensity) == 0x0003D0, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Mobility) == 0x0003D8, "Member 'AUltra_Dynamic_Sky_C::Moon_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Angle) == 0x0003E0, "Member 'AUltra_Dynamic_Sky_C::Moon_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Inclination) == 0x0003E8, "Member 'AUltra_Dynamic_Sky_C::Moon_Inclination' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Vertical_Offset) == 0x0003F0, "Member 'AUltra_Dynamic_Sky_C::Moon_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Orbit_Offset) == 0x0003F8, "Member 'AUltra_Dynamic_Sky_C::Moon_Orbit_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Casts_Shadows) == 0x000400, "Member 'AUltra_Dynamic_Sky_C::Moon_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Scale) == 0x000408, "Member 'AUltra_Dynamic_Sky_C::Moon_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Phase) == 0x000410, "Member 'AUltra_Dynamic_Sky_C::Moon_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Phase_Changes_Over_Time) == 0x000418, "Member 'AUltra_Dynamic_Sky_C::Moon_Phase_Changes_Over_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dark_Side_Brightness) == 0x000420, "Member 'AUltra_Dynamic_Sky_C::Dark_Side_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Intensity__Night_) == 0x000428, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Intensity__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Manually_Position_Sun_Target) == 0x000430, "Member 'AUltra_Dynamic_Sky_C::Manually_Position_Sun_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Intensity) == 0x000438, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Mobility) == 0x000440, "Member 'AUltra_Dynamic_Sky_C::Sun_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Angle) == 0x000448, "Member 'AUltra_Dynamic_Sky_C::Sun_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Animate_Time_of_Day) == 0x000450, "Member 'AUltra_Dynamic_Sky_C::Animate_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Contrast) == 0x000458, "Member 'AUltra_Dynamic_Sky_C::Contrast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Inclination) == 0x000460, "Member 'AUltra_Dynamic_Sky_C::Sun_Inclination' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Vertical_Offset) == 0x000468, "Member 'AUltra_Dynamic_Sky_C::Sun_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Casts_Shadows) == 0x000470, "Member 'AUltra_Dynamic_Sky_C::Sun_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Color) == 0x000474, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Intensity__Day_) == 0x000488, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Intensity__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Color) == 0x000490, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Cloud_Layer_1) == 0x0004A0, "Member 'AUltra_Dynamic_Sky_C::Soften_Cloud_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Cloud_Layer_2) == 0x0004A8, "Member 'AUltra_Dynamic_Sky_C::Soften_Cloud_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sharpen_Outer_Edge) == 0x0004B0, "Member 'AUltra_Dynamic_Sky_C::Sharpen_Outer_Edge' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Intensity) == 0x0004B8, "Member 'AUltra_Dynamic_Sky_C::Stars_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Color) == 0x0004C0, "Member 'AUltra_Dynamic_Sky_C::Stars_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Material_Color) == 0x0004D0, "Member 'AUltra_Dynamic_Sky_C::Moon_Material_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Target) == 0x0004E0, "Member 'AUltra_Dynamic_Sky_C::Sun_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Radius) == 0x0004F8, "Member 'AUltra_Dynamic_Sky_C::Sun_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Cloud_Shadows_MID) == 0x000500, "Member 'AUltra_Dynamic_Sky_C::Sun_Cloud_Shadows_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Cloud_Shadows) == 0x000508, "Member 'AUltra_Dynamic_Sky_C::Use_Cloud_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Intensity_When_Sunny) == 0x000510, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Intensity_When_Sunny' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light) == 0x000518, "Member 'AUltra_Dynamic_Sky_C::Moon_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Moon_Light_Actor) == 0x000520, "Member 'AUltra_Dynamic_Sky_C::Custom_Moon_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Speed) == 0x000528, "Member 'AUltra_Dynamic_Sky_C::Stars_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Cloud_Shadows_MID) == 0x000530, "Member 'AUltra_Dynamic_Sky_C::Moon_Cloud_Shadows_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, New_Moon_Light_Brightness) == 0x000538, "Member 'AUltra_Dynamic_Sky_C::New_Moon_Light_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Rotation) == 0x000540, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Moon_Texture) == 0x000548, "Member 'AUltra_Dynamic_Sky_C::Custom_Moon_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light) == 0x000550, "Member 'AUltra_Dynamic_Sky_C::Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sky_Light_Actor) == 0x000558, "Member 'AUltra_Dynamic_Sky_C::Custom_Sky_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog) == 0x000560, "Member 'AUltra_Dynamic_Sky_C::Height_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Height_Fog_Actor) == 0x000568, "Member 'AUltra_Dynamic_Sky_C::Custom_Height_Fog_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Mode) == 0x000570, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Filter_Curve) == 0x000578, "Member 'AUltra_Dynamic_Sky_C::Night_Filter_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Glow_Intensity) == 0x000580, "Member 'AUltra_Dynamic_Sky_C::Moon_Glow_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Auroras) == 0x000588, "Member 'AUltra_Dynamic_Sky_C::Use_Auroras' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Intensity) == 0x000590, "Member 'AUltra_Dynamic_Sky_C::Aurora_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Speed) == 0x000598, "Member 'AUltra_Dynamic_Sky_C::Aurora_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Intensity_When_Overcast) == 0x0005A0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Intensity_When_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Softness_When_Sunny) == 0x0005A8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Softness_When_Sunny' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Softness_When_Overcast) == 0x0005B0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Softness_When_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Tiling_Layer_1) == 0x0005B8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Tiling_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Tiling_Layer_2) == 0x0005C0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Tiling_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Horizon) == 0x0005C8, "Member 'AUltra_Dynamic_Sky_C::Soften_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, One_cloud_layer) == 0x0005D0, "Member 'AUltra_Dynamic_Sky_C::One_cloud_layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Height_Layer_1) == 0x0005D8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Height_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Height_Layer_2) == 0x0005E0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Height_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Swirling_Texture) == 0x0005E8, "Member 'AUltra_Dynamic_Sky_C::Overcast_Swirling_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Saturation) == 0x0005F0, "Member 'AUltra_Dynamic_Sky_C::Saturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Balance) == 0x0005F8, "Member 'AUltra_Dynamic_Sky_C::Directional_Balance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dawn_Time) == 0x000600, "Member 'AUltra_Dynamic_Sky_C::Dawn_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk_Time) == 0x000608, "Member 'AUltra_Dynamic_Sky_C::Dusk_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Brightness) == 0x000610, "Member 'AUltra_Dynamic_Sky_C::Night_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Softness) == 0x000618, "Member 'AUltra_Dynamic_Sky_C::Sun_Softness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Volumetric_Scattering_Intensity) == 0x000620, "Member 'AUltra_Dynamic_Sky_C::Sun_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Volumetric_Scattering_Intensity) == 0x000628, "Member 'AUltra_Dynamic_Sky_C::Moon_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Phase) == 0x000630, "Member 'AUltra_Dynamic_Sky_C::Aurora_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_LightComponent) == 0x000638, "Member 'AUltra_Dynamic_Sky_C::Sun_LightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_LightComponent) == 0x000640, "Member 'AUltra_Dynamic_Sky_C::Moon_LightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SkyLightComponent) == 0x000648, "Member 'AUltra_Dynamic_Sky_C::SkyLightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog_Component) == 0x000650, "Member 'AUltra_Dynamic_Sky_C::Height_Fog_Component' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Apply_Exposure_Settings) == 0x000658, "Member 'AUltra_Dynamic_Sky_C::Apply_Exposure_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Compensation_Curve) == 0x000660, "Member 'AUltra_Dynamic_Sky_C::Exposure_Compensation_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Day_Length) == 0x000668, "Member 'AUltra_Dynamic_Sky_C::Day_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Length) == 0x000670, "Member 'AUltra_Dynamic_Sky_C::Night_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extend_Dawn_and_Dusk) == 0x000678, "Member 'AUltra_Dynamic_Sky_C::Extend_Dawn_and_Dusk' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stationary_Lights) == 0x000680, "Member 'AUltra_Dynamic_Sky_C::Stationary_Lights' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Fog_Density) == 0x000688, "Member 'AUltra_Dynamic_Sky_C::Base_Fog_Density' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Foggy_Density_Contribution) == 0x000690, "Member 'AUltra_Dynamic_Sky_C::Foggy_Density_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloudy_Density_Contribution) == 0x000698, "Member 'AUltra_Dynamic_Sky_C::Cloudy_Density_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Density_Contribution) == 0x0006A0, "Member 'AUltra_Dynamic_Sky_C::Dust_Density_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Total_Fog_Density) == 0x0006A8, "Member 'AUltra_Dynamic_Sky_C::Scale_Total_Fog_Density' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Tiling) == 0x0006B0, "Member 'AUltra_Dynamic_Sky_C::Stars_Tiling' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Daytime_Intensity) == 0x0006B8, "Member 'AUltra_Dynamic_Sky_C::Stars_Daytime_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Twinkle_Amount) == 0x0006C0, "Member 'AUltra_Dynamic_Sky_C::Twinkle_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Twinkle_Speed) == 0x0006C8, "Member 'AUltra_Dynamic_Sky_C::Twinkle_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tiling_Stars_Texture) == 0x0006D0, "Member 'AUltra_Dynamic_Sky_C::Tiling_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Stars_Texture) == 0x0006F8, "Member 'AUltra_Dynamic_Sky_C::Real_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Phase) == 0x000720, "Member 'AUltra_Dynamic_Sky_C::Stars_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Tiling_Stars_Texture) == 0x000728, "Member 'AUltra_Dynamic_Sky_C::Custom_Tiling_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Real_Stars_Texture) == 0x000730, "Member 'AUltra_Dynamic_Sky_C::Custom_Real_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Intensity_Curve) == 0x000738, "Member 'AUltra_Dynamic_Sky_C::Stars_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Intensity) == 0x000740, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Mobility) == 0x000748, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Temperature) == 0x000750, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Color_Multiplier__Day_) == 0x000758, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Color_Multiplier__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk_) == 0x000768, "Member 'AUltra_Dynamic_Sky_C::Dusk_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Color_Multiplier__Night_) == 0x000778, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Color_Multiplier__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Casts_Shadows) == 0x000788, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DFAO_Min_Occlusion) == 0x000790, "Member 'AUltra_Dynamic_Sky_C::DFAO_Min_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DFAO_Exponent) == 0x000798, "Member 'AUltra_Dynamic_Sky_C::DFAO_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Flat_Cubemap) == 0x0007A0, "Member 'AUltra_Dynamic_Sky_C::Flat_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Cubemap) == 0x0007C8, "Member 'AUltra_Dynamic_Sky_C::Custom_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tinted_Sky_Light_Lower_Hemisphere_Color) == 0x0007F0, "Member 'AUltra_Dynamic_Sky_C::Tinted_Sky_Light_Lower_Hemisphere_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture) == 0x000800, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Captured_Sky_Light_Lower_Hemisphere_Tint) == 0x000804, "Member 'AUltra_Dynamic_Sky_C::Captured_Sky_Light_Lower_Hemisphere_Tint' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Recapture_Sky_light_Periodically) == 0x000814, "Member 'AUltra_Dynamic_Sky_C::Recapture_Sky_light_Periodically' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Recapture_Period__Seconds_) == 0x000818, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Recapture_Period__Seconds_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lights_Update_Period) == 0x000820, "Member 'AUltra_Dynamic_Sky_C::Lights_Update_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise_Event_Offset) == 0x000828, "Member 'AUltra_Dynamic_Sky_C::Sunrise_Event_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunset_Event_Offset) == 0x000830, "Member 'AUltra_Dynamic_Sky_C::Sunset_Event_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunset) == 0x000838, "Member 'AUltra_Dynamic_Sky_C::Sunset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise) == 0x000848, "Member 'AUltra_Dynamic_Sky_C::Sunrise' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Texture) == 0x000858, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Noise_Type) == 0x000860, "Member 'AUltra_Dynamic_Sky_C::Cloud_Noise_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Noise_Texture) == 0x000868, "Member 'AUltra_Dynamic_Sky_C::Custom_Noise_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Shader_Intensity) == 0x000870, "Member 'AUltra_Dynamic_Sky_C::Sun_Shader_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Lighting_Intensity) == 0x000878, "Member 'AUltra_Dynamic_Sky_C::Directional_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Radius) == 0x000880, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Opacity) == 0x000888, "Member 'AUltra_Dynamic_Sky_C::Cloud_Opacity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Horizon_Density_Multiplier) == 0x000890, "Member 'AUltra_Dynamic_Sky_C::Horizon_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Zenith_Density_Multiplier) == 0x000898, "Member 'AUltra_Dynamic_Sky_C::Zenith_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude_Gradient_Position) == 0x0008A0, "Member 'AUltra_Dynamic_Sky_C::Latitude_Gradient_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude_Gradient_Width) == 0x0008A8, "Member 'AUltra_Dynamic_Sky_C::Latitude_Gradient_Width' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Sun_Density_Multiplier) == 0x0008B0, "Member 'AUltra_Dynamic_Sky_C::Around_Sun_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Sun_Density_Exponent) == 0x0008B8, "Member 'AUltra_Dynamic_Sky_C::Around_Sun_Density_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Moon_Density_Multiplier) == 0x0008C0, "Member 'AUltra_Dynamic_Sky_C::Around_Moon_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Moon_Density_Exponent) == 0x0008C8, "Member 'AUltra_Dynamic_Sky_C::Around_Moon_Density_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shine_Intensity_Curve) == 0x0008D0, "Member 'AUltra_Dynamic_Sky_C::Shine_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Intensity_Curve) == 0x0008D8, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Radius_Curve) == 0x0008E0, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Radius_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shine_Variation) == 0x0008E8, "Member 'AUltra_Dynamic_Sky_C::Shine_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Spread_Out_Tick_Behaviors_Over_3_Frames) == 0x0008F0, "Member 'AUltra_Dynamic_Sky_C::Spread_Out_Tick_Behaviors_Over_3_Frames' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Only_Fully_Update_Active_Parameters_When_Cloud_Coverage_Changes) == 0x0008F1, "Member 'AUltra_Dynamic_Sky_C::Only_Fully_Update_Active_Parameters_When_Cloud_Coverage_Changes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Lights_Absent_Brightness) == 0x0008F8, "Member 'AUltra_Dynamic_Sky_C::Directional_Lights_Absent_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_MID_Complex) == 0x000900, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_MID_Complex' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Rendering_Mode) == 0x000908, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Rendering_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Bottom_Altitude) == 0x000910, "Member 'AUltra_Dynamic_Sky_C::Bottom_Altitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_Height_Scale) == 0x000918, "Member 'AUltra_Dynamic_Sky_C::Layer_Height_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Clouds_Scale) == 0x000920, "Member 'AUltra_Dynamic_Sky_C::Base_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SubNoise_Scale) == 0x000928, "Member 'AUltra_Dynamic_Sky_C::SubNoise_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Frequency_Noise_Amount) == 0x000930, "Member 'AUltra_Dynamic_Sky_C::High_Frequency_Noise_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distort_High_Frequency_Noise) == 0x000938, "Member 'AUltra_Dynamic_Sky_C::Distort_High_Frequency_Noise' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extinction_Scale_Top) == 0x000940, "Member 'AUltra_Dynamic_Sky_C::Extinction_Scale_Top' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extinction_Scale_Bottom) == 0x000948, "Member 'AUltra_Dynamic_Sky_C::Extinction_Scale_Bottom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shift_Curve) == 0x000950, "Member 'AUltra_Dynamic_Sky_C::Shift_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Z_Disturbance) == 0x000958, "Member 'AUltra_Dynamic_Sky_C::Z_Disturbance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Minimum_Erosion) == 0x000960, "Member 'AUltra_Dynamic_Sky_C::Minimum_Erosion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, View_Sample_CountScale) == 0x000968, "Member 'AUltra_Dynamic_Sky_C::View_Sample_CountScale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distance_to_Sample_MaxCount) == 0x000970, "Member 'AUltra_Dynamic_Sky_C::Distance_to_Sample_MaxCount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shadow_Sample_Scale) == 0x000978, "Member 'AUltra_Dynamic_Sky_C::Shadow_Sample_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shadow_Tracing_Distance) == 0x000980, "Member 'AUltra_Dynamic_Sky_C::Shadow_Tracing_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Reflection_Sample_Count_Scale) == 0x000988, "Member 'AUltra_Dynamic_Sky_C::Reflection_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Reflection_Shadow_Sample_Count_Scale) == 0x000990, "Member 'AUltra_Dynamic_Sky_C::Reflection_Shadow_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Noise_Type) == 0x000998, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Noise_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Custom_Noise_Texture) == 0x0009A0, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Custom_Noise_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Clouds_Mip_Level) == 0x0009A8, "Member 'AUltra_Dynamic_Sky_C::Base_Clouds_Mip_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Intensity) == 0x0009B0, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Occlusion_Factor) == 0x0009B8, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Occlusion_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SubNoise_Erosion) == 0x0009C0, "Member 'AUltra_Dynamic_Sky_C::SubNoise_Erosion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_MID_Simplified) == 0x0009C8, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_MID_Simplified' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Start_Distance_when_Clear) == 0x0009D0, "Member 'AUltra_Dynamic_Sky_C::Fog_Start_Distance_when_Clear' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_where_Start_Distance_Reaches_Zero) == 0x0009D8, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_where_Start_Distance_Reaches_Zero' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Randomize_Cloud_Formation_on_Run) == 0x0009E0, "Member 'AUltra_Dynamic_Sky_C::Randomize_Cloud_Formation_on_Run' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Macro_Variation) == 0x0009E8, "Member 'AUltra_Dynamic_Sky_C::Macro_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Macro_Scale) == 0x0009F0, "Member 'AUltra_Dynamic_Sky_C::Macro_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Phase_G) == 0x0009F8, "Member 'AUltra_Dynamic_Sky_C::Phase_G' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Phase_G_2) == 0x000A00, "Member 'AUltra_Dynamic_Sky_C::Phase_G_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Eccentricity) == 0x000A08, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Eccentricity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_Speed) == 0x000A10, "Member 'AUltra_Dynamic_Sky_C::Time_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Internal_Time_of_Day) == 0x000A18, "Member 'AUltra_Dynamic_Sky_C::Internal_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Weather_BP) == 0x000A20, "Member 'AUltra_Dynamic_Sky_C::Weather_BP' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_Scale) == 0x000A28, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Color) == 0x000A30, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Start_Distance) == 0x000A40, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Start_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Static_Clouds_MID) == 0x000A48, "Member 'AUltra_Dynamic_Sky_C::Static_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_1) == 0x000A50, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_2) == 0x000A60, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_3) == 0x000A70, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_3' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_MID) == 0x000A80, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Night_Brightness) == 0x000A88, "Member 'AUltra_Dynamic_Sky_C::Overcast_Night_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Sky_Mode_Scalability_Map) == 0x000A90, "Member 'AUltra_Dynamic_Sky_C::Use_Sky_Mode_Scalability_Map' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Mode_Scalability_Map) == 0x000A98, "Member 'AUltra_Dynamic_Sky_C::Sky_Mode_Scalability_Map' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Disk_Intensity) == 0x000AE8, "Member 'AUltra_Dynamic_Sky_C::Sun_Disk_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Disk_Color_Curve) == 0x000AF0, "Member 'AUltra_Dynamic_Sky_C::Sun_Disk_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Lines) == 0x000AF8, "Member 'AUltra_Dynamic_Sky_C::Aurora_Lines' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Intensity_Curve) == 0x000B00, "Member 'AUltra_Dynamic_Sky_C::Aurora_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Clouds_Fog_MID) == 0x000B08, "Member 'AUltra_Dynamic_Sky_C::Inside_Clouds_Fog_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Distance__Inside_Cloud_Layer_) == 0x000B10, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Distance__Inside_Cloud_Layer_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Distance__Outside_Cloud_Layer_) == 0x000B18, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Distance__Outside_Cloud_Layer_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Fog_Inside_Clouds) == 0x000B20, "Member 'AUltra_Dynamic_Sky_C::Enable_Fog_Inside_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Sample_Count_Scale) == 0x000B28, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Layer_Height) == 0x000B30, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Layer_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Bottom_Altitude) == 0x000B38, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Bottom_Altitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Height_Fog_Falloff) == 0x000B40, "Member 'AUltra_Dynamic_Sky_C::Base_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloudy_Height_Fog_Falloff) == 0x000B48, "Member 'AUltra_Dynamic_Sky_C::Cloudy_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Foggy_Height_Fog_Falloff) == 0x000B50, "Member 'AUltra_Dynamic_Sky_C::Foggy_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_Strength) == 0x000B58, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_Strength' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_Color) == 0x000B60, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Turbulence_0) == 0x000B70, "Member 'AUltra_Dynamic_Sky_C::Overcast_Turbulence_0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Close_Fade_Distance) == 0x000B78, "Member 'AUltra_Dynamic_Sky_C::Close_Fade_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Two_Layers) == 0x000B80, "Member 'AUltra_Dynamic_Sky_C::Two_Layers' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Coverage_Scale) == 0x000B88, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Coverage_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Extinction_Scale) == 0x000B90, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Extinction_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Cloud_Scale) == 0x000B98, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Cloud_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Mip_Offset) == 0x000BA8, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Mip_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distance_Between_Layers) == 0x000BB0, "Member 'AUltra_Dynamic_Sky_C::Distance_Between_Layers' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Sun_Light_Shaft_Bloom) == 0x000BB8, "Member 'AUltra_Dynamic_Sky_C::Enable_Sun_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Max_Brightness) == 0x000BC0, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Bloom_Threshold_Curve) == 0x000BC8, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Bloom_Threshold_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Bloom_Scale_Curve) == 0x000BD0, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Bloom_Scale_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Tint_Color) == 0x000BD8, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Moon_Light_Shaft_Bloom) == 0x000BE8, "Member 'AUltra_Dynamic_Sky_C::Enable_Moon_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Max_Brightness) == 0x000BF0, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Bloom_Threshold) == 0x000BF8, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Bloom_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Bloom_Scale) == 0x000C00, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Bloom_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Tint_Color) == 0x000C08, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Factor_Absent_Directional_Lights_Brightness) == 0x000C18, "Member 'AUltra_Dynamic_Sky_C::Factor_Absent_Directional_Lights_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture_Uses_Time_Slicing) == 0x000C19, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture_Uses_Time_Slicing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Mobile_Overrides) == 0x000C1A, "Member 'AUltra_Dynamic_Sky_C::Use_Mobile_Overrides' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_Replacement) == 0x000C1B, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_Replacement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture_Sky_Light_Replacement) == 0x000C1C, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture_Sky_Light_Replacement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Adjust_For_Mobile_Renderer) == 0x000C1D, "Member 'AUltra_Dynamic_Sky_C::Adjust_For_Mobile_Renderer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Mobile_Platforms) == 0x000C20, "Member 'AUltra_Dynamic_Sky_C::Mobile_Platforms' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Target) == 0x000C30, "Member 'AUltra_Dynamic_Sky_C::Moon_Target' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Mobile) == 0x000C48, "Member 'AUltra_Dynamic_Sky_C::Mobile' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Sun) == 0x000C49, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Moon) == 0x000C4A, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Stars) == 0x000C4B, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Stars' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude) == 0x000C50, "Member 'AUltra_Dynamic_Sky_C::Latitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Longitude) == 0x000C58, "Member 'AUltra_Dynamic_Sky_C::Longitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_Zone) == 0x000C60, "Member 'AUltra_Dynamic_Sky_C::Time_Zone' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Year) == 0x000C68, "Member 'AUltra_Dynamic_Sky_C::Year' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Month) == 0x000C6C, "Member 'AUltra_Dynamic_Sky_C::Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Day) == 0x000C70, "Member 'AUltra_Dynamic_Sky_C::Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, North_Yaw) == 0x000C78, "Member 'AUltra_Dynamic_Sky_C::North_Yaw' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulation_Speed) == 0x000C80, "Member 'AUltra_Dynamic_Sky_C::Simulation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, True_Real_World_Time) == 0x000C88, "Member 'AUltra_Dynamic_Sky_C::True_Real_World_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Apply_Daylight_Savings_Time) == 0x000C89, "Member 'AUltra_Dynamic_Sky_C::Apply_Daylight_Savings_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Start_Month) == 0x000C8C, "Member 'AUltra_Dynamic_Sky_C::DST_Start_Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Start_Day) == 0x000C90, "Member 'AUltra_Dynamic_Sky_C::DST_Start_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_End_Month) == 0x000C94, "Member 'AUltra_Dynamic_Sky_C::DST_End_Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_End_Day) == 0x000C98, "Member 'AUltra_Dynamic_Sky_C::DST_End_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Change_Hour) == 0x000C9C, "Member 'AUltra_Dynamic_Sky_C::DST_Change_Hour' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Months) == 0x000CA0, "Member 'AUltra_Dynamic_Sky_C::Months' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Months__Leap_Year_) == 0x000CB0, "Member 'AUltra_Dynamic_Sky_C::Months__Leap_Year_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stellar_Calibration) == 0x000CC0, "Member 'AUltra_Dynamic_Sky_C::Stellar_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lunar_Orbit_Calibration) == 0x000CC8, "Member 'AUltra_Dynamic_Sky_C::Lunar_Orbit_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lunar_Inclination_Calibration) == 0x000CD0, "Member 'AUltra_Dynamic_Sky_C::Lunar_Inclination_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Runtime) == 0x000CD8, "Member 'AUltra_Dynamic_Sky_C::Runtime' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Daylight_Savings_Time) == 0x000CD9, "Member 'AUltra_Dynamic_Sky_C::Daylight_Savings_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Total_Days_Elapsed) == 0x000CDC, "Member 'AUltra_Dynamic_Sky_C::Total_Days_Elapsed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_Move_with_Time_of_Day) == 0x000CE0, "Member 'AUltra_Dynamic_Sky_C::Clouds_Move_with_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day_Movement_Multiplier) == 0x000CE8, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day_Movement_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_MID_Parent_Instances) == 0x000CF0, "Member 'AUltra_Dynamic_Sky_C::Sky_MID_Parent_Instances' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Shadows) == 0x000D40, "Member 'AUltra_Dynamic_Sky_C::Fog_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Shadows) == 0x000D48, "Member 'AUltra_Dynamic_Sky_C::Dust_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Cloud_Shadows_Speed) == 0x000D50, "Member 'AUltra_Dynamic_Sky_C::TwoD_Cloud_Shadows_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TwoD_Cloud_Shadows_Scale) == 0x000D58, "Member 'AUltra_Dynamic_Sky_C::TwoD_Cloud_Shadows_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Disable_Directional_Light_Shadows_when_Fully_Shadowed_by_Clouds) == 0x000D60, "Member 'AUltra_Dynamic_Sky_C::Disable_Directional_Light_Shadows_when_Fully_Shadowed_by_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Light_Function_Material) == 0x000D68, "Member 'AUltra_Dynamic_Sky_C::Custom_Light_Function_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Force_Light_Functions_On) == 0x000D70, "Member 'AUltra_Dynamic_Sky_C::Force_Light_Functions_On' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day_Replication_Period) == 0x000D78, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day_Replication_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Time_of_Day) == 0x000D80, "Member 'AUltra_Dynamic_Sky_C::Replicated_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Moon_Phase) == 0x000D88, "Member 'AUltra_Dynamic_Sky_C::Replicated_Moon_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Sun_Radius_as_it_Nears_Horizon) == 0x000D90, "Member 'AUltra_Dynamic_Sky_C::Scale_Sun_Radius_as_it_Nears_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Specular_Scale) == 0x000D98, "Member 'AUltra_Dynamic_Sky_C::Sun_Specular_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Yaw) == 0x000DA0, "Member 'AUltra_Dynamic_Sky_C::Sun_Yaw' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Moon_Radius_as_it_Nears_Horizon) == 0x000DA8, "Member 'AUltra_Dynamic_Sky_C::Scale_Moon_Radius_as_it_Nears_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Colors_from_Sky_Atmosphere) == 0x000DB0, "Member 'AUltra_Dynamic_Sky_C::Fog_Colors_from_Sky_Atmosphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Z_Vector) == 0x000DB8, "Member 'AUltra_Dynamic_Sky_C::Sun_Z_Vector' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusty_Height_Fog_Falloff) == 0x000DC0, "Member 'AUltra_Dynamic_Sky_C::Dusty_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Specular_Scale) == 0x000DC8, "Member 'AUltra_Dynamic_Sky_C::Moon_Specular_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Day_Length) == 0x000DD0, "Member 'AUltra_Dynamic_Sky_C::Replicated_Day_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Night_Length) == 0x000DD8, "Member 'AUltra_Dynamic_Sky_C::Replicated_Night_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Time_Speed) == 0x000DE0, "Member 'AUltra_Dynamic_Sky_C::Replicated_Time_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Simulation_Speed) == 0x000DE8, "Member 'AUltra_Dynamic_Sky_C::Replicated_Simulation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Frequency_Mip_Increase_by_Distance) == 0x000DF0, "Member 'AUltra_Dynamic_Sky_C::High_Frequency_Mip_Increase_by_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Change_to_Simplified_Material_when_Overcast) == 0x000DF8, "Member 'AUltra_Dynamic_Sky_C::Change_to_Simplified_Material_when_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simplified_Material_Cloud_Coverage_Threshold) == 0x000E00, "Member 'AUltra_Dynamic_Sky_C::Simplified_Material_Cloud_Coverage_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simplified_Material_Fade_Length) == 0x000E08, "Member 'AUltra_Dynamic_Sky_C::Simplified_Material_Fade_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Top_Bottom_Distribution) == 0x000E10, "Member 'AUltra_Dynamic_Sky_C::Top_Bottom_Distribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Volumetric_Clouds_MID) == 0x000E18, "Member 'AUltra_Dynamic_Sky_C::Current_Volumetric_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dim_Directional_Lights_with_Cloud_Coverage) == 0x000E1C, "Member 'AUltra_Dynamic_Sky_C::Dim_Directional_Lights_with_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_Position) == 0x000E20, "Member 'AUltra_Dynamic_Sky_C::Clouds_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Standard_Base_Clouds_Size) == 0x000E38, "Member 'AUltra_Dynamic_Sky_C::Standard_Base_Clouds_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Clouds_Time_of_Day_Factor) == 0x000E40, "Member 'AUltra_Dynamic_Sky_C::Last_Clouds_Time_of_Day_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Starting_Cloud_Texture_Velocity) == 0x000E48, "Member 'AUltra_Dynamic_Sky_C::Starting_Cloud_Texture_Velocity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Control_Sky_Atmosphere_Settings) == 0x000E60, "Member 'AUltra_Dynamic_Sky_C::Control_Sky_Atmosphere_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Rayleigh_Scattering_Color) == 0x000E64, "Member 'AUltra_Dynamic_Sky_C::Rayleigh_Scattering_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Desaturate_Rayleigh_Scattering_when_Cloudy) == 0x000E78, "Member 'AUltra_Dynamic_Sky_C::Desaturate_Rayleigh_Scattering_when_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Brighten_Rayleigh_Scattering_When_Cloudy) == 0x000E80, "Member 'AUltra_Dynamic_Sky_C::Brighten_Rayleigh_Scattering_When_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Tick_Set) == 0x000E88, "Member 'AUltra_Dynamic_Sky_C::Current_Tick_Set' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Time_of_Day_Offset) == 0x000E90, "Member 'AUltra_Dynamic_Sky_C::Current_Time_of_Day_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Frame_Cloud_Coverage) == 0x000E98, "Member 'AUltra_Dynamic_Sky_C::Last_Frame_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage_Change_This_Frame) == 0x000EA0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage_Change_This_Frame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, properties) == 0x000EA8, "Member 'AUltra_Dynamic_Sky_C::properties' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Frame_Time_of_Day) == 0x000EF8, "Member 'AUltra_Dynamic_Sky_C::Last_Frame_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Sky_Glow) == 0x000F00, "Member 'AUltra_Dynamic_Sky_C::Night_Sky_Glow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Sky_Glow_Color) == 0x000F08, "Member 'AUltra_Dynamic_Sky_C::Night_Sky_Glow_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Pollution_Intensity) == 0x000F18, "Member 'AUltra_Dynamic_Sky_C::Light_Pollution_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Light_Pollution_Color) == 0x000F20, "Member 'AUltra_Dynamic_Sky_C::Light_Pollution_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Fog_Post_Process_MID) == 0x000F30, "Member 'AUltra_Dynamic_Sky_C::Cloud_Fog_Post_Process_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dimming_Range_Lower_Bound) == 0x000F38, "Member 'AUltra_Dynamic_Sky_C::Dimming_Range_Lower_Bound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dimming_Range_Upper_Bound) == 0x000F40, "Member 'AUltra_Dynamic_Sky_C::Dimming_Range_Upper_Bound' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dimming_Range_Exponent) == 0x000F48, "Member 'AUltra_Dynamic_Sky_C::Dimming_Range_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sky_Sphere_Material) == 0x000F50, "Member 'AUltra_Dynamic_Sky_C::Custom_Sky_Sphere_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Snow_Contribution) == 0x000F58, "Member 'AUltra_Dynamic_Sky_C::Fog_Snow_Contribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Midnight) == 0x000F60, "Member 'AUltra_Dynamic_Sky_C::Midnight' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise_Color__Absorption_) == 0x000F70, "Member 'AUltra_Dynamic_Sky_C::Sunrise_Color__Absorption_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise_Color_Intensity__Absorption_Scale_) == 0x000F80, "Member 'AUltra_Dynamic_Sky_C::Sunrise_Color_Intensity__Absorption_Scale_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulated_Sunrise_Time) == 0x000F88, "Member 'AUltra_Dynamic_Sky_C::Simulated_Sunrise_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulated_Sunset_Time) == 0x000F90, "Member 'AUltra_Dynamic_Sky_C::Simulated_Sunset_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Disallow_Tick_Skip) == 0x000F98, "Member 'AUltra_Dynamic_Sky_C::Disallow_Tick_Skip' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Cloud_Height) == 0x000FA0, "Member 'AUltra_Dynamic_Sky_C::Base_Cloud_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Sun_Lens_Flare) == 0x000FA8, "Member 'AUltra_Dynamic_Sky_C::Enable_Sun_Lens_Flare' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_Type) == 0x000FA9, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_Strength) == 0x000FB0, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_Strength' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_Tint) == 0x000FB8, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_Tint' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lens_Flare_MID) == 0x000FC8, "Member 'AUltra_Dynamic_Sky_C::Lens_Flare_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Lens_Flare_Parent_Instance) == 0x000FD0, "Member 'AUltra_Dynamic_Sky_C::Custom_Lens_Flare_Parent_Instance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Flare_Elements) == 0x000FD8, "Member 'AUltra_Dynamic_Sky_C::Scale_Flare_Elements' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dynamic_Sky_Light_Transition_Time) == 0x000FE0, "Member 'AUltra_Dynamic_Sky_C::Dynamic_Sky_Light_Transition_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Target_Sky_Light_Multiplier) == 0x000FE8, "Member 'AUltra_Dynamic_Sky_C::Target_Sky_Light_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dynamic_Sky_Light_Multiplier) == 0x000FF0, "Member 'AUltra_Dynamic_Sky_C::Dynamic_Sky_Light_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Override_with_New_Changes) == 0x000FF8, "Member 'AUltra_Dynamic_Sky_C::Override_with_New_Changes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Turbulence_MID) == 0x001000, "Member 'AUltra_Dynamic_Sky_C::Overcast_Turbulence_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Corrected_for_Vol_Mode) == 0x001008, "Member 'AUltra_Dynamic_Sky_C::Corrected_for_Vol_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Low_Material_Quality_Sample_Count_Scale) == 0x001010, "Member 'AUltra_Dynamic_Sky_C::Low_Material_Quality_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Medium_Material_Quality_Sample_Count_Scale) == 0x001018, "Member 'AUltra_Dynamic_Sky_C::Medium_Material_Quality_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Epic_Quality_Volume_Texture) == 0x001020, "Member 'AUltra_Dynamic_Sky_C::Epic_Quality_Volume_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Quality_Volume_Texture) == 0x001048, "Member 'AUltra_Dynamic_Sky_C::High_Quality_Volume_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Low_Quality_Volume_Texture) == 0x001070, "Member 'AUltra_Dynamic_Sky_C::Low_Quality_Volume_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Epic_Material_Quality_Sample_Count_Scale) == 0x001098, "Member 'AUltra_Dynamic_Sky_C::Epic_Material_Quality_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_Parent_Material) == 0x0010A0, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog_System) == 0x0010C8, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog_System' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Post_Process_Cloud_Fog_Parent_Material) == 0x0010F0, "Member 'AUltra_Dynamic_Sky_C::Post_Process_Cloud_Fog_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_and_Shadow_MIDs) == 0x001118, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_and_Shadow_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_MIDs) == 0x001128, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Current_Intensity_Value) == 0x001138, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Current_Intensity_Value' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Keep_Planet_Top_at_Camera_XY_Location) == 0x001140, "Member 'AUltra_Dynamic_Sky_C::Keep_Planet_Top_at_Camera_XY_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Sky_Color__Day_) == 0x001144, "Member 'AUltra_Dynamic_Sky_C::Base_Sky_Color__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__0) == 0x001154, "Member 'AUltra_Dynamic_Sky_C::Dusk__0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Sky_Color__Night_) == 0x001164, "Member 'AUltra_Dynamic_Sky_C::Base_Sky_Color__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Light_Color__Day_) == 0x001174, "Member 'AUltra_Dynamic_Sky_C::Cloud_Light_Color__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__1) == 0x001184, "Member 'AUltra_Dynamic_Sky_C::Dusk__1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Light_Color__Night_) == 0x001194, "Member 'AUltra_Dynamic_Sky_C::Cloud_Light_Color__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Dark_Color__Day_) == 0x0011A4, "Member 'AUltra_Dynamic_Sky_C::Cloud_Dark_Color__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk__2) == 0x0011B4, "Member 'AUltra_Dynamic_Sky_C::Dusk__2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Dark_Color__Night_) == 0x0011C4, "Member 'AUltra_Dynamic_Sky_C::Cloud_Dark_Color__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Glow_Color) == 0x0011D4, "Member 'AUltra_Dynamic_Sky_C::Sun_Glow_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Intensity_Curve) == 0x0011E8, "Member 'AUltra_Dynamic_Sky_C::Directional_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Light_Scattering_Curve) == 0x0011F0, "Member 'AUltra_Dynamic_Sky_C::Directional_Light_Scattering_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Atmospheric_Scattering_LUT_Texture) == 0x0011F8, "Member 'AUltra_Dynamic_Sky_C::Atmospheric_Scattering_LUT_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Color_Intensity_Scale) == 0x001200, "Member 'AUltra_Dynamic_Sky_C::Fog_Color_Intensity_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Scattering_Color_Curve) == 0x001208, "Member 'AUltra_Dynamic_Sky_C::Fog_Scattering_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Inscattering_Sun) == 0x001210, "Member 'AUltra_Dynamic_Sky_C::Fog_Inscattering_Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Inscattering_Moon) == 0x001220, "Member 'AUltra_Dynamic_Sky_C::Fog_Inscattering_Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Directional_Scattering_Color_Curve) == 0x001230, "Member 'AUltra_Dynamic_Sky_C::Fog_Directional_Scattering_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Directional_Inscattering) == 0x001238, "Member 'AUltra_Dynamic_Sky_C::Fog_Directional_Inscattering' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Foggy_Desaturation) == 0x001248, "Member 'AUltra_Dynamic_Sky_C::Foggy_Desaturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Desaturation) == 0x001250, "Member 'AUltra_Dynamic_Sky_C::Overcast_Desaturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Brightness_Day) == 0x001258, "Member 'AUltra_Dynamic_Sky_C::Overcast_Brightness_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Brightness_Night) == 0x001260, "Member 'AUltra_Dynamic_Sky_C::Overcast_Brightness_Night' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, All_Fog_Colors_Multiplier) == 0x001268, "Member 'AUltra_Dynamic_Sky_C::All_Fog_Colors_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Atmosphere_Fog_Influence_Curve) == 0x001278, "Member 'AUltra_Dynamic_Sky_C::Sky_Atmosphere_Fog_Influence_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Amount) == 0x001280, "Member 'AUltra_Dynamic_Sky_C::Dust_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dust_Color) == 0x001288, "Member 'AUltra_Dynamic_Sky_C::Dust_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Volumetric_Fog) == 0x001298, "Member 'AUltra_Dynamic_Sky_C::Use_Volumetric_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog_Density) == 0x00129C, "Member 'AUltra_Dynamic_Sky_C::Height_Fog_Density' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Using_Cloud_Fog_Post_Process) == 0x0012A0, "Member 'AUltra_Dynamic_Sky_C::Using_Cloud_Fog_Post_Process' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Camera_Location) == 0x0012A8, "Member 'AUltra_Dynamic_Sky_C::Current_Camera_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Ambient_Fog_Color) == 0x0012C0, "Member 'AUltra_Dynamic_Sky_C::Ambient_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Inscattering_Fog_Color) == 0x0012D0, "Member 'AUltra_Dynamic_Sky_C::Directional_Inscattering_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Base_Fog_Color) == 0x0012E0, "Member 'AUltra_Dynamic_Sky_C::Directional_Base_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scaled_Directional_Base_Fog_Color) == 0x0012F0, "Member 'AUltra_Dynamic_Sky_C::Scaled_Directional_Base_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extend_Default_Luminance_Range) == 0x001300, "Member 'AUltra_Dynamic_Sky_C::Extend_Default_Luminance_Range' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Parent_Material) == 0x001308, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Masks_Texture) == 0x001330, "Member 'AUltra_Dynamic_Sky_C::Moon_Masks_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_and_Static_Clouds_MID) == 0x001358, "Member 'AUltra_Dynamic_Sky_C::Sky_and_Static_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_and_Shadows_MIDs) == 0x001368, "Member 'AUltra_Dynamic_Sky_C::Sky_and_Shadows_MIDs' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Turbulence_Parent_Material) == 0x001378, "Member 'AUltra_Dynamic_Sky_C::Overcast_Turbulence_Parent_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Forward_Shading) == 0x0013A0, "Member 'AUltra_Dynamic_Sky_C::Forward_Shading' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Hourly) == 0x0013A8, "Member 'AUltra_Dynamic_Sky_C::Hourly' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Event_Hour) == 0x0013B8, "Member 'AUltra_Dynamic_Sky_C::Event_Hour' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Color_Intensity) == 0x0013BC, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Color_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Sun_Source_Angle_Scale) == 0x0013C0, "Member 'AUltra_Dynamic_Sky_C::Max_Sun_Source_Angle_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Source_Angle_Softness) == 0x0013C8, "Member 'AUltra_Dynamic_Sky_C::Sun_Source_Angle_Softness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Moon_Source_Angle_Scale) == 0x0013D0, "Member 'AUltra_Dynamic_Sky_C::Max_Moon_Source_Angle_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Time_A) == 0x0013D8, "Member 'AUltra_Dynamic_Sky_C::Transition_Time_A' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Time_B) == 0x0013E0, "Member 'AUltra_Dynamic_Sky_C::Transition_Time_B' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transitioning_Time) == 0x0013E8, "Member 'AUltra_Dynamic_Sky_C::Transitioning_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Easing_Function) == 0x0013E9, "Member 'AUltra_Dynamic_Sky_C::Transition_Easing_Function' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Easing_Exponent) == 0x0013F0, "Member 'AUltra_Dynamic_Sky_C::Transition_Easing_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Timer) == 0x0013F8, "Member 'AUltra_Dynamic_Sky_C::Transition_Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Duration) == 0x001400, "Member 'AUltra_Dynamic_Sky_C::Transition_Duration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Days_Counted) == 0x001408, "Member 'AUltra_Dynamic_Sky_C::Transition_Days_Counted' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Transition_Can_Go_Backwards) == 0x00140C, "Member 'AUltra_Dynamic_Sky_C::Transition_Can_Go_Backwards' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Source_Angle_Softness) == 0x001410, "Member 'AUltra_Dynamic_Sky_C::Moon_Source_Angle_Softness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Day) == 0x001418, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Night) == 0x00141C, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Night' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Cloudy) == 0x001420, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Foggy) == 0x001424, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Foggy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_Dusty) == 0x001428, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_Dusty' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Min_Brightness) == 0x00142C, "Member 'AUltra_Dynamic_Sky_C::Exposure_Min_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Max_Brightness) == 0x001430, "Member 'AUltra_Dynamic_Sky_C::Exposure_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Apply_Interior_Adjustments) == 0x001434, "Member 'AUltra_Dynamic_Sky_C::Apply_Interior_Adjustments' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extra_Fog_Start_Distance_in_Interior) == 0x001438, "Member 'AUltra_Dynamic_Sky_C::Extra_Fog_Start_Distance_in_Interior' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Multiplier_in_Interior) == 0x001440, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Multiplier_in_Interior' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Bias_in_Interior) == 0x001448, "Member 'AUltra_Dynamic_Sky_C::Exposure_Bias_in_Interior' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Intensity_Multiplier_in_Interiors) == 0x001450, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Intensity_Multiplier_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Intensity_Multiplier_in_Interiors) == 0x001458, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Intensity_Multiplier_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Intensity_Multiplier_in_Interiors) == 0x001460, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Intensity_Multiplier_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extra_Sun_Volumetric_Scattering_in_Interiors) == 0x001468, "Member 'AUltra_Dynamic_Sky_C::Extra_Sun_Volumetric_Scattering_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extra_Moon_Volumetric_Scattering_in_Interiors) == 0x001470, "Member 'AUltra_Dynamic_Sky_C::Extra_Moon_Volumetric_Scattering_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Max_Interior_Trace_Distance) == 0x001478, "Member 'AUltra_Dynamic_Sky_C::Max_Interior_Trace_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Interior_Occlusion_Trace_Channel) == 0x001480, "Member 'AUltra_Dynamic_Sky_C::Interior_Occlusion_Trace_Channel' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Interior_Occlusion_Update_Period) == 0x001488, "Member 'AUltra_Dynamic_Sky_C::Interior_Occlusion_Update_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Rainbow_MID) == 0x001490, "Member 'AUltra_Dynamic_Sky_C::Rainbow_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadow_Disable_Threshold) == 0x001498, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadow_Disable_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fraction_of_Trace_Hits_for_No_Occlusion) == 0x0014A0, "Member 'AUltra_Dynamic_Sky_C::Fraction_of_Trace_Hits_for_No_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fraction_of_Trace_Hits_for_Full_Occlusion) == 0x0014A8, "Member 'AUltra_Dynamic_Sky_C::Fraction_of_Trace_Hits_for_Full_Occlusion' has a wrong offset!");

}

