#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Parent_Enemy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_KillableCharacter_classes.hpp"
#include "E_ScoringActorState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Parent_Enemy.BP_Parent_Enemy_C
// 0x0180 (0x0A90 - 0x0910)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Parent_Enemy_C : public ABP_KillableCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Parent_Enemy_C;                  // 0x0910(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_AIFearSource_C*                    AIFearSource;                                      // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        EyesArrow;                                         // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              IdleSound;                                         // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              NoticedSound;                                      // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              AttackSound;                                       // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        GrawlNoiseRange;                                   // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              HarmSound;                                         // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, bool>                     Affinities;                                        // 0x0958(0x0050)(Edit, BlueprintVisible)
	bool                                          IsAttacking;                                       // 0x09A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A9[0x7];                                      // 0x09A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GrawlCooldown;                                     // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastGrawlTime;                                     // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttached;                                        // 0x09C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C1[0x7];                                      // 0x09C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_NavigationPoint_C*>          NavigationPoints;                                  // 0x09C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                NavigationPoint;                                   // 0x09D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BaseDamage;                                        // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F4[0x4];                                      // 0x09F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_KillableCharacter_C*                CurrentTarget;                                     // 0x09F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        TargetDistance;                                    // 0x0A00(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetPerceived;                                 // 0x0A08(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetConfirmed;                                 // 0x0A09(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0A[0x6];                                      // 0x0A0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PersistentNoiseRange;                              // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHugeAI;                                          // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PatrolSpeed;                                       // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EscapeSpeed;                                       // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WarningSpeed;                                      // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PursuitSpeed;                                      // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetLostSpeed;                                   // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocationCheckZLimit;                               // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              FootstepSound;                                     // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        IdleAudio;                                         // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGrawling;                                        // 0x0A60(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          AntiBlockSystemEnabled;                            // 0x0A61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A62[0x6];                                      // 0x0A62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_Parent_Enemy_C* Enemy)> OnTargetChanged;                 // 0x0A68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   DefaultCapsuleCollisionPreset;                     // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DefaultMeshCollisionPreset;                        // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void HasKilled__All_(TScriptInterface<class IBPI_Killable_C> KilledActor);
	void OnRep_IsGrawling();
	void ReceiveBeginPlay();
	void StartGrawlCooldown();
	bool IsGrawlInCooldown();
	void GetNavPointsInVolume(class ABP_InteriorVolume_C* InteriorVolume, TArray<class ABP_NavigationPoint_C*>* NavPoints);
	void SetAudioAttachedEnabled(class UAudioComponent* InAudio, class USoundCue* Sound, bool Enabled, class UAudioComponent** OutAudio);
	void GetAffinity(class ABP_KillableCharacter_C* Killable, bool* Affinity);
	void GetEyesLocation(struct FVector* EyesLocation);
	void SetEyeHeight();
	void GetDefaultScoringState(E_ScoringActorState* State);
	void UserConstructionScript();
	void HasKilled__Server_(TScriptInterface<class IBPI_Killable_C> KilledActor);
	void HasHarmed__Server_(TScriptInterface<class IBPI_Killable_C> HarmedActor);
	void PlaySound(class USoundCue* Sound);
	void PlayFootstepSound();
	void InitAudio();
	void StopIdleAudio(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void SetIdleAudioEnabled(bool Enabled);
	void Killed__Server_(class ABP_KillableCharacter_C* KilledCharacter, class AActor* Killer);
	void AttachToCharacter(class ABP_KillableCharacter_C* Character, class FName BoneName);
	void DetachFromCharacter();
	void OnRep_IsAttacking();
	void OnRep_CurrentTarget();
	void HasHarmed__All_(TScriptInterface<class IBPI_Killable_C> HarmedActor);
	void InitPersistentNoise();
	void PersistentNoise();
	void GetNavigationPoints();
	void StopAI();
	void ResumeAI();
	void FreezeMovement();
	void UnfreezeMovement();
	void StartLocationCheck();
	void LocationCheck();
	void EnableRagdoll(const struct FVector& SourceLocation, double Force);
	void DisableRagdoll();
	void KnockOut(double Duration);
	void BndEvt__BP_Parent_Enemy_CapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void InitDefaultCollisionPresets();
	void ExecuteUbergraph_BP_Parent_Enemy(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Parent_Enemy_C">();
	}
	static class ABP_Parent_Enemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Parent_Enemy_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Parent_Enemy_C) == 0x000010, "Wrong alignment on ABP_Parent_Enemy_C");
static_assert(sizeof(ABP_Parent_Enemy_C) == 0x000A90, "Wrong size on ABP_Parent_Enemy_C");
static_assert(offsetof(ABP_Parent_Enemy_C, UberGraphFrame_BP_Parent_Enemy_C) == 0x000910, "Member 'ABP_Parent_Enemy_C::UberGraphFrame_BP_Parent_Enemy_C' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, AIFearSource) == 0x000918, "Member 'ABP_Parent_Enemy_C::AIFearSource' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, EyesArrow) == 0x000920, "Member 'ABP_Parent_Enemy_C::EyesArrow' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, AIPerceptionStimuliSource) == 0x000928, "Member 'ABP_Parent_Enemy_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IdleSound) == 0x000930, "Member 'ABP_Parent_Enemy_C::IdleSound' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, NoticedSound) == 0x000938, "Member 'ABP_Parent_Enemy_C::NoticedSound' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, AttackSound) == 0x000940, "Member 'ABP_Parent_Enemy_C::AttackSound' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, GrawlNoiseRange) == 0x000948, "Member 'ABP_Parent_Enemy_C::GrawlNoiseRange' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, HarmSound) == 0x000950, "Member 'ABP_Parent_Enemy_C::HarmSound' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, Affinities) == 0x000958, "Member 'ABP_Parent_Enemy_C::Affinities' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IsAttacking) == 0x0009A8, "Member 'ABP_Parent_Enemy_C::IsAttacking' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, GrawlCooldown) == 0x0009B0, "Member 'ABP_Parent_Enemy_C::GrawlCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, LastGrawlTime) == 0x0009B8, "Member 'ABP_Parent_Enemy_C::LastGrawlTime' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IsAttached) == 0x0009C0, "Member 'ABP_Parent_Enemy_C::IsAttached' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, NavigationPoints) == 0x0009C8, "Member 'ABP_Parent_Enemy_C::NavigationPoints' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, NavigationPoint) == 0x0009D8, "Member 'ABP_Parent_Enemy_C::NavigationPoint' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, BaseDamage) == 0x0009F0, "Member 'ABP_Parent_Enemy_C::BaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, CurrentTarget) == 0x0009F8, "Member 'ABP_Parent_Enemy_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, TargetDistance) == 0x000A00, "Member 'ABP_Parent_Enemy_C::TargetDistance' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IsTargetPerceived) == 0x000A08, "Member 'ABP_Parent_Enemy_C::IsTargetPerceived' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IsTargetConfirmed) == 0x000A09, "Member 'ABP_Parent_Enemy_C::IsTargetConfirmed' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, PersistentNoiseRange) == 0x000A10, "Member 'ABP_Parent_Enemy_C::PersistentNoiseRange' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IsHugeAI) == 0x000A18, "Member 'ABP_Parent_Enemy_C::IsHugeAI' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, PatrolSpeed) == 0x000A20, "Member 'ABP_Parent_Enemy_C::PatrolSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, EscapeSpeed) == 0x000A28, "Member 'ABP_Parent_Enemy_C::EscapeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, WarningSpeed) == 0x000A30, "Member 'ABP_Parent_Enemy_C::WarningSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, PursuitSpeed) == 0x000A38, "Member 'ABP_Parent_Enemy_C::PursuitSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, TargetLostSpeed) == 0x000A40, "Member 'ABP_Parent_Enemy_C::TargetLostSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, LocationCheckZLimit) == 0x000A48, "Member 'ABP_Parent_Enemy_C::LocationCheckZLimit' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, FootstepSound) == 0x000A50, "Member 'ABP_Parent_Enemy_C::FootstepSound' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IdleAudio) == 0x000A58, "Member 'ABP_Parent_Enemy_C::IdleAudio' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, IsGrawling) == 0x000A60, "Member 'ABP_Parent_Enemy_C::IsGrawling' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, AntiBlockSystemEnabled) == 0x000A61, "Member 'ABP_Parent_Enemy_C::AntiBlockSystemEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, OnTargetChanged) == 0x000A68, "Member 'ABP_Parent_Enemy_C::OnTargetChanged' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, DefaultCapsuleCollisionPreset) == 0x000A78, "Member 'ABP_Parent_Enemy_C::DefaultCapsuleCollisionPreset' has a wrong offset!");
static_assert(offsetof(ABP_Parent_Enemy_C, DefaultMeshCollisionPreset) == 0x000A80, "Member 'ABP_Parent_Enemy_C::DefaultMeshCollisionPreset' has a wrong offset!");

}

