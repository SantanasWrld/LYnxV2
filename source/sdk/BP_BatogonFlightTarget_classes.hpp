#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BatogonFlightTarget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BatogonFlightTarget.BP_BatogonFlightTarget_C
// 0x0048 (0x02E0 - 0x0298)
class ABP_BatogonFlightTarget_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Batogon_C*                          Batogon;                                           // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_BatogonFlightNextPoint_C*           NextPoint;                                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NextPointLocation;                                 // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BatogonFlightTarget(int32 EntryPoint);
	void GetFlyLocation(const struct FHitResult& Hit, struct FVector* FlyLocation);
	void GetNavigationPointFlyLocation(class ABP_NavigationPoint_C* NavigationPoint, struct FVector* FlyLocation);
	void GetRandomDestination(struct FVector* Destination);
	bool IsFlyLocationAccessible(const struct FVector& FlyLocation);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetRandomDirection();
	void SnapToFlyHeight();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BatogonFlightTarget_C">();
	}
	static class ABP_BatogonFlightTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BatogonFlightTarget_C>();
	}
};
static_assert(alignof(ABP_BatogonFlightTarget_C) == 0x000008, "Wrong alignment on ABP_BatogonFlightTarget_C");
static_assert(sizeof(ABP_BatogonFlightTarget_C) == 0x0002E0, "Wrong size on ABP_BatogonFlightTarget_C");
static_assert(offsetof(ABP_BatogonFlightTarget_C, UberGraphFrame) == 0x000298, "Member 'ABP_BatogonFlightTarget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BatogonFlightTarget_C, Sphere) == 0x0002A0, "Member 'ABP_BatogonFlightTarget_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_BatogonFlightTarget_C, ProjectileMovement) == 0x0002A8, "Member 'ABP_BatogonFlightTarget_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABP_BatogonFlightTarget_C, Batogon) == 0x0002B0, "Member 'ABP_BatogonFlightTarget_C::Batogon' has a wrong offset!");
static_assert(offsetof(ABP_BatogonFlightTarget_C, NextPoint) == 0x0002B8, "Member 'ABP_BatogonFlightTarget_C::NextPoint' has a wrong offset!");
static_assert(offsetof(ABP_BatogonFlightTarget_C, NextPointLocation) == 0x0002C0, "Member 'ABP_BatogonFlightTarget_C::NextPointLocation' has a wrong offset!");
static_assert(offsetof(ABP_BatogonFlightTarget_C, TimerHandle) == 0x0002D8, "Member 'ABP_BatogonFlightTarget_C::TimerHandle' has a wrong offset!");

}

